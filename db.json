{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/css.css","path":"css/css.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner1.jpg","path":"css/images/banner1.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1624586418495},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1624586418512},{"_id":"source/robots.txt","hash":"560730a19f9642c88514986021fd4fb234c54052","modified":1624586418492},{"_id":"themes/landscape/_config.yml","hash":"79fd9d6f3b03d416614a48dde5e2b9eafef569b0","modified":1624586418515},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1624586418510},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1624586418513},{"_id":"source/favicon.ico","hash":"f50f1228739e790380a195144d715886ea1961e0","modified":1624586418491},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1624586418614},{"_id":"source/_posts/100个为什么.md","hash":"afe80c3fe9a80c5d4ed1f9533720b3047d0fdfb0","modified":1627272303586},{"_id":"source/_posts/2017年上半年Java高级工程师求职面试题总结.md","hash":"4d39100bc3609c4eff1de3fc5693d7c248f2d683","modified":1624586417782},{"_id":"source/_posts/APIC编程.md","hash":"df53139d6df8d0239220099f47c6ddce0bdd9d3b","modified":1625040456877},{"_id":"source/_posts/Android反编译与混淆技术完全解析.md","hash":"130c6bd0903f9d69523ac5e5f1e0835d05d50cfb","modified":1624586417783},{"_id":"source/_posts/HTTP Keep-Alive.md","hash":"1c49b352ef261db02d4496727b2804705df1a191","modified":1624586417826},{"_id":"source/_posts/HTTP协议：不可小觑的Content-Length.md","hash":"6cbbde0f1ba54a502db20d1707f038ff3a93240c","modified":1624586417837},{"_id":"source/_posts/Hadoop集群完全分布式部署.md","hash":"ca0992a7749f2da863cbbe4aa0a38aa12c8f32ec","modified":1624586417839},{"_id":"source/_posts/JDK常用性能分析命令行工具.md","hash":"26501179c37af3e01a9104ba8d548288a202cf56","modified":1624586417854},{"_id":"source/_posts/JVMTI随记.md","hash":"52da5fcf03dacf1179dbf9530985ee49e16d3c2a","modified":1625039342970},{"_id":"source/_posts/Jar转exe.md","hash":"bd15aa9c4b9a87881a50f72ae07b2887e5b969b5","modified":1624586417856},{"_id":"source/_posts/JavaScript函数.md","hash":"47a67911685717ec4000d8804c72217b0b342aa5","modified":1624586417934},{"_id":"source/_posts/JavaScript学习随手记.md","hash":"f5ab0b4b430123c73c64c77da81158b3716811ef","modified":1624586417936},{"_id":"source/_posts/JavaScript常用脚本.md","hash":"f33d39deaa4dfed8580583abe77a5285957cef89","modified":1624586417937},{"_id":"source/_posts/JavaScript模仿块级作用域.md","hash":"711dc8ac195a6279632ef1b43dd1c1c05ac679be","modified":1624586417938},{"_id":"source/_posts/JavaScript闭包.md","hash":"e43750144f6749c69e108413eac4497311b51a44","modified":1624586417939},{"_id":"source/_posts/JavaScript面向对象编程.md","hash":"7c04d56c77a47a9b2bfc569ff4b12f95411aee53","modified":1624586417941},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO.md","hash":"e1a16aaa7f95759ccbd13b38beadeb1bf1037eca","modified":1624586417943},{"_id":"source/_posts/Java动态编程.md","hash":"a55199f49c5caa07bf5c06e9a493e3c0eaead069","modified":1624586417948},{"_id":"source/_posts/Java并发编程-线程饥饿死锁.md","hash":"47618de8d6473e77ec2ed1e06e265be9c5a3c1cf","modified":1624586417975},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法.md","hash":"41d740a2200019264de05e3c885f873a08411dcd","modified":1624586417982},{"_id":"source/_posts/Java线程中断interrupt.md","hash":"1e8ebd983f324888ff2a346a5305aaeb092d9392","modified":1624586417997},{"_id":"source/_posts/Java设计模式之观察者模式.md","hash":"07de8801d29fed50e52feca0865385222cf78a17","modified":1624586417998},{"_id":"source/_posts/KVM初尝.md","hash":"806ec0425b980af7ca4e1be215efae3943400eb7","modified":1625040856013},{"_id":"source/_posts/Linux常见问题解决方法.md","hash":"73c03e08109ffb3a1245a4387c31c47e86ce8a8b","modified":1624586418037},{"_id":"source/_posts/MySQL+Keepalived实现双机热备.md","hash":"8b1fed9e4d6bc0464f0359b171cf1412458dd3d0","modified":1624586418038},{"_id":"source/_posts/MySQL5.6.25主从复制.md","hash":"2dea764c378ed3cad3dad9fcc65d1d6f09e7bd6c","modified":1624586418042},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤.md","hash":"2f95653ee5a04d94c4554b71f669cf019341d551","modified":1624586418050},{"_id":"source/_posts/Netty-4.1.4源码分析一.md","hash":"5491ba5adeb022939e6b1f85afe79d29c830aa46","modified":1624586418079},{"_id":"source/_posts/Netty-4.1.4源码分析二之管道设计模式.md","hash":"2b9bcbfbf4f0eba3d34754e60cca43c804d24d91","modified":1624586418086},{"_id":"source/_posts/Nginx+Tomcat+Memcached集群.md","hash":"3fdc845c9675b25482975f7ad458b36b64cf103b","modified":1624586418091},{"_id":"source/_posts/Nginx+Tomcat集群.md","hash":"1142ca037fe728fcc241063958443a1322422e42","modified":1624586418092},{"_id":"source/_posts/Oracle常用脚本.md","hash":"96ef1a5496e320d3195b11b3f33569a31886daea","modified":1624586418102},{"_id":"source/_posts/React学习总结一.md","hash":"8aedbe28158fa5d317071c4b346299f27455834f","modified":1624586418103},{"_id":"source/_posts/Redux.md","hash":"2435f5b052b2b32c62fe9596d0c5f53144b8e5fa","modified":1624586418105},{"_id":"source/_posts/System.setOut.md","hash":"3166c5c55586aeb268d1de251f83a45e4f72174a","modified":1624586418106},{"_id":"source/_posts/WEB性能优化手段.md","hash":"84a4e5ae78f9fc626739b3fe409688b20b22636d","modified":1624586418108},{"_id":"source/_posts/Web应用组件化的权衡.md","hash":"c37f9c4561c1fa4a194599dcf32ec2b314e78903","modified":1624586418109},{"_id":"source/_posts/epoll.md","hash":"71c7f7a81e4ef83a53b2cec5b7d4dd6c28220f83","modified":1649810117312},{"_id":"source/_posts/react-redux.md","hash":"d711979fd2ae3ba66d1d1b881a67b188953c691b","modified":1624586418113},{"_id":"source/_posts/中间件远程调试设置.md","hash":"72d7c4876868c7ecb1616f41189f77111028c317","modified":1624586418114},{"_id":"source/_posts/为什么寄存器比内存快.md","hash":"09418853acfe730b993fe33893cfaff023b8109d","modified":1624586418119},{"_id":"source/_posts/企业体检开发框架培训.md","hash":"58ded8f40f5269a66c68611fe30a671f4a0e7a8a","modified":1624586418121},{"_id":"source/_posts/分析Java进程中消耗CPU最高的线程.md","hash":"a4ac74b5138add6d5347adfcf285f683f380b724","modified":1624586418135},{"_id":"source/_posts/博客搭建.md","hash":"2faf92eec124cbd5f7e0d2d57f4a88b444bddf4a","modified":1624586418137},{"_id":"source/_posts/开发管理的一些建议.md","hash":"9673d3e156056f7eb59220c6ae766fa974aa631c","modified":1624586418138},{"_id":"source/_posts/构建单页Web应用.md","hash":"9212350794d16e66857add59225d07c201453d4b","modified":1624586418140},{"_id":"source/_posts/模块定义规范.md","hash":"f417a8499902fcfd0c82976060526173676c502a","modified":1624586418144},{"_id":"source/_posts/框架那么多学习那个好.md","hash":"f515701eebc80b3e25a35a10edd0bf4e78747486","modified":1624586418142},{"_id":"source/_posts/浅谈BSF.md","hash":"302f626462266bc82fc7dbf001e1cc1e393d71c1","modified":1624586418145},{"_id":"source/_posts/漫谈工程师的三观.md","hash":"fdf623ba9d865d4574170958ae6d5adbbb75e822","modified":1624586418148},{"_id":"source/_posts/第一章 信息化知识.md","hash":"ae367b7ff16ea3b67a36c403864bc6e1bbc92aba","modified":1624586418184},{"_id":"source/_posts/第三章 信息系统集成专业技术知识.md","hash":"15faa5b9401a28bd9c7b88a37235aad68df19039","modified":1624586418194},{"_id":"source/_posts/第七章 项目范围管理.md","hash":"3dfbab94eb8efd18ea08f49eb182bf5f8e1c0638","modified":1624586418191},{"_id":"source/_posts/第六章 项目整体管理.md","hash":"cbd3fe5c7788b9cb977104c522f402372f181fe4","modified":1624586418270},{"_id":"source/_posts/第九章 项目成本管理.md","hash":"d6dfa9e4f533dc6abf583dbdcf5d9c924b151824","modified":1624586418195},{"_id":"source/_posts/第二章 信息系统集成及服务管理.md","hash":"3eec465ccd31f80ba5e77314def5515a8d909296","modified":1624586418197},{"_id":"source/_posts/第十三章 项目合同管理.md","hash":"0bd2ca4b791cf278de9e40895609561cc96ae9e6","modified":1624586418271},{"_id":"source/_posts/第十九章 项目收尾管理.md","hash":"a1dd479efdbc46d8e7c94759653817572568b9df","modified":1624586418321},{"_id":"source/_posts/第八章 项目进度管理.md","hash":"0ee43a3669fbfa60a694cb3614d5f482a3aa1162","modified":1624586418199},{"_id":"source/_posts/第十六章 变更管理.md","hash":"39c2d65b02f2e49573eda17c5baf81302250a7c2","modified":1624586418324},{"_id":"source/_posts/第十章 项目质量管理.md","hash":"a8c551c14f7c40c85134a2ab53ae125040b86374","modified":1624586418329},{"_id":"source/_posts/第四章 项目管理一般知识.md","hash":"653823c96373a9c8db04891485c16ba834ae7411","modified":1624586418339},{"_id":"source/_posts/编写一个简单的操作系统.md","hash":"2912d11ce27f5a58a4899dea3d8754b89c722337","modified":1625040661919},{"_id":"source/_posts/虚拟机联网方式设置.md","hash":"65cc0fdf383e98fba83dbbd0469ca92e6b0f4ba9","modified":1624586418452},{"_id":"source/_posts/解决问题心得.md","hash":"afc366e81ab7f56d36050871973df570693be9e3","modified":1624586418485},{"_id":"source/_posts/调试JVM.md","hash":"49b6e2436549505f01cea9cb64f4ba5f1f9ef9c0","modified":1625046614836},{"_id":"source/_posts/财务管理系统项目技术经验总结.md","hash":"a7eeb0664f1ef80a819008aca1ea0fdb57628065","modified":1624586418487},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1624586418517},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1624586418519},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1624586418520},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1624586418522},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"138cf2645e053d69ed89ba36573214d4d58f7486","modified":1624586418523},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1624586418536},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1624586418597},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1624586418600},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1624586418598},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1624586418607},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1624586418610},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1624586418609},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1624586418612},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1624586418617},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.jpg","hash":"a06634c019d8f89cc61365e9d49c235ddb3c8636","modified":1624586417788},{"_id":"source/_posts/Android反编译与混淆技术完全解析/1.png","hash":"bb47ca53cfeec354cd18eb14c0702bb9bfd96081","modified":1624586417789},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.png","hash":"c403ea6f9b9a00dbb84980135e92cfe83a85cc75","modified":1624586417793},{"_id":"source/_posts/Android反编译与混淆技术完全解析/5.png","hash":"1409b6a2eaa309f7bcc2d339abcde13258e99e4b","modified":1624586417795},{"_id":"source/_posts/Android反编译与混淆技术完全解析/640.png","hash":"7890c65b880deda8fcaf4ad2908499dd0bb02b7c","modified":1624586417796},{"_id":"source/_posts/Android反编译与混淆技术完全解析/641.png","hash":"eecfef65c149e9ae61eff13451c4add431beac68","modified":1624586417798},{"_id":"source/_posts/Android反编译与混淆技术完全解析/642.png","hash":"334a78f7522f3f2b7b57c4e9e3f70b274e042ccf","modified":1624586417799},{"_id":"source/_posts/Android反编译与混淆技术完全解析/643.png","hash":"bcc93b17fc8fede4bf5c1fa74cf960b9c0b1d1a3","modified":1624586417801},{"_id":"source/_posts/Android反编译与混淆技术完全解析/644.jpg","hash":"d4a147dd0fcfbe3e04c18c006c4bd95cf254bbe8","modified":1624586417802},{"_id":"source/_posts/Android反编译与混淆技术完全解析/645.png","hash":"26b17d0608638e80ebcf9e4c58dd7feb702b3566","modified":1624586417804},{"_id":"source/_posts/Android反编译与混淆技术完全解析/646.png","hash":"e4cfa01fada3dcc993e8238f7ebd1e20a918ee2a","modified":1624586417805},{"_id":"source/_posts/Android反编译与混淆技术完全解析/647.png","hash":"6b90925dcbf6313e9f398c9f29075c416dcc44c1","modified":1624586417807},{"_id":"source/_posts/Android反编译与混淆技术完全解析/648.png","hash":"f50c29b7a6e5e4b61ee5454ff973fbbd0d5fdae8","modified":1624586417809},{"_id":"source/_posts/Android反编译与混淆技术完全解析/650.png","hash":"a38f3549da2c2a70557218fde7a1fb0bf9a2c6cc","modified":1624586417810},{"_id":"source/_posts/Android反编译与混淆技术完全解析/653.png","hash":"ad9b1e83175e8423fe4c2645c28dad8eb5aeb7a0","modified":1624586417816},{"_id":"source/_posts/Android反编译与混淆技术完全解析/655.png","hash":"e3fa927346a1659e6924ba4d207b515cc152d0e2","modified":1624586417817},{"_id":"source/_posts/Android反编译与混淆技术完全解析/656.png","hash":"54f498d3d5a77d85d4cd96f9fcd5cfd8311a2179","modified":1624586417819},{"_id":"source/_posts/Android反编译与混淆技术完全解析/658.png","hash":"8eceaff6e792bf573eb27e162671c37f45dc298d","modified":1624586417822},{"_id":"source/_posts/Android反编译与混淆技术完全解析/659.png","hash":"43d13e86813cbced7511460da48aefba9397b207","modified":1624586417824},{"_id":"source/_posts/HTTP Keep-Alive/2013_12_20_02.png","hash":"e6235cadb0d5d741f646324bf1f3db18602dcc73","modified":1624586417834},{"_id":"source/_posts/HTTP Keep-Alive/20161227112307.png","hash":"a00bdbae823b31e8dac80e8dfe81873e934e7ef8","modified":1624586417836},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KHLwtFe7&690.png","hash":"7043bbc267e660a3a615e5818e92c357f1443521","modified":1624586417841},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KnAQkx19&690.png","hash":"a735aa956f5d380c96e4175097904fc93a6fc91d","modified":1624586417843},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MlAy3H5d&690.jpg","hash":"be5eb12da6ea72e0cf7d88228c74a0879ebea51d","modified":1624586417849},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MG9JTO50&690.png","hash":"521acf61bbe9221bb399203d90d3679362fd7344","modified":1624586417846},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1Mzjamje7&690.jpg","hash":"a75887f218506a0689004b4a5b46ac528e287d57","modified":1624586417850},{"_id":"source/_posts/Jar转exe/1e30e924b899a90168ce99371f950a7b0208f53c.jpg","hash":"95b5359af718bf9a02e98a7c05a6c452e7f43848","modified":1624586417862},{"_id":"source/_posts/Jar转exe/0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","hash":"d96a4aa6c2e4502b591654ea28871ec06544a980","modified":1624586417860},{"_id":"source/_posts/Jar转exe/2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","hash":"04973de684743286b16f91b3be506defc631fa35","modified":1624586417864},{"_id":"source/_posts/Jar转exe/3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","hash":"be06a73e0408b58e0f47003a97eb1da894cce4ff","modified":1624586417866},{"_id":"source/_posts/Jar转exe/42166d224f4a20a4063cf1c692529822720ed095.jpg","hash":"3b00acf2a9846d3c3503fddb3b9a9a9949185573","modified":1624586417868},{"_id":"source/_posts/Jar转exe/4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","hash":"90c8d3aa709f12e502897370a25617f97c4bda55","modified":1624586417869},{"_id":"source/_posts/Jar转exe/4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","hash":"6bde22b1c4e089395612e7520ff98af2b807babd","modified":1624586417874},{"_id":"source/_posts/Jar转exe/5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","hash":"11d8c97117adddc34cae39c6811915f4881f3c60","modified":1624586417876},{"_id":"source/_posts/Jar转exe/4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","hash":"e3c1d2db7d13601871af30d073e5458aad2a793c","modified":1624586417872},{"_id":"source/_posts/Jar转exe/7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","hash":"4cb49a0ee377e670b2154fce41ecb52272290995","modified":1624586417878},{"_id":"source/_posts/Jar转exe/96dda144ad345982c7ab27930ef431adcbef848a.jpg","hash":"6765efacb7a2d04e413f3ccdf4e088b4013acf5c","modified":1624586417882},{"_id":"source/_posts/Jar转exe/a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","hash":"fbab0904eea4bf9e779d3cd5234e2ebe1fd428ee","modified":1624586417884},{"_id":"source/_posts/Jar转exe/ac6eddc451da81cbd80640cc5066d016082431cb.jpg","hash":"d209f91210a7b2235d5bb874a0bd3757de6e2443","modified":1624586417886},{"_id":"source/_posts/Jar转exe/b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","hash":"d01fa8984206e949d7e0f2dd8b310a8328ae96fd","modified":1624586417888},{"_id":"source/_posts/Jar转exe/96dda144ad345982c72127930ef431adcbef840c.jpg","hash":"efff7fc1b1c259617e0ce73fee76bd80e84c0ae5","modified":1624586417880},{"_id":"source/_posts/Jar转exe/c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","hash":"726b7b33f8f8cc9c30a3802ad5feb6b502b28857","modified":1624586417890},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","hash":"982ad9dae31d8af1675b5bf02ca723da7048da6d","modified":1624586417892},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","hash":"e77c32c7da2d24ac230d291eb64ad3de75c490b3","modified":1624586417894},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","hash":"d179d688f38aafb8bd9b66eeeae0ee90898cf9bf","modified":1624586417896},{"_id":"source/_posts/Jar转exe/caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","hash":"cb24a77cda3b1638f59ced73547189da7224f7dd","modified":1624586417897},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","hash":"15651be01628a880a7df9528a71a963d8699cd74","modified":1624586417912},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","hash":"a4a39f43603af6c485ab8072cec2ac51c33cffc7","modified":1624586417929},{"_id":"source/_posts/Jar转exe/e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","hash":"bcaddb1d3f1ae975d5ee7257415b4579dc74aa7c","modified":1624586417931},{"_id":"source/_posts/Jar转exe/f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","hash":"390e25a4058d0857b0e327ed65687944b3f26b35","modified":1624586417933},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/01.png","hash":"88e170f6d0241548eb8f0e5ea84cee6b940dde73","modified":1624586417945},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/02.png","hash":"9eb511310a786c07843c0017e938901e15310d04","modified":1624586417946},{"_id":"source/_posts/Java动态编程/43918004_1.png","hash":"c6c354349b055407786d32c8e6f5fb7d24fdb730","modified":1624586417965},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","hash":"544ebd7e3c11c1fdcec502a21256a5de26120352","modified":1624586417985},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsC8Oogc8&690.jpg","hash":"3b2dab83187ba0e1975c7545c305ddf3f2bdd26b","modified":1624586418010},{"_id":"source/_posts/Java设计模式之观察者模式/class.jpg","hash":"79d8669aca398f54e6e49d3c0ee39c83903876f3","modified":1624586418035},{"_id":"source/_posts/MySQL+Keepalived实现双机热备/1.png","hash":"2d492582c64942c3f81ef7ff120f443fa98e10e1","modified":1624586418040},{"_id":"source/_posts/MySQL5.6.25主从复制/1.png","hash":"f0c20752784f04794f8b82572ad2a9fde04521c6","modified":1624586418045},{"_id":"source/_posts/MySQL5.6.25主从复制/2.png","hash":"9b282ccada6b7ef72c21a2c7e57e1822c06f0e54","modified":1624586418046},{"_id":"source/_posts/MySQL5.6.25主从复制/3.png","hash":"19e4aac46c6af665e93905a2555d3462eb3d5e1d","modified":1624586418047},{"_id":"source/_posts/MySQL5.6.25主从复制/4.png","hash":"cd386329fdd79b5082c4cce01f768ea43a158cfd","modified":1624586418048},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/1.png","hash":"71b26646b6b4d7012d45979dc79e30246fd73638","modified":1624586418075},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/2.png","hash":"5b6778d76b94e2da64e9b90f30abab1a084e9280","modified":1624586418076},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/3.png","hash":"28877db8668ec28035626c48a68666a1c7831b0c","modified":1624586418078},{"_id":"source/_posts/Netty-4.1.4源码分析一/components.png","hash":"ad6b3b294ac4485dc6c72ae4755fa73fb8b3516b","modified":1624586418082},{"_id":"source/_posts/企业体检开发框架培训/开发框架架构图.png","hash":"f255c55f4615f250a96ced6db902478795728c01","modified":1624586418133},{"_id":"source/_posts/第一章 信息化知识/20161104112204.png","hash":"e670b58ab976d3879ba08198429f283ef1341543","modified":1624586418186},{"_id":"source/_posts/第八章 项目进度管理/20161106214322.png","hash":"43c9dae37c844ca543b1041923a7fffb74887de4","modified":1624586418213},{"_id":"source/_posts/第八章 项目进度管理/20161106214712.png","hash":"06c24636996302652506189aee627694ed49a433","modified":1624586418220},{"_id":"source/_posts/第八章 项目进度管理/20161106215655.png","hash":"b4085e0e8e9ee75cbe1665dcb08eda79d8ee0e09","modified":1624586418253},{"_id":"source/_posts/第四章 项目管理一般知识/20161109155449.png","hash":"a4c8fbb103b09e50f6d425a891a6af637e547d25","modified":1624586418408},{"_id":"source/_posts/第四章 项目管理一般知识/20161109164006.png","hash":"0ad6c3e6e79bea540a4736f201f382e66ae4d042","modified":1624586418414},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165613.png","hash":"a84f9692943e9bf925325fbe21c827beb82c475a","modified":1624586418443},{"_id":"source/_posts/虚拟机联网方式设置/241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","hash":"43cf32137fcc419f147b0d049a032dad787a9604","modified":1624586418469},{"_id":"source/_posts/虚拟机联网方式设置/6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","hash":"1e0406b4457b541e0be60b4df04a2ff5240a2159","modified":1624586418472},{"_id":"source/_posts/虚拟机联网方式设置/a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","hash":"405d1db86abc8489cfc65ef738aa9d3241044df4","modified":1624586418474},{"_id":"source/_posts/虚拟机联网方式设置/aec379310a55b31966f8dc0140a98226cffc1744.jpg","hash":"a29fb4d84b8d820612f68e42f19ca2e3e960fba7","modified":1624586418476},{"_id":"source/_posts/虚拟机联网方式设置/d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","hash":"0add76eff6ca58267c1294209d110d1557d47a12","modified":1624586418480},{"_id":"source/_posts/虚拟机联网方式设置/d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","hash":"16979cb24298216624b6646261b1edc5336224b5","modified":1624586418482},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"63bc4f8802967697a9a1096937384bafff0ecd62","modified":1624586418539},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1624586418544},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"24d4682dedb05c119fdc96549baae6141b3c52c8","modified":1624586418546},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"cbbf324a470d03de9f8cc4927ba7e766b17fb060","modified":1624586418548},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"1b667cc208f05cba78f7dce13ed1539bc8ba96be","modified":1624586418549},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1624586418551},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"08fab5f50206438bc683c7a3da0c0c56866af3b2","modified":1624586418552},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"0c905ab54ba1a012a77bfe030c32458336f62dce","modified":1624586418554},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1624586418555},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1624586418587},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1624586418589},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1624586418592},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1624586418591},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1624586418594},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1624586418595},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1624586418620},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1624586418661},{"_id":"themes/landscape/source/css/css.css","hash":"ba2ca8e8d083564e8c8000d7eec339d0d20ee4e0","modified":1624586418663},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1624586418712},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1624586418684},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1624586418714},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1624586418720},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1624586418723},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1624586418724},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1624586418726},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1624586418783},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1624586418802},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1624586418828},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1624586418800},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.gif","hash":"e66ec9f6ff93f138c6e13f40916f7a87525b8991","modified":1624586417786},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.gif","hash":"a7c195eed6d33a5d1a8ec181b7f6c2b9a18cdd4b","modified":1624586417791},{"_id":"source/_posts/Android反编译与混淆技术完全解析/657.png","hash":"0d77f8761198e7050277b5c33564a1fdb36eba20","modified":1624586417820},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1LyH3gqae&690.jpg","hash":"ad604ae5be66bdcc06aaa1bf626f4303a05ac558","modified":1624586417845},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1O1zJBg32&690.jpg","hash":"a3a2c32631f0c7ab624041e591f17d760f910bcb","modified":1624586417852},{"_id":"source/_posts/Jar转exe/023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","hash":"c8d5a13e4654137460328513aa9cf7dd8665ed61","modified":1624586417858},{"_id":"source/_posts/Java动态编程/43918004_2.png","hash":"7a2586081a717d13a675ece60bb9e45d1e884b86","modified":1624586417973},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","hash":"60241276433a3c1e127eb73cdee8dab31683e66c","modified":1624586417990},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/b03533fa828ba61e7fad2a384234970a304e5962.jpg","hash":"2b844c6fe1379ca077ae6d4af88fddf2bc44ebb2","modified":1624586417993},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsKgs3pa3&690.jpg","hash":"6616e5940a254b19bbe47b2967188cbf0ea6172e","modified":1624586418012},{"_id":"source/_posts/Netty-4.1.4源码分析一/threadmodel.png","hash":"0dfca57ae9c947d0fab7ec847f081b6c1518a04d","modified":1624586418085},{"_id":"source/_posts/Nginx+Tomcat集群/003vMReezy6OUXDo7kt61&690.jpg","hash":"b7a15e619f8e962958b99ebd38555b84b82ee81e","modified":1624586418101},{"_id":"source/_posts/中间件远程调试设置/b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","hash":"b9d501fb21f41a4b541537af536c8ae86b59b763","modified":1624586418117},{"_id":"source/_posts/漫谈工程师的三观/444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","hash":"4cb432f13c4398d2ab1fba7d8026117eac3dcf11","modified":1624586418152},{"_id":"source/_posts/漫谈工程师的三观/604bf4b4226f180ff45fa8bce5874793_b.png","hash":"b0f1369363a536e77cf92ff4f8c1631f251c2ce0","modified":1624586418166},{"_id":"source/_posts/第八章 项目进度管理/20161106214152.png","hash":"270efc8cedf27d6ad2a381bd997a77e194adbf07","modified":1624586418202},{"_id":"source/_posts/第十三章 项目合同管理/20161107215359.png","hash":"d03ac3d164e4d2b73f399e4079b2d7bba985c028","modified":1624586418305},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165451.png","hash":"bb8ad0a75098254a0dc265d6019e5f03d720113e","modified":1624586418441},{"_id":"source/_posts/虚拟机联网方式设置/203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","hash":"4cdcf9272c1b12b0fa82263420501869f71f49dd","modified":1624586418466},{"_id":"source/_posts/虚拟机联网方式设置/e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","hash":"f5474345f64ced1060d8dcfd327468b8ce42fb69","modified":1624586418484},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"745ab5d6e434cf8d321779da3c527b6d301e2b50","modified":1624586418806},{"_id":"source/_posts/Android反编译与混淆技术完全解析/651.png","hash":"fe7f4fa917058f9996f9a9cc589305f9a6c13fcb","modified":1624586417814},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","hash":"69cb430bdfd7ca9e049d754a600a56b4f97d840d","modified":1624586417996},{"_id":"source/_posts/Netty-4.1.4源码分析二之管道设计模式/20150502184145168.png","hash":"092580d6e230aab9f0f9f9e8680ac82256710cdc","modified":1624586418089},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165849.png","hash":"7fc0dc2d2e1ee2032885fbb7a39fd053ae870700","modified":1624586418451},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1624586418577},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1624586418580},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1624586418582},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1624586418583},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1624586418585},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1624586418578},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1624586418622},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1624586418627},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"77d2a41321a2734a8007548e582184fad4ff247e","modified":1624586418625},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1624586418629},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"05da1b8f4859761dc60bca40b8682f167e350742","modified":1624586418631},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1624586418630},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1624586418633},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1624586418634},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1624586418636},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1624586418638},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1624586418658},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1624586418660},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1624586418666},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1624586418667},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1624586418730},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1624586418728},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1624586418731},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1624586418750},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1624586418733},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1624586418782},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","hash":"38f2a87ff83248993d89e4773f23ce3c4572f373","modified":1624586417987},{"_id":"source/_posts/第十章 项目质量管理/20161106230900.png","hash":"f5e0902b7ed01c9fddb5b18dd997dd67e05914ca","modified":1624586418336},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1624586418673},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1624586418675},{"_id":"source/_posts/第十章 项目质量管理/20161106230813.png","hash":"193da131168b8f5e71be38e0b50eb6837bc8908b","modified":1624586418333},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165124.png","hash":"6ff36ef8033094f49fa300d3f203c28adfef5789","modified":1624586418417},{"_id":"source/_posts/第一章 信息化知识/20161105163604.png","hash":"512a6c6431637f630fe1cd41f6863c768baeb83e","modified":1624586418189},{"_id":"source/_posts/第四章 项目管理一般知识/20161109163412.png","hash":"077802804d87507200fc8e670e069b8e7452aebe","modified":1624586418412},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165818.png","hash":"c4a9eb98f93d1c42e8c7c69a1f1ff368369884ce","modified":1624586418447},{"_id":"themes/landscape/source/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1624586418681},{"_id":"source/_posts/漫谈工程师的三观/7e79f43fc4c4cfa8426a2008080842d6_b.jpg","hash":"782e9ff0c444c4eafc56ca29acce8c4d20fe12ab","modified":1624586418181},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1624586418671},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"8434b818968c5b93c54a794ecbbf220968b34cb6","modified":1624586418678},{"_id":"public/2016/05/10/博客搭建/index.html","hash":"9ae474a4a6e7cb676638c89fbbbea3b0fc217111","modified":1649812087194},{"_id":"public/2017/10/16/Java并发编程-线程饥饿死锁/index.html","hash":"9387f7551a3eeb444bbe0e18dd2d7fb602ba8dd8","modified":1649812087204},{"_id":"public/2016/12/27/HTTP Keep-Alive/index.html","hash":"b159f87f92588b93f1172feb87d8529a1a1f91fb","modified":1649812087204},{"_id":"public/2016/12/28/WEB性能优化手段/index.html","hash":"3a81b6f9105d21cca7f96bbd4e9bbf7ecb75aa54","modified":1649812087204},{"_id":"public/2021/03/20/100个为什么/index.html","hash":"960ed1c56de2880f51ca21cfbc369a7f3eaafec7","modified":1649812087204},{"_id":"public/2016/12/23/Netty-4.1.4源码分析一/index.html","hash":"46fc3eb69dbcc0e83e5f808167fbbc2348742cd0","modified":1649812087205},{"_id":"public/2016/12/27/HTTP协议：不可小觑的Content-Length/index.html","hash":"5f8199ad30b3a973213aebe6600a9c3655e22596","modified":1649812087204},{"_id":"public/2016/12/26/Netty-4.1.4源码分析二之管道设计模式/index.html","hash":"182d185f4a5df24959a6ad01ee1aa229a5990a5e","modified":1649812087205},{"_id":"public/2016/12/10/react-redux/index.html","hash":"5234ecb975e1d2df1643b069eb390cb4f8bd8f97","modified":1649812087205},{"_id":"public/2016/11/29/React学习总结一/index.html","hash":"a27ede722ea4c064876e094f1efed87ddeb29902","modified":1649812087205},{"_id":"public/2016/12/09/Redux/index.html","hash":"83daaf5799a9bd67604bbdfb3336c79ca766238d","modified":1649812087205},{"_id":"public/2017/06/20/2017年上半年Java高级工程师求职面试题总结/index.html","hash":"b55f03c2b40e226aa7aca6ec189f1f99fefb582e","modified":1649812087204},{"_id":"public/2016/11/04/第一章 信息化知识/index.html","hash":"a3db71c1d8f93d6e56426f33f529cd71e0eb2607","modified":1649812087205},{"_id":"public/2016/11/02/第三章 信息系统集成专业技术知识/index.html","hash":"eeae50bd2644dfbc5f713bd253eb749ecd399225","modified":1649812087205},{"_id":"public/2016/11/01/第四章 项目管理一般知识/index.html","hash":"46306100d51ac8f63799826bb9516b97636666fc","modified":1649812087205},{"_id":"public/2016/12/05/JavaScript学习随手记/index.html","hash":"0efa241b774910bb18519c996b9a7cc489e81baf","modified":1649812087205},{"_id":"public/2016/10/27/第七章 项目范围管理/index.html","hash":"505dc1a625217ee52dd21a8cbfdc7abfe22bb545","modified":1649812087205},{"_id":"public/2016/10/25/第八章 项目进度管理/index.html","hash":"fd3c33338b5426c0d8a55a451c17e339ff444876","modified":1649812087205},{"_id":"public/2016/10/24/第九章 项目成本管理/index.html","hash":"2ffbb18b0e3a93c47cc965b6894f4e6667614458","modified":1649812087205},{"_id":"public/2016/10/28/第六章 项目整体管理/index.html","hash":"22da9d784cc09f3394de9fe24637c27d99dad582","modified":1649812087205},{"_id":"public/2016/11/03/第二章 信息系统集成及服务管理/index.html","hash":"84724a603b542976b71896c69bcaa6d3dd381440","modified":1649812087205},{"_id":"public/2016/11/29/模块定义规范/index.html","hash":"c2d7c20068a35401da76ad4b94eafbd728ece4b7","modified":1649812087205},{"_id":"public/2016/10/23/第十章 项目质量管理/index.html","hash":"587bd383e52b524a570db20ecd378823e8482880","modified":1649812087206},{"_id":"public/2016/10/22/第十三章 项目合同管理/index.html","hash":"21c2956b579949ea7568a59f817578a751dd3c14","modified":1649812087206},{"_id":"public/2016/10/12/第十六章 变更管理/index.html","hash":"57daba7821a52bc66aeb87a05a38bbc1719aa402","modified":1649812087206},{"_id":"public/2016/08/22/分析Java进程中消耗CPU最高的线程/index.html","hash":"dc2e390c8c2e2ff83929361aa8999d2cbefcbaf8","modified":1649812087206},{"_id":"public/2016/08/22/JDK常用性能分析命令行工具/index.html","hash":"a348557862fcbc8eeac9a35fd4cb5d0905757f75","modified":1649812087206},{"_id":"public/2016/08/10/epoll/index.html","hash":"707a0ced5b22c6201ff67fe4ef92c188aa495df5","modified":1649812087206},{"_id":"public/2016/06/05/Java动态编程/index.html","hash":"5ed0e6bd811f1016df0b8f5261718be9ca6855d1","modified":1649812087206},{"_id":"public/2016/09/12/Java线程中断interrupt/index.html","hash":"56c6fbdfdeeeea1373ccf8ae09a66d95fbfa096a","modified":1649812087206},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/index.html","hash":"5a31ef4a9885125b2b04d519c863505f2730fc24","modified":1649812087207},{"_id":"public/2016/05/17/漫谈工程师的三观/index.html","hash":"6f7f518a9d8fe921cee3bb8df823d193544ed618","modified":1649812087207},{"_id":"public/2016/05/16/构建单页Web应用/index.html","hash":"ddba8895166c88882f2e472a1a7db1971c233c86","modified":1649812087207},{"_id":"public/2016/05/16/Web应用组件化的权衡/index.html","hash":"09f59c077e4b1c14009c674d4f3af78d49be0485","modified":1649812087207},{"_id":"public/2016/05/16/框架那么多学习那个好/index.html","hash":"1a3f113e6d9ca6b9af52b3507b4663c66f96b978","modified":1649812087207},{"_id":"public/2016/05/30/开发管理的一些建议/index.html","hash":"72c409038dd27a488610e06ca56354abaf4c004c","modified":1649812087206},{"_id":"public/2016/05/10/System.setOut/index.html","hash":"f5d96d4a08b093253e3e4bad83cc5a20e17125a6","modified":1649812087207},{"_id":"public/2016/05/11/JavaScript面向对象编程/index.html","hash":"1d067e12e03e9d33641f33f8b7facd4e491abfba","modified":1649812087207},{"_id":"public/2015/11/03/企业体检开发框架培训/index.html","hash":"34c778e03dc44e04dc8a5cb6044e66c972bcc7d7","modified":1649812087207},{"_id":"public/2015/07/27/MySQL+Keepalived实现双机热备/index.html","hash":"1b56f00ff015e005ea5c991345e1dedf70dad6e0","modified":1649812087207},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/index.html","hash":"651c1940305520be9a07f109aa564dffc1511722","modified":1649812087207},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/index.html","hash":"5d8cb95d8cf643685f7c008808e593bd06116ba7","modified":1649812087207},{"_id":"public/2016/05/10/Linux常见问题解决方法/index.html","hash":"e21bd92a7b12c1f6477327e123da87b33031ee53","modified":1649812087207},{"_id":"public/2015/01/14/Nginx+Tomcat+Memcached集群/index.html","hash":"d4ea0210d2948c95be095692eb9381f925e64736","modified":1649812087208},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/index.html","hash":"2f5eae40f8153721f6eabcc421448c25ed9e5e01","modified":1649812087208},{"_id":"public/2015/01/26/解决问题心得/index.html","hash":"f609f977e3faeebb1bffe1b3920f7362aada4f63","modified":1649812087208},{"_id":"public/2014/12/10/Nginx+Tomcat集群/index.html","hash":"64f54e30ddcd94a19ee67266c9c8cdd70e614386","modified":1649812087208},{"_id":"public/2014/10/08/虚拟机联网方式设置/index.html","hash":"ce10c86c0bbd5a535765e31b9acd204206dd531f","modified":1649812087208},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/index.html","hash":"20354836fb5e4daf3aaadda5cc8c41fe57892f5e","modified":1649812087208},{"_id":"public/2015/01/05/Java设计模式之观察者模式/index.html","hash":"1ca9f158e0496aa624fc50f13ebf87244482f45c","modified":1649812087208},{"_id":"public/2014/09/04/中间件远程调试设置/index.html","hash":"99b0ca32b3e26eba23986ac4e9d4be09205aacb3","modified":1649812087208},{"_id":"public/2016/08/10/Java中的IO技术：BIO,NIO,AIO/index.html","hash":"149f989c84a9c237439a54e095ba29bcd7650f24","modified":1649812087206},{"_id":"public/2016/10/09/第十九章 项目收尾管理/index.html","hash":"afc582319ec3975878f8c95a8a6e55eec0601da4","modified":1649812087206},{"_id":"public/2020/10/20/编写一个简单的操作系统/index.html","hash":"ddf50532536640349e002e503137abaebd131b6f","modified":1649812087193},{"_id":"public/archives/page/5/index.html","hash":"3000fc9d9434e4813638dd1b5cef7ed5a0e47131","modified":1649812087209},{"_id":"public/archives/2012/index.html","hash":"acea1d4f48ad4c954cb4fc381d130fcda9e343b9","modified":1649812087198},{"_id":"public/archives/2013/index.html","hash":"70b1b16e1a7ba0cc34ac5a748ddcfd132d073447","modified":1649812087200},{"_id":"public/archives/2013/01/index.html","hash":"60011bb911e2fa98ab8797a506f393166b088e62","modified":1649812087201},{"_id":"public/archives/2013/07/index.html","hash":"5e3ce4d64c3ce9d0e4eade8f184a1b200f01af16","modified":1649812087201},{"_id":"public/archives/2012/12/index.html","hash":"0411faaab5db7be86b076d4b659144501362a466","modified":1649812087200},{"_id":"public/archives/2013/10/index.html","hash":"589007534cc0680938ca692d292c7d9cd1a79e75","modified":1649812087201},{"_id":"public/archives/2013/11/index.html","hash":"ad9d60fe997e5593729dc5e84425bb92aecc9a3b","modified":1649812087201},{"_id":"public/archives/2014/index.html","hash":"b4aef1f26b24f6a350cb74e5c3146211c1c5c29e","modified":1649812087201},{"_id":"public/archives/2014/02/index.html","hash":"d8ab3a77303feb30395619cc869c633f254f1ae0","modified":1649812087201},{"_id":"public/archives/2014/04/index.html","hash":"1e4b9eebbabae4a3caa0b8f95726b6a9e3665310","modified":1649812087201},{"_id":"public/archives/2015/index.html","hash":"f6bb5342089d53d1ccf46e97fc3443c6fb7b073a","modified":1649812087201},{"_id":"public/archives/2014/10/index.html","hash":"6b7da4e13efd177928adcebd7311eba646d993a0","modified":1649812087201},{"_id":"public/archives/2014/12/index.html","hash":"a1d9ceb24f870ca18a4600c8890d10c999a717c0","modified":1649812087201},{"_id":"public/archives/2015/01/index.html","hash":"c99e1a315649ec80e9225a2af30877c172ab1eba","modified":1649812087202},{"_id":"public/archives/2014/09/index.html","hash":"0a9210a648a8923aa15400fe98d6dc24e60f1d95","modified":1649812087201},{"_id":"public/archives/2015/07/index.html","hash":"a2353159b00c74a567c830777942d5c8f4904f47","modified":1649812087202},{"_id":"public/archives/2015/11/index.html","hash":"7f36aa388f3a3cffc1df6740a56dc81f4843bd7c","modified":1649812087202},{"_id":"public/archives/2016/06/index.html","hash":"fc5a2a7c9bfddaef291bfb07610c178fce8257a9","modified":1649812087202},{"_id":"public/archives/2016/08/index.html","hash":"deecc5feae781c133247c6bf0c2c29b763feb207","modified":1649812087202},{"_id":"public/archives/2016/09/index.html","hash":"c322b7958c3c7a7787fef9b971d99fc7fc4a7538","modified":1649812087202},{"_id":"public/archives/2016/11/index.html","hash":"289bca904a5e812c1c1d02026d806b96e134be8b","modified":1649812087202},{"_id":"public/archives/2016/10/index.html","hash":"ca565590348baecddc658659cef9597f7d1c6e0b","modified":1649812087202},{"_id":"public/archives/2016/page/3/index.html","hash":"2b6ae639d10e7aa146e2c55b72728cefe8f1004f","modified":1649812087202},{"_id":"public/archives/2017/index.html","hash":"f3594aefee29345467701893c150a409aee04c0d","modified":1649812087202},{"_id":"public/archives/2021/index.html","hash":"7c28c9860957edb54f36cdc12215dde8a9badf8f","modified":1649812087202},{"_id":"public/archives/2021/03/index.html","hash":"b5505bf4fad775eb7b939ecdf1c3875119893ca6","modified":1649812087203},{"_id":"public/categories/操作系统/index.html","hash":"6fd7bf253b6fbf5a2e27384378985f3c77c5acae","modified":1649812087203},{"_id":"public/archives/2016/12/index.html","hash":"2bdc414782638da3e46a10557d3ba74af512a3b6","modified":1649812087202},{"_id":"public/categories/HTTP/index.html","hash":"f11f78f333c029cf40ed189566bf33023c61c3fd","modified":1649812087203},{"_id":"public/archives/2017/06/index.html","hash":"398f5e09f54549af62c7813cb2f07b77d59b6468","modified":1649812087202},{"_id":"public/archives/2017/10/index.html","hash":"55b7b9bbf59c975a05d02533d92a11ad1532ae5c","modified":1649812087202},{"_id":"public/categories/Android/index.html","hash":"6620715f63f9ff71c864257bc04b6853e93aa464","modified":1649812087203},{"_id":"public/categories/Hadoop/index.html","hash":"36fc7640eb89cd0a99cc11c2ffc0aceff21e0ebd","modified":1649812087203},{"_id":"public/categories/MySQL/index.html","hash":"b00af5b459601215b188280766d0cad106c7a48f","modified":1649812087203},{"_id":"public/categories/EXE4J/index.html","hash":"b90c1a8780010e4902ebef358e8acaaf47722555","modified":1649812087203},{"_id":"public/categories/Linux/index.html","hash":"011a5787f7b509472608a60f50f79f0f913f5957","modified":1649812087203},{"_id":"public/categories/Tomcat/index.html","hash":"7b28ae5b4422383e0539fed948695ab8aa1fef5e","modified":1649812087204},{"_id":"public/categories/Eclipse/index.html","hash":"da1e3d84f53da74604b8df5c1cb19421014c3621","modified":1649812087204},{"_id":"public/categories/Other/index.html","hash":"6f5a1e05f1cccc3454177a15fc32518a5bfc019e","modified":1649812087204},{"_id":"public/categories/培训文档/index.html","hash":"b9786598300f56efe2226bf4091ea52d31e34b03","modified":1649812087204},{"_id":"public/categories/Oracle/index.html","hash":"c6746490828065b59a5ca4cd98751756dd562f92","modified":1649812087204},{"_id":"public/categories/WEB/index.html","hash":"2b57cb63770bfc57ef29bf0c197bd6eb797c8017","modified":1649812087204},{"_id":"public/categories/BSF/index.html","hash":"511ff17fce9df715a6cd8093f409a64ed7e51766","modified":1649812087204},{"_id":"public/categories/VMware/index.html","hash":"6c125c08e465295e085678159590c20262882f41","modified":1649812087204},{"_id":"public/2021/04/10/JVMTI随记/index.html","hash":"4cafdbd4ef8f8b32ef67dc4d7e54829f0549fb72","modified":1649812087204},{"_id":"public/2020/07/12/KVM初尝/index.html","hash":"19ff2bcc10514f9190f19b9eee3330571ce599e6","modified":1649812087204},{"_id":"public/2021/03/10/APIC编程/index.html","hash":"965e7a3db57e764bb38ccda572eee71be0a512ca","modified":1649812087204},{"_id":"public/2021/03/27/调试JVM/index.html","hash":"f2f66040cf367072f03bb642783f87c84b8fd6f6","modified":1649812087204},{"_id":"public/2014/04/30/Oracle常用脚本/index.html","hash":"0e903bf5fb8aed468bd4c68aadfdb4550ab82936","modified":1649812087208},{"_id":"public/2013/11/24/Jar转exe/index.html","hash":"d8f173cac29087320d3b1a48897d60e91b6c6c76","modified":1649812087208},{"_id":"public/2013/07/18/JavaScript函数/index.html","hash":"f403d7103be5eafc6c6031e4d682d9fdb99ed062","modified":1649812087209},{"_id":"public/2013/07/17/JavaScript模仿块级作用域/index.html","hash":"1aeeaf963d68707c3eaf3a81567df1daf1602bcc","modified":1649812087208},{"_id":"public/2013/10/15/为什么寄存器比内存快/index.html","hash":"616a686872970a05e48c96180ab719be54b15149","modified":1649812087208},{"_id":"public/2014/02/13/JavaScript常用脚本/index.html","hash":"f358cf8bdc115f6c173b435f77375bf8879750ab","modified":1649812087208},{"_id":"public/2013/07/17/JavaScript闭包/index.html","hash":"0dd05ec7ef61972c9dbfa2a3a828f2d825229eb7","modified":1649812087208},{"_id":"public/2012/12/03/财务管理系统项目技术经验总结/index.html","hash":"d751ed4a14aa4f23a8f1953254dd4236e0dbeaa9","modified":1649812087209},{"_id":"public/2013/01/30/浅谈BSF/index.html","hash":"7684da678a957455c61863c5c8f7cfb58dae34f7","modified":1649812087208},{"_id":"public/archives/index.html","hash":"6093b3f0c71812e893885755cabe51fbb5f8664b","modified":1649812087209},{"_id":"public/archives/page/2/index.html","hash":"2446dd30290c53e3daf358792109a0d353806244","modified":1649812087209},{"_id":"public/archives/page/4/index.html","hash":"833c1ebf23f55f97feb360d8ca7a313ead54e62e","modified":1649812087209},{"_id":"public/archives/page/3/index.html","hash":"4e608b50e2aeb7788cd1a2b09fc8c740e8ea0d71","modified":1649812087209},{"_id":"public/archives/2016/index.html","hash":"c598b42e4900b63a1b3a81f182ae8bcb7895c842","modified":1649812087209},{"_id":"public/archives/2016/05/index.html","hash":"d0428756c9dd9b86425b3766a07080a54598ad05","modified":1649812087209},{"_id":"public/archives/2016/page/2/index.html","hash":"c57f1772763fbd0f9dde6dd0bcd67066f7dcc5b8","modified":1649812087209},{"_id":"public/categories/JavaScript/index.html","hash":"f8d941254492a2ed826246f58c72c10fdd695b94","modified":1649812087210},{"_id":"public/categories/Java/index.html","hash":"1aef51ca23464691a75f3f977cb412fa90a62599","modified":1649812087209},{"_id":"public/categories/心得体会/index.html","hash":"913bda20bd7f7f7990e2cbfd9bb7414885dee184","modified":1649812087210},{"_id":"public/index.html","hash":"2830f126ea7b5cbcdba78ec2bb4ecad07dacf331","modified":1649812087209},{"_id":"public/categories/系统集成项目管理/index.html","hash":"a29a2a3b50e8c2937ad89bce6a136c9142ea5c3a","modified":1649812087210},{"_id":"public/page/2/index.html","hash":"d5bc319e4c909aa8ba8a622a752452d298275f3d","modified":1649812087209},{"_id":"public/page/3/index.html","hash":"1f031ec37ac6c1a2960f3eac4d3a8bb76e0796f2","modified":1649812087209},{"_id":"public/page/5/index.html","hash":"c27ec383fd310ae2e87ba29b9bdd691036e1a0a6","modified":1649812087209},{"_id":"public/page/4/index.html","hash":"eb5177ad05d17f0dac04fa46fdcf27238111161f","modified":1649812087209},{"_id":"public/archives/2020/index.html","hash":"1626f470a4752daeba3f379be22c51513a102bde","modified":1649812087202},{"_id":"public/archives/2020/07/index.html","hash":"fbe7964383216ea909c2ea556bba1dc78a74a66e","modified":1649812087202},{"_id":"public/archives/2020/10/index.html","hash":"7ccc5cd66bdd88b3fe296b67f3d2eacb9b27256d","modified":1649812087203},{"_id":"public/archives/2021/04/index.html","hash":"edf4708cc8bc0ade80e5b94d263125195aff5590","modified":1649812087203},{"_id":"public/categories/虚拟化/index.html","hash":"49cfb72a8a924c65255840ddf6fda79515f8d79d","modified":1649812087203},{"_id":"public/categories/JVM/index.html","hash":"8480a83b7d210488604f122490da8c43b8020419","modified":1649812087203},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1625046664907},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1625046664907},{"_id":"public/robots.txt","hash":"560730a19f9642c88514986021fd4fb234c54052","modified":1625046664907},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1625046664907},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1625046664907},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1625046664907},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1625046664907},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1625046664908},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1625046664908},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1625046664908},{"_id":"public/2016/12/27/HTTP Keep-Alive/2013_12_20_02.png","hash":"e6235cadb0d5d741f646324bf1f3db18602dcc73","modified":1625046664908},{"_id":"public/2016/12/27/HTTP Keep-Alive/20161227112307.png","hash":"a00bdbae823b31e8dac80e8dfe81873e934e7ef8","modified":1625046664908},{"_id":"public/2015/07/27/MySQL+Keepalived实现双机热备/1.png","hash":"2d492582c64942c3f81ef7ff120f443fa98e10e1","modified":1625046664908},{"_id":"public/2016/11/04/第一章 信息化知识/20161104112204.png","hash":"e670b58ab976d3879ba08198429f283ef1341543","modified":1625046664908},{"_id":"public/2016/08/10/Java中的IO技术：BIO,NIO,AIO/02.png","hash":"9eb511310a786c07843c0017e938901e15310d04","modified":1625046664908},{"_id":"public/2015/11/03/企业体检开发框架培训/开发框架架构图.png","hash":"f255c55f4615f250a96ced6db902478795728c01","modified":1625046664908},{"_id":"public/2015/01/05/Java设计模式之观察者模式/003vMReezy6OWsC8Oogc8&690.jpg","hash":"3b2dab83187ba0e1975c7545c305ddf3f2bdd26b","modified":1625046664908},{"_id":"public/2015/01/05/Java设计模式之观察者模式/class.jpg","hash":"79d8669aca398f54e6e49d3c0ee39c83903876f3","modified":1625046664908},{"_id":"public/2016/08/10/Java中的IO技术：BIO,NIO,AIO/01.png","hash":"88e170f6d0241548eb8f0e5ea84cee6b940dde73","modified":1625046664908},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/2.png","hash":"5b6778d76b94e2da64e9b90f30abab1a084e9280","modified":1625046664908},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/1.png","hash":"71b26646b6b4d7012d45979dc79e30246fd73638","modified":1625046664908},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/3.png","hash":"28877db8668ec28035626c48a68666a1c7831b0c","modified":1625046664908},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/3.png","hash":"19e4aac46c6af665e93905a2555d3462eb3d5e1d","modified":1625046664909},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/1.png","hash":"f0c20752784f04794f8b82572ad2a9fde04521c6","modified":1625046664909},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/2.png","hash":"9b282ccada6b7ef72c21a2c7e57e1822c06f0e54","modified":1625046664909},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1KnAQkx19&690.png","hash":"a735aa956f5d380c96e4175097904fc93a6fc91d","modified":1625046664909},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1MG9JTO50&690.png","hash":"521acf61bbe9221bb399203d90d3679362fd7344","modified":1625046664909},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109155449.png","hash":"a4c8fbb103b09e50f6d425a891a6af637e547d25","modified":1625046664909},{"_id":"public/2014/10/08/虚拟机联网方式设置/a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","hash":"405d1db86abc8489cfc65ef738aa9d3241044df4","modified":1625046664909},{"_id":"public/2014/10/08/虚拟机联网方式设置/aec379310a55b31966f8dc0140a98226cffc1744.jpg","hash":"a29fb4d84b8d820612f68e42f19ca2e3e960fba7","modified":1625046664909},{"_id":"public/2014/10/08/虚拟机联网方式设置/6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","hash":"1e0406b4457b541e0be60b4df04a2ff5240a2159","modified":1625046664909},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/0.jpg","hash":"a06634c019d8f89cc61365e9d49c235ddb3c8636","modified":1625046664909},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109165613.png","hash":"a84f9692943e9bf925325fbe21c827beb82c475a","modified":1625046664909},{"_id":"public/2016/10/25/第八章 项目进度管理/20161106214712.png","hash":"06c24636996302652506189aee627694ed49a433","modified":1625046664909},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/1.png","hash":"bb47ca53cfeec354cd18eb14c0702bb9bfd96081","modified":1625046664909},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/5.png","hash":"1409b6a2eaa309f7bcc2d339abcde13258e99e4b","modified":1625046664909},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/641.png","hash":"eecfef65c149e9ae61eff13451c4add431beac68","modified":1625046664909},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/642.png","hash":"334a78f7522f3f2b7b57c4e9e3f70b274e042ccf","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/2.png","hash":"c403ea6f9b9a00dbb84980135e92cfe83a85cc75","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/645.png","hash":"26b17d0608638e80ebcf9e4c58dd7feb702b3566","modified":1625046664910},{"_id":"public/2014/10/08/虚拟机联网方式设置/d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","hash":"16979cb24298216624b6646261b1edc5336224b5","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/643.png","hash":"bcc93b17fc8fede4bf5c1fa74cf960b9c0b1d1a3","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/648.png","hash":"f50c29b7a6e5e4b61ee5454ff973fbbd0d5fdae8","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/650.png","hash":"a38f3549da2c2a70557218fde7a1fb0bf9a2c6cc","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/653.png","hash":"ad9b1e83175e8423fe4c2645c28dad8eb5aeb7a0","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/640.png","hash":"7890c65b880deda8fcaf4ad2908499dd0bb02b7c","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/646.png","hash":"e4cfa01fada3dcc993e8238f7ebd1e20a918ee2a","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/647.png","hash":"6b90925dcbf6313e9f398c9f29075c416dcc44c1","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/655.png","hash":"e3fa927346a1659e6924ba4d207b515cc152d0e2","modified":1625046664910},{"_id":"public/2013/11/24/Jar转exe/0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","hash":"d96a4aa6c2e4502b591654ea28871ec06544a980","modified":1625046664910},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/658.png","hash":"8eceaff6e792bf573eb27e162671c37f45dc298d","modified":1625046664910},{"_id":"public/2013/11/24/Jar转exe/3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","hash":"be06a73e0408b58e0f47003a97eb1da894cce4ff","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","hash":"04973de684743286b16f91b3be506defc631fa35","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/1e30e924b899a90168ce99371f950a7b0208f53c.jpg","hash":"95b5359af718bf9a02e98a7c05a6c452e7f43848","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","hash":"90c8d3aa709f12e502897370a25617f97c4bda55","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","hash":"11d8c97117adddc34cae39c6811915f4881f3c60","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","hash":"6bde22b1c4e089395612e7520ff98af2b807babd","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","hash":"e3c1d2db7d13601871af30d073e5458aad2a793c","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/42166d224f4a20a4063cf1c692529822720ed095.jpg","hash":"3b00acf2a9846d3c3503fddb3b9a9a9949185573","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/96dda144ad345982c72127930ef431adcbef840c.jpg","hash":"efff7fc1b1c259617e0ce73fee76bd80e84c0ae5","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","hash":"4cb49a0ee377e670b2154fce41ecb52272290995","modified":1625046664911},{"_id":"public/2013/11/24/Jar转exe/ac6eddc451da81cbd80640cc5066d016082431cb.jpg","hash":"d209f91210a7b2235d5bb874a0bd3757de6e2443","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/96dda144ad345982c7ab27930ef431adcbef848a.jpg","hash":"6765efacb7a2d04e413f3ccdf4e088b4013acf5c","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","hash":"982ad9dae31d8af1675b5bf02ca723da7048da6d","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","hash":"fbab0904eea4bf9e779d3cd5234e2ebe1fd428ee","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","hash":"d01fa8984206e949d7e0f2dd8b310a8328ae96fd","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","hash":"e77c32c7da2d24ac230d291eb64ad3de75c490b3","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","hash":"15651be01628a880a7df9528a71a963d8699cd74","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","hash":"a4a39f43603af6c485ab8072cec2ac51c33cffc7","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","hash":"bcaddb1d3f1ae975d5ee7257415b4579dc74aa7c","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","hash":"390e25a4058d0857b0e327ed65687944b3f26b35","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","hash":"cb24a77cda3b1638f59ced73547189da7224f7dd","modified":1625046664912},{"_id":"public/2013/11/24/Jar转exe/c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","hash":"726b7b33f8f8cc9c30a3802ad5feb6b502b28857","modified":1625046664913},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/656.png","hash":"54f498d3d5a77d85d4cd96f9fcd5cfd8311a2179","modified":1625046664913},{"_id":"public/2013/11/24/Jar转exe/c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","hash":"d179d688f38aafb8bd9b66eeeae0ee90898cf9bf","modified":1625046664913},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/659.png","hash":"43d13e86813cbced7511460da48aefba9397b207","modified":1625046664913},{"_id":"public/favicon.ico","hash":"f50f1228739e790380a195144d715886ea1961e0","modified":1625046665519},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1625046665520},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1625046665520},{"_id":"public/2014/09/04/中间件远程调试设置/b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","hash":"b9d501fb21f41a4b541537af536c8ae86b59b763","modified":1625046665520},{"_id":"public/2014/12/10/Nginx+Tomcat集群/003vMReezy6OUXDo7kt61&690.jpg","hash":"b7a15e619f8e962958b99ebd38555b84b82ee81e","modified":1625046665521},{"_id":"public/2016/06/05/Java动态编程/43918004_1.png","hash":"c6c354349b055407786d32c8e6f5fb7d24fdb730","modified":1625046665521},{"_id":"public/2016/06/05/Java动态编程/43918004_2.png","hash":"7a2586081a717d13a675ece60bb9e45d1e884b86","modified":1625046665521},{"_id":"public/2016/12/23/Netty-4.1.4源码分析一/components.png","hash":"ad6b3b294ac4485dc6c72ae4755fa73fb8b3516b","modified":1625046665521},{"_id":"public/2016/12/23/Netty-4.1.4源码分析一/threadmodel.png","hash":"0dfca57ae9c947d0fab7ec847f081b6c1518a04d","modified":1625046665521},{"_id":"public/2015/01/05/Java设计模式之观察者模式/003vMReezy6OWsKgs3pa3&690.jpg","hash":"6616e5940a254b19bbe47b2967188cbf0ea6172e","modified":1625046665521},{"_id":"public/2016/05/17/漫谈工程师的三观/444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","hash":"4cb432f13c4398d2ab1fba7d8026117eac3dcf11","modified":1625046665521},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/4.png","hash":"cd386329fdd79b5082c4cce01f768ea43a158cfd","modified":1625046665521},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","hash":"544ebd7e3c11c1fdcec502a21256a5de26120352","modified":1625046665522},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","hash":"60241276433a3c1e127eb73cdee8dab31683e66c","modified":1625046665522},{"_id":"public/2016/10/25/第八章 项目进度管理/20161106214152.png","hash":"270efc8cedf27d6ad2a381bd997a77e194adbf07","modified":1625046665522},{"_id":"public/2016/10/25/第八章 项目进度管理/20161106215655.png","hash":"b4085e0e8e9ee75cbe1665dcb08eda79d8ee0e09","modified":1625046665522},{"_id":"public/2016/10/25/第八章 项目进度管理/20161106214322.png","hash":"43c9dae37c844ca543b1041923a7fffb74887de4","modified":1625046665522},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1MlAy3H5d&690.jpg","hash":"be5eb12da6ea72e0cf7d88228c74a0879ebea51d","modified":1625046665522},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1Mzjamje7&690.jpg","hash":"a75887f218506a0689004b4a5b46ac528e287d57","modified":1625046665522},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109165451.png","hash":"bb8ad0a75098254a0dc265d6019e5f03d720113e","modified":1625046665522},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109164006.png","hash":"0ad6c3e6e79bea540a4736f201f382e66ae4d042","modified":1625046665522},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1KHLwtFe7&690.png","hash":"7043bbc267e660a3a615e5818e92c357f1443521","modified":1625046665522},{"_id":"public/2014/10/08/虚拟机联网方式设置/203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","hash":"4cdcf9272c1b12b0fa82263420501869f71f49dd","modified":1625046665522},{"_id":"public/2014/10/08/虚拟机联网方式设置/241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","hash":"43cf32137fcc419f147b0d049a032dad787a9604","modified":1625046665522},{"_id":"public/2014/10/08/虚拟机联网方式设置/e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","hash":"f5474345f64ced1060d8dcfd327468b8ce42fb69","modified":1625046665522},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/0.gif","hash":"e66ec9f6ff93f138c6e13f40916f7a87525b8991","modified":1625046665522},{"_id":"public/2014/10/08/虚拟机联网方式设置/d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","hash":"0add76eff6ca58267c1294209d110d1557d47a12","modified":1625046665522},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/2.gif","hash":"a7c195eed6d33a5d1a8ec181b7f6c2b9a18cdd4b","modified":1625046665522},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/644.jpg","hash":"d4a147dd0fcfbe3e04c18c006c4bd95cf254bbe8","modified":1625046665523},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/657.png","hash":"0d77f8761198e7050277b5c33564a1fdb36eba20","modified":1625046665523},{"_id":"public/2013/11/24/Jar转exe/023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","hash":"c8d5a13e4654137460328513aa9cf7dd8665ed61","modified":1625046665523},{"_id":"public/css/css.css","hash":"9c4c9aae05ffd5a38082080efb3ddefbd8772cb2","modified":1625046665543},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1625046665543},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1625046665543},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1625046665543},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1625046665543},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1625046665543},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1625046665543},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1625046665544},{"_id":"public/css/style.css","hash":"bf3901f8c8928dbf7bd2db09e0b7aadd55300cc7","modified":1625046665544},{"_id":"public/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1625046665544},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1625046665544},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1625046665544},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/651.png","hash":"fe7f4fa917058f9996f9a9cc589305f9a6c13fcb","modified":1625046665544},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109165124.png","hash":"6ff36ef8033094f49fa300d3f203c28adfef5789","modified":1625046665544},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","hash":"38f2a87ff83248993d89e4773f23ce3c4572f373","modified":1625046665545},{"_id":"public/2016/12/26/Netty-4.1.4源码分析二之管道设计模式/20150502184145168.png","hash":"092580d6e230aab9f0f9f9e8680ac82256710cdc","modified":1625046665545},{"_id":"public/2016/10/22/第十三章 项目合同管理/20161107215359.png","hash":"d03ac3d164e4d2b73f399e4079b2d7bba985c028","modified":1625046665545},{"_id":"public/2016/05/17/漫谈工程师的三观/604bf4b4226f180ff45fa8bce5874793_b.png","hash":"b0f1369363a536e77cf92ff4f8c1631f251c2ce0","modified":1625046665545},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/b03533fa828ba61e7fad2a384234970a304e5962.jpg","hash":"2b844c6fe1379ca077ae6d4af88fddf2bc44ebb2","modified":1625046665545},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1LyH3gqae&690.jpg","hash":"ad604ae5be66bdcc06aaa1bf626f4303a05ac558","modified":1625046665546},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1O1zJBg32&690.jpg","hash":"a3a2c32631f0c7ab624041e591f17d760f910bcb","modified":1625046665546},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109165849.png","hash":"7fc0dc2d2e1ee2032885fbb7a39fd053ae870700","modified":1625046665546},{"_id":"public/css/images/banner.jpg","hash":"8434b818968c5b93c54a794ecbbf220968b34cb6","modified":1625046665556},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1625046665557},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","hash":"69cb430bdfd7ca9e049d754a600a56b4f97d840d","modified":1625046665558},{"_id":"public/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1625046665592},{"_id":"public/2016/10/23/第十章 项目质量管理/20161106230900.png","hash":"f5e0902b7ed01c9fddb5b18dd997dd67e05914ca","modified":1625046665592},{"_id":"public/2016/11/04/第一章 信息化知识/20161105163604.png","hash":"512a6c6431637f630fe1cd41f6863c768baeb83e","modified":1625046665592},{"_id":"public/2016/10/23/第十章 项目质量管理/20161106230813.png","hash":"193da131168b8f5e71be38e0b50eb6837bc8908b","modified":1625046665705},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109163412.png","hash":"077802804d87507200fc8e670e069b8e7452aebe","modified":1625046665844},{"_id":"public/2016/11/01/第四章 项目管理一般知识/20161109165818.png","hash":"c4a9eb98f93d1c42e8c7c69a1f1ff368369884ce","modified":1625046665845},{"_id":"public/2016/05/17/漫谈工程师的三观/7e79f43fc4c4cfa8426a2008080842d6_b.jpg","hash":"782e9ff0c444c4eafc56ca29acce8c4d20fe12ab","modified":1625046665854},{"_id":"source/_posts/Epoll源码分析.md","hash":"f858816212454f79ae541ce2e107b831a03b699a","modified":1649811873292},{"_id":"source/_posts/Epoll源码分析/008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg","hash":"f576a89b89bafaeb335fbe99207ae4406c7fb519","modified":1649810648244},{"_id":"source/_posts/Epoll源码分析/008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg","hash":"8dfb84a1e15a950b69d9d9d505325a07e7521836","modified":1649810762607},{"_id":"public/2022/04/13/Epoll源码分析/index.html","hash":"0a55f2ffea1d18667faccf828844be3ee8981876","modified":1649812084534},{"_id":"public/archives/2022/index.html","hash":"146d4c4cef8610b176f9a30d52fcd9a5f9b0663c","modified":1649812087215},{"_id":"public/archives/2022/04/index.html","hash":"690f05d0c7fb8f6c8ee69b66d9d426d2a102a0b4","modified":1649812087215},{"_id":"public/2022/04/13/Epoll源码分析/008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg","hash":"f576a89b89bafaeb335fbe99207ae4406c7fb519","modified":1649812087218},{"_id":"public/2022/04/13/Epoll源码分析/008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg","hash":"8dfb84a1e15a950b69d9d9d505325a07e7521836","modified":1649812087460}],"Category":[{"name":"操作系统","_id":"ckqjatojw0002qkl5cp0r6csd"},{"name":"Android","_id":"ckqjatok70006qkl599b4city"},{"name":"HTTP","_id":"ckqjatokp000dqkl5z1m47etp"},{"name":"Hadoop","_id":"ckqjatokw000lqkl5tqidm7te"},{"name":"Java","_id":"ckqjatol0000qqkl5bnnxq9ni"},{"name":"JVM","_id":"ckqjatol4000vqkl5crteztxg"},{"name":"EXE4J","_id":"ckqjatol7000zqkl53cka393a"},{"name":"JavaScript","_id":"ckqjatolb0014qkl5tq6mqbv2"},{"name":"虚拟化","_id":"ckqjatolz0022qkl5fxxmj187"},{"name":"MySQL","_id":"ckqjatom40029qkl5zwsq4x6h"},{"name":"Linux","_id":"ckqjatoma002iqkl5gezf0bph"},{"name":"Tomcat","_id":"ckqjatomh002rqkl5nh2td1u7"},{"name":"Oracle","_id":"ckqjatomo0030qkl51460n165"},{"name":"WEB","_id":"ckqjatoms0036qkl5r5ljmxld"},{"name":"心得体会","_id":"ckqjatomw003aqkl59fzlusba"},{"name":"Eclipse","_id":"ckqjaton7003hqkl52wwz0czi"},{"name":"Other","_id":"ckqjatond003mqkl5piv5y9le"},{"name":"培训文档","_id":"ckqjatonk003rqkl56lm897s0"},{"name":"BSF","_id":"ckqjatonr0041qkl5bxb03jm0"},{"name":"系统集成项目管理","_id":"ckqjatonv0047qkl508rz08aq"},{"name":"VMware","_id":"ckqjatoof004vqkl5xmhv9dxp"}],"Data":[],"Page":[],"Post":[{"title":"100个为什么","date":"2021-03-20T14:48:20.000Z","comments":1,"toc":true,"_content":"\n## CPU执行的第一条指令是什么\n引导指令，将操作系统加载到内存中\n当用户启动计算机的电源时，计算机硬件会自动产生一个中断信号，这个中断信号触发计算机处理器（CPU）中的一段指令执行。该段指令的执行结果将是发现外部存储设备中操作系统引导区（boot block）的位置。如果已经安装了操作系统，则操作系统引导区中的代码将被自动导入计算机的内存，并开始执行。引导区代码的执行结果是将操作系统程序加载到计算机内存中的指定区域，并初始化计算机的有关硬件，例如存储器，终端设备，以及各种计算机运行所需的数据结果等。至此操作系统程序开始启动，并未用户提供相应的用户界面，开始提供各种服务\n\n<!--more-->\n\n## 为什么创建进程是个耗时间和资源的操作\n首先需要为进程创建PCB和内存分配还有资源的分配。\n\n## 为什么创建线程是轻量级操作\n同进程下的线程可以共享代码，数据、资源。\n\n## 为什么系统调用比较耗时\n从用户态到内核态转换，需要保存用户态程序运行过程的现场，内核态的数据准备带来了一定资源的浪费。然后再从内核态回到用户态也需要通过一定的系统中断或者通知。这些由服务程序运行带来的时间消化。\n\n## 为什么操作系统同步指令TestAndSet 和swap 原子操作在多CPU下执行也不会存在问题\n因为是又操作系统实现的原子操作，就表示执行过程当中不可被中断。目前在多CPU下通常是通过锁总线，在执行testAndSet的时候锁主总线，执行完了以后再释放总线\n\n## CPU如何知道操作数中是立即数还是内存地址？\n操作数是地址还是立即数对应的操作码是不一样的，我们写汇编代码使用的操作码都是同一个那是因为汇编器帮我们做了处理\n\n## OS进程调度（CPU执行用户程序如何切回OS调度程序）\nlinux是分时系统，操作系统会为每个进程分配一个时间片，程序执行一个时间片后，操作系统会重新选择一个任务来执行，问题的关键是CPU是怎么知道时间片到了，又是如何触发任务选择？\n（时钟中断）关键原理是CPU有个外部时钟，这是一个倒数计时器，初始时会设置一个数字，比如1000，然后每个时钟秒冲数字会减一，减到0的时候，就会给CPU发送一个信号，CPU会中断当前程序，来处理这个信号，这个信号的处理程序会重置计时器，并执行信号处理函数，如此反复，起到了时间分片的效果。信号处理函数可能会重新选择另一个任务来执行，这就是进程切换。\n\n## 多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\n（设置内存路障）对系统总线加锁起路障作用\n\n## 通过逻辑门如何实现加法？\n对二进制计算分两步第一步求和运行，第二步进位运算。\n对于求和直接输出，进位作为下一个求和的输入\n\n## CPU使用率是如何计算的？\n非空闲进程运行的时间/时间间隔\n\n## CPU空闲含义？\n空闲进程（对Linux系统来说即0号任务）\n\n## 如何才能让CPU休眠\nCPU休眠状态：\n1、C0-活动：CPU正在运行\n2、C1-自动停止：核心时钟关闭。处理器没有执行指令，但可以几乎瞬间返回到执行状态\n3、C2-停止时钟：核心和总线时钟关闭，处理器维护所有软件可见状态，但需要更长时间才能唤醒\n4、C3-深度睡眠：时钟发生器关闭\n\n## CPU如何知道一条指令的长度\n指令格式分为：操作码 和操作数\n首先指令的操作码长度是确定的。CPU执行指令分为三个过程，取指—译指—执行。首先CPU从内存中获取操作码-然后CPU会根据指令操作码判断操作数的长度。操作码的长度+操作数的长度=指令的长度。\n\n## CPU从内存中根据地址获取数据如何知道一次获取多少个字节\n指令的操作码就决定了操作数的长度\n\n## 进程执行完所有代码后如何自动退出\n可执行文件由编译器生成ELF（可执行可链接格式）格式，\n会在程序的前后会自动插入一些代码_start,_exit。 _start才是程序的真正入口，而main函数是被_start调用的。在调用main返回后调用_exit函数结束当前进程。main的返回值会做_exit函数的参数，（gcc在编译和连接时会自动加上exit调用）\n\n\n## 中断服务过程\n当CPU接收到中断请求同时也会得到中断向量，中断向量就是中断向量表中的偏移值（索引），CPU会根据IDTR得到中断描述表的基地址然后根据中断向量，得到中断描述符。中断描述符中包含了段选择符以及过程偏移入口。（段选择符一般是内核的代码段，因为中断服务程序位于内核代码段中，选择符由三部分构成（描述符索引（处理器会*8，因为描述都是占8字节64位的），描述符在GDT中还是LDT中的一位标记，还有请求特权级别，描述符））。处理器会根据段选择符的RPL与段描述符中的DPL进行比较如果权限允许会将段选择符加载到对应的段寄存器中一般是（CS）。接着根据中断描述符中的偏移值设置EIP执行中断服务程序。在执行前处理器会吧原SS、ESP、FLAGES、CS、EIP保存到被中断任务的内核栈中。\n\n## 内存管理为啥要使用多级页表，使用一个页表不行吗？\n使用多级页表能节省空间，做到运行时动态分配。在32位系统中如果使用一个页表表示4G空间，那页表所占的空间为4M连续空间。\n\n## 在开启包含模式下对内存的访问是否会都会经过MMU\n是的，所有的内存访问都会经过MMU的转换。包括内核对内存的访问。内核对内存的访问具有特殊性，原因在于内核代码的逻辑地址与物理地址一一对应，实现的方法就是将内核的代码段、数据端基地址设置为0，limit设置成主存最大值（低版本，v1以下实现方式）。\n\n## 页目录基址是CR3,当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\n系统0号进程cr3与内核cr3是相同的。所有的进程都是通过0号进程复制过来的，是0号进程的子进程或子子进程。在调用fork的时候会把内存结构包括页表都会复制一份相同。所以内核的页表与进程中的页表是一直的（内核部分）。\n\n## 为什么需要栈？\n第一：由于寄存器数量有限，而程序中局部变量数量可能会很多，而对于局部变量我们只关心他的值与取值方便，如果把局部变量放到主存中，势必对于这个访存操作都需要记录他的存储地址。与我们所想有别。\n第二：对于函数调用也提供了遍历，函数调用本质是从一个内存地址跳转到另一个地址，但是还得返回到原理地址的下一个地址。对于这种操作在没有使用栈的解决方案是需要通过一个标签定义在调用方法的下方，这种方法对程序的维护性很困难。\n\n## 为什么需要引导扇区？\nBIOS是一种通用的例程，而我们的操作系统是大小实现方式都不一样，为了实现把我们的操作系统加载到主存中。我们需要提供一个中间层，BIOS加载引导扇区512字节（一个扇区）的数据，而引导扇区加载我们的操作（引导扇区就提供了我们的自定义就相当于一个桥梁）。\n\n## 从实模式切换到保护模式时需要注意什么？\n本质是从16位实模式切换到32为保护模式，CPU是流水线处理，在同一时刻，有的电路在执行指令，有的电路是在解析指令，有的电路是在取指令，当我们在执行切换指令后对于正在取值和解析指令的操作都将无效（因为它们是在16为模式的基础上）所以我们需要使它们的操作无效，需要执行一个长跳，\n\n## 中断号与中断向量\n中断号时物理的是中断芯片上的引脚，中断向量是对应程序上了，可以通过编程修改中断号与中断向量的映射\n\n## cgroups是什么，有什么用。\ncgroups 全称control groups，为每种可以控制的的资源定义一个子系统，\n可以限制单个或多个进程所使用的资源的机制。例如一个即部署了前端的Web服务，也部署了后端计算模块在八核的服务器上，可以使用cgroups限制前端web服务使用其中的六个核，把剩下的2个核留个后端计算模块\n\n\n## volatile的作用。\n1、禁止编译器优化对指令进行重排序，禁止CPU执行对指令进行重排序。\n2、起到内存屏障作用，保证了数据的修改对所有CPU可见，对修改的数据，先从内存中加载到缓存，对写完的数据在在从缓存中立即冲刷到内存。\n```\nint i = 0;              \nboolean flag = false;\ni = 1;                //语句1  \nflag = true;          //语句2\n```\n语句2可能会在语句1之前执行\n重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。\n\n下面展示标准的DCL（double-checked locking）单例代码\n```java\npublic class Singleton {\n  private volatile static Singleton instance;\n  public static Singleton getInstance() {\n    if(instance==null) {\n      synchronized (Singleton.class) {\n        if(instance==null) {\n          instance = new Singleton();\n        }\n      }\n    }\n    return instance;\n  }\n}\n```\n第7行“instance = new Singleton()”可以简单的拆分\n1、分配内存空间\n2、初始对象\n3、将内存地址赋值给变量\n2和3可能会被处理器优化，发生重排序，3将在2之前执行，另一个线程判断instance!=null然后得到一个不完整没有初始化好的实例可能会引发异常\n\n## volatile关键字是如何防止指令重排的\n被volatile修饰的变量编译后在赋值后多执行了一个“lock addl $0x0,(%esp)”操作，这个操作相当于一个内存屏障（指重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；但如果有两个或更多CPU访问同一块内存，且其中有一个在观测另一个，就需要内存屏障来保证一致性。这句指令中“ addl $0x0,(%esp)”把ESP寄存器的值加0显然是一个空操作（采用这个空操作而不是空操作指令nop是因为IA32手册规定lock前缀不允许配合nop指令使用），关键在于lock前缀，查询IA32手册，它的作用是是的本CPU的Cache写入内存，该写入动作也会引起别的CPU或者别的内核无效化其Cache，这种操作相当于对Cache中的变量做了一次Store和write操作。所以通过这样一个空操作，可让前面的volatile变量修改对其他CPU立即可见。\n\nCPU执行速度与访存的速度高几个数量级——》引入缓存——》缓存一致性协议——》缓存一致性带来的同步开销——》引入Store Buffer和Invalid Queue——》异步造成的访存重排序——》引入内存屏障\n\n## 为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\n问题1：如果刚好执行赋值以后发送了中断，没有执行lock指令\n答：根据x86规定，在发生中断的时候需要执行完当前指令之前的所有指令\n问题2：\n1、CPU0执行mov eax,0x68(%rsi) 变量赋值\n2、CPU1执行mov 0x68(%rsi),eax 加载变量\n\n\n\n## synchronized能防止指令重排吗？\n可以\n有序性：java程序中天然有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。\njava提供volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”，这条规定则决定了持有同一个锁的两个同步块只能串行进入。\n\n\n## synchronized实现原理\n1、无法强制已获取锁的线程释放锁。\n2、无法强制正在等待锁的线程中断等待或超时退出。\n3、非公平的，任何一个等待锁的线程都有机会获得锁\n\n膨胀方向是：无锁——>偏向锁——>轻量级锁——>重量级锁。膨胀方向不可逆\n\n## ReentrantLock\n1、等待可中断\n2、公平锁（默认非公平，可以通过带boolean参数的构造函数要求使用公平锁，不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量）\n3、锁绑定多个条件\n\n\n\n\n\n\n","source":"_posts/100个为什么.md","raw":"---\ntitle: 100个为什么\ndate: 2021-03-20 22:48:20\ncomments: true \ncategories: 操作系统\ntoc: true\n---\n\n## CPU执行的第一条指令是什么\n引导指令，将操作系统加载到内存中\n当用户启动计算机的电源时，计算机硬件会自动产生一个中断信号，这个中断信号触发计算机处理器（CPU）中的一段指令执行。该段指令的执行结果将是发现外部存储设备中操作系统引导区（boot block）的位置。如果已经安装了操作系统，则操作系统引导区中的代码将被自动导入计算机的内存，并开始执行。引导区代码的执行结果是将操作系统程序加载到计算机内存中的指定区域，并初始化计算机的有关硬件，例如存储器，终端设备，以及各种计算机运行所需的数据结果等。至此操作系统程序开始启动，并未用户提供相应的用户界面，开始提供各种服务\n\n<!--more-->\n\n## 为什么创建进程是个耗时间和资源的操作\n首先需要为进程创建PCB和内存分配还有资源的分配。\n\n## 为什么创建线程是轻量级操作\n同进程下的线程可以共享代码，数据、资源。\n\n## 为什么系统调用比较耗时\n从用户态到内核态转换，需要保存用户态程序运行过程的现场，内核态的数据准备带来了一定资源的浪费。然后再从内核态回到用户态也需要通过一定的系统中断或者通知。这些由服务程序运行带来的时间消化。\n\n## 为什么操作系统同步指令TestAndSet 和swap 原子操作在多CPU下执行也不会存在问题\n因为是又操作系统实现的原子操作，就表示执行过程当中不可被中断。目前在多CPU下通常是通过锁总线，在执行testAndSet的时候锁主总线，执行完了以后再释放总线\n\n## CPU如何知道操作数中是立即数还是内存地址？\n操作数是地址还是立即数对应的操作码是不一样的，我们写汇编代码使用的操作码都是同一个那是因为汇编器帮我们做了处理\n\n## OS进程调度（CPU执行用户程序如何切回OS调度程序）\nlinux是分时系统，操作系统会为每个进程分配一个时间片，程序执行一个时间片后，操作系统会重新选择一个任务来执行，问题的关键是CPU是怎么知道时间片到了，又是如何触发任务选择？\n（时钟中断）关键原理是CPU有个外部时钟，这是一个倒数计时器，初始时会设置一个数字，比如1000，然后每个时钟秒冲数字会减一，减到0的时候，就会给CPU发送一个信号，CPU会中断当前程序，来处理这个信号，这个信号的处理程序会重置计时器，并执行信号处理函数，如此反复，起到了时间分片的效果。信号处理函数可能会重新选择另一个任务来执行，这就是进程切换。\n\n## 多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\n（设置内存路障）对系统总线加锁起路障作用\n\n## 通过逻辑门如何实现加法？\n对二进制计算分两步第一步求和运行，第二步进位运算。\n对于求和直接输出，进位作为下一个求和的输入\n\n## CPU使用率是如何计算的？\n非空闲进程运行的时间/时间间隔\n\n## CPU空闲含义？\n空闲进程（对Linux系统来说即0号任务）\n\n## 如何才能让CPU休眠\nCPU休眠状态：\n1、C0-活动：CPU正在运行\n2、C1-自动停止：核心时钟关闭。处理器没有执行指令，但可以几乎瞬间返回到执行状态\n3、C2-停止时钟：核心和总线时钟关闭，处理器维护所有软件可见状态，但需要更长时间才能唤醒\n4、C3-深度睡眠：时钟发生器关闭\n\n## CPU如何知道一条指令的长度\n指令格式分为：操作码 和操作数\n首先指令的操作码长度是确定的。CPU执行指令分为三个过程，取指—译指—执行。首先CPU从内存中获取操作码-然后CPU会根据指令操作码判断操作数的长度。操作码的长度+操作数的长度=指令的长度。\n\n## CPU从内存中根据地址获取数据如何知道一次获取多少个字节\n指令的操作码就决定了操作数的长度\n\n## 进程执行完所有代码后如何自动退出\n可执行文件由编译器生成ELF（可执行可链接格式）格式，\n会在程序的前后会自动插入一些代码_start,_exit。 _start才是程序的真正入口，而main函数是被_start调用的。在调用main返回后调用_exit函数结束当前进程。main的返回值会做_exit函数的参数，（gcc在编译和连接时会自动加上exit调用）\n\n\n## 中断服务过程\n当CPU接收到中断请求同时也会得到中断向量，中断向量就是中断向量表中的偏移值（索引），CPU会根据IDTR得到中断描述表的基地址然后根据中断向量，得到中断描述符。中断描述符中包含了段选择符以及过程偏移入口。（段选择符一般是内核的代码段，因为中断服务程序位于内核代码段中，选择符由三部分构成（描述符索引（处理器会*8，因为描述都是占8字节64位的），描述符在GDT中还是LDT中的一位标记，还有请求特权级别，描述符））。处理器会根据段选择符的RPL与段描述符中的DPL进行比较如果权限允许会将段选择符加载到对应的段寄存器中一般是（CS）。接着根据中断描述符中的偏移值设置EIP执行中断服务程序。在执行前处理器会吧原SS、ESP、FLAGES、CS、EIP保存到被中断任务的内核栈中。\n\n## 内存管理为啥要使用多级页表，使用一个页表不行吗？\n使用多级页表能节省空间，做到运行时动态分配。在32位系统中如果使用一个页表表示4G空间，那页表所占的空间为4M连续空间。\n\n## 在开启包含模式下对内存的访问是否会都会经过MMU\n是的，所有的内存访问都会经过MMU的转换。包括内核对内存的访问。内核对内存的访问具有特殊性，原因在于内核代码的逻辑地址与物理地址一一对应，实现的方法就是将内核的代码段、数据端基地址设置为0，limit设置成主存最大值（低版本，v1以下实现方式）。\n\n## 页目录基址是CR3,当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\n系统0号进程cr3与内核cr3是相同的。所有的进程都是通过0号进程复制过来的，是0号进程的子进程或子子进程。在调用fork的时候会把内存结构包括页表都会复制一份相同。所以内核的页表与进程中的页表是一直的（内核部分）。\n\n## 为什么需要栈？\n第一：由于寄存器数量有限，而程序中局部变量数量可能会很多，而对于局部变量我们只关心他的值与取值方便，如果把局部变量放到主存中，势必对于这个访存操作都需要记录他的存储地址。与我们所想有别。\n第二：对于函数调用也提供了遍历，函数调用本质是从一个内存地址跳转到另一个地址，但是还得返回到原理地址的下一个地址。对于这种操作在没有使用栈的解决方案是需要通过一个标签定义在调用方法的下方，这种方法对程序的维护性很困难。\n\n## 为什么需要引导扇区？\nBIOS是一种通用的例程，而我们的操作系统是大小实现方式都不一样，为了实现把我们的操作系统加载到主存中。我们需要提供一个中间层，BIOS加载引导扇区512字节（一个扇区）的数据，而引导扇区加载我们的操作（引导扇区就提供了我们的自定义就相当于一个桥梁）。\n\n## 从实模式切换到保护模式时需要注意什么？\n本质是从16位实模式切换到32为保护模式，CPU是流水线处理，在同一时刻，有的电路在执行指令，有的电路是在解析指令，有的电路是在取指令，当我们在执行切换指令后对于正在取值和解析指令的操作都将无效（因为它们是在16为模式的基础上）所以我们需要使它们的操作无效，需要执行一个长跳，\n\n## 中断号与中断向量\n中断号时物理的是中断芯片上的引脚，中断向量是对应程序上了，可以通过编程修改中断号与中断向量的映射\n\n## cgroups是什么，有什么用。\ncgroups 全称control groups，为每种可以控制的的资源定义一个子系统，\n可以限制单个或多个进程所使用的资源的机制。例如一个即部署了前端的Web服务，也部署了后端计算模块在八核的服务器上，可以使用cgroups限制前端web服务使用其中的六个核，把剩下的2个核留个后端计算模块\n\n\n## volatile的作用。\n1、禁止编译器优化对指令进行重排序，禁止CPU执行对指令进行重排序。\n2、起到内存屏障作用，保证了数据的修改对所有CPU可见，对修改的数据，先从内存中加载到缓存，对写完的数据在在从缓存中立即冲刷到内存。\n```\nint i = 0;              \nboolean flag = false;\ni = 1;                //语句1  \nflag = true;          //语句2\n```\n语句2可能会在语句1之前执行\n重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。\n\n下面展示标准的DCL（double-checked locking）单例代码\n```java\npublic class Singleton {\n  private volatile static Singleton instance;\n  public static Singleton getInstance() {\n    if(instance==null) {\n      synchronized (Singleton.class) {\n        if(instance==null) {\n          instance = new Singleton();\n        }\n      }\n    }\n    return instance;\n  }\n}\n```\n第7行“instance = new Singleton()”可以简单的拆分\n1、分配内存空间\n2、初始对象\n3、将内存地址赋值给变量\n2和3可能会被处理器优化，发生重排序，3将在2之前执行，另一个线程判断instance!=null然后得到一个不完整没有初始化好的实例可能会引发异常\n\n## volatile关键字是如何防止指令重排的\n被volatile修饰的变量编译后在赋值后多执行了一个“lock addl $0x0,(%esp)”操作，这个操作相当于一个内存屏障（指重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；但如果有两个或更多CPU访问同一块内存，且其中有一个在观测另一个，就需要内存屏障来保证一致性。这句指令中“ addl $0x0,(%esp)”把ESP寄存器的值加0显然是一个空操作（采用这个空操作而不是空操作指令nop是因为IA32手册规定lock前缀不允许配合nop指令使用），关键在于lock前缀，查询IA32手册，它的作用是是的本CPU的Cache写入内存，该写入动作也会引起别的CPU或者别的内核无效化其Cache，这种操作相当于对Cache中的变量做了一次Store和write操作。所以通过这样一个空操作，可让前面的volatile变量修改对其他CPU立即可见。\n\nCPU执行速度与访存的速度高几个数量级——》引入缓存——》缓存一致性协议——》缓存一致性带来的同步开销——》引入Store Buffer和Invalid Queue——》异步造成的访存重排序——》引入内存屏障\n\n## 为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\n问题1：如果刚好执行赋值以后发送了中断，没有执行lock指令\n答：根据x86规定，在发生中断的时候需要执行完当前指令之前的所有指令\n问题2：\n1、CPU0执行mov eax,0x68(%rsi) 变量赋值\n2、CPU1执行mov 0x68(%rsi),eax 加载变量\n\n\n\n## synchronized能防止指令重排吗？\n可以\n有序性：java程序中天然有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。\njava提供volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”，这条规定则决定了持有同一个锁的两个同步块只能串行进入。\n\n\n## synchronized实现原理\n1、无法强制已获取锁的线程释放锁。\n2、无法强制正在等待锁的线程中断等待或超时退出。\n3、非公平的，任何一个等待锁的线程都有机会获得锁\n\n膨胀方向是：无锁——>偏向锁——>轻量级锁——>重量级锁。膨胀方向不可逆\n\n## ReentrantLock\n1、等待可中断\n2、公平锁（默认非公平，可以通过带boolean参数的构造函数要求使用公平锁，不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量）\n3、锁绑定多个条件\n\n\n\n\n\n\n","slug":"100个为什么","published":1,"updated":"2021-07-26T04:05:03.586Z","_id":"ckqjatojm0000qkl5l9mn6mtz","layout":"post","photos":[],"link":"","content":"<h2 id=\"CPU执行的第一条指令是什么\"><a href=\"#CPU执行的第一条指令是什么\" class=\"headerlink\" title=\"CPU执行的第一条指令是什么\"></a>CPU执行的第一条指令是什么</h2><p>引导指令，将操作系统加载到内存中<br>当用户启动计算机的电源时，计算机硬件会自动产生一个中断信号，这个中断信号触发计算机处理器（CPU）中的一段指令执行。该段指令的执行结果将是发现外部存储设备中操作系统引导区（boot block）的位置。如果已经安装了操作系统，则操作系统引导区中的代码将被自动导入计算机的内存，并开始执行。引导区代码的执行结果是将操作系统程序加载到计算机内存中的指定区域，并初始化计算机的有关硬件，例如存储器，终端设备，以及各种计算机运行所需的数据结果等。至此操作系统程序开始启动，并未用户提供相应的用户界面，开始提供各种服务</p>\n<a id=\"more\"></a>\n<h2 id=\"为什么创建进程是个耗时间和资源的操作\"><a href=\"#为什么创建进程是个耗时间和资源的操作\" class=\"headerlink\" title=\"为什么创建进程是个耗时间和资源的操作\"></a>为什么创建进程是个耗时间和资源的操作</h2><p>首先需要为进程创建PCB和内存分配还有资源的分配。</p>\n<h2 id=\"为什么创建线程是轻量级操作\"><a href=\"#为什么创建线程是轻量级操作\" class=\"headerlink\" title=\"为什么创建线程是轻量级操作\"></a>为什么创建线程是轻量级操作</h2><p>同进程下的线程可以共享代码，数据、资源。</p>\n<h2 id=\"为什么系统调用比较耗时\"><a href=\"#为什么系统调用比较耗时\" class=\"headerlink\" title=\"为什么系统调用比较耗时\"></a>为什么系统调用比较耗时</h2><p>从用户态到内核态转换，需要保存用户态程序运行过程的现场，内核态的数据准备带来了一定资源的浪费。然后再从内核态回到用户态也需要通过一定的系统中断或者通知。这些由服务程序运行带来的时间消化。</p>\n<h2 id=\"为什么操作系统同步指令TestAndSet-和swap-原子操作在多CPU下执行也不会存在问题\"><a href=\"#为什么操作系统同步指令TestAndSet-和swap-原子操作在多CPU下执行也不会存在问题\" class=\"headerlink\" title=\"为什么操作系统同步指令TestAndSet 和swap 原子操作在多CPU下执行也不会存在问题\"></a>为什么操作系统同步指令TestAndSet 和swap 原子操作在多CPU下执行也不会存在问题</h2><p>因为是又操作系统实现的原子操作，就表示执行过程当中不可被中断。目前在多CPU下通常是通过锁总线，在执行testAndSet的时候锁主总线，执行完了以后再释放总线</p>\n<h2 id=\"CPU如何知道操作数中是立即数还是内存地址？\"><a href=\"#CPU如何知道操作数中是立即数还是内存地址？\" class=\"headerlink\" title=\"CPU如何知道操作数中是立即数还是内存地址？\"></a>CPU如何知道操作数中是立即数还是内存地址？</h2><p>操作数是地址还是立即数对应的操作码是不一样的，我们写汇编代码使用的操作码都是同一个那是因为汇编器帮我们做了处理</p>\n<h2 id=\"OS进程调度（CPU执行用户程序如何切回OS调度程序）\"><a href=\"#OS进程调度（CPU执行用户程序如何切回OS调度程序）\" class=\"headerlink\" title=\"OS进程调度（CPU执行用户程序如何切回OS调度程序）\"></a>OS进程调度（CPU执行用户程序如何切回OS调度程序）</h2><p>linux是分时系统，操作系统会为每个进程分配一个时间片，程序执行一个时间片后，操作系统会重新选择一个任务来执行，问题的关键是CPU是怎么知道时间片到了，又是如何触发任务选择？<br>（时钟中断）关键原理是CPU有个外部时钟，这是一个倒数计时器，初始时会设置一个数字，比如1000，然后每个时钟秒冲数字会减一，减到0的时候，就会给CPU发送一个信号，CPU会中断当前程序，来处理这个信号，这个信号的处理程序会重置计时器，并执行信号处理函数，如此反复，起到了时间分片的效果。信号处理函数可能会重新选择另一个任务来执行，这就是进程切换。</p>\n<h2 id=\"多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\"><a href=\"#多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\" class=\"headerlink\" title=\"多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\"></a>多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？</h2><p>（设置内存路障）对系统总线加锁起路障作用</p>\n<h2 id=\"通过逻辑门如何实现加法？\"><a href=\"#通过逻辑门如何实现加法？\" class=\"headerlink\" title=\"通过逻辑门如何实现加法？\"></a>通过逻辑门如何实现加法？</h2><p>对二进制计算分两步第一步求和运行，第二步进位运算。<br>对于求和直接输出，进位作为下一个求和的输入</p>\n<h2 id=\"CPU使用率是如何计算的？\"><a href=\"#CPU使用率是如何计算的？\" class=\"headerlink\" title=\"CPU使用率是如何计算的？\"></a>CPU使用率是如何计算的？</h2><p>非空闲进程运行的时间/时间间隔</p>\n<h2 id=\"CPU空闲含义？\"><a href=\"#CPU空闲含义？\" class=\"headerlink\" title=\"CPU空闲含义？\"></a>CPU空闲含义？</h2><p>空闲进程（对Linux系统来说即0号任务）</p>\n<h2 id=\"如何才能让CPU休眠\"><a href=\"#如何才能让CPU休眠\" class=\"headerlink\" title=\"如何才能让CPU休眠\"></a>如何才能让CPU休眠</h2><p>CPU休眠状态：<br>1、C0-活动：CPU正在运行<br>2、C1-自动停止：核心时钟关闭。处理器没有执行指令，但可以几乎瞬间返回到执行状态<br>3、C2-停止时钟：核心和总线时钟关闭，处理器维护所有软件可见状态，但需要更长时间才能唤醒<br>4、C3-深度睡眠：时钟发生器关闭</p>\n<h2 id=\"CPU如何知道一条指令的长度\"><a href=\"#CPU如何知道一条指令的长度\" class=\"headerlink\" title=\"CPU如何知道一条指令的长度\"></a>CPU如何知道一条指令的长度</h2><p>指令格式分为：操作码 和操作数<br>首先指令的操作码长度是确定的。CPU执行指令分为三个过程，取指—译指—执行。首先CPU从内存中获取操作码-然后CPU会根据指令操作码判断操作数的长度。操作码的长度+操作数的长度=指令的长度。</p>\n<h2 id=\"CPU从内存中根据地址获取数据如何知道一次获取多少个字节\"><a href=\"#CPU从内存中根据地址获取数据如何知道一次获取多少个字节\" class=\"headerlink\" title=\"CPU从内存中根据地址获取数据如何知道一次获取多少个字节\"></a>CPU从内存中根据地址获取数据如何知道一次获取多少个字节</h2><p>指令的操作码就决定了操作数的长度</p>\n<h2 id=\"进程执行完所有代码后如何自动退出\"><a href=\"#进程执行完所有代码后如何自动退出\" class=\"headerlink\" title=\"进程执行完所有代码后如何自动退出\"></a>进程执行完所有代码后如何自动退出</h2><p>可执行文件由编译器生成ELF（可执行可链接格式）格式，<br>会在程序的前后会自动插入一些代码_start,_exit。 _start才是程序的真正入口，而main函数是被_start调用的。在调用main返回后调用_exit函数结束当前进程。main的返回值会做_exit函数的参数，（gcc在编译和连接时会自动加上exit调用）</p>\n<h2 id=\"中断服务过程\"><a href=\"#中断服务过程\" class=\"headerlink\" title=\"中断服务过程\"></a>中断服务过程</h2><p>当CPU接收到中断请求同时也会得到中断向量，中断向量就是中断向量表中的偏移值（索引），CPU会根据IDTR得到中断描述表的基地址然后根据中断向量，得到中断描述符。中断描述符中包含了段选择符以及过程偏移入口。（段选择符一般是内核的代码段，因为中断服务程序位于内核代码段中，选择符由三部分构成（描述符索引（处理器会*8，因为描述都是占8字节64位的），描述符在GDT中还是LDT中的一位标记，还有请求特权级别，描述符））。处理器会根据段选择符的RPL与段描述符中的DPL进行比较如果权限允许会将段选择符加载到对应的段寄存器中一般是（CS）。接着根据中断描述符中的偏移值设置EIP执行中断服务程序。在执行前处理器会吧原SS、ESP、FLAGES、CS、EIP保存到被中断任务的内核栈中。</p>\n<h2 id=\"内存管理为啥要使用多级页表，使用一个页表不行吗？\"><a href=\"#内存管理为啥要使用多级页表，使用一个页表不行吗？\" class=\"headerlink\" title=\"内存管理为啥要使用多级页表，使用一个页表不行吗？\"></a>内存管理为啥要使用多级页表，使用一个页表不行吗？</h2><p>使用多级页表能节省空间，做到运行时动态分配。在32位系统中如果使用一个页表表示4G空间，那页表所占的空间为4M连续空间。</p>\n<h2 id=\"在开启包含模式下对内存的访问是否会都会经过MMU\"><a href=\"#在开启包含模式下对内存的访问是否会都会经过MMU\" class=\"headerlink\" title=\"在开启包含模式下对内存的访问是否会都会经过MMU\"></a>在开启包含模式下对内存的访问是否会都会经过MMU</h2><p>是的，所有的内存访问都会经过MMU的转换。包括内核对内存的访问。内核对内存的访问具有特殊性，原因在于内核代码的逻辑地址与物理地址一一对应，实现的方法就是将内核的代码段、数据端基地址设置为0，limit设置成主存最大值（低版本，v1以下实现方式）。</p>\n<h2 id=\"页目录基址是CR3-当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\"><a href=\"#页目录基址是CR3-当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\" class=\"headerlink\" title=\"页目录基址是CR3,当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\"></a>页目录基址是CR3,当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。</h2><p>系统0号进程cr3与内核cr3是相同的。所有的进程都是通过0号进程复制过来的，是0号进程的子进程或子子进程。在调用fork的时候会把内存结构包括页表都会复制一份相同。所以内核的页表与进程中的页表是一直的（内核部分）。</p>\n<h2 id=\"为什么需要栈？\"><a href=\"#为什么需要栈？\" class=\"headerlink\" title=\"为什么需要栈？\"></a>为什么需要栈？</h2><p>第一：由于寄存器数量有限，而程序中局部变量数量可能会很多，而对于局部变量我们只关心他的值与取值方便，如果把局部变量放到主存中，势必对于这个访存操作都需要记录他的存储地址。与我们所想有别。<br>第二：对于函数调用也提供了遍历，函数调用本质是从一个内存地址跳转到另一个地址，但是还得返回到原理地址的下一个地址。对于这种操作在没有使用栈的解决方案是需要通过一个标签定义在调用方法的下方，这种方法对程序的维护性很困难。</p>\n<h2 id=\"为什么需要引导扇区？\"><a href=\"#为什么需要引导扇区？\" class=\"headerlink\" title=\"为什么需要引导扇区？\"></a>为什么需要引导扇区？</h2><p>BIOS是一种通用的例程，而我们的操作系统是大小实现方式都不一样，为了实现把我们的操作系统加载到主存中。我们需要提供一个中间层，BIOS加载引导扇区512字节（一个扇区）的数据，而引导扇区加载我们的操作（引导扇区就提供了我们的自定义就相当于一个桥梁）。</p>\n<h2 id=\"从实模式切换到保护模式时需要注意什么？\"><a href=\"#从实模式切换到保护模式时需要注意什么？\" class=\"headerlink\" title=\"从实模式切换到保护模式时需要注意什么？\"></a>从实模式切换到保护模式时需要注意什么？</h2><p>本质是从16位实模式切换到32为保护模式，CPU是流水线处理，在同一时刻，有的电路在执行指令，有的电路是在解析指令，有的电路是在取指令，当我们在执行切换指令后对于正在取值和解析指令的操作都将无效（因为它们是在16为模式的基础上）所以我们需要使它们的操作无效，需要执行一个长跳，</p>\n<h2 id=\"中断号与中断向量\"><a href=\"#中断号与中断向量\" class=\"headerlink\" title=\"中断号与中断向量\"></a>中断号与中断向量</h2><p>中断号时物理的是中断芯片上的引脚，中断向量是对应程序上了，可以通过编程修改中断号与中断向量的映射</p>\n<h2 id=\"cgroups是什么，有什么用。\"><a href=\"#cgroups是什么，有什么用。\" class=\"headerlink\" title=\"cgroups是什么，有什么用。\"></a>cgroups是什么，有什么用。</h2><p>cgroups 全称control groups，为每种可以控制的的资源定义一个子系统，<br>可以限制单个或多个进程所使用的资源的机制。例如一个即部署了前端的Web服务，也部署了后端计算模块在八核的服务器上，可以使用cgroups限制前端web服务使用其中的六个核，把剩下的2个核留个后端计算模块</p>\n<h2 id=\"volatile的作用。\"><a href=\"#volatile的作用。\" class=\"headerlink\" title=\"volatile的作用。\"></a>volatile的作用。</h2><p>1、禁止编译器优化对指令进行重排序，禁止CPU执行对指令进行重排序。<br>2、起到内存屏障作用，保证了数据的修改对所有CPU可见，对修改的数据，先从内存中加载到缓存，对写完的数据在在从缓存中立即冲刷到内存。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 0;              </span><br><span class=\"line\">boolean flag = false;</span><br><span class=\"line\">i = 1;                //语句1  </span><br><span class=\"line\">flag = true;          //语句2</span><br></pre></td></tr></table></figure></p>\n<p>语句2可能会在语句1之前执行<br>重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p>\n<p>下面展示标准的DCL（double-checked locking）单例代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (Singleton<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第7行“instance = new Singleton()”可以简单的拆分<br>1、分配内存空间<br>2、初始对象<br>3、将内存地址赋值给变量<br>2和3可能会被处理器优化，发生重排序，3将在2之前执行，另一个线程判断instance!=null然后得到一个不完整没有初始化好的实例可能会引发异常</p>\n<h2 id=\"volatile关键字是如何防止指令重排的\"><a href=\"#volatile关键字是如何防止指令重排的\" class=\"headerlink\" title=\"volatile关键字是如何防止指令重排的\"></a>volatile关键字是如何防止指令重排的</h2><p>被volatile修饰的变量编译后在赋值后多执行了一个“lock addl $0x0,(%esp)”操作，这个操作相当于一个内存屏障（指重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；但如果有两个或更多CPU访问同一块内存，且其中有一个在观测另一个，就需要内存屏障来保证一致性。这句指令中“ addl $0x0,(%esp)”把ESP寄存器的值加0显然是一个空操作（采用这个空操作而不是空操作指令nop是因为IA32手册规定lock前缀不允许配合nop指令使用），关键在于lock前缀，查询IA32手册，它的作用是是的本CPU的Cache写入内存，该写入动作也会引起别的CPU或者别的内核无效化其Cache，这种操作相当于对Cache中的变量做了一次Store和write操作。所以通过这样一个空操作，可让前面的volatile变量修改对其他CPU立即可见。</p>\n<p>CPU执行速度与访存的速度高几个数量级——》引入缓存——》缓存一致性协议——》缓存一致性带来的同步开销——》引入Store Buffer和Invalid Queue——》异步造成的访存重排序——》引入内存屏障</p>\n<h2 id=\"为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\"><a href=\"#为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\" class=\"headerlink\" title=\"为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\"></a>为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能</h2><p>问题1：如果刚好执行赋值以后发送了中断，没有执行lock指令<br>答：根据x86规定，在发生中断的时候需要执行完当前指令之前的所有指令<br>问题2：<br>1、CPU0执行mov eax,0x68(%rsi) 变量赋值<br>2、CPU1执行mov 0x68(%rsi),eax 加载变量</p>\n<h2 id=\"synchronized能防止指令重排吗？\"><a href=\"#synchronized能防止指令重排吗？\" class=\"headerlink\" title=\"synchronized能防止指令重排吗？\"></a>synchronized能防止指令重排吗？</h2><p>可以<br>有序性：java程序中天然有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。<br>java提供volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”，这条规定则决定了持有同一个锁的两个同步块只能串行进入。</p>\n<h2 id=\"synchronized实现原理\"><a href=\"#synchronized实现原理\" class=\"headerlink\" title=\"synchronized实现原理\"></a>synchronized实现原理</h2><p>1、无法强制已获取锁的线程释放锁。<br>2、无法强制正在等待锁的线程中断等待或超时退出。<br>3、非公平的，任何一个等待锁的线程都有机会获得锁</p>\n<p>膨胀方向是：无锁——&gt;偏向锁——&gt;轻量级锁——&gt;重量级锁。膨胀方向不可逆</p>\n<h2 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h2><p>1、等待可中断<br>2、公平锁（默认非公平，可以通过带boolean参数的构造函数要求使用公平锁，不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量）<br>3、锁绑定多个条件</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CPU执行的第一条指令是什么\"><a href=\"#CPU执行的第一条指令是什么\" class=\"headerlink\" title=\"CPU执行的第一条指令是什么\"></a>CPU执行的第一条指令是什么</h2><p>引导指令，将操作系统加载到内存中<br>当用户启动计算机的电源时，计算机硬件会自动产生一个中断信号，这个中断信号触发计算机处理器（CPU）中的一段指令执行。该段指令的执行结果将是发现外部存储设备中操作系统引导区（boot block）的位置。如果已经安装了操作系统，则操作系统引导区中的代码将被自动导入计算机的内存，并开始执行。引导区代码的执行结果是将操作系统程序加载到计算机内存中的指定区域，并初始化计算机的有关硬件，例如存储器，终端设备，以及各种计算机运行所需的数据结果等。至此操作系统程序开始启动，并未用户提供相应的用户界面，开始提供各种服务</p>","more":"<h2 id=\"为什么创建进程是个耗时间和资源的操作\"><a href=\"#为什么创建进程是个耗时间和资源的操作\" class=\"headerlink\" title=\"为什么创建进程是个耗时间和资源的操作\"></a>为什么创建进程是个耗时间和资源的操作</h2><p>首先需要为进程创建PCB和内存分配还有资源的分配。</p>\n<h2 id=\"为什么创建线程是轻量级操作\"><a href=\"#为什么创建线程是轻量级操作\" class=\"headerlink\" title=\"为什么创建线程是轻量级操作\"></a>为什么创建线程是轻量级操作</h2><p>同进程下的线程可以共享代码，数据、资源。</p>\n<h2 id=\"为什么系统调用比较耗时\"><a href=\"#为什么系统调用比较耗时\" class=\"headerlink\" title=\"为什么系统调用比较耗时\"></a>为什么系统调用比较耗时</h2><p>从用户态到内核态转换，需要保存用户态程序运行过程的现场，内核态的数据准备带来了一定资源的浪费。然后再从内核态回到用户态也需要通过一定的系统中断或者通知。这些由服务程序运行带来的时间消化。</p>\n<h2 id=\"为什么操作系统同步指令TestAndSet-和swap-原子操作在多CPU下执行也不会存在问题\"><a href=\"#为什么操作系统同步指令TestAndSet-和swap-原子操作在多CPU下执行也不会存在问题\" class=\"headerlink\" title=\"为什么操作系统同步指令TestAndSet 和swap 原子操作在多CPU下执行也不会存在问题\"></a>为什么操作系统同步指令TestAndSet 和swap 原子操作在多CPU下执行也不会存在问题</h2><p>因为是又操作系统实现的原子操作，就表示执行过程当中不可被中断。目前在多CPU下通常是通过锁总线，在执行testAndSet的时候锁主总线，执行完了以后再释放总线</p>\n<h2 id=\"CPU如何知道操作数中是立即数还是内存地址？\"><a href=\"#CPU如何知道操作数中是立即数还是内存地址？\" class=\"headerlink\" title=\"CPU如何知道操作数中是立即数还是内存地址？\"></a>CPU如何知道操作数中是立即数还是内存地址？</h2><p>操作数是地址还是立即数对应的操作码是不一样的，我们写汇编代码使用的操作码都是同一个那是因为汇编器帮我们做了处理</p>\n<h2 id=\"OS进程调度（CPU执行用户程序如何切回OS调度程序）\"><a href=\"#OS进程调度（CPU执行用户程序如何切回OS调度程序）\" class=\"headerlink\" title=\"OS进程调度（CPU执行用户程序如何切回OS调度程序）\"></a>OS进程调度（CPU执行用户程序如何切回OS调度程序）</h2><p>linux是分时系统，操作系统会为每个进程分配一个时间片，程序执行一个时间片后，操作系统会重新选择一个任务来执行，问题的关键是CPU是怎么知道时间片到了，又是如何触发任务选择？<br>（时钟中断）关键原理是CPU有个外部时钟，这是一个倒数计时器，初始时会设置一个数字，比如1000，然后每个时钟秒冲数字会减一，减到0的时候，就会给CPU发送一个信号，CPU会中断当前程序，来处理这个信号，这个信号的处理程序会重置计时器，并执行信号处理函数，如此反复，起到了时间分片的效果。信号处理函数可能会重新选择另一个任务来执行，这就是进程切换。</p>\n<h2 id=\"多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\"><a href=\"#多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\" class=\"headerlink\" title=\"多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？\"></a>多处理器（CPU）体系架构如何实现程序的同步执行（互斥）？</h2><p>（设置内存路障）对系统总线加锁起路障作用</p>\n<h2 id=\"通过逻辑门如何实现加法？\"><a href=\"#通过逻辑门如何实现加法？\" class=\"headerlink\" title=\"通过逻辑门如何实现加法？\"></a>通过逻辑门如何实现加法？</h2><p>对二进制计算分两步第一步求和运行，第二步进位运算。<br>对于求和直接输出，进位作为下一个求和的输入</p>\n<h2 id=\"CPU使用率是如何计算的？\"><a href=\"#CPU使用率是如何计算的？\" class=\"headerlink\" title=\"CPU使用率是如何计算的？\"></a>CPU使用率是如何计算的？</h2><p>非空闲进程运行的时间/时间间隔</p>\n<h2 id=\"CPU空闲含义？\"><a href=\"#CPU空闲含义？\" class=\"headerlink\" title=\"CPU空闲含义？\"></a>CPU空闲含义？</h2><p>空闲进程（对Linux系统来说即0号任务）</p>\n<h2 id=\"如何才能让CPU休眠\"><a href=\"#如何才能让CPU休眠\" class=\"headerlink\" title=\"如何才能让CPU休眠\"></a>如何才能让CPU休眠</h2><p>CPU休眠状态：<br>1、C0-活动：CPU正在运行<br>2、C1-自动停止：核心时钟关闭。处理器没有执行指令，但可以几乎瞬间返回到执行状态<br>3、C2-停止时钟：核心和总线时钟关闭，处理器维护所有软件可见状态，但需要更长时间才能唤醒<br>4、C3-深度睡眠：时钟发生器关闭</p>\n<h2 id=\"CPU如何知道一条指令的长度\"><a href=\"#CPU如何知道一条指令的长度\" class=\"headerlink\" title=\"CPU如何知道一条指令的长度\"></a>CPU如何知道一条指令的长度</h2><p>指令格式分为：操作码 和操作数<br>首先指令的操作码长度是确定的。CPU执行指令分为三个过程，取指—译指—执行。首先CPU从内存中获取操作码-然后CPU会根据指令操作码判断操作数的长度。操作码的长度+操作数的长度=指令的长度。</p>\n<h2 id=\"CPU从内存中根据地址获取数据如何知道一次获取多少个字节\"><a href=\"#CPU从内存中根据地址获取数据如何知道一次获取多少个字节\" class=\"headerlink\" title=\"CPU从内存中根据地址获取数据如何知道一次获取多少个字节\"></a>CPU从内存中根据地址获取数据如何知道一次获取多少个字节</h2><p>指令的操作码就决定了操作数的长度</p>\n<h2 id=\"进程执行完所有代码后如何自动退出\"><a href=\"#进程执行完所有代码后如何自动退出\" class=\"headerlink\" title=\"进程执行完所有代码后如何自动退出\"></a>进程执行完所有代码后如何自动退出</h2><p>可执行文件由编译器生成ELF（可执行可链接格式）格式，<br>会在程序的前后会自动插入一些代码_start,_exit。 _start才是程序的真正入口，而main函数是被_start调用的。在调用main返回后调用_exit函数结束当前进程。main的返回值会做_exit函数的参数，（gcc在编译和连接时会自动加上exit调用）</p>\n<h2 id=\"中断服务过程\"><a href=\"#中断服务过程\" class=\"headerlink\" title=\"中断服务过程\"></a>中断服务过程</h2><p>当CPU接收到中断请求同时也会得到中断向量，中断向量就是中断向量表中的偏移值（索引），CPU会根据IDTR得到中断描述表的基地址然后根据中断向量，得到中断描述符。中断描述符中包含了段选择符以及过程偏移入口。（段选择符一般是内核的代码段，因为中断服务程序位于内核代码段中，选择符由三部分构成（描述符索引（处理器会*8，因为描述都是占8字节64位的），描述符在GDT中还是LDT中的一位标记，还有请求特权级别，描述符））。处理器会根据段选择符的RPL与段描述符中的DPL进行比较如果权限允许会将段选择符加载到对应的段寄存器中一般是（CS）。接着根据中断描述符中的偏移值设置EIP执行中断服务程序。在执行前处理器会吧原SS、ESP、FLAGES、CS、EIP保存到被中断任务的内核栈中。</p>\n<h2 id=\"内存管理为啥要使用多级页表，使用一个页表不行吗？\"><a href=\"#内存管理为啥要使用多级页表，使用一个页表不行吗？\" class=\"headerlink\" title=\"内存管理为啥要使用多级页表，使用一个页表不行吗？\"></a>内存管理为啥要使用多级页表，使用一个页表不行吗？</h2><p>使用多级页表能节省空间，做到运行时动态分配。在32位系统中如果使用一个页表表示4G空间，那页表所占的空间为4M连续空间。</p>\n<h2 id=\"在开启包含模式下对内存的访问是否会都会经过MMU\"><a href=\"#在开启包含模式下对内存的访问是否会都会经过MMU\" class=\"headerlink\" title=\"在开启包含模式下对内存的访问是否会都会经过MMU\"></a>在开启包含模式下对内存的访问是否会都会经过MMU</h2><p>是的，所有的内存访问都会经过MMU的转换。包括内核对内存的访问。内核对内存的访问具有特殊性，原因在于内核代码的逻辑地址与物理地址一一对应，实现的方法就是将内核的代码段、数据端基地址设置为0，limit设置成主存最大值（低版本，v1以下实现方式）。</p>\n<h2 id=\"页目录基址是CR3-当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\"><a href=\"#页目录基址是CR3-当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\" class=\"headerlink\" title=\"页目录基址是CR3,当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。\"></a>页目录基址是CR3,当用户进程系统调用陷入内核，是否会使cr3切换到内核页表。</h2><p>系统0号进程cr3与内核cr3是相同的。所有的进程都是通过0号进程复制过来的，是0号进程的子进程或子子进程。在调用fork的时候会把内存结构包括页表都会复制一份相同。所以内核的页表与进程中的页表是一直的（内核部分）。</p>\n<h2 id=\"为什么需要栈？\"><a href=\"#为什么需要栈？\" class=\"headerlink\" title=\"为什么需要栈？\"></a>为什么需要栈？</h2><p>第一：由于寄存器数量有限，而程序中局部变量数量可能会很多，而对于局部变量我们只关心他的值与取值方便，如果把局部变量放到主存中，势必对于这个访存操作都需要记录他的存储地址。与我们所想有别。<br>第二：对于函数调用也提供了遍历，函数调用本质是从一个内存地址跳转到另一个地址，但是还得返回到原理地址的下一个地址。对于这种操作在没有使用栈的解决方案是需要通过一个标签定义在调用方法的下方，这种方法对程序的维护性很困难。</p>\n<h2 id=\"为什么需要引导扇区？\"><a href=\"#为什么需要引导扇区？\" class=\"headerlink\" title=\"为什么需要引导扇区？\"></a>为什么需要引导扇区？</h2><p>BIOS是一种通用的例程，而我们的操作系统是大小实现方式都不一样，为了实现把我们的操作系统加载到主存中。我们需要提供一个中间层，BIOS加载引导扇区512字节（一个扇区）的数据，而引导扇区加载我们的操作（引导扇区就提供了我们的自定义就相当于一个桥梁）。</p>\n<h2 id=\"从实模式切换到保护模式时需要注意什么？\"><a href=\"#从实模式切换到保护模式时需要注意什么？\" class=\"headerlink\" title=\"从实模式切换到保护模式时需要注意什么？\"></a>从实模式切换到保护模式时需要注意什么？</h2><p>本质是从16位实模式切换到32为保护模式，CPU是流水线处理，在同一时刻，有的电路在执行指令，有的电路是在解析指令，有的电路是在取指令，当我们在执行切换指令后对于正在取值和解析指令的操作都将无效（因为它们是在16为模式的基础上）所以我们需要使它们的操作无效，需要执行一个长跳，</p>\n<h2 id=\"中断号与中断向量\"><a href=\"#中断号与中断向量\" class=\"headerlink\" title=\"中断号与中断向量\"></a>中断号与中断向量</h2><p>中断号时物理的是中断芯片上的引脚，中断向量是对应程序上了，可以通过编程修改中断号与中断向量的映射</p>\n<h2 id=\"cgroups是什么，有什么用。\"><a href=\"#cgroups是什么，有什么用。\" class=\"headerlink\" title=\"cgroups是什么，有什么用。\"></a>cgroups是什么，有什么用。</h2><p>cgroups 全称control groups，为每种可以控制的的资源定义一个子系统，<br>可以限制单个或多个进程所使用的资源的机制。例如一个即部署了前端的Web服务，也部署了后端计算模块在八核的服务器上，可以使用cgroups限制前端web服务使用其中的六个核，把剩下的2个核留个后端计算模块</p>\n<h2 id=\"volatile的作用。\"><a href=\"#volatile的作用。\" class=\"headerlink\" title=\"volatile的作用。\"></a>volatile的作用。</h2><p>1、禁止编译器优化对指令进行重排序，禁止CPU执行对指令进行重排序。<br>2、起到内存屏障作用，保证了数据的修改对所有CPU可见，对修改的数据，先从内存中加载到缓存，对写完的数据在在从缓存中立即冲刷到内存。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 0;              </span><br><span class=\"line\">boolean flag = false;</span><br><span class=\"line\">i = 1;                //语句1  </span><br><span class=\"line\">flag = true;          //语句2</span><br></pre></td></tr></table></figure></p>\n<p>语句2可能会在语句1之前执行<br>重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p>\n<p>下面展示标准的DCL（double-checked locking）单例代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (Singleton<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第7行“instance = new Singleton()”可以简单的拆分<br>1、分配内存空间<br>2、初始对象<br>3、将内存地址赋值给变量<br>2和3可能会被处理器优化，发生重排序，3将在2之前执行，另一个线程判断instance!=null然后得到一个不完整没有初始化好的实例可能会引发异常</p>\n<h2 id=\"volatile关键字是如何防止指令重排的\"><a href=\"#volatile关键字是如何防止指令重排的\" class=\"headerlink\" title=\"volatile关键字是如何防止指令重排的\"></a>volatile关键字是如何防止指令重排的</h2><p>被volatile修饰的变量编译后在赋值后多执行了一个“lock addl $0x0,(%esp)”操作，这个操作相当于一个内存屏障（指重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；但如果有两个或更多CPU访问同一块内存，且其中有一个在观测另一个，就需要内存屏障来保证一致性。这句指令中“ addl $0x0,(%esp)”把ESP寄存器的值加0显然是一个空操作（采用这个空操作而不是空操作指令nop是因为IA32手册规定lock前缀不允许配合nop指令使用），关键在于lock前缀，查询IA32手册，它的作用是是的本CPU的Cache写入内存，该写入动作也会引起别的CPU或者别的内核无效化其Cache，这种操作相当于对Cache中的变量做了一次Store和write操作。所以通过这样一个空操作，可让前面的volatile变量修改对其他CPU立即可见。</p>\n<p>CPU执行速度与访存的速度高几个数量级——》引入缓存——》缓存一致性协议——》缓存一致性带来的同步开销——》引入Store Buffer和Invalid Queue——》异步造成的访存重排序——》引入内存屏障</p>\n<h2 id=\"为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\"><a href=\"#为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\" class=\"headerlink\" title=\"为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能\"></a>为什么volatile变量在赋值后加上lock前缀指令能实现内存屏障功能</h2><p>问题1：如果刚好执行赋值以后发送了中断，没有执行lock指令<br>答：根据x86规定，在发生中断的时候需要执行完当前指令之前的所有指令<br>问题2：<br>1、CPU0执行mov eax,0x68(%rsi) 变量赋值<br>2、CPU1执行mov 0x68(%rsi),eax 加载变量</p>\n<h2 id=\"synchronized能防止指令重排吗？\"><a href=\"#synchronized能防止指令重排吗？\" class=\"headerlink\" title=\"synchronized能防止指令重排吗？\"></a>synchronized能防止指令重排吗？</h2><p>可以<br>有序性：java程序中天然有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。<br>java提供volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”，这条规定则决定了持有同一个锁的两个同步块只能串行进入。</p>\n<h2 id=\"synchronized实现原理\"><a href=\"#synchronized实现原理\" class=\"headerlink\" title=\"synchronized实现原理\"></a>synchronized实现原理</h2><p>1、无法强制已获取锁的线程释放锁。<br>2、无法强制正在等待锁的线程中断等待或超时退出。<br>3、非公平的，任何一个等待锁的线程都有机会获得锁</p>\n<p>膨胀方向是：无锁——&gt;偏向锁——&gt;轻量级锁——&gt;重量级锁。膨胀方向不可逆</p>\n<h2 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h2><p>1、等待可中断<br>2、公平锁（默认非公平，可以通过带boolean参数的构造函数要求使用公平锁，不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量）<br>3、锁绑定多个条件</p>"},{"title":"Android反编译与混淆技术完全解析","date":"2016-05-18T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 反编译\n\n我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。 \n在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。 \n<!--more-->\n\n这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：\n```java\npublic class MainActivity extends AppCompatActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {        \n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.activity_main);\n\tButton button = (Button) findViewById(R.id.button);\n\tbutton.setOnClickListener(new View.OnClickListener() {            \n\t  @Override\n\t  public void onClick(View v) {\n\t    Toast.makeText(MainActivity.this, \"you clicked button\", Toast.LENGTH_SHORT).show();\n\t  }\n\t});\n  }\n}\n```\nactivity_main.xml中的资源如下所示：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><RelativeLayout    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\"\n\tandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\n\tandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingTop=\"@dimen/activity_vertical_margin\">\n\n\t<Button        android:id=\"@+id/button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:text=\"Button\"/></RelativeLayout>\n```\n然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：\n![](0.gif)\n好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。\n反编译代码\n要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：\ndex2jar 这个工具用于将dex文件转换成jar文件 \n下载地址：[dex2jar](http://sourceforge.net/projects/dex2jar/files/)\njd-gui 这个工具用于将jar文件转换成java代码 \n下载地址：[jd-gui](http://jd.benow.ca/)\n将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：\n![](640.png)\n其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。 \n然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示： \n![](641.png)\n这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：\n```\nd2j-dex2jar classes.dex\n```\n执行结果如下图所示：\n![dex2jar](642.png)\n没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：\n![dex2jar](643.png)\n可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。 \n下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示： \n![classes-dex2jar.jar](644.jpg)\nOK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。 \n另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。 \n好的，学完了反编译代码，接下来我们看一下如何反编译资源。\n反编译资源\n其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示： \n![](645.png)\n这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示： \n![](646.png)\n可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去： \n![](647.png)\n由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。 \n要想将APK文件中的资源反编译出来，又要用到另外一个工具了：\napktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。 \n下载地址：[http://ibotpeaches.github.io/Apktool/install/](http://ibotpeaches.github.io/Apktool/install/)\n关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示： \n![](648.png)\n接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：\n```\napktool d Demo.apk\n```\n其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：\n\n-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。\n\n-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。\n\n-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。\n\n-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。\n常用用法就这么多了，那么上述命令的执行结果如下图所示：\n![](650.png)\n这就说明反编译资源已经成功了。 \n当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：\n![](651.png)\n出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。 \n现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：\n![](653.png)\n怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：\n![](655.png)\n可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。\n### 重新打包\n那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 \n\n首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：\n![](656.png)\n其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示： \n![](657.png)\n看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ \n\n不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：\n![](658.png)\n虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。 \n关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。\n改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：\n![](659.png)\n然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。 \n在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：\n```\napktool b Demo -o New_Demo.apk \n```\n其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示： \n![](1.png)\n现在你会发现在同级目录下面生成了一个新的APK文件：\n![](2.png)\n不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。 \n那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。 \n```\nkeytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore\n```\n有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下： \njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名\n```\njarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore\n```\n其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。 \n签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<Android SDK>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下： \n```\nzipalign 4 New_Demo.apk New_Demo_aligned.apk\n```\n其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示： \n![](5.png)\n这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示： \n![](2.gif)\n可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。\n\n好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。\n![](0.jpg)","source":"_posts/Android反编译与混淆技术完全解析.md","raw":"---\ntitle: Android反编译与混淆技术完全解析\ndate: 2016-05-19\ncomments: true\ncategories: Android\ntoc: true \n---\n\n### 反编译\n\n我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。 \n在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。 \n<!--more-->\n\n这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：\n```java\npublic class MainActivity extends AppCompatActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {        \n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.activity_main);\n\tButton button = (Button) findViewById(R.id.button);\n\tbutton.setOnClickListener(new View.OnClickListener() {            \n\t  @Override\n\t  public void onClick(View v) {\n\t    Toast.makeText(MainActivity.this, \"you clicked button\", Toast.LENGTH_SHORT).show();\n\t  }\n\t});\n  }\n}\n```\nactivity_main.xml中的资源如下所示：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><RelativeLayout    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\"\n\tandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\n\tandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingTop=\"@dimen/activity_vertical_margin\">\n\n\t<Button        android:id=\"@+id/button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:text=\"Button\"/></RelativeLayout>\n```\n然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：\n![](0.gif)\n好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。\n反编译代码\n要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：\ndex2jar 这个工具用于将dex文件转换成jar文件 \n下载地址：[dex2jar](http://sourceforge.net/projects/dex2jar/files/)\njd-gui 这个工具用于将jar文件转换成java代码 \n下载地址：[jd-gui](http://jd.benow.ca/)\n将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：\n![](640.png)\n其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。 \n然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示： \n![](641.png)\n这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：\n```\nd2j-dex2jar classes.dex\n```\n执行结果如下图所示：\n![dex2jar](642.png)\n没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：\n![dex2jar](643.png)\n可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。 \n下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示： \n![classes-dex2jar.jar](644.jpg)\nOK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。 \n另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。 \n好的，学完了反编译代码，接下来我们看一下如何反编译资源。\n反编译资源\n其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示： \n![](645.png)\n这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示： \n![](646.png)\n可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去： \n![](647.png)\n由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。 \n要想将APK文件中的资源反编译出来，又要用到另外一个工具了：\napktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。 \n下载地址：[http://ibotpeaches.github.io/Apktool/install/](http://ibotpeaches.github.io/Apktool/install/)\n关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示： \n![](648.png)\n接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：\n```\napktool d Demo.apk\n```\n其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：\n\n-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。\n\n-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。\n\n-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。\n\n-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。\n常用用法就这么多了，那么上述命令的执行结果如下图所示：\n![](650.png)\n这就说明反编译资源已经成功了。 \n当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：\n![](651.png)\n出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。 \n现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：\n![](653.png)\n怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：\n![](655.png)\n可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。\n### 重新打包\n那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 \n\n首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：\n![](656.png)\n其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示： \n![](657.png)\n看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ \n\n不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：\n![](658.png)\n虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。 \n关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。\n改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：\n![](659.png)\n然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。 \n在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：\n```\napktool b Demo -o New_Demo.apk \n```\n其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示： \n![](1.png)\n现在你会发现在同级目录下面生成了一个新的APK文件：\n![](2.png)\n不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。 \n那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。 \n```\nkeytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore\n```\n有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下： \njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名\n```\njarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore\n```\n其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。 \n签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<Android SDK>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下： \n```\nzipalign 4 New_Demo.apk New_Demo_aligned.apk\n```\n其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示： \n![](5.png)\n这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示： \n![](2.gif)\n可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。\n\n好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。\n![](0.jpg)","slug":"Android反编译与混淆技术完全解析","published":1,"updated":"2021-06-25T02:00:17.783Z","layout":"post","photos":[],"link":"","_id":"ckqjatojt0001qkl516kc5ito","content":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。<br>在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。<br><a id=\"more\"></a></p>\n<p>这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;        </span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\tsetContentView(R.layout.activity_main);</span><br><span class=\"line\">\tButton button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">\tbutton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;            </span><br><span class=\"line\">\t  <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"you clicked button\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>activity_main.xml中的资源如下所示：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span>    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Button</span>        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"Button\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：<br><img src=\"0.gif\" alt><br>好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。<br>反编译代码<br>要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：<br>dex2jar 这个工具用于将dex文件转换成jar文件<br>下载地址：<a href=\"http://sourceforge.net/projects/dex2jar/files/\" target=\"_blank\" rel=\"noopener\">dex2jar</a><br>jd-gui 这个工具用于将jar文件转换成java代码<br>下载地址：<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">jd-gui</a><br>将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：<br><img src=\"640.png\" alt><br>其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。<br>然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示：<br><img src=\"641.png\" alt><br>这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d2j-dex2jar classes.dex</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下图所示：<br><img src=\"642.png\" alt=\"dex2jar\"><br>没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：<br><img src=\"643.png\" alt=\"dex2jar\"><br>可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。<br>下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示：<br><img src=\"644.jpg\" alt=\"classes-dex2jar.jar\"><br>OK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。<br>另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。<br>好的，学完了反编译代码，接下来我们看一下如何反编译资源。<br>反编译资源<br>其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示：<br><img src=\"645.png\" alt><br>这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示：<br><img src=\"646.png\" alt><br>可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去：<br><img src=\"647.png\" alt><br>由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。<br>要想将APK文件中的资源反编译出来，又要用到另外一个工具了：<br>apktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。<br>下载地址：<a href=\"http://ibotpeaches.github.io/Apktool/install/\" target=\"_blank\" rel=\"noopener\">http://ibotpeaches.github.io/Apktool/install/</a><br>关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示：<br><img src=\"648.png\" alt><br>接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：</p>\n<p>-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。</p>\n<p>-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。</p>\n<p>-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。</p>\n<p>-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br><img src=\"650.png\" alt><br>这就说明反编译资源已经成功了。<br>当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：<br><img src=\"651.png\" alt><br>出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。<br>现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：<br><img src=\"653.png\" alt><br>怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：<br><img src=\"655.png\" alt><br>可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。</p>\n<h3 id=\"重新打包\"><a href=\"#重新打包\" class=\"headerlink\" title=\"重新打包\"></a>重新打包</h3><p>那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 </p>\n<p>首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：<br><img src=\"656.png\" alt><br>其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示：<br><img src=\"657.png\" alt><br>看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ </p>\n<p>不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：<br><img src=\"658.png\" alt><br>虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。<br>关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。<br>改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：<br><img src=\"659.png\" alt><br>然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。<br>在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b Demo -o New_Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示：<br><img src=\"1.png\" alt><br>现在你会发现在同级目录下面生成了一个新的APK文件：<br><img src=\"2.png\" alt><br>不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。<br>那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下：<br>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。<br>签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<android sdk>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign 4 New_Demo.apk New_Demo_aligned.apk</span><br></pre></td></tr></table></figure></version></android></p>\n<p>其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示：<br><img src=\"5.png\" alt><br>这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示：<br><img src=\"2.gif\" alt><br>可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。</p>\n<p>好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。<br><img src=\"0.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。<br>在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。<br>","more":"</p>\n<p>这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;        </span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\tsetContentView(R.layout.activity_main);</span><br><span class=\"line\">\tButton button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">\tbutton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;            </span><br><span class=\"line\">\t  <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"you clicked button\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>activity_main.xml中的资源如下所示：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span>    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Button</span>        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"Button\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：<br><img src=\"0.gif\" alt><br>好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。<br>反编译代码<br>要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：<br>dex2jar 这个工具用于将dex文件转换成jar文件<br>下载地址：<a href=\"http://sourceforge.net/projects/dex2jar/files/\" target=\"_blank\" rel=\"noopener\">dex2jar</a><br>jd-gui 这个工具用于将jar文件转换成java代码<br>下载地址：<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">jd-gui</a><br>将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：<br><img src=\"640.png\" alt><br>其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。<br>然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示：<br><img src=\"641.png\" alt><br>这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d2j-dex2jar classes.dex</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下图所示：<br><img src=\"642.png\" alt=\"dex2jar\"><br>没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：<br><img src=\"643.png\" alt=\"dex2jar\"><br>可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。<br>下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示：<br><img src=\"644.jpg\" alt=\"classes-dex2jar.jar\"><br>OK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。<br>另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。<br>好的，学完了反编译代码，接下来我们看一下如何反编译资源。<br>反编译资源<br>其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示：<br><img src=\"645.png\" alt><br>这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示：<br><img src=\"646.png\" alt><br>可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去：<br><img src=\"647.png\" alt><br>由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。<br>要想将APK文件中的资源反编译出来，又要用到另外一个工具了：<br>apktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。<br>下载地址：<a href=\"http://ibotpeaches.github.io/Apktool/install/\" target=\"_blank\" rel=\"noopener\">http://ibotpeaches.github.io/Apktool/install/</a><br>关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示：<br><img src=\"648.png\" alt><br>接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：</p>\n<p>-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。</p>\n<p>-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。</p>\n<p>-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。</p>\n<p>-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br><img src=\"650.png\" alt><br>这就说明反编译资源已经成功了。<br>当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：<br><img src=\"651.png\" alt><br>出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。<br>现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：<br><img src=\"653.png\" alt><br>怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：<br><img src=\"655.png\" alt><br>可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。</p>\n<h3 id=\"重新打包\"><a href=\"#重新打包\" class=\"headerlink\" title=\"重新打包\"></a>重新打包</h3><p>那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 </p>\n<p>首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：<br><img src=\"656.png\" alt><br>其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示：<br><img src=\"657.png\" alt><br>看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ </p>\n<p>不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：<br><img src=\"658.png\" alt><br>虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。<br>关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。<br>改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：<br><img src=\"659.png\" alt><br>然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。<br>在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b Demo -o New_Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示：<br><img src=\"1.png\" alt><br>现在你会发现在同级目录下面生成了一个新的APK文件：<br><img src=\"2.png\" alt><br>不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。<br>那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下：<br>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。<br>签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<android sdk>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign 4 New_Demo.apk New_Demo_aligned.apk</span><br></pre></td></tr></table></figure></version></android></p>\n<p>其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示：<br><img src=\"5.png\" alt><br>这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示：<br><img src=\"2.gif\" alt><br>可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。</p>\n<p>好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。<br><img src=\"0.jpg\" alt></p>"},{"title":"APIC编程","date":"2021-03-10T01:30:21.000Z","comments":1,"toc":false,"_content":"\nAPIC（高级可编程中断控制器）\n<!--more-->\n\n### smp_boot.asm \n```asm\n\n[org 0x7c00]\nICR_LOW         equ     0x0FEE00300\nSVR     \tequ     0x0FEE000F0\nLVT1\t\tequ\t0x0FEE00350\nLVT2\t\tequ\t0x0FEE00360\nAPIC_ENABLED\tequ\t0x000000100\nAPIC_ID\t        equ     0x0FEE00020\nCOUNT           equ     0x0\n\nstart:\n   mov al,0x80\n   out 0x70,al\n\n   in al,0x21\n   push ax\n   mov al,0xff\n   out 0x21,al\n   in al,0xa1\n   push ax\n   mov al,0xff\n   out 0xa1,al           ;屏蔽PIC\n\n   call setup_gdt\n\n   mov eax,cr0\n   or eax,0x1\n   mov cr0,eax\n  \n   jmp code_cs:pm\n\nsetup_gdt:\n  lgdt [gdt_descr]\n  ret\n\ngdt:\ngdt_null:\n  dd 0x0\n  dd 0x0\n\ngdt_code:\n    dw 0xffff                   ;limit(bits 0-15)\n    dw 0x0                      ;基址(bits 0-15)\n    db 0x0                      ;基址(bits 16-23)\n    db 10011010b                ;1st flags,type flags\n    db 11001111b                ;2nd flags,Limit(bits 16-19)\n    db 0x0                      ;基址(bits 24-31)\n\ngdt_data:\n    dw 0xffff\n    dw 0x0\n    db 0x0\n    db 10010010b\n    db 11001111b\n    db 0x0\n\ngdt_end:\ngdt_descr:\n    dw gdt_end-gdt-1\n    dd gdt\n\ncode_cs equ gdt_code-gdt\ndata_ds equ gdt_data-gdt\n\nap_init:\n   jmp $\n\n\n[bits 32]\npm:  \n   mov ax,data_ds\n   mov ds,ax\n   mov ss,ax\n   mov es,ax\n   mov fs,ax\n   mov gs,ax\n\n   call initLocalAPIC\n   jmp $\n\n\ninitLocalAPIC:\n   mov esi,APIC_ID\n   mov eax,[esi]\n   and eax,0xff000000\n   mov [BOOT_ID],eax\n\n   ;通过设置一个8bit的APIC虚拟向量寄存器开启本地APIC\n   mov esi,SVR\n   mov eax,[esi]                   ;read SVR(spurious vector register)\n   and eax,0xFFFFFF0F              ;清空虚拟向量寄存器  \n   or eax,APIC_ENABLED             ;bit 8=1\n   mov [esi],eax                   ;write SVR\n\n   ;将LVT1编程为ExtInt ,他将信号传递给所有处理的INTR信号\n   mov esi,LVT1\n   mov eax,[esi]\n   and eax,0xFFFE00FF\n   or  eax,0x00005700          ;ExtInt\n   mov [esi],eax\n\n   ;将LVT2编程为NMI\n   mov esi,LVT2\n   mov eax,[esi]\n   and eax,0xFFFE00FF\n   or  eax,0x00005400           ;NMI\n   mov [esi],eax\n\n   ;广播一个INIT-SIPI-SIPI IPI序列，来唤醒AP进行初始化\n   ;加载中断控制寄存器地址到esi    \n   mov esi,ICR_LOW\n   mov eax,0xc4500               ;广播 init ipi到所有AP\n   mov [esi],eax\n   dw 0x00eb,0x00eb              ;等待10毫秒\n   \n   ;mov edx,ap_init   \n   mov eax,0x00c4600               ;广播SIPI API到所有AP  00 4K字节页中的AP启动代码基地址转换为8bit的向量\n   ;add eax,edx\n   mov [esi],eax\n   mov [esi],eax\n\n \n   ret\n\nBOOT_ID dd 0x0\ntimes 510-($-$$) db 0\ndw 0xaa55\n\n\n```\n\n### 构建脚本\n\n```\nnasm smp_boot.asm  -f bin -o smp_boot.bin\n```","source":"_posts/APIC编程.md","raw":"---\ntitle: APIC编程\ndate: 2021-03-10 9:30:21\ncomments: true \ncategories: 操作系统\ntoc: false\n---\n\nAPIC（高级可编程中断控制器）\n<!--more-->\n\n### smp_boot.asm \n```asm\n\n[org 0x7c00]\nICR_LOW         equ     0x0FEE00300\nSVR     \tequ     0x0FEE000F0\nLVT1\t\tequ\t0x0FEE00350\nLVT2\t\tequ\t0x0FEE00360\nAPIC_ENABLED\tequ\t0x000000100\nAPIC_ID\t        equ     0x0FEE00020\nCOUNT           equ     0x0\n\nstart:\n   mov al,0x80\n   out 0x70,al\n\n   in al,0x21\n   push ax\n   mov al,0xff\n   out 0x21,al\n   in al,0xa1\n   push ax\n   mov al,0xff\n   out 0xa1,al           ;屏蔽PIC\n\n   call setup_gdt\n\n   mov eax,cr0\n   or eax,0x1\n   mov cr0,eax\n  \n   jmp code_cs:pm\n\nsetup_gdt:\n  lgdt [gdt_descr]\n  ret\n\ngdt:\ngdt_null:\n  dd 0x0\n  dd 0x0\n\ngdt_code:\n    dw 0xffff                   ;limit(bits 0-15)\n    dw 0x0                      ;基址(bits 0-15)\n    db 0x0                      ;基址(bits 16-23)\n    db 10011010b                ;1st flags,type flags\n    db 11001111b                ;2nd flags,Limit(bits 16-19)\n    db 0x0                      ;基址(bits 24-31)\n\ngdt_data:\n    dw 0xffff\n    dw 0x0\n    db 0x0\n    db 10010010b\n    db 11001111b\n    db 0x0\n\ngdt_end:\ngdt_descr:\n    dw gdt_end-gdt-1\n    dd gdt\n\ncode_cs equ gdt_code-gdt\ndata_ds equ gdt_data-gdt\n\nap_init:\n   jmp $\n\n\n[bits 32]\npm:  \n   mov ax,data_ds\n   mov ds,ax\n   mov ss,ax\n   mov es,ax\n   mov fs,ax\n   mov gs,ax\n\n   call initLocalAPIC\n   jmp $\n\n\ninitLocalAPIC:\n   mov esi,APIC_ID\n   mov eax,[esi]\n   and eax,0xff000000\n   mov [BOOT_ID],eax\n\n   ;通过设置一个8bit的APIC虚拟向量寄存器开启本地APIC\n   mov esi,SVR\n   mov eax,[esi]                   ;read SVR(spurious vector register)\n   and eax,0xFFFFFF0F              ;清空虚拟向量寄存器  \n   or eax,APIC_ENABLED             ;bit 8=1\n   mov [esi],eax                   ;write SVR\n\n   ;将LVT1编程为ExtInt ,他将信号传递给所有处理的INTR信号\n   mov esi,LVT1\n   mov eax,[esi]\n   and eax,0xFFFE00FF\n   or  eax,0x00005700          ;ExtInt\n   mov [esi],eax\n\n   ;将LVT2编程为NMI\n   mov esi,LVT2\n   mov eax,[esi]\n   and eax,0xFFFE00FF\n   or  eax,0x00005400           ;NMI\n   mov [esi],eax\n\n   ;广播一个INIT-SIPI-SIPI IPI序列，来唤醒AP进行初始化\n   ;加载中断控制寄存器地址到esi    \n   mov esi,ICR_LOW\n   mov eax,0xc4500               ;广播 init ipi到所有AP\n   mov [esi],eax\n   dw 0x00eb,0x00eb              ;等待10毫秒\n   \n   ;mov edx,ap_init   \n   mov eax,0x00c4600               ;广播SIPI API到所有AP  00 4K字节页中的AP启动代码基地址转换为8bit的向量\n   ;add eax,edx\n   mov [esi],eax\n   mov [esi],eax\n\n \n   ret\n\nBOOT_ID dd 0x0\ntimes 510-($-$$) db 0\ndw 0xaa55\n\n\n```\n\n### 构建脚本\n\n```\nnasm smp_boot.asm  -f bin -o smp_boot.bin\n```","slug":"APIC编程","published":1,"updated":"2021-06-30T08:07:36.877Z","layout":"post","photos":[],"link":"","_id":"ckqjatojy0003qkl50mqgbwwa","content":"<p>APIC（高级可编程中断控制器）<br><a id=\"more\"></a></p>\n<h3 id=\"smp-boot-asm\"><a href=\"#smp-boot-asm\" class=\"headerlink\" title=\"smp_boot.asm\"></a>smp_boot.asm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[org 0x7c00]</span><br><span class=\"line\">ICR_LOW         equ     0x0FEE00300</span><br><span class=\"line\">SVR     \tequ     0x0FEE000F0</span><br><span class=\"line\">LVT1\t\tequ\t0x0FEE00350</span><br><span class=\"line\">LVT2\t\tequ\t0x0FEE00360</span><br><span class=\"line\">APIC_ENABLED\tequ\t0x000000100</span><br><span class=\"line\">APIC_ID\t        equ     0x0FEE00020</span><br><span class=\"line\">COUNT           equ     0x0</span><br><span class=\"line\"></span><br><span class=\"line\">start:</span><br><span class=\"line\">   mov al,0x80</span><br><span class=\"line\">   out 0x70,al</span><br><span class=\"line\"></span><br><span class=\"line\">   in al,0x21</span><br><span class=\"line\">   push ax</span><br><span class=\"line\">   mov al,0xff</span><br><span class=\"line\">   out 0x21,al</span><br><span class=\"line\">   in al,0xa1</span><br><span class=\"line\">   push ax</span><br><span class=\"line\">   mov al,0xff</span><br><span class=\"line\">   out 0xa1,al           ;屏蔽PIC</span><br><span class=\"line\"></span><br><span class=\"line\">   call setup_gdt</span><br><span class=\"line\"></span><br><span class=\"line\">   mov eax,cr0</span><br><span class=\"line\">   or eax,0x1</span><br><span class=\"line\">   mov cr0,eax</span><br><span class=\"line\">  </span><br><span class=\"line\">   jmp code_cs:pm</span><br><span class=\"line\"></span><br><span class=\"line\">setup_gdt:</span><br><span class=\"line\">  lgdt [gdt_descr]</span><br><span class=\"line\">  ret</span><br><span class=\"line\"></span><br><span class=\"line\">gdt:</span><br><span class=\"line\">gdt_null:</span><br><span class=\"line\">  dd 0x0</span><br><span class=\"line\">  dd 0x0</span><br><span class=\"line\"></span><br><span class=\"line\">gdt_code:</span><br><span class=\"line\">    dw 0xffff                   ;limit(bits 0-15)</span><br><span class=\"line\">    dw 0x0                      ;基址(bits 0-15)</span><br><span class=\"line\">    db 0x0                      ;基址(bits 16-23)</span><br><span class=\"line\">    db 10011010b                ;1st flags,type flags</span><br><span class=\"line\">    db 11001111b                ;2nd flags,Limit(bits 16-19)</span><br><span class=\"line\">    db 0x0                      ;基址(bits 24-31)</span><br><span class=\"line\"></span><br><span class=\"line\">gdt_data:</span><br><span class=\"line\">    dw 0xffff</span><br><span class=\"line\">    dw 0x0</span><br><span class=\"line\">    db 0x0</span><br><span class=\"line\">    db 10010010b</span><br><span class=\"line\">    db 11001111b</span><br><span class=\"line\">    db 0x0</span><br><span class=\"line\"></span><br><span class=\"line\">gdt_end:</span><br><span class=\"line\">gdt_descr:</span><br><span class=\"line\">    dw gdt_end-gdt-1</span><br><span class=\"line\">    dd gdt</span><br><span class=\"line\"></span><br><span class=\"line\">code_cs equ gdt_code-gdt</span><br><span class=\"line\">data_ds equ gdt_data-gdt</span><br><span class=\"line\"></span><br><span class=\"line\">ap_init:</span><br><span class=\"line\">   jmp $</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[bits 32]</span><br><span class=\"line\">pm:  </span><br><span class=\"line\">   mov ax,data_ds</span><br><span class=\"line\">   mov ds,ax</span><br><span class=\"line\">   mov ss,ax</span><br><span class=\"line\">   mov es,ax</span><br><span class=\"line\">   mov fs,ax</span><br><span class=\"line\">   mov gs,ax</span><br><span class=\"line\"></span><br><span class=\"line\">   call initLocalAPIC</span><br><span class=\"line\">   jmp $</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">initLocalAPIC:</span><br><span class=\"line\">   mov esi,APIC_ID</span><br><span class=\"line\">   mov eax,[esi]</span><br><span class=\"line\">   and eax,0xff000000</span><br><span class=\"line\">   mov [BOOT_ID],eax</span><br><span class=\"line\"></span><br><span class=\"line\">   ;通过设置一个8bit的APIC虚拟向量寄存器开启本地APIC</span><br><span class=\"line\">   mov esi,SVR</span><br><span class=\"line\">   mov eax,[esi]                   ;read SVR(spurious vector register)</span><br><span class=\"line\">   and eax,0xFFFFFF0F              ;清空虚拟向量寄存器  </span><br><span class=\"line\">   or eax,APIC_ENABLED             ;bit 8=1</span><br><span class=\"line\">   mov [esi],eax                   ;write SVR</span><br><span class=\"line\"></span><br><span class=\"line\">   ;将LVT1编程为ExtInt ,他将信号传递给所有处理的INTR信号</span><br><span class=\"line\">   mov esi,LVT1</span><br><span class=\"line\">   mov eax,[esi]</span><br><span class=\"line\">   and eax,0xFFFE00FF</span><br><span class=\"line\">   or  eax,0x00005700          ;ExtInt</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\"></span><br><span class=\"line\">   ;将LVT2编程为NMI</span><br><span class=\"line\">   mov esi,LVT2</span><br><span class=\"line\">   mov eax,[esi]</span><br><span class=\"line\">   and eax,0xFFFE00FF</span><br><span class=\"line\">   or  eax,0x00005400           ;NMI</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\"></span><br><span class=\"line\">   ;广播一个INIT-SIPI-SIPI IPI序列，来唤醒AP进行初始化</span><br><span class=\"line\">   ;加载中断控制寄存器地址到esi    </span><br><span class=\"line\">   mov esi,ICR_LOW</span><br><span class=\"line\">   mov eax,0xc4500               ;广播 init ipi到所有AP</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\">   dw 0x00eb,0x00eb              ;等待10毫秒</span><br><span class=\"line\">   </span><br><span class=\"line\">   ;mov edx,ap_init   </span><br><span class=\"line\">   mov eax,0x00c4600               ;广播SIPI API到所有AP  00 4K字节页中的AP启动代码基地址转换为8bit的向量</span><br><span class=\"line\">   ;add eax,edx</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">   ret</span><br><span class=\"line\"></span><br><span class=\"line\">BOOT_ID dd 0x0</span><br><span class=\"line\">times 510-($-$$) db 0</span><br><span class=\"line\">dw 0xaa55</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nasm smp_boot.asm  -f bin -o smp_boot.bin</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>APIC（高级可编程中断控制器）<br>","more":"</p>\n<h3 id=\"smp-boot-asm\"><a href=\"#smp-boot-asm\" class=\"headerlink\" title=\"smp_boot.asm\"></a>smp_boot.asm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[org 0x7c00]</span><br><span class=\"line\">ICR_LOW         equ     0x0FEE00300</span><br><span class=\"line\">SVR     \tequ     0x0FEE000F0</span><br><span class=\"line\">LVT1\t\tequ\t0x0FEE00350</span><br><span class=\"line\">LVT2\t\tequ\t0x0FEE00360</span><br><span class=\"line\">APIC_ENABLED\tequ\t0x000000100</span><br><span class=\"line\">APIC_ID\t        equ     0x0FEE00020</span><br><span class=\"line\">COUNT           equ     0x0</span><br><span class=\"line\"></span><br><span class=\"line\">start:</span><br><span class=\"line\">   mov al,0x80</span><br><span class=\"line\">   out 0x70,al</span><br><span class=\"line\"></span><br><span class=\"line\">   in al,0x21</span><br><span class=\"line\">   push ax</span><br><span class=\"line\">   mov al,0xff</span><br><span class=\"line\">   out 0x21,al</span><br><span class=\"line\">   in al,0xa1</span><br><span class=\"line\">   push ax</span><br><span class=\"line\">   mov al,0xff</span><br><span class=\"line\">   out 0xa1,al           ;屏蔽PIC</span><br><span class=\"line\"></span><br><span class=\"line\">   call setup_gdt</span><br><span class=\"line\"></span><br><span class=\"line\">   mov eax,cr0</span><br><span class=\"line\">   or eax,0x1</span><br><span class=\"line\">   mov cr0,eax</span><br><span class=\"line\">  </span><br><span class=\"line\">   jmp code_cs:pm</span><br><span class=\"line\"></span><br><span class=\"line\">setup_gdt:</span><br><span class=\"line\">  lgdt [gdt_descr]</span><br><span class=\"line\">  ret</span><br><span class=\"line\"></span><br><span class=\"line\">gdt:</span><br><span class=\"line\">gdt_null:</span><br><span class=\"line\">  dd 0x0</span><br><span class=\"line\">  dd 0x0</span><br><span class=\"line\"></span><br><span class=\"line\">gdt_code:</span><br><span class=\"line\">    dw 0xffff                   ;limit(bits 0-15)</span><br><span class=\"line\">    dw 0x0                      ;基址(bits 0-15)</span><br><span class=\"line\">    db 0x0                      ;基址(bits 16-23)</span><br><span class=\"line\">    db 10011010b                ;1st flags,type flags</span><br><span class=\"line\">    db 11001111b                ;2nd flags,Limit(bits 16-19)</span><br><span class=\"line\">    db 0x0                      ;基址(bits 24-31)</span><br><span class=\"line\"></span><br><span class=\"line\">gdt_data:</span><br><span class=\"line\">    dw 0xffff</span><br><span class=\"line\">    dw 0x0</span><br><span class=\"line\">    db 0x0</span><br><span class=\"line\">    db 10010010b</span><br><span class=\"line\">    db 11001111b</span><br><span class=\"line\">    db 0x0</span><br><span class=\"line\"></span><br><span class=\"line\">gdt_end:</span><br><span class=\"line\">gdt_descr:</span><br><span class=\"line\">    dw gdt_end-gdt-1</span><br><span class=\"line\">    dd gdt</span><br><span class=\"line\"></span><br><span class=\"line\">code_cs equ gdt_code-gdt</span><br><span class=\"line\">data_ds equ gdt_data-gdt</span><br><span class=\"line\"></span><br><span class=\"line\">ap_init:</span><br><span class=\"line\">   jmp $</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[bits 32]</span><br><span class=\"line\">pm:  </span><br><span class=\"line\">   mov ax,data_ds</span><br><span class=\"line\">   mov ds,ax</span><br><span class=\"line\">   mov ss,ax</span><br><span class=\"line\">   mov es,ax</span><br><span class=\"line\">   mov fs,ax</span><br><span class=\"line\">   mov gs,ax</span><br><span class=\"line\"></span><br><span class=\"line\">   call initLocalAPIC</span><br><span class=\"line\">   jmp $</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">initLocalAPIC:</span><br><span class=\"line\">   mov esi,APIC_ID</span><br><span class=\"line\">   mov eax,[esi]</span><br><span class=\"line\">   and eax,0xff000000</span><br><span class=\"line\">   mov [BOOT_ID],eax</span><br><span class=\"line\"></span><br><span class=\"line\">   ;通过设置一个8bit的APIC虚拟向量寄存器开启本地APIC</span><br><span class=\"line\">   mov esi,SVR</span><br><span class=\"line\">   mov eax,[esi]                   ;read SVR(spurious vector register)</span><br><span class=\"line\">   and eax,0xFFFFFF0F              ;清空虚拟向量寄存器  </span><br><span class=\"line\">   or eax,APIC_ENABLED             ;bit 8=1</span><br><span class=\"line\">   mov [esi],eax                   ;write SVR</span><br><span class=\"line\"></span><br><span class=\"line\">   ;将LVT1编程为ExtInt ,他将信号传递给所有处理的INTR信号</span><br><span class=\"line\">   mov esi,LVT1</span><br><span class=\"line\">   mov eax,[esi]</span><br><span class=\"line\">   and eax,0xFFFE00FF</span><br><span class=\"line\">   or  eax,0x00005700          ;ExtInt</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\"></span><br><span class=\"line\">   ;将LVT2编程为NMI</span><br><span class=\"line\">   mov esi,LVT2</span><br><span class=\"line\">   mov eax,[esi]</span><br><span class=\"line\">   and eax,0xFFFE00FF</span><br><span class=\"line\">   or  eax,0x00005400           ;NMI</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\"></span><br><span class=\"line\">   ;广播一个INIT-SIPI-SIPI IPI序列，来唤醒AP进行初始化</span><br><span class=\"line\">   ;加载中断控制寄存器地址到esi    </span><br><span class=\"line\">   mov esi,ICR_LOW</span><br><span class=\"line\">   mov eax,0xc4500               ;广播 init ipi到所有AP</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\">   dw 0x00eb,0x00eb              ;等待10毫秒</span><br><span class=\"line\">   </span><br><span class=\"line\">   ;mov edx,ap_init   </span><br><span class=\"line\">   mov eax,0x00c4600               ;广播SIPI API到所有AP  00 4K字节页中的AP启动代码基地址转换为8bit的向量</span><br><span class=\"line\">   ;add eax,edx</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\">   mov [esi],eax</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">   ret</span><br><span class=\"line\"></span><br><span class=\"line\">BOOT_ID dd 0x0</span><br><span class=\"line\">times 510-($-$$) db 0</span><br><span class=\"line\">dw 0xaa55</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nasm smp_boot.asm  -f bin -o smp_boot.bin</span><br></pre></td></tr></table></figure>"},{"title":"HTTP Keep-Alive","date":"2016-12-26T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### Keep-Alive是什么\n在早期的HTTP1.0版本中，每个http请求都要求打开一个tcp socket连接，并且使用一次之后就断开这个tcp连接。这种效率和性能是最低的，因为建立一个TCP连接需要3次握手，而断开一个链接需要TCP四次握手。而在一个网页页面中含有的大量引入的js、css、img文件，如果每个请求都为之创建一个socket连接，这不仅是性能的底下而且还会给服务器带来很大的压力。 为了改善这种状态希望在一个页面中能重复的利用一个Socket连接来发送请求数据，\n于是就发明了keep-alive即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少tcp连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。但是，keep-alive并不是免费的午餐,长时间的tcp连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。\nkeepalvie timeout。\n![](2013_12_20_02.png)\n<!--more-->\n### Keep-Alive如何设置\n在HTTP1.1协议中都默认了支持keep-alive连接，而且所有浏览器都支持了这种模式，默认在HTTP头中自带了如下信息。\n```\nConnection: keep-alive\n```\n这种设置告诉服务器我是支持keep-alive连接的。服务器接收到请求解析HTTP头Connection看到是keep-alive，在响应客户端后时判断了请求数没有超过maxKeepAliveRequests（Tomcat中默认是100）于是在响应头中设置了Connection: keep-alive，告诉浏览器Socket连接我没有关闭你再用这个连接给我发送数据。反之如果超过了就将Connection设置为如下\n```\nConnection: close\n```\n告诉客户端连接我已经关闭了你需要重新建立连接。\n这样会带来一个问题，因为在HTTP的早期版本采用关闭连接的办法来划定报文的结束，但是keep-alive的连接Socket并没有关闭所以浏览器不知道报文的结束于是将一直阻塞等待有新的数据可读，浏览器显示加载状态。于是需要借助HTTP头的另一个属性Content-Length，来告诉浏览器我的报文数据大小，从而来确定报文截尾。更多的内容请查看文章[HTTP协议：不可小觑的Content-Length](/2016/12/27/HTTP协议：不可小觑的Content-Length/)\n\n### 基于Java服务端的Keep-Alive的连接如何实现\n```java\npublic class KeepAliveServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8888);\n        AtomicInteger atomicInteger = new AtomicInteger();\n        while(true){\n            final Socket socket =  serverSocket.accept();\n            final int temp = atomicInteger.incrementAndGet();\n            System.out.println(\"客户端：\"+socket.getRemoteSocketAddress().toString()+\"序号：\"+temp);\n            socket.setSoTimeout(1000);//（1）\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    InputStream inputStream = null;\n                    PrintWriter out = null;\n                    int maxKeepAliveConnect = 0;\n                    int index=0;\n                    while(true){//（2）\n                        try {\n                            ++maxKeepAliveConnect;\n                            System.out.println(\"链接:\"+temp+\"开始第\"+(++index)+\"次读取\");\n                            if(maxKeepAliveConnect>10){\n                                break;\n                            }\n                            inputStream = socket.getInputStream();\n                            byte[] b = new byte[1024];\n                            int i =-1;\n                            if((i=inputStream.read(b))!=-1){//（3）\n                                //System.out.println(new String(b,0,i));\n                            }\n                             \n                            out = new PrintWriter(socket.getOutputStream());\n                            StringBuffer sb = new StringBuffer();\n                            sb.append(\"<script src=\\\"1.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"2.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"3.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"4.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"5.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"6.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"7.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"8.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"9.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"10.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"11.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"12.js\\\"></script>\");\n                            sb.append(\"<h1>hello world</h1>\");\n                            \n                            out.println(\"HTTP/1.1 200 OK\");   \n                            out.println(\"Connection: Keep-Alive\");\n                            out.println(\"Content-Type:text/html;charset:GBK\");\n                            out.println(\"Content-Length:\"+sb.toString().length());\n                            out.println();\n                            out.println(sb.toString());\n                            out.flush();\n                            System.out.println(\"链接:\"+temp+\"第\"+(index)+\"次读取完成\");\n                        } catch (IOException e) {\n                            //e.printStackTrace();\n                        }\n                    }\n                    try {\n                        inputStream.close();\n                        out.close();\n                        socket.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n\n    }\n}\n\n```\n在这里需要特别说明的几个地方：\n**（1）：socket.setSoTimeout(1000);**\n使用指定的超时时间启用/禁用SO_TIMEOUT毫秒。 使用此选项设置为非零超时，对与此Socket相关联的InputStream的read（）调用将阻塞只有这段时间。 如果超时到期，java.net.SocketTimeoutException 被引发，虽然套接字仍然有效。 必须启用选项之前进入阻塞操作有效。 的timeout必须> 0。超时为零被解释为无限超时。\n**（2）：while(true)**\n默认为长连接。循环读取socket中的数据，每一次循环都将是客户端的一次请求\n**（3）：inputStream.read(b);**\n读取socket中的数据本次读取完成将返回-1，再次读取的时候如果Socket中没有数据可读将一直阻塞，除非有数据可读或者设置了setSoTimeout()。\n\n我们启动服务浏览器发送请求控制台输出如下\n```\n客户端：/127.0.0.1:2992序号：1\n客户端：/127.0.0.1:3000序号：2\n客户端：/127.0.0.1:3001序号：3\n客户端：/127.0.0.1:3002序号：4\n客户端：/127.0.0.1:3003序号：5\n客户端：/127.0.0.1:3004序号：6\n```\nFirefox浏览器网络请求信息\n![](20161227112307.png)\n**总结**\n由此可以看出浏览器发送了了13个请求，但后台只有6个访问连接说明了其中有的请求共用了连接。这里6个连接也说明了Firefox的请求并发是6，每个并发都是一个新的连接。\n各个浏览器并发请求数请参考[浏览器并发请求数](http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/)\n\n### HTTP Keep-Alive于Socket KeepAlive有何区别\n\n**HTTP的Keep-Alive**是http代理（通常指浏览器）与HTTP服务器之间的约定。告诉服务器处理完本次请求不要关闭连接，我待会还要使用，而服务器在响应HTTP头上也带有Keep-Alive告诉客服端我连接以及保存你可以继续使用。\n\n**Socket的KeepAlive**是在客户端与服务器建立了长连接以后，如果应用程序或者上层协议一直不发送数据，或者隔很长时间才发送一次数据，当链接很久没有数据报文传输时如何去确定对方还在线，到底是掉线了还是确实没有数据传输，链接还需不需要保持，这种情况在TCP协议设计中是需要考虑到的。TCP协议通过一种巧妙的方式去解决这个问题，当超过一段时间之后，TCP自动发送一个数据为空的报文给对方，如果对方回应了这个报文，说明对方还在线，链接可以继续保持，如果对方没有报文返回，并且重试了多次之后则认为链接丢失，没有必要保持链接。\n\nHTTP Keep-Alive与TCP Keep-Alive，不是同一回事，意图不一样。HTTP Keep-Alive是为了让TCP活得更久一点，以便在同一个连接上传送多个HTTP，提高Socket的效率。而TCP Keep-Alive是TCP的一种检测TCP连接状况的保鲜机制。\n\n","source":"_posts/HTTP Keep-Alive.md","raw":"---\ntitle: HTTP Keep-Alive\ndate: 2016-12-27\ncomments: true\ncategories: HTTP\ntoc: true \n---\n\n### Keep-Alive是什么\n在早期的HTTP1.0版本中，每个http请求都要求打开一个tcp socket连接，并且使用一次之后就断开这个tcp连接。这种效率和性能是最低的，因为建立一个TCP连接需要3次握手，而断开一个链接需要TCP四次握手。而在一个网页页面中含有的大量引入的js、css、img文件，如果每个请求都为之创建一个socket连接，这不仅是性能的底下而且还会给服务器带来很大的压力。 为了改善这种状态希望在一个页面中能重复的利用一个Socket连接来发送请求数据，\n于是就发明了keep-alive即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少tcp连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。但是，keep-alive并不是免费的午餐,长时间的tcp连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。\nkeepalvie timeout。\n![](2013_12_20_02.png)\n<!--more-->\n### Keep-Alive如何设置\n在HTTP1.1协议中都默认了支持keep-alive连接，而且所有浏览器都支持了这种模式，默认在HTTP头中自带了如下信息。\n```\nConnection: keep-alive\n```\n这种设置告诉服务器我是支持keep-alive连接的。服务器接收到请求解析HTTP头Connection看到是keep-alive，在响应客户端后时判断了请求数没有超过maxKeepAliveRequests（Tomcat中默认是100）于是在响应头中设置了Connection: keep-alive，告诉浏览器Socket连接我没有关闭你再用这个连接给我发送数据。反之如果超过了就将Connection设置为如下\n```\nConnection: close\n```\n告诉客户端连接我已经关闭了你需要重新建立连接。\n这样会带来一个问题，因为在HTTP的早期版本采用关闭连接的办法来划定报文的结束，但是keep-alive的连接Socket并没有关闭所以浏览器不知道报文的结束于是将一直阻塞等待有新的数据可读，浏览器显示加载状态。于是需要借助HTTP头的另一个属性Content-Length，来告诉浏览器我的报文数据大小，从而来确定报文截尾。更多的内容请查看文章[HTTP协议：不可小觑的Content-Length](/2016/12/27/HTTP协议：不可小觑的Content-Length/)\n\n### 基于Java服务端的Keep-Alive的连接如何实现\n```java\npublic class KeepAliveServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8888);\n        AtomicInteger atomicInteger = new AtomicInteger();\n        while(true){\n            final Socket socket =  serverSocket.accept();\n            final int temp = atomicInteger.incrementAndGet();\n            System.out.println(\"客户端：\"+socket.getRemoteSocketAddress().toString()+\"序号：\"+temp);\n            socket.setSoTimeout(1000);//（1）\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    InputStream inputStream = null;\n                    PrintWriter out = null;\n                    int maxKeepAliveConnect = 0;\n                    int index=0;\n                    while(true){//（2）\n                        try {\n                            ++maxKeepAliveConnect;\n                            System.out.println(\"链接:\"+temp+\"开始第\"+(++index)+\"次读取\");\n                            if(maxKeepAliveConnect>10){\n                                break;\n                            }\n                            inputStream = socket.getInputStream();\n                            byte[] b = new byte[1024];\n                            int i =-1;\n                            if((i=inputStream.read(b))!=-1){//（3）\n                                //System.out.println(new String(b,0,i));\n                            }\n                             \n                            out = new PrintWriter(socket.getOutputStream());\n                            StringBuffer sb = new StringBuffer();\n                            sb.append(\"<script src=\\\"1.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"2.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"3.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"4.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"5.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"6.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"7.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"8.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"9.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"10.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"11.js\\\"></script>\");\n                            sb.append(\"<script src=\\\"12.js\\\"></script>\");\n                            sb.append(\"<h1>hello world</h1>\");\n                            \n                            out.println(\"HTTP/1.1 200 OK\");   \n                            out.println(\"Connection: Keep-Alive\");\n                            out.println(\"Content-Type:text/html;charset:GBK\");\n                            out.println(\"Content-Length:\"+sb.toString().length());\n                            out.println();\n                            out.println(sb.toString());\n                            out.flush();\n                            System.out.println(\"链接:\"+temp+\"第\"+(index)+\"次读取完成\");\n                        } catch (IOException e) {\n                            //e.printStackTrace();\n                        }\n                    }\n                    try {\n                        inputStream.close();\n                        out.close();\n                        socket.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n\n    }\n}\n\n```\n在这里需要特别说明的几个地方：\n**（1）：socket.setSoTimeout(1000);**\n使用指定的超时时间启用/禁用SO_TIMEOUT毫秒。 使用此选项设置为非零超时，对与此Socket相关联的InputStream的read（）调用将阻塞只有这段时间。 如果超时到期，java.net.SocketTimeoutException 被引发，虽然套接字仍然有效。 必须启用选项之前进入阻塞操作有效。 的timeout必须> 0。超时为零被解释为无限超时。\n**（2）：while(true)**\n默认为长连接。循环读取socket中的数据，每一次循环都将是客户端的一次请求\n**（3）：inputStream.read(b);**\n读取socket中的数据本次读取完成将返回-1，再次读取的时候如果Socket中没有数据可读将一直阻塞，除非有数据可读或者设置了setSoTimeout()。\n\n我们启动服务浏览器发送请求控制台输出如下\n```\n客户端：/127.0.0.1:2992序号：1\n客户端：/127.0.0.1:3000序号：2\n客户端：/127.0.0.1:3001序号：3\n客户端：/127.0.0.1:3002序号：4\n客户端：/127.0.0.1:3003序号：5\n客户端：/127.0.0.1:3004序号：6\n```\nFirefox浏览器网络请求信息\n![](20161227112307.png)\n**总结**\n由此可以看出浏览器发送了了13个请求，但后台只有6个访问连接说明了其中有的请求共用了连接。这里6个连接也说明了Firefox的请求并发是6，每个并发都是一个新的连接。\n各个浏览器并发请求数请参考[浏览器并发请求数](http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/)\n\n### HTTP Keep-Alive于Socket KeepAlive有何区别\n\n**HTTP的Keep-Alive**是http代理（通常指浏览器）与HTTP服务器之间的约定。告诉服务器处理完本次请求不要关闭连接，我待会还要使用，而服务器在响应HTTP头上也带有Keep-Alive告诉客服端我连接以及保存你可以继续使用。\n\n**Socket的KeepAlive**是在客户端与服务器建立了长连接以后，如果应用程序或者上层协议一直不发送数据，或者隔很长时间才发送一次数据，当链接很久没有数据报文传输时如何去确定对方还在线，到底是掉线了还是确实没有数据传输，链接还需不需要保持，这种情况在TCP协议设计中是需要考虑到的。TCP协议通过一种巧妙的方式去解决这个问题，当超过一段时间之后，TCP自动发送一个数据为空的报文给对方，如果对方回应了这个报文，说明对方还在线，链接可以继续保持，如果对方没有报文返回，并且重试了多次之后则认为链接丢失，没有必要保持链接。\n\nHTTP Keep-Alive与TCP Keep-Alive，不是同一回事，意图不一样。HTTP Keep-Alive是为了让TCP活得更久一点，以便在同一个连接上传送多个HTTP，提高Socket的效率。而TCP Keep-Alive是TCP的一种检测TCP连接状况的保鲜机制。\n\n","slug":"HTTP Keep-Alive","published":1,"updated":"2021-06-25T02:00:17.826Z","layout":"post","photos":[],"link":"","_id":"ckqjatok00004qkl5sv95klzs","content":"<h3 id=\"Keep-Alive是什么\"><a href=\"#Keep-Alive是什么\" class=\"headerlink\" title=\"Keep-Alive是什么\"></a>Keep-Alive是什么</h3><p>在早期的HTTP1.0版本中，每个http请求都要求打开一个tcp socket连接，并且使用一次之后就断开这个tcp连接。这种效率和性能是最低的，因为建立一个TCP连接需要3次握手，而断开一个链接需要TCP四次握手。而在一个网页页面中含有的大量引入的js、css、img文件，如果每个请求都为之创建一个socket连接，这不仅是性能的底下而且还会给服务器带来很大的压力。 为了改善这种状态希望在一个页面中能重复的利用一个Socket连接来发送请求数据，<br>于是就发明了keep-alive即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少tcp连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。但是，keep-alive并不是免费的午餐,长时间的tcp连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。<br>keepalvie timeout。<br><img src=\"2013_12_20_02.png\" alt><br><a id=\"more\"></a></p>\n<h3 id=\"Keep-Alive如何设置\"><a href=\"#Keep-Alive如何设置\" class=\"headerlink\" title=\"Keep-Alive如何设置\"></a>Keep-Alive如何设置</h3><p>在HTTP1.1协议中都默认了支持keep-alive连接，而且所有浏览器都支持了这种模式，默认在HTTP头中自带了如下信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure></p>\n<p>这种设置告诉服务器我是支持keep-alive连接的。服务器接收到请求解析HTTP头Connection看到是keep-alive，在响应客户端后时判断了请求数没有超过maxKeepAliveRequests（Tomcat中默认是100）于是在响应头中设置了Connection: keep-alive，告诉浏览器Socket连接我没有关闭你再用这个连接给我发送数据。反之如果超过了就将Connection设置为如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure></p>\n<p>告诉客户端连接我已经关闭了你需要重新建立连接。<br>这样会带来一个问题，因为在HTTP的早期版本采用关闭连接的办法来划定报文的结束，但是keep-alive的连接Socket并没有关闭所以浏览器不知道报文的结束于是将一直阻塞等待有新的数据可读，浏览器显示加载状态。于是需要借助HTTP头的另一个属性Content-Length，来告诉浏览器我的报文数据大小，从而来确定报文截尾。更多的内容请查看文章<a href=\"/2016/12/27/HTTP协议：不可小觑的Content-Length/\">HTTP协议：不可小觑的Content-Length</a></p>\n<h3 id=\"基于Java服务端的Keep-Alive的连接如何实现\"><a href=\"#基于Java服务端的Keep-Alive的连接如何实现\" class=\"headerlink\" title=\"基于Java服务端的Keep-Alive的连接如何实现\"></a>基于Java服务端的Keep-Alive的连接如何实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeepAliveServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        AtomicInteger atomicInteger = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Socket socket =  serverSocket.accept();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp = atomicInteger.incrementAndGet();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"客户端：\"</span>+socket.getRemoteSocketAddress().toString()+<span class=\"string\">\"序号：\"</span>+temp);</span><br><span class=\"line\">            socket.setSoTimeout(<span class=\"number\">1000</span>);<span class=\"comment\">//（1）</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    InputStream inputStream = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    PrintWriter out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> maxKeepAliveConnect = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;<span class=\"comment\">//（2）</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            ++maxKeepAliveConnect;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"链接:\"</span>+temp+<span class=\"string\">\"开始第\"</span>+(++index)+<span class=\"string\">\"次读取\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(maxKeepAliveConnect&gt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            inputStream = socket.getInputStream();</span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> i =-<span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>((i=inputStream.read(b))!=-<span class=\"number\">1</span>)&#123;<span class=\"comment\">//（3）</span></span><br><span class=\"line\">                                <span class=\"comment\">//System.out.println(new String(b,0,i));</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                             </span><br><span class=\"line\">                            out = <span class=\"keyword\">new</span> PrintWriter(socket.getOutputStream());</span><br><span class=\"line\">                            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"1.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"2.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"3.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"4.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"5.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"6.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"7.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"8.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"9.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"10.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"11.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"12.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;h1&gt;hello world&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">                            </span><br><span class=\"line\">                            out.println(<span class=\"string\">\"HTTP/1.1 200 OK\"</span>);   </span><br><span class=\"line\">                            out.println(<span class=\"string\">\"Connection: Keep-Alive\"</span>);</span><br><span class=\"line\">                            out.println(<span class=\"string\">\"Content-Type:text/html;charset:GBK\"</span>);</span><br><span class=\"line\">                            out.println(<span class=\"string\">\"Content-Length:\"</span>+sb.toString().length());</span><br><span class=\"line\">                            out.println();</span><br><span class=\"line\">                            out.println(sb.toString());</span><br><span class=\"line\">                            out.flush();</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"链接:\"</span>+temp+<span class=\"string\">\"第\"</span>+(index)+<span class=\"string\">\"次读取完成\"</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//e.printStackTrace();</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        inputStream.close();</span><br><span class=\"line\">                        out.close();</span><br><span class=\"line\">                        socket.close();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里需要特别说明的几个地方：<br><strong>（1）：socket.setSoTimeout(1000);</strong><br>使用指定的超时时间启用/禁用SO_TIMEOUT毫秒。 使用此选项设置为非零超时，对与此Socket相关联的InputStream的read（）调用将阻塞只有这段时间。 如果超时到期，java.net.SocketTimeoutException 被引发，虽然套接字仍然有效。 必须启用选项之前进入阻塞操作有效。 的timeout必须&gt; 0。超时为零被解释为无限超时。<br><strong>（2）：while(true)</strong><br>默认为长连接。循环读取socket中的数据，每一次循环都将是客户端的一次请求<br><strong>（3）：inputStream.read(b);</strong><br>读取socket中的数据本次读取完成将返回-1，再次读取的时候如果Socket中没有数据可读将一直阻塞，除非有数据可读或者设置了setSoTimeout()。</p>\n<p>我们启动服务浏览器发送请求控制台输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端：/127.0.0.1:2992序号：1</span><br><span class=\"line\">客户端：/127.0.0.1:3000序号：2</span><br><span class=\"line\">客户端：/127.0.0.1:3001序号：3</span><br><span class=\"line\">客户端：/127.0.0.1:3002序号：4</span><br><span class=\"line\">客户端：/127.0.0.1:3003序号：5</span><br><span class=\"line\">客户端：/127.0.0.1:3004序号：6</span><br></pre></td></tr></table></figure></p>\n<p>Firefox浏览器网络请求信息<br><img src=\"20161227112307.png\" alt><br><strong>总结</strong><br>由此可以看出浏览器发送了了13个请求，但后台只有6个访问连接说明了其中有的请求共用了连接。这里6个连接也说明了Firefox的请求并发是6，每个并发都是一个新的连接。<br>各个浏览器并发请求数请参考<a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\" target=\"_blank\" rel=\"noopener\">浏览器并发请求数</a></p>\n<h3 id=\"HTTP-Keep-Alive于Socket-KeepAlive有何区别\"><a href=\"#HTTP-Keep-Alive于Socket-KeepAlive有何区别\" class=\"headerlink\" title=\"HTTP Keep-Alive于Socket KeepAlive有何区别\"></a>HTTP Keep-Alive于Socket KeepAlive有何区别</h3><p><strong>HTTP的Keep-Alive</strong>是http代理（通常指浏览器）与HTTP服务器之间的约定。告诉服务器处理完本次请求不要关闭连接，我待会还要使用，而服务器在响应HTTP头上也带有Keep-Alive告诉客服端我连接以及保存你可以继续使用。</p>\n<p><strong>Socket的KeepAlive</strong>是在客户端与服务器建立了长连接以后，如果应用程序或者上层协议一直不发送数据，或者隔很长时间才发送一次数据，当链接很久没有数据报文传输时如何去确定对方还在线，到底是掉线了还是确实没有数据传输，链接还需不需要保持，这种情况在TCP协议设计中是需要考虑到的。TCP协议通过一种巧妙的方式去解决这个问题，当超过一段时间之后，TCP自动发送一个数据为空的报文给对方，如果对方回应了这个报文，说明对方还在线，链接可以继续保持，如果对方没有报文返回，并且重试了多次之后则认为链接丢失，没有必要保持链接。</p>\n<p>HTTP Keep-Alive与TCP Keep-Alive，不是同一回事，意图不一样。HTTP Keep-Alive是为了让TCP活得更久一点，以便在同一个连接上传送多个HTTP，提高Socket的效率。而TCP Keep-Alive是TCP的一种检测TCP连接状况的保鲜机制。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Keep-Alive是什么\"><a href=\"#Keep-Alive是什么\" class=\"headerlink\" title=\"Keep-Alive是什么\"></a>Keep-Alive是什么</h3><p>在早期的HTTP1.0版本中，每个http请求都要求打开一个tcp socket连接，并且使用一次之后就断开这个tcp连接。这种效率和性能是最低的，因为建立一个TCP连接需要3次握手，而断开一个链接需要TCP四次握手。而在一个网页页面中含有的大量引入的js、css、img文件，如果每个请求都为之创建一个socket连接，这不仅是性能的底下而且还会给服务器带来很大的压力。 为了改善这种状态希望在一个页面中能重复的利用一个Socket连接来发送请求数据，<br>于是就发明了keep-alive即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少tcp连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高httpd服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。但是，keep-alive并不是免费的午餐,长时间的tcp连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。<br>keepalvie timeout。<br><img src=\"2013_12_20_02.png\" alt><br>","more":"</p>\n<h3 id=\"Keep-Alive如何设置\"><a href=\"#Keep-Alive如何设置\" class=\"headerlink\" title=\"Keep-Alive如何设置\"></a>Keep-Alive如何设置</h3><p>在HTTP1.1协议中都默认了支持keep-alive连接，而且所有浏览器都支持了这种模式，默认在HTTP头中自带了如下信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure></p>\n<p>这种设置告诉服务器我是支持keep-alive连接的。服务器接收到请求解析HTTP头Connection看到是keep-alive，在响应客户端后时判断了请求数没有超过maxKeepAliveRequests（Tomcat中默认是100）于是在响应头中设置了Connection: keep-alive，告诉浏览器Socket连接我没有关闭你再用这个连接给我发送数据。反之如果超过了就将Connection设置为如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection: close</span><br></pre></td></tr></table></figure></p>\n<p>告诉客户端连接我已经关闭了你需要重新建立连接。<br>这样会带来一个问题，因为在HTTP的早期版本采用关闭连接的办法来划定报文的结束，但是keep-alive的连接Socket并没有关闭所以浏览器不知道报文的结束于是将一直阻塞等待有新的数据可读，浏览器显示加载状态。于是需要借助HTTP头的另一个属性Content-Length，来告诉浏览器我的报文数据大小，从而来确定报文截尾。更多的内容请查看文章<a href=\"/2016/12/27/HTTP协议：不可小觑的Content-Length/\">HTTP协议：不可小觑的Content-Length</a></p>\n<h3 id=\"基于Java服务端的Keep-Alive的连接如何实现\"><a href=\"#基于Java服务端的Keep-Alive的连接如何实现\" class=\"headerlink\" title=\"基于Java服务端的Keep-Alive的连接如何实现\"></a>基于Java服务端的Keep-Alive的连接如何实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeepAliveServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">        AtomicInteger atomicInteger = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Socket socket =  serverSocket.accept();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp = atomicInteger.incrementAndGet();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"客户端：\"</span>+socket.getRemoteSocketAddress().toString()+<span class=\"string\">\"序号：\"</span>+temp);</span><br><span class=\"line\">            socket.setSoTimeout(<span class=\"number\">1000</span>);<span class=\"comment\">//（1）</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    InputStream inputStream = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    PrintWriter out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> maxKeepAliveConnect = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;<span class=\"comment\">//（2）</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            ++maxKeepAliveConnect;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"链接:\"</span>+temp+<span class=\"string\">\"开始第\"</span>+(++index)+<span class=\"string\">\"次读取\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>(maxKeepAliveConnect&gt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            inputStream = socket.getInputStream();</span><br><span class=\"line\">                            <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> i =-<span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span>((i=inputStream.read(b))!=-<span class=\"number\">1</span>)&#123;<span class=\"comment\">//（3）</span></span><br><span class=\"line\">                                <span class=\"comment\">//System.out.println(new String(b,0,i));</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                             </span><br><span class=\"line\">                            out = <span class=\"keyword\">new</span> PrintWriter(socket.getOutputStream());</span><br><span class=\"line\">                            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"1.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"2.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"3.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"4.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"5.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"6.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"7.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"8.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"9.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"10.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"11.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;script src=\\\"12.js\\\"&gt;&lt;/script&gt;\"</span>);</span><br><span class=\"line\">                            sb.append(<span class=\"string\">\"&lt;h1&gt;hello world&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">                            </span><br><span class=\"line\">                            out.println(<span class=\"string\">\"HTTP/1.1 200 OK\"</span>);   </span><br><span class=\"line\">                            out.println(<span class=\"string\">\"Connection: Keep-Alive\"</span>);</span><br><span class=\"line\">                            out.println(<span class=\"string\">\"Content-Type:text/html;charset:GBK\"</span>);</span><br><span class=\"line\">                            out.println(<span class=\"string\">\"Content-Length:\"</span>+sb.toString().length());</span><br><span class=\"line\">                            out.println();</span><br><span class=\"line\">                            out.println(sb.toString());</span><br><span class=\"line\">                            out.flush();</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"链接:\"</span>+temp+<span class=\"string\">\"第\"</span>+(index)+<span class=\"string\">\"次读取完成\"</span>);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//e.printStackTrace();</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        inputStream.close();</span><br><span class=\"line\">                        out.close();</span><br><span class=\"line\">                        socket.close();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里需要特别说明的几个地方：<br><strong>（1）：socket.setSoTimeout(1000);</strong><br>使用指定的超时时间启用/禁用SO_TIMEOUT毫秒。 使用此选项设置为非零超时，对与此Socket相关联的InputStream的read（）调用将阻塞只有这段时间。 如果超时到期，java.net.SocketTimeoutException 被引发，虽然套接字仍然有效。 必须启用选项之前进入阻塞操作有效。 的timeout必须&gt; 0。超时为零被解释为无限超时。<br><strong>（2）：while(true)</strong><br>默认为长连接。循环读取socket中的数据，每一次循环都将是客户端的一次请求<br><strong>（3）：inputStream.read(b);</strong><br>读取socket中的数据本次读取完成将返回-1，再次读取的时候如果Socket中没有数据可读将一直阻塞，除非有数据可读或者设置了setSoTimeout()。</p>\n<p>我们启动服务浏览器发送请求控制台输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端：/127.0.0.1:2992序号：1</span><br><span class=\"line\">客户端：/127.0.0.1:3000序号：2</span><br><span class=\"line\">客户端：/127.0.0.1:3001序号：3</span><br><span class=\"line\">客户端：/127.0.0.1:3002序号：4</span><br><span class=\"line\">客户端：/127.0.0.1:3003序号：5</span><br><span class=\"line\">客户端：/127.0.0.1:3004序号：6</span><br></pre></td></tr></table></figure></p>\n<p>Firefox浏览器网络请求信息<br><img src=\"20161227112307.png\" alt><br><strong>总结</strong><br>由此可以看出浏览器发送了了13个请求，但后台只有6个访问连接说明了其中有的请求共用了连接。这里6个连接也说明了Firefox的请求并发是6，每个并发都是一个新的连接。<br>各个浏览器并发请求数请参考<a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\" target=\"_blank\" rel=\"noopener\">浏览器并发请求数</a></p>\n<h3 id=\"HTTP-Keep-Alive于Socket-KeepAlive有何区别\"><a href=\"#HTTP-Keep-Alive于Socket-KeepAlive有何区别\" class=\"headerlink\" title=\"HTTP Keep-Alive于Socket KeepAlive有何区别\"></a>HTTP Keep-Alive于Socket KeepAlive有何区别</h3><p><strong>HTTP的Keep-Alive</strong>是http代理（通常指浏览器）与HTTP服务器之间的约定。告诉服务器处理完本次请求不要关闭连接，我待会还要使用，而服务器在响应HTTP头上也带有Keep-Alive告诉客服端我连接以及保存你可以继续使用。</p>\n<p><strong>Socket的KeepAlive</strong>是在客户端与服务器建立了长连接以后，如果应用程序或者上层协议一直不发送数据，或者隔很长时间才发送一次数据，当链接很久没有数据报文传输时如何去确定对方还在线，到底是掉线了还是确实没有数据传输，链接还需不需要保持，这种情况在TCP协议设计中是需要考虑到的。TCP协议通过一种巧妙的方式去解决这个问题，当超过一段时间之后，TCP自动发送一个数据为空的报文给对方，如果对方回应了这个报文，说明对方还在线，链接可以继续保持，如果对方没有报文返回，并且重试了多次之后则认为链接丢失，没有必要保持链接。</p>\n<p>HTTP Keep-Alive与TCP Keep-Alive，不是同一回事，意图不一样。HTTP Keep-Alive是为了让TCP活得更久一点，以便在同一个连接上传送多个HTTP，提高Socket的效率。而TCP Keep-Alive是TCP的一种检测TCP连接状况的保鲜机制。</p>"},{"title":"HTTP协议：不可小觑的Content-Length","date":"2016-12-26T16:00:00.000Z","comments":1,"toc":true,"_content":"\nContent-Length首部告诉浏览器报文中实体主体的大小。这个大小是包含了内容编码的，比如对文件进行了gzip压缩，Content-Length就是压缩后的大小（这点对我们编写服务器非常重要）。除非使用了分块编码，否则Content-Length首部就是带有实体主体的报文必须使用的。使用Content-Length首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。 \n<!--more-->\n### 检测截尾 \nHTTP的早期版本采用关闭连接的办法来划定报文的结束。但是，没有Content-Length的话，客户端无法区分到底是报文结束时正常的关闭连接还是报文传输中由于服务器崩溃而导致的连接关闭。客户端需要通过Content-Length来检测报文截尾。 \n\n报文截尾的问题对缓存代理服务器来说尤为重要。如果缓存服务器收到被截尾的报文却没有识别出截尾的话，它可能会存储不完整的内容并多次使用他来提供服务。缓存代理服务器通常不会为没有显式Content-Length首部的HTTP主体做缓存，以此来减小缓存已截尾报文的风险。 \n\n### Content-Length与持久连接 \nContent-Length首部对于持久链接是必不可少的。如果响应通过持久连接传送，就可能有另一条HTTP响应紧随其后。客户端通过Content-Length首部就可以知道报文在何处结束，下一条报文从何处开始。因为连接是持久的，客户端无法依赖连接关闭来判断报文的结束。 \n\n有一种情况，使用持久连接可以没有Content-Length首部，即采用分块编码（chunked encoding）时。在分块编码的情况下，数据是分为一系列的块来发送的，没块都有大小说明。哪怕服务器在生成首部的时候不知道整个实体的大小（通常是因为实体是动态生成的），仍然可以使用分块编码传输若干已知大小的块。\n","source":"_posts/HTTP协议：不可小觑的Content-Length.md","raw":"---\ntitle: HTTP协议：不可小觑的Content-Length\ndate: 2016-12-27\ncomments: true\ncategories: HTTP\ntoc: true \n---\n\nContent-Length首部告诉浏览器报文中实体主体的大小。这个大小是包含了内容编码的，比如对文件进行了gzip压缩，Content-Length就是压缩后的大小（这点对我们编写服务器非常重要）。除非使用了分块编码，否则Content-Length首部就是带有实体主体的报文必须使用的。使用Content-Length首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。 \n<!--more-->\n### 检测截尾 \nHTTP的早期版本采用关闭连接的办法来划定报文的结束。但是，没有Content-Length的话，客户端无法区分到底是报文结束时正常的关闭连接还是报文传输中由于服务器崩溃而导致的连接关闭。客户端需要通过Content-Length来检测报文截尾。 \n\n报文截尾的问题对缓存代理服务器来说尤为重要。如果缓存服务器收到被截尾的报文却没有识别出截尾的话，它可能会存储不完整的内容并多次使用他来提供服务。缓存代理服务器通常不会为没有显式Content-Length首部的HTTP主体做缓存，以此来减小缓存已截尾报文的风险。 \n\n### Content-Length与持久连接 \nContent-Length首部对于持久链接是必不可少的。如果响应通过持久连接传送，就可能有另一条HTTP响应紧随其后。客户端通过Content-Length首部就可以知道报文在何处结束，下一条报文从何处开始。因为连接是持久的，客户端无法依赖连接关闭来判断报文的结束。 \n\n有一种情况，使用持久连接可以没有Content-Length首部，即采用分块编码（chunked encoding）时。在分块编码的情况下，数据是分为一系列的块来发送的，没块都有大小说明。哪怕服务器在生成首部的时候不知道整个实体的大小（通常是因为实体是动态生成的），仍然可以使用分块编码传输若干已知大小的块。\n","slug":"HTTP协议：不可小觑的Content-Length","published":1,"updated":"2021-06-25T02:00:17.837Z","layout":"post","photos":[],"link":"","_id":"ckqjatok60005qkl5lf5i345o","content":"<p>Content-Length首部告诉浏览器报文中实体主体的大小。这个大小是包含了内容编码的，比如对文件进行了gzip压缩，Content-Length就是压缩后的大小（这点对我们编写服务器非常重要）。除非使用了分块编码，否则Content-Length首部就是带有实体主体的报文必须使用的。使用Content-Length首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。<br><a id=\"more\"></a></p>\n<h3 id=\"检测截尾\"><a href=\"#检测截尾\" class=\"headerlink\" title=\"检测截尾\"></a>检测截尾</h3><p>HTTP的早期版本采用关闭连接的办法来划定报文的结束。但是，没有Content-Length的话，客户端无法区分到底是报文结束时正常的关闭连接还是报文传输中由于服务器崩溃而导致的连接关闭。客户端需要通过Content-Length来检测报文截尾。 </p>\n<p>报文截尾的问题对缓存代理服务器来说尤为重要。如果缓存服务器收到被截尾的报文却没有识别出截尾的话，它可能会存储不完整的内容并多次使用他来提供服务。缓存代理服务器通常不会为没有显式Content-Length首部的HTTP主体做缓存，以此来减小缓存已截尾报文的风险。 </p>\n<h3 id=\"Content-Length与持久连接\"><a href=\"#Content-Length与持久连接\" class=\"headerlink\" title=\"Content-Length与持久连接\"></a>Content-Length与持久连接</h3><p>Content-Length首部对于持久链接是必不可少的。如果响应通过持久连接传送，就可能有另一条HTTP响应紧随其后。客户端通过Content-Length首部就可以知道报文在何处结束，下一条报文从何处开始。因为连接是持久的，客户端无法依赖连接关闭来判断报文的结束。 </p>\n<p>有一种情况，使用持久连接可以没有Content-Length首部，即采用分块编码（chunked encoding）时。在分块编码的情况下，数据是分为一系列的块来发送的，没块都有大小说明。哪怕服务器在生成首部的时候不知道整个实体的大小（通常是因为实体是动态生成的），仍然可以使用分块编码传输若干已知大小的块。</p>\n","site":{"data":{}},"excerpt":"<p>Content-Length首部告诉浏览器报文中实体主体的大小。这个大小是包含了内容编码的，比如对文件进行了gzip压缩，Content-Length就是压缩后的大小（这点对我们编写服务器非常重要）。除非使用了分块编码，否则Content-Length首部就是带有实体主体的报文必须使用的。使用Content-Length首部是为了能够检测出服务器崩溃而导致的报文截尾，并对共享持久连接的多个报文进行正确分段。<br>","more":"</p>\n<h3 id=\"检测截尾\"><a href=\"#检测截尾\" class=\"headerlink\" title=\"检测截尾\"></a>检测截尾</h3><p>HTTP的早期版本采用关闭连接的办法来划定报文的结束。但是，没有Content-Length的话，客户端无法区分到底是报文结束时正常的关闭连接还是报文传输中由于服务器崩溃而导致的连接关闭。客户端需要通过Content-Length来检测报文截尾。 </p>\n<p>报文截尾的问题对缓存代理服务器来说尤为重要。如果缓存服务器收到被截尾的报文却没有识别出截尾的话，它可能会存储不完整的内容并多次使用他来提供服务。缓存代理服务器通常不会为没有显式Content-Length首部的HTTP主体做缓存，以此来减小缓存已截尾报文的风险。 </p>\n<h3 id=\"Content-Length与持久连接\"><a href=\"#Content-Length与持久连接\" class=\"headerlink\" title=\"Content-Length与持久连接\"></a>Content-Length与持久连接</h3><p>Content-Length首部对于持久链接是必不可少的。如果响应通过持久连接传送，就可能有另一条HTTP响应紧随其后。客户端通过Content-Length首部就可以知道报文在何处结束，下一条报文从何处开始。因为连接是持久的，客户端无法依赖连接关闭来判断报文的结束。 </p>\n<p>有一种情况，使用持久连接可以没有Content-Length首部，即采用分块编码（chunked encoding）时。在分块编码的情况下，数据是分为一系列的块来发送的，没块都有大小说明。哪怕服务器在生成首部的时候不知道整个实体的大小（通常是因为实体是动态生成的），仍然可以使用分块编码传输若干已知大小的块。</p>"},{"title":"Hadoop集群完全分布式部署","date":"2015-01-08T15:45:20.000Z","comments":1,"toc":true,"_content":"\n## 准备环境\n|IP       \t\t | 主机名称    | 角色                  |操作系统   |\n|:--------------:|:-----------:|:---------------------:|:---------:|\n|192.168.131.129 |HadoopMaster | NameNode JobTracker   | CentOS 6.6|\n|192.168.131.128 |HadoopSlave1 | DataNode TaskTracker  | CentOS 6.6|\n\n<!-- more --> \n## hadoop版本\n***hadoop-2.6.0***\n***hadoop目录结构***\n![hadoop目录结构](003vMReezy6P1MG9JTO50&690.png)\n\n## 修改主机名称\n***将192.168.131.129修改为HadoopMaster***\n```\nshell vi /etc/sysconfig/network\nNETWORKING=yes\nHOSTNAME=HadoopMaster\n```\n***将192.168.131.128修改为HadoopSlave1***\n\n```\nshell vi /etc/sysconfig/network\nHOSTNAME=HadoopSlave\n```\n***通过命令hostname输出主机名称验证是否修改成功***\n\n```\nshell hostname\nHadoopMaster\n```\n\n## 配置hosts\n```\nshell vi /etc/hosts\n192.168.131.129 HadoopMaster\n192.168.131.128 HadoopSlave1\n```\n***在hosts文件添加如上两行 必须保证所有节点的host一样***\n\n\n## 安装jdk\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n```\nshell rpm -qa|grep java\n```\n第二步：查看yum库是否有java安装包\n```\nshell yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n```\n显示如上信息表示安装成功\n\n## 安装软件（系统一般都自带）\n```\nshell yum install ssh\nshell yum install rsync\n```\n## 创建hadoop用户\n所有节点的用户名称和密码多必须保持一致相同\n\n## 切换到Hadoop用户配置ssh免密码登录\n1、在Master节点上执行\n```\nshell ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa \nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n2、对authorized_keys 授权\n```\nshell chmod 744 authorized_keys \nshell ls ~/.ssh/\n```\n3、验证是否密码登录\n```\nshell ssh HadoopMaster\n```\n4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下\n```\nshell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/\n```\n5、在Slave节点上通过\n```\nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n生成authorized_keys并授权\n6、在Master节点上验证是否能密码了登录Slave节点\n```\nshell ssh HadoopSlave1\n```\n\n## 切换到root用户下载hadoop\n\n```\nshell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz\n```\n[hadoop所有版本地址](http://apache.fayea.com/hadoop/common/)\n\n## 解压hadoop\n```\nshell tar -zxvf hadoop-2.6.0.tar.gz\n```\n将hadoop移动到/home/hadoop/目录下\n把hadoop-2.6.0目录操作权限分配给hadoop用户\n```\nshell chown hadoop hadoop-2.6.0/*\nshell chmod 700 hadoop-2.6.0/*\n```\n查看文件操作操作用户权限\n![文件权限](003vMReezy6P1KnAQkx19&690.png)\n\n## 设置hadoop启动参数\n### 设置java安装路径\n```\nshell vi etc/hadoop/hadoop-env.sh\nexport JAVA_HOME=java的安装路径\n```\n如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找\n```\nshell which java\n/use/bin/java\n```\n得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可\n![java环境配置](003vMReezy6P1KHLwtFe7&690.png)\n\n## 配置core-site.xml\n```xml\nshell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml\n\n<configuration>\n\t<property>  \n        <name>hadoop.tmp.dir</name>  \n        <value>/home/hadoop/tmp</value>  \n        <description>Abase for other temporary directories.</description>  \n    </property>\n\t<property>\n      <name>fs.default.name</name>\n      <value>hdfs://HadoopMaster:9000</value>         \n  </property>          \n  <property>            \n       <name>mapred.job.tracker</name>           \n       <value>hdfs://HadoopMaster:9001</value>     \n  </property>                      \n  <property>  \n        <name>io.file.buffer.size</name>  \n        <value>4096</value>  \n  </property>\n</configuration>\n```\n\n## 配置hdfs-site.xml\n```xml\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml\n\n<configuration>\n\t<property>  \n        <name>dfs.nameservices</name>  \n        <value>hadoop-cluster1</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.secondary.http-address</name>  \n        <value>HadoopMaster:50090</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.name.dir</name>  \n        <value>file:///home/hadoop/dfs/name</value>  \n    </property>  \n    <property>  \n        <name>dfs.datanode.data.dir</name>  \n        <value>file:///home/hadoop/dfs/data</value>  \n    </property>  \n    <property>  \n        <name>dfs.replication</name>  \n        <value>2</value>  \n    </property>  \n    <property>  \n        <name>dfs.webhdfs.enabled</name>  \n        <value>true</value>  \n    </property> \n</configuration>\n```\n\n## 配置slaves\n```\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves\n```\n***集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称***\n```\nshell cat etc/hadoop/slaves\nlocalhost\n```\n***将localhost修改为HadoopSlave1***\n\n## 配置hadoop安装目录\n```\nshell vi /etc/profile\n\nexport HADOOP_HOME=/home/hadoop/hadoop-2.6.0\nexport HADOOP_COMMON_HOME=$HADOOP_HOME\nexport HADOOP_HDFS_HOME=$HADOOP_HOME\nexport HADOOP_MAPRED_HOME=$HADOOP_HOME\nexport HADOOP_YARN_HOME=$HADOOP_HOME\nexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib\nexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native\nexport HADOOP_OPTS=\"-Djava.library.path=$HADOOP_HOME/lib\"\n\n#使修改立即生效\nshell source /etc/profile \n```\n\n***注意：如果不添加上面配置可能会报如下错误***\n```\n15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nStarting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.\nIt's highly recommended that you fix the library with 'execstack -c ', or link it with '-z noexecstack'.\n```\n\n## 格式化hadoop\n```\nshell bin/hadoop namenode -format\n```\n![格式化hadoop](003vMReezy6P1LyH3gqae&690.jpg)\n格式化成功\n\n## 同步节点\n将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）\n```\nshell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/\n```\n\n## 启动hadoop\n```\nshell sbin/start-all.sh\n```\n\n通过http://192.168.131.129:50070查看hadoop相关信息\n![启动成功](003vMReezy6P1MlAy3H5d&690.jpg)\n如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题\n![启动失败](003vMReezy6P1Mzjamje7&690.jpg)\n\n查看日志看到如异常（日志文件在 hadoop logs目录下）\n![查看日志](003vMReezy6P1O1zJBg32&690.jpg)\n这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了","source":"_posts/Hadoop集群完全分布式部署.md","raw":"---\ntitle: Hadoop集群完全分布式部署\ndate: 2015-01-08 23:45:20 \ncomments: true \ncategories: Hadoop\ntoc: true\n---\n\n## 准备环境\n|IP       \t\t | 主机名称    | 角色                  |操作系统   |\n|:--------------:|:-----------:|:---------------------:|:---------:|\n|192.168.131.129 |HadoopMaster | NameNode JobTracker   | CentOS 6.6|\n|192.168.131.128 |HadoopSlave1 | DataNode TaskTracker  | CentOS 6.6|\n\n<!-- more --> \n## hadoop版本\n***hadoop-2.6.0***\n***hadoop目录结构***\n![hadoop目录结构](003vMReezy6P1MG9JTO50&690.png)\n\n## 修改主机名称\n***将192.168.131.129修改为HadoopMaster***\n```\nshell vi /etc/sysconfig/network\nNETWORKING=yes\nHOSTNAME=HadoopMaster\n```\n***将192.168.131.128修改为HadoopSlave1***\n\n```\nshell vi /etc/sysconfig/network\nHOSTNAME=HadoopSlave\n```\n***通过命令hostname输出主机名称验证是否修改成功***\n\n```\nshell hostname\nHadoopMaster\n```\n\n## 配置hosts\n```\nshell vi /etc/hosts\n192.168.131.129 HadoopMaster\n192.168.131.128 HadoopSlave1\n```\n***在hosts文件添加如上两行 必须保证所有节点的host一样***\n\n\n## 安装jdk\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n```\nshell rpm -qa|grep java\n```\n第二步：查看yum库是否有java安装包\n```\nshell yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n```\n显示如上信息表示安装成功\n\n## 安装软件（系统一般都自带）\n```\nshell yum install ssh\nshell yum install rsync\n```\n## 创建hadoop用户\n所有节点的用户名称和密码多必须保持一致相同\n\n## 切换到Hadoop用户配置ssh免密码登录\n1、在Master节点上执行\n```\nshell ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa \nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n2、对authorized_keys 授权\n```\nshell chmod 744 authorized_keys \nshell ls ~/.ssh/\n```\n3、验证是否密码登录\n```\nshell ssh HadoopMaster\n```\n4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下\n```\nshell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/\n```\n5、在Slave节点上通过\n```\nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n生成authorized_keys并授权\n6、在Master节点上验证是否能密码了登录Slave节点\n```\nshell ssh HadoopSlave1\n```\n\n## 切换到root用户下载hadoop\n\n```\nshell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz\n```\n[hadoop所有版本地址](http://apache.fayea.com/hadoop/common/)\n\n## 解压hadoop\n```\nshell tar -zxvf hadoop-2.6.0.tar.gz\n```\n将hadoop移动到/home/hadoop/目录下\n把hadoop-2.6.0目录操作权限分配给hadoop用户\n```\nshell chown hadoop hadoop-2.6.0/*\nshell chmod 700 hadoop-2.6.0/*\n```\n查看文件操作操作用户权限\n![文件权限](003vMReezy6P1KnAQkx19&690.png)\n\n## 设置hadoop启动参数\n### 设置java安装路径\n```\nshell vi etc/hadoop/hadoop-env.sh\nexport JAVA_HOME=java的安装路径\n```\n如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找\n```\nshell which java\n/use/bin/java\n```\n得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可\n![java环境配置](003vMReezy6P1KHLwtFe7&690.png)\n\n## 配置core-site.xml\n```xml\nshell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml\n\n<configuration>\n\t<property>  \n        <name>hadoop.tmp.dir</name>  \n        <value>/home/hadoop/tmp</value>  \n        <description>Abase for other temporary directories.</description>  \n    </property>\n\t<property>\n      <name>fs.default.name</name>\n      <value>hdfs://HadoopMaster:9000</value>         \n  </property>          \n  <property>            \n       <name>mapred.job.tracker</name>           \n       <value>hdfs://HadoopMaster:9001</value>     \n  </property>                      \n  <property>  \n        <name>io.file.buffer.size</name>  \n        <value>4096</value>  \n  </property>\n</configuration>\n```\n\n## 配置hdfs-site.xml\n```xml\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml\n\n<configuration>\n\t<property>  \n        <name>dfs.nameservices</name>  \n        <value>hadoop-cluster1</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.secondary.http-address</name>  \n        <value>HadoopMaster:50090</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.name.dir</name>  \n        <value>file:///home/hadoop/dfs/name</value>  \n    </property>  \n    <property>  \n        <name>dfs.datanode.data.dir</name>  \n        <value>file:///home/hadoop/dfs/data</value>  \n    </property>  \n    <property>  \n        <name>dfs.replication</name>  \n        <value>2</value>  \n    </property>  \n    <property>  \n        <name>dfs.webhdfs.enabled</name>  \n        <value>true</value>  \n    </property> \n</configuration>\n```\n\n## 配置slaves\n```\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves\n```\n***集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称***\n```\nshell cat etc/hadoop/slaves\nlocalhost\n```\n***将localhost修改为HadoopSlave1***\n\n## 配置hadoop安装目录\n```\nshell vi /etc/profile\n\nexport HADOOP_HOME=/home/hadoop/hadoop-2.6.0\nexport HADOOP_COMMON_HOME=$HADOOP_HOME\nexport HADOOP_HDFS_HOME=$HADOOP_HOME\nexport HADOOP_MAPRED_HOME=$HADOOP_HOME\nexport HADOOP_YARN_HOME=$HADOOP_HOME\nexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib\nexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native\nexport HADOOP_OPTS=\"-Djava.library.path=$HADOOP_HOME/lib\"\n\n#使修改立即生效\nshell source /etc/profile \n```\n\n***注意：如果不添加上面配置可能会报如下错误***\n```\n15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nStarting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.\nIt's highly recommended that you fix the library with 'execstack -c ', or link it with '-z noexecstack'.\n```\n\n## 格式化hadoop\n```\nshell bin/hadoop namenode -format\n```\n![格式化hadoop](003vMReezy6P1LyH3gqae&690.jpg)\n格式化成功\n\n## 同步节点\n将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）\n```\nshell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/\n```\n\n## 启动hadoop\n```\nshell sbin/start-all.sh\n```\n\n通过http://192.168.131.129:50070查看hadoop相关信息\n![启动成功](003vMReezy6P1MlAy3H5d&690.jpg)\n如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题\n![启动失败](003vMReezy6P1Mzjamje7&690.jpg)\n\n查看日志看到如异常（日志文件在 hadoop logs目录下）\n![查看日志](003vMReezy6P1O1zJBg32&690.jpg)\n这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了","slug":"Hadoop集群完全分布式部署","published":1,"updated":"2021-06-25T02:00:17.839Z","layout":"post","photos":[],"link":"","_id":"ckqjatoka0007qkl51zjuxq71","content":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IP</th>\n<th style=\"text-align:center\">主机名称</th>\n<th style=\"text-align:center\">角色</th>\n<th style=\"text-align:center\">操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">192.168.131.129</td>\n<td style=\"text-align:center\">HadoopMaster</td>\n<td style=\"text-align:center\">NameNode JobTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.131.128</td>\n<td style=\"text-align:center\">HadoopSlave1</td>\n<td style=\"text-align:center\">DataNode TaskTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a> \n<h2 id=\"hadoop版本\"><a href=\"#hadoop版本\" class=\"headerlink\" title=\"hadoop版本\"></a>hadoop版本</h2><p><strong><em>hadoop-2.6.0</em></strong><br><strong><em>hadoop目录结构</em></strong><br><img src=\"003vMReezy6P1MG9JTO50&amp;690.png\" alt=\"hadoop目录结构\"></p>\n<h2 id=\"修改主机名称\"><a href=\"#修改主机名称\" class=\"headerlink\" title=\"修改主机名称\"></a>修改主机名称</h2><p><strong><em>将192.168.131.129修改为HadoopMaster</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">NETWORKING=yes</span><br><span class=\"line\">HOSTNAME=HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将192.168.131.128修改为HadoopSlave1</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">HOSTNAME=HadoopSlave</span><br></pre></td></tr></table></figure>\n<p><strong><em>通过命令hostname输出主机名称验证是否修改成功</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell hostname</span><br><span class=\"line\">HadoopMaster</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hosts\"><a href=\"#配置hosts\" class=\"headerlink\" title=\"配置hosts\"></a>配置hosts</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/hosts</span><br><span class=\"line\">192.168.131.129 HadoopMaster</span><br><span class=\"line\">192.168.131.128 HadoopSlave1</span><br></pre></td></tr></table></figure>\n<p><strong><em>在hosts文件添加如上两行 必须保证所有节点的host一样</em></strong></p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa|grep java</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br></pre></td></tr></table></figure></p>\n<p>显示如上信息表示安装成功</p>\n<h2 id=\"安装软件（系统一般都自带）\"><a href=\"#安装软件（系统一般都自带）\" class=\"headerlink\" title=\"安装软件（系统一般都自带）\"></a>安装软件（系统一般都自带）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install ssh</span><br><span class=\"line\">shell yum install rsync</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建hadoop用户\"><a href=\"#创建hadoop用户\" class=\"headerlink\" title=\"创建hadoop用户\"></a>创建hadoop用户</h2><p>所有节点的用户名称和密码多必须保持一致相同</p>\n<h2 id=\"切换到Hadoop用户配置ssh免密码登录\"><a href=\"#切换到Hadoop用户配置ssh免密码登录\" class=\"headerlink\" title=\"切换到Hadoop用户配置ssh免密码登录\"></a>切换到Hadoop用户配置ssh免密码登录</h2><p>1、在Master节点上执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh-keygen -t dsa -P &apos;&apos; -f ~/.ssh/id_dsa </span><br><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>2、对authorized_keys 授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chmod 744 authorized_keys </span><br><span class=\"line\">shell ls ~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>3、验证是否密码登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p>4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>5、在Slave节点上通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>生成authorized_keys并授权<br>6、在Master节点上验证是否能密码了登录Slave节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopSlave1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"切换到root用户下载hadoop\"><a href=\"#切换到root用户下载hadoop\" class=\"headerlink\" title=\"切换到root用户下载hadoop\"></a>切换到root用户下载hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://apache.fayea.com/hadoop/common/\" target=\"_blank\" rel=\"noopener\">hadoop所有版本地址</a></p>\n<h2 id=\"解压hadoop\"><a href=\"#解压hadoop\" class=\"headerlink\" title=\"解压hadoop\"></a>解压hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell tar -zxvf hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将hadoop移动到/home/hadoop/目录下<br>把hadoop-2.6.0目录操作权限分配给hadoop用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chown hadoop hadoop-2.6.0/*</span><br><span class=\"line\">shell chmod 700 hadoop-2.6.0/*</span><br></pre></td></tr></table></figure></p>\n<p>查看文件操作操作用户权限<br><img src=\"003vMReezy6P1KnAQkx19&amp;690.png\" alt=\"文件权限\"></p>\n<h2 id=\"设置hadoop启动参数\"><a href=\"#设置hadoop启动参数\" class=\"headerlink\" title=\"设置hadoop启动参数\"></a>设置hadoop启动参数</h2><h3 id=\"设置java安装路径\"><a href=\"#设置java安装路径\" class=\"headerlink\" title=\"设置java安装路径\"></a>设置java安装路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi etc/hadoop/hadoop-env.sh</span><br><span class=\"line\">export JAVA_HOME=java的安装路径</span><br></pre></td></tr></table></figure>\n<p>如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell which java</span><br><span class=\"line\">/use/bin/java</span><br></pre></td></tr></table></figure></p>\n<p>得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可<br><img src=\"003vMReezy6P1KHLwtFe7&amp;690.png\" alt=\"java环境配置\"></p>\n<h2 id=\"配置core-site-xml\"><a href=\"#配置core-site-xml\" class=\"headerlink\" title=\"配置core-site.xml\"></a>配置core-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/home/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Abase for other temporary directories.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>         </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>          </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>            </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>           </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>     </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>                      </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>io.file.buffer.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hdfs-site-xml\"><a href=\"#配置hdfs-site-xml\" class=\"headerlink\" title=\"配置hdfs-site.xml\"></a>配置hdfs-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.nameservices<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-cluster1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HadoopMaster:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.webhdfs.enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置slaves\"><a href=\"#配置slaves\" class=\"headerlink\" title=\"配置slaves\"></a>配置slaves</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>\n<p><strong><em>集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat etc/hadoop/slaves</span><br><span class=\"line\">localhost</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将localhost修改为HadoopSlave1</em></strong></p>\n<h2 id=\"配置hadoop安装目录\"><a href=\"#配置hadoop安装目录\" class=\"headerlink\" title=\"配置hadoop安装目录\"></a>配置hadoop安装目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop-2.6.0</span><br><span class=\"line\">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_YARN_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class=\"line\">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib</span><br><span class=\"line\">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class=\"line\">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#使修改立即生效</span><br><span class=\"line\">shell source /etc/profile</span><br></pre></td></tr></table></figure>\n<p><strong><em>注意：如果不添加上面配置可能会报如下错误</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">Starting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.</span><br><span class=\"line\">It&apos;s highly recommended that you fix the library with &apos;execstack -c &apos;, or link it with &apos;-z noexecstack&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"格式化hadoop\"><a href=\"#格式化hadoop\" class=\"headerlink\" title=\"格式化hadoop\"></a>格式化hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell bin/hadoop namenode -format</span><br></pre></td></tr></table></figure>\n<p><img src=\"003vMReezy6P1LyH3gqae&amp;690.jpg\" alt=\"格式化hadoop\"><br>格式化成功</p>\n<h2 id=\"同步节点\"><a href=\"#同步节点\" class=\"headerlink\" title=\"同步节点\"></a>同步节点</h2><p>将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell sbin/start-all.sh</span><br></pre></td></tr></table></figure>\n<p>通过<a href=\"http://192.168.131.129:50070查看hadoop相关信息\" target=\"_blank\" rel=\"noopener\">http://192.168.131.129:50070查看hadoop相关信息</a><br><img src=\"003vMReezy6P1MlAy3H5d&amp;690.jpg\" alt=\"启动成功\"><br>如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题<br><img src=\"003vMReezy6P1Mzjamje7&amp;690.jpg\" alt=\"启动失败\"></p>\n<p>查看日志看到如异常（日志文件在 hadoop logs目录下）<br><img src=\"003vMReezy6P1O1zJBg32&amp;690.jpg\" alt=\"查看日志\"><br>这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IP</th>\n<th style=\"text-align:center\">主机名称</th>\n<th style=\"text-align:center\">角色</th>\n<th style=\"text-align:center\">操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">192.168.131.129</td>\n<td style=\"text-align:center\">HadoopMaster</td>\n<td style=\"text-align:center\">NameNode JobTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.131.128</td>\n<td style=\"text-align:center\">HadoopSlave1</td>\n<td style=\"text-align:center\">DataNode TaskTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"hadoop版本\"><a href=\"#hadoop版本\" class=\"headerlink\" title=\"hadoop版本\"></a>hadoop版本</h2><p><strong><em>hadoop-2.6.0</em></strong><br><strong><em>hadoop目录结构</em></strong><br><img src=\"003vMReezy6P1MG9JTO50&amp;690.png\" alt=\"hadoop目录结构\"></p>\n<h2 id=\"修改主机名称\"><a href=\"#修改主机名称\" class=\"headerlink\" title=\"修改主机名称\"></a>修改主机名称</h2><p><strong><em>将192.168.131.129修改为HadoopMaster</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">NETWORKING=yes</span><br><span class=\"line\">HOSTNAME=HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将192.168.131.128修改为HadoopSlave1</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">HOSTNAME=HadoopSlave</span><br></pre></td></tr></table></figure>\n<p><strong><em>通过命令hostname输出主机名称验证是否修改成功</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell hostname</span><br><span class=\"line\">HadoopMaster</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hosts\"><a href=\"#配置hosts\" class=\"headerlink\" title=\"配置hosts\"></a>配置hosts</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/hosts</span><br><span class=\"line\">192.168.131.129 HadoopMaster</span><br><span class=\"line\">192.168.131.128 HadoopSlave1</span><br></pre></td></tr></table></figure>\n<p><strong><em>在hosts文件添加如上两行 必须保证所有节点的host一样</em></strong></p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa|grep java</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br></pre></td></tr></table></figure></p>\n<p>显示如上信息表示安装成功</p>\n<h2 id=\"安装软件（系统一般都自带）\"><a href=\"#安装软件（系统一般都自带）\" class=\"headerlink\" title=\"安装软件（系统一般都自带）\"></a>安装软件（系统一般都自带）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install ssh</span><br><span class=\"line\">shell yum install rsync</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建hadoop用户\"><a href=\"#创建hadoop用户\" class=\"headerlink\" title=\"创建hadoop用户\"></a>创建hadoop用户</h2><p>所有节点的用户名称和密码多必须保持一致相同</p>\n<h2 id=\"切换到Hadoop用户配置ssh免密码登录\"><a href=\"#切换到Hadoop用户配置ssh免密码登录\" class=\"headerlink\" title=\"切换到Hadoop用户配置ssh免密码登录\"></a>切换到Hadoop用户配置ssh免密码登录</h2><p>1、在Master节点上执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh-keygen -t dsa -P &apos;&apos; -f ~/.ssh/id_dsa </span><br><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>2、对authorized_keys 授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chmod 744 authorized_keys </span><br><span class=\"line\">shell ls ~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>3、验证是否密码登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p>4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>5、在Slave节点上通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>生成authorized_keys并授权<br>6、在Master节点上验证是否能密码了登录Slave节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopSlave1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"切换到root用户下载hadoop\"><a href=\"#切换到root用户下载hadoop\" class=\"headerlink\" title=\"切换到root用户下载hadoop\"></a>切换到root用户下载hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://apache.fayea.com/hadoop/common/\" target=\"_blank\" rel=\"noopener\">hadoop所有版本地址</a></p>\n<h2 id=\"解压hadoop\"><a href=\"#解压hadoop\" class=\"headerlink\" title=\"解压hadoop\"></a>解压hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell tar -zxvf hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将hadoop移动到/home/hadoop/目录下<br>把hadoop-2.6.0目录操作权限分配给hadoop用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chown hadoop hadoop-2.6.0/*</span><br><span class=\"line\">shell chmod 700 hadoop-2.6.0/*</span><br></pre></td></tr></table></figure></p>\n<p>查看文件操作操作用户权限<br><img src=\"003vMReezy6P1KnAQkx19&amp;690.png\" alt=\"文件权限\"></p>\n<h2 id=\"设置hadoop启动参数\"><a href=\"#设置hadoop启动参数\" class=\"headerlink\" title=\"设置hadoop启动参数\"></a>设置hadoop启动参数</h2><h3 id=\"设置java安装路径\"><a href=\"#设置java安装路径\" class=\"headerlink\" title=\"设置java安装路径\"></a>设置java安装路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi etc/hadoop/hadoop-env.sh</span><br><span class=\"line\">export JAVA_HOME=java的安装路径</span><br></pre></td></tr></table></figure>\n<p>如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell which java</span><br><span class=\"line\">/use/bin/java</span><br></pre></td></tr></table></figure></p>\n<p>得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可<br><img src=\"003vMReezy6P1KHLwtFe7&amp;690.png\" alt=\"java环境配置\"></p>\n<h2 id=\"配置core-site-xml\"><a href=\"#配置core-site-xml\" class=\"headerlink\" title=\"配置core-site.xml\"></a>配置core-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/home/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Abase for other temporary directories.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>         </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>          </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>            </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>           </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>     </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>                      </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>io.file.buffer.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hdfs-site-xml\"><a href=\"#配置hdfs-site-xml\" class=\"headerlink\" title=\"配置hdfs-site.xml\"></a>配置hdfs-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.nameservices<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-cluster1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HadoopMaster:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.webhdfs.enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置slaves\"><a href=\"#配置slaves\" class=\"headerlink\" title=\"配置slaves\"></a>配置slaves</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>\n<p><strong><em>集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat etc/hadoop/slaves</span><br><span class=\"line\">localhost</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将localhost修改为HadoopSlave1</em></strong></p>\n<h2 id=\"配置hadoop安装目录\"><a href=\"#配置hadoop安装目录\" class=\"headerlink\" title=\"配置hadoop安装目录\"></a>配置hadoop安装目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop-2.6.0</span><br><span class=\"line\">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_YARN_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class=\"line\">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib</span><br><span class=\"line\">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class=\"line\">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#使修改立即生效</span><br><span class=\"line\">shell source /etc/profile</span><br></pre></td></tr></table></figure>\n<p><strong><em>注意：如果不添加上面配置可能会报如下错误</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">Starting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.</span><br><span class=\"line\">It&apos;s highly recommended that you fix the library with &apos;execstack -c &apos;, or link it with &apos;-z noexecstack&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"格式化hadoop\"><a href=\"#格式化hadoop\" class=\"headerlink\" title=\"格式化hadoop\"></a>格式化hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell bin/hadoop namenode -format</span><br></pre></td></tr></table></figure>\n<p><img src=\"003vMReezy6P1LyH3gqae&amp;690.jpg\" alt=\"格式化hadoop\"><br>格式化成功</p>\n<h2 id=\"同步节点\"><a href=\"#同步节点\" class=\"headerlink\" title=\"同步节点\"></a>同步节点</h2><p>将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell sbin/start-all.sh</span><br></pre></td></tr></table></figure>\n<p>通过<a href=\"http://192.168.131.129:50070查看hadoop相关信息\" target=\"_blank\" rel=\"noopener\">http://192.168.131.129:50070查看hadoop相关信息</a><br><img src=\"003vMReezy6P1MlAy3H5d&amp;690.jpg\" alt=\"启动成功\"><br>如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题<br><img src=\"003vMReezy6P1Mzjamje7&amp;690.jpg\" alt=\"启动失败\"></p>\n<p>查看日志看到如异常（日志文件在 hadoop logs目录下）<br><img src=\"003vMReezy6P1O1zJBg32&amp;690.jpg\" alt=\"查看日志\"><br>这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了</p>"},{"title":"JDK常用性能分析命令行工具","date":"2016-08-22T05:56:33.000Z","comments":1,"toc":true,"_content":"\n# jps\njps（JVM Process Status Too)可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class,main（）函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）。虽然功能比较单一，但它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到的LVMID来确定要监控的是哪一个虚拟机进程。对于本地虚拟机进程来说，LVMID与操作系统的进程ID（Process Identifier,PID）是一致的，使用Windows的任务管理器或者UNIX的ps命令也可以查询到虚拟机进程的LVMID，但如果同时启动了多个虚拟机进程，无法根据进程名称定位时，那就只能依赖jps命令显示主类的功能才能区分了。\n<!--more-->\n***语法:***\n```\njps [-q] [-mlvV] [<hostid>]\n```\n\n***可用的options:***\n\n| 选项    |描叙                                         |\n|:--------|:--------------------------------------------|\n|-l       |输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名|\n|-m\t\t  |输出传递给main 方法的参数|\n|-q\t\t  |显示pid|\n|-v       |输出传递给JVM的参数|\n\n***实例:***\n```\n[root@localhost bin]# jps -l -m\n63706 sun.tools.jps.Jps -l -m\n79105 org.apache.catalina.startup.Bootstrap start\n80838 com.yonyouup.openapi.netty.startup.Bootstrap\n```\n\n# jinfo\njinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。 \n***语法:***\n```\n#指定进程号(pid)的进程\njinfo [option] <pid>\n#指定核心文件\njinfo [option] <executable <core>\n#指定远程调试服务器\njinfo [option] [server_id@]<remote server IP or hostname>\n```\n\n***参数:***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。|\n|pid     |需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。|\n|executable|产生核心dump的Java可执行文件。|\n|core   |需要打印配置信息的核心文件。 |\n|remote-hostname-or-IP   |远程调试服务器的(请查看jsadebugd)主机名或IP地址。 |\n|server-id |可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。 |\n\n***可用的options:***\n\n| 选项            |描叙                              |\n|:----------------|:---------------------------------|\n| none            |打印命令行标识参数和系统属性键值对|\n|-flag name       |打印指定的命令行标识参数的名称和值|\n|-flag [+/-]name  |启用或禁用指定的boolean类型的命令行标识参数|\n|-flag name=value |为给定的命令行标识参数设置指定的值|\n|-flags           |成对打印传递给JVM的命令行标识参数|\n|-sysprops        |以键值对形式打印Java系统属性|\n|-h               |打印帮助信息|\n|-help            |打印帮助信息|\n\n***实例:***\n```\n[root@localhost bin]# jinfo 80838\nAttaching to process ID 80838, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.65-b04\nJava System Properties:\n此处省略n行。。。。\nVM Flags:\n\n-Xms512m -Xmx1024m -Dnettyserver_home=/data/server/NettyServer\n```\n\n# jmap\njmap是java虚拟机自带的一种内存映像工具。（如：产生那些对象，及其数量）。\n***语法:***\n```\n#指定进程号(pid)的进程\njmap [option] <pid>\n#指定核心文件\njmap [option] <executable <core>\n#指定远程调试服务器\njmap [option] [server_id@]<remote server IP or hostname>\n```\n\n***参数:***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。|\n|pid     |需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。|\n|executable|产生核心dump的Java可执行文件。|\n|core   |需要打印配置信息的核心文件。 |\n|remote-hostname-or-IP   |远程调试服务器的(请查看jsadebugd)主机名或IP地址。 |\n|server-id |可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。 |\n\n***可用的options:***\n\n| 选项            |描叙                              |\n|:----------------|:---------------------------------|\n|-heap            |打印jvm heap的情况|\n|-histo[:live]    |打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. |\n|-permstat        |打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来. |\n|-finalizerinfo   |打印正等候回收的对象的信息.|\n| -dump:dump-options| 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件.|\n|-F               |强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效. |\n|-h/-help         |打印帮助信息|\n|-j               |传递参数给jmap启动的jvm. |\n\n***实例:***\n```\n[root@localhost bin]# jmap -heap 80838\nAttaching to process ID 80838, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.65-b04\n\nusing thread-local object allocation.\nParallel GC with 4 thread(s)\n\nHeap Configuration:\n   MinHeapFreeRatio = 0\n   MaxHeapFreeRatio = 100\n   MaxHeapSize      = 1073741824 (1024.0MB)\n   NewSize          = 1310720 (1.25MB)\n   MaxNewSize       = 17592186044415 MB\n   OldSize          = 5439488 (5.1875MB)\n   NewRatio         = 2\n   SurvivorRatio    = 8\n   PermSize         = 21757952 (20.75MB)\n   MaxPermSize      = 85983232 (82.0MB)\n   G1HeapRegionSize = 0 (0.0MB)\n\nHeap Usage:\nPS Young Generation\nEden Space:\n   capacity = 135266304 (129.0MB)\n   used     = 94343312 (89.97279357910156MB)\n   free     = 40922992 (39.02720642089844MB)\n   69.74635161170664% used\nFrom Space:\n   capacity = 22020096 (21.0MB)\n   used     = 17064032 (16.273529052734375MB)\n   free     = 4956064 (4.726470947265625MB)\n   77.49299548921131% used\nTo Space:\n   capacity = 22020096 (21.0MB)\n   used     = 0 (0.0MB)\n   free     = 22020096 (21.0MB)\n   0.0% used\nPS Old Generation\n   capacity = 358088704 (341.5MB)\n   used     = 4098176 (3.9083251953125MB)\n   free     = 353990528 (337.5916748046875MB)\n   1.1444583295204978% used\nPS Perm Generation\n   capacity = 25690112 (24.5MB)\n   used     = 25659024 (24.470352172851562MB)\n   free     = 31088 (0.0296478271484375MB)\n   99.87898846061863% used\n\n9192 interned Strings occupying 743744 bytes.\n   \n```\n或者\n```\n[root@localhost bin]#jmap -dump:format=b,file=netty.bin 80838\nAttaching to process ID 80838, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 20.10-b01\nDumping heap to tomcat.bin ...\nFinding object size using Printezis bits and skipping over...\nHeap dump file created\n```\n\n# jhat\n\njhat(Java Heap Analysis Tool)，是JDK自带的Java堆内存分析工具\n\n***语法:***\n```\njhat [ options ] <heap-dump-file>\n```\n\n\n***参数:***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项参数.如果使用，请直接跟在命令名称之后|\n|heap-dump-file |指定用于浏览的Java二进制heap dump文件。对于一个包含多个heap dump的dump文件，你可以在文件名称后面追加\"#<number>\"来指定文件中的某个dump|\n\n***可用的options:***\n\n| 选项            |描叙                                          |\n|:----------------|:--------------------------------------------|\n|-stack false/true|关闭跟踪对象分配调用堆栈。注意，如果heap dump中的分配位置信息不可用，你必须设置此标识为false。此选项的默认值为|\n|-refs false/true |关闭对象的引用跟踪。默认为true。默认情况下，反向指针(指向给定对象的对象，又叫做引用或外部引用)用于计算堆中的所有对象|\n|-port port-number|设置jhat的HTTP服务器的端口号。默认为7000|\n|-exclude exclude-file|指定一个数据成员列表的文件，这些数据成员将被排除在\"reachable objects\"查询的范围之外。举个例子，如果文件列有java.lang.String.value，那么，当计算指定对象\"o\"的可达对象列表时，涉及到java.lang.String.value字段的引用路径将会被忽略掉|\n|-baseline baseline-dump-file|指定一个基线heap dump。在两个heap dump(当前heap dump和基线heap dump)中存在相同对象ID的对象，不会被标记为\"new\"。其他的对象将被标记为\"new\"。这在比较两个不同的heap dump时非常有用|\n|-debug int           |设置此工具的调试级别。0意味着没有调试输出。设置的值越高，输出的信息就越详细|\n|-version    |报告版本号并退出|\n|-h         |输出帮助信息并退出|\n|-help   |输出帮助信息并退出|\n|-J  |将运行时参数传递给运行jhat的JVM。例如，-J-Xmx512m设置使用的最大堆内存大小为512MB|\n\n***实例:***\n```\n[root@localhost bin]# jhat netty.bin\n.....\nStarted HTTP server on port 7000\nServer is ready.\n```\n\n访问 http://localhost:7000，就可以查看详细的内存信息\n有时你dump出来的堆很大，在启动时会报堆空间不足的错误，可以使用如下参数：\n```\n[root@localhost bin]# jhat -J-Xmx512m <heap dump file>\n```\n\n# jstat\n\njstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据，在没有GUI图形界面，只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首选工具。\n\n***语法：***\n```\njstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n```\n***参数：***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项，主要有-gcutil,-class,-gcnew，我们一般使用 -gcutil 查看gc情况|\n|vmid    |VM的进程号，即当前运行的java进程号|\n|interval|间隔时间，单位为秒或者毫秒|\n|count   |打印次数，如果缺省则打印无数次|\n\n***可用的options:***\n\n| 选项            |描叙                                          |\n|:----------------|:--------------------------------------------|\n|-class           |监视类装载、卸载数量、总空间以及类装载所耗时间|\n|-compiler\t\t  |输出JIT编译器编译的方法，耗时等信息|\n|-gc\t\t\t  |监视Java堆状况，包括Eden区，两个survivor区，老年代，永久代等的容量，已用空间，GC时间合计信息|\n|-gccapacity      |监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大，最小空间|\n|-gccause         |与-gcutil功能一样，单输出主要关注已使用空间占总空间的百分比|\n|-gcnew           |监视新生代GC状况|\n|-gcnewcapacity   |监视内容yu-gcnew基本相同，输出主要关注使用到的最大、最少空间|\n|-gcold           |监视老年代GC状况|\n|-gcoldcapacity   |监视内容与-gcold基本相同,输出主要关注使用到的最大、最少空间|\n|-gcpermcapacity  |输出永久代使用到的最大、最少空间|\n|-gcutil          |与-gc功能基本相同，单输出主要关注已使用空间占总空间的百分比|\n|-printcompilation|输出已经被JIT编译的方法\n\n***实例:***\n```\n[root@localhost bin]# jstat -gcutil 80838 100 5\n  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   \n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n```\n***数据含义:***\n\n| 列   | 说明                                         |\n|:-----|:--------------------------------------------|\n|S0    |Heap上的 Survivor space 0 区已使用空间的百分比|\n|S1\t   |Heap上的 Survivor space 1 区已使用空间的百分比|\n|E\t   |Heap上的 Eden space 区已使用空间的百分比|\n|O     |Heap上的 Old space 区已使用空间的百分比|\n|P     |Perm space 区已使用空间的百分比|\n|YGC   |从应用程序启动到采样时发生 Young GC 的次数|\n|YGCT  |从应用程序启动到采样时 Young GC 所用的时间(单位秒)|\n|FGC   |从应用程序启动到采样时发生 Full GC 的次数|\n|FGCT  |从应用程序启动到采样时 Full GC 所用的时间(单位秒)|\n|GCT   |从应用程序启动到采样时用于垃圾回收的总时间(单位秒)|\n\n# jstack\njstack: 查看进程线程栈信息\n如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。 如果运行的java程序呈现hung的状态，jstack可以查看线程堆栈。\n\n***语法：***\n```\n#指定进程号(pid)的进程\njstack [-l] <pid>\njstack -F [-m] [-l] <pid>\n#指定核心文件\njstack [-m] [-l] <executable> <core>\n#指定远程调试服务器\njstack [-m] [-l] [server_id@]<remote server IP or hostname>\n```\n***可用的options:***\n\n| 选项   |描叙                                          |\n|:-------|:--------------------------------------------|\n|-F      |pid无法响应时，强制打印堆栈|\n|-m\t\t |打印混合模式(Java和本地C/C++帧)的堆栈跟踪信息|\n|-l\t\t |长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表|\n|-h      |输出帮助信息|\n\n***实例:***\n```\n[root@localhost bin]# jstack -l 80838\n2016-08-22 15:40:02\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (24.65-b04 mixed mode):\n\n\"RMI Scheduler(0)\" daemon prio=10 tid=0x00007feb98005800 nid=0xea72 waiting on condition [0x00007febac1e5000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000f4174500> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1079)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:807)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n.......\n\n\n\"VM Thread\" prio=10 tid=0x00007fec1c068800 nid=0x13bcc runnable \n\n\"GC task thread#0 (ParallelGC)\" prio=10 tid=0x00007fec1c01e800 nid=0x13bc8 runnable \n\n\"GC task thread#1 (ParallelGC)\" prio=10 tid=0x00007fec1c020800 nid=0x13bc9 runnable \n\n\"GC task thread#2 (ParallelGC)\" prio=10 tid=0x00007fec1c022800 nid=0x13bca runnable \n\n\"GC task thread#3 (ParallelGC)\" prio=10 tid=0x00007fec1c024800 nid=0x13bcb runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0x00007fec1c0a8000 nid=0x13bd3 waiting on condition \n\nJNI global references: 255\n```\n将线程栈信息输出到指定文件\n```\n[root@localhost logs]# jstack -l 80838 > netty.stack\n```\n\n\n***注意***\n在jdk bin目录下提供了一个集成以上命令行的一个可视化工具jvisualvm能更加直观的查看数据信息","source":"_posts/JDK常用性能分析命令行工具.md","raw":"---\ntitle: JDK常用性能分析命令行工具\ndate: 2016-08-22 13:56:33 \ncomments: true \ncategories: Java\ntoc: true \n---\n\n# jps\njps（JVM Process Status Too)可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class,main（）函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）。虽然功能比较单一，但它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到的LVMID来确定要监控的是哪一个虚拟机进程。对于本地虚拟机进程来说，LVMID与操作系统的进程ID（Process Identifier,PID）是一致的，使用Windows的任务管理器或者UNIX的ps命令也可以查询到虚拟机进程的LVMID，但如果同时启动了多个虚拟机进程，无法根据进程名称定位时，那就只能依赖jps命令显示主类的功能才能区分了。\n<!--more-->\n***语法:***\n```\njps [-q] [-mlvV] [<hostid>]\n```\n\n***可用的options:***\n\n| 选项    |描叙                                         |\n|:--------|:--------------------------------------------|\n|-l       |输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名|\n|-m\t\t  |输出传递给main 方法的参数|\n|-q\t\t  |显示pid|\n|-v       |输出传递给JVM的参数|\n\n***实例:***\n```\n[root@localhost bin]# jps -l -m\n63706 sun.tools.jps.Jps -l -m\n79105 org.apache.catalina.startup.Bootstrap start\n80838 com.yonyouup.openapi.netty.startup.Bootstrap\n```\n\n# jinfo\njinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。 \n***语法:***\n```\n#指定进程号(pid)的进程\njinfo [option] <pid>\n#指定核心文件\njinfo [option] <executable <core>\n#指定远程调试服务器\njinfo [option] [server_id@]<remote server IP or hostname>\n```\n\n***参数:***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。|\n|pid     |需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。|\n|executable|产生核心dump的Java可执行文件。|\n|core   |需要打印配置信息的核心文件。 |\n|remote-hostname-or-IP   |远程调试服务器的(请查看jsadebugd)主机名或IP地址。 |\n|server-id |可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。 |\n\n***可用的options:***\n\n| 选项            |描叙                              |\n|:----------------|:---------------------------------|\n| none            |打印命令行标识参数和系统属性键值对|\n|-flag name       |打印指定的命令行标识参数的名称和值|\n|-flag [+/-]name  |启用或禁用指定的boolean类型的命令行标识参数|\n|-flag name=value |为给定的命令行标识参数设置指定的值|\n|-flags           |成对打印传递给JVM的命令行标识参数|\n|-sysprops        |以键值对形式打印Java系统属性|\n|-h               |打印帮助信息|\n|-help            |打印帮助信息|\n\n***实例:***\n```\n[root@localhost bin]# jinfo 80838\nAttaching to process ID 80838, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.65-b04\nJava System Properties:\n此处省略n行。。。。\nVM Flags:\n\n-Xms512m -Xmx1024m -Dnettyserver_home=/data/server/NettyServer\n```\n\n# jmap\njmap是java虚拟机自带的一种内存映像工具。（如：产生那些对象，及其数量）。\n***语法:***\n```\n#指定进程号(pid)的进程\njmap [option] <pid>\n#指定核心文件\njmap [option] <executable <core>\n#指定远程调试服务器\njmap [option] [server_id@]<remote server IP or hostname>\n```\n\n***参数:***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。|\n|pid     |需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。|\n|executable|产生核心dump的Java可执行文件。|\n|core   |需要打印配置信息的核心文件。 |\n|remote-hostname-or-IP   |远程调试服务器的(请查看jsadebugd)主机名或IP地址。 |\n|server-id |可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。 |\n\n***可用的options:***\n\n| 选项            |描叙                              |\n|:----------------|:---------------------------------|\n|-heap            |打印jvm heap的情况|\n|-histo[:live]    |打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. |\n|-permstat        |打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来. |\n|-finalizerinfo   |打印正等候回收的对象的信息.|\n| -dump:dump-options| 使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件.|\n|-F               |强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效. |\n|-h/-help         |打印帮助信息|\n|-j               |传递参数给jmap启动的jvm. |\n\n***实例:***\n```\n[root@localhost bin]# jmap -heap 80838\nAttaching to process ID 80838, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.65-b04\n\nusing thread-local object allocation.\nParallel GC with 4 thread(s)\n\nHeap Configuration:\n   MinHeapFreeRatio = 0\n   MaxHeapFreeRatio = 100\n   MaxHeapSize      = 1073741824 (1024.0MB)\n   NewSize          = 1310720 (1.25MB)\n   MaxNewSize       = 17592186044415 MB\n   OldSize          = 5439488 (5.1875MB)\n   NewRatio         = 2\n   SurvivorRatio    = 8\n   PermSize         = 21757952 (20.75MB)\n   MaxPermSize      = 85983232 (82.0MB)\n   G1HeapRegionSize = 0 (0.0MB)\n\nHeap Usage:\nPS Young Generation\nEden Space:\n   capacity = 135266304 (129.0MB)\n   used     = 94343312 (89.97279357910156MB)\n   free     = 40922992 (39.02720642089844MB)\n   69.74635161170664% used\nFrom Space:\n   capacity = 22020096 (21.0MB)\n   used     = 17064032 (16.273529052734375MB)\n   free     = 4956064 (4.726470947265625MB)\n   77.49299548921131% used\nTo Space:\n   capacity = 22020096 (21.0MB)\n   used     = 0 (0.0MB)\n   free     = 22020096 (21.0MB)\n   0.0% used\nPS Old Generation\n   capacity = 358088704 (341.5MB)\n   used     = 4098176 (3.9083251953125MB)\n   free     = 353990528 (337.5916748046875MB)\n   1.1444583295204978% used\nPS Perm Generation\n   capacity = 25690112 (24.5MB)\n   used     = 25659024 (24.470352172851562MB)\n   free     = 31088 (0.0296478271484375MB)\n   99.87898846061863% used\n\n9192 interned Strings occupying 743744 bytes.\n   \n```\n或者\n```\n[root@localhost bin]#jmap -dump:format=b,file=netty.bin 80838\nAttaching to process ID 80838, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 20.10-b01\nDumping heap to tomcat.bin ...\nFinding object size using Printezis bits and skipping over...\nHeap dump file created\n```\n\n# jhat\n\njhat(Java Heap Analysis Tool)，是JDK自带的Java堆内存分析工具\n\n***语法:***\n```\njhat [ options ] <heap-dump-file>\n```\n\n\n***参数:***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项参数.如果使用，请直接跟在命令名称之后|\n|heap-dump-file |指定用于浏览的Java二进制heap dump文件。对于一个包含多个heap dump的dump文件，你可以在文件名称后面追加\"#<number>\"来指定文件中的某个dump|\n\n***可用的options:***\n\n| 选项            |描叙                                          |\n|:----------------|:--------------------------------------------|\n|-stack false/true|关闭跟踪对象分配调用堆栈。注意，如果heap dump中的分配位置信息不可用，你必须设置此标识为false。此选项的默认值为|\n|-refs false/true |关闭对象的引用跟踪。默认为true。默认情况下，反向指针(指向给定对象的对象，又叫做引用或外部引用)用于计算堆中的所有对象|\n|-port port-number|设置jhat的HTTP服务器的端口号。默认为7000|\n|-exclude exclude-file|指定一个数据成员列表的文件，这些数据成员将被排除在\"reachable objects\"查询的范围之外。举个例子，如果文件列有java.lang.String.value，那么，当计算指定对象\"o\"的可达对象列表时，涉及到java.lang.String.value字段的引用路径将会被忽略掉|\n|-baseline baseline-dump-file|指定一个基线heap dump。在两个heap dump(当前heap dump和基线heap dump)中存在相同对象ID的对象，不会被标记为\"new\"。其他的对象将被标记为\"new\"。这在比较两个不同的heap dump时非常有用|\n|-debug int           |设置此工具的调试级别。0意味着没有调试输出。设置的值越高，输出的信息就越详细|\n|-version    |报告版本号并退出|\n|-h         |输出帮助信息并退出|\n|-help   |输出帮助信息并退出|\n|-J  |将运行时参数传递给运行jhat的JVM。例如，-J-Xmx512m设置使用的最大堆内存大小为512MB|\n\n***实例:***\n```\n[root@localhost bin]# jhat netty.bin\n.....\nStarted HTTP server on port 7000\nServer is ready.\n```\n\n访问 http://localhost:7000，就可以查看详细的内存信息\n有时你dump出来的堆很大，在启动时会报堆空间不足的错误，可以使用如下参数：\n```\n[root@localhost bin]# jhat -J-Xmx512m <heap dump file>\n```\n\n# jstat\n\njstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据，在没有GUI图形界面，只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首选工具。\n\n***语法：***\n```\njstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n```\n***参数：***\n\n| 参数   |描叙                                          |\n|:-------|:--------------------------------------------|\n|options |选项，主要有-gcutil,-class,-gcnew，我们一般使用 -gcutil 查看gc情况|\n|vmid    |VM的进程号，即当前运行的java进程号|\n|interval|间隔时间，单位为秒或者毫秒|\n|count   |打印次数，如果缺省则打印无数次|\n\n***可用的options:***\n\n| 选项            |描叙                                          |\n|:----------------|:--------------------------------------------|\n|-class           |监视类装载、卸载数量、总空间以及类装载所耗时间|\n|-compiler\t\t  |输出JIT编译器编译的方法，耗时等信息|\n|-gc\t\t\t  |监视Java堆状况，包括Eden区，两个survivor区，老年代，永久代等的容量，已用空间，GC时间合计信息|\n|-gccapacity      |监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大，最小空间|\n|-gccause         |与-gcutil功能一样，单输出主要关注已使用空间占总空间的百分比|\n|-gcnew           |监视新生代GC状况|\n|-gcnewcapacity   |监视内容yu-gcnew基本相同，输出主要关注使用到的最大、最少空间|\n|-gcold           |监视老年代GC状况|\n|-gcoldcapacity   |监视内容与-gcold基本相同,输出主要关注使用到的最大、最少空间|\n|-gcpermcapacity  |输出永久代使用到的最大、最少空间|\n|-gcutil          |与-gc功能基本相同，单输出主要关注已使用空间占总空间的百分比|\n|-printcompilation|输出已经被JIT编译的方法\n\n***实例:***\n```\n[root@localhost bin]# jstat -gcutil 80838 100 5\n  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   \n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719\n```\n***数据含义:***\n\n| 列   | 说明                                         |\n|:-----|:--------------------------------------------|\n|S0    |Heap上的 Survivor space 0 区已使用空间的百分比|\n|S1\t   |Heap上的 Survivor space 1 区已使用空间的百分比|\n|E\t   |Heap上的 Eden space 区已使用空间的百分比|\n|O     |Heap上的 Old space 区已使用空间的百分比|\n|P     |Perm space 区已使用空间的百分比|\n|YGC   |从应用程序启动到采样时发生 Young GC 的次数|\n|YGCT  |从应用程序启动到采样时 Young GC 所用的时间(单位秒)|\n|FGC   |从应用程序启动到采样时发生 Full GC 的次数|\n|FGCT  |从应用程序启动到采样时 Full GC 所用的时间(单位秒)|\n|GCT   |从应用程序启动到采样时用于垃圾回收的总时间(单位秒)|\n\n# jstack\njstack: 查看进程线程栈信息\n如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。 如果运行的java程序呈现hung的状态，jstack可以查看线程堆栈。\n\n***语法：***\n```\n#指定进程号(pid)的进程\njstack [-l] <pid>\njstack -F [-m] [-l] <pid>\n#指定核心文件\njstack [-m] [-l] <executable> <core>\n#指定远程调试服务器\njstack [-m] [-l] [server_id@]<remote server IP or hostname>\n```\n***可用的options:***\n\n| 选项   |描叙                                          |\n|:-------|:--------------------------------------------|\n|-F      |pid无法响应时，强制打印堆栈|\n|-m\t\t |打印混合模式(Java和本地C/C++帧)的堆栈跟踪信息|\n|-l\t\t |长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表|\n|-h      |输出帮助信息|\n\n***实例:***\n```\n[root@localhost bin]# jstack -l 80838\n2016-08-22 15:40:02\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (24.65-b04 mixed mode):\n\n\"RMI Scheduler(0)\" daemon prio=10 tid=0x00007feb98005800 nid=0xea72 waiting on condition [0x00007febac1e5000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000f4174500> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1079)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:807)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n.......\n\n\n\"VM Thread\" prio=10 tid=0x00007fec1c068800 nid=0x13bcc runnable \n\n\"GC task thread#0 (ParallelGC)\" prio=10 tid=0x00007fec1c01e800 nid=0x13bc8 runnable \n\n\"GC task thread#1 (ParallelGC)\" prio=10 tid=0x00007fec1c020800 nid=0x13bc9 runnable \n\n\"GC task thread#2 (ParallelGC)\" prio=10 tid=0x00007fec1c022800 nid=0x13bca runnable \n\n\"GC task thread#3 (ParallelGC)\" prio=10 tid=0x00007fec1c024800 nid=0x13bcb runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0x00007fec1c0a8000 nid=0x13bd3 waiting on condition \n\nJNI global references: 255\n```\n将线程栈信息输出到指定文件\n```\n[root@localhost logs]# jstack -l 80838 > netty.stack\n```\n\n\n***注意***\n在jdk bin目录下提供了一个集成以上命令行的一个可视化工具jvisualvm能更加直观的查看数据信息","slug":"JDK常用性能分析命令行工具","published":1,"updated":"2021-06-25T02:00:17.854Z","layout":"post","photos":[],"link":"","_id":"ckqjatokd0008qkl57qsb8w77","content":"<h1 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h1><p>jps（JVM Process Status Too)可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class,main（）函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）。虽然功能比较单一，但它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到的LVMID来确定要监控的是哪一个虚拟机进程。对于本地虚拟机进程来说，LVMID与操作系统的进程ID（Process Identifier,PID）是一致的，使用Windows的任务管理器或者UNIX的ps命令也可以查询到虚拟机进程的LVMID，但如果同时启动了多个虚拟机进程，无法根据进程名称定位时，那就只能依赖jps命令显示主类的功能才能区分了。<br><a id=\"more\"></a><br><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps [-q] [-mlvV] [&lt;hostid&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-l</td>\n<td style=\"text-align:left\">输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m</td>\n<td style=\"text-align:left\">输出传递给main 方法的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-q</td>\n<td style=\"text-align:left\">显示pid</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v</td>\n<td style=\"text-align:left\">输出传递给JVM的参数</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jps -l -m</span><br><span class=\"line\">63706 sun.tools.jps.Jps -l -m</span><br><span class=\"line\">79105 org.apache.catalina.startup.Bootstrap start</span><br><span class=\"line\">80838 com.yonyouup.openapi.netty.startup.Bootstrap</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h1><p>jinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。<br><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定进程号(pid)的进程</span><br><span class=\"line\">jinfo [option] &lt;pid&gt;</span><br><span class=\"line\">#指定核心文件</span><br><span class=\"line\">jinfo [option] &lt;executable &lt;core&gt;</span><br><span class=\"line\">#指定远程调试服务器</span><br><span class=\"line\">jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pid</td>\n<td style=\"text-align:left\">需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">executable</td>\n<td style=\"text-align:left\">产生核心dump的Java可执行文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">core</td>\n<td style=\"text-align:left\">需要打印配置信息的核心文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remote-hostname-or-IP</td>\n<td style=\"text-align:left\">远程调试服务器的(请查看jsadebugd)主机名或IP地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">server-id</td>\n<td style=\"text-align:left\">可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">none</td>\n<td style=\"text-align:left\">打印命令行标识参数和系统属性键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flag name</td>\n<td style=\"text-align:left\">打印指定的命令行标识参数的名称和值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flag [+/-]name</td>\n<td style=\"text-align:left\">启用或禁用指定的boolean类型的命令行标识参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flag name=value</td>\n<td style=\"text-align:left\">为给定的命令行标识参数设置指定的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flags</td>\n<td style=\"text-align:left\">成对打印传递给JVM的命令行标识参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-sysprops</td>\n<td style=\"text-align:left\">以键值对形式打印Java系统属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h</td>\n<td style=\"text-align:left\">打印帮助信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-help</td>\n<td style=\"text-align:left\">打印帮助信息</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jinfo 80838</span><br><span class=\"line\">Attaching to process ID 80838, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 24.65-b04</span><br><span class=\"line\">Java System Properties:</span><br><span class=\"line\">此处省略n行。。。。</span><br><span class=\"line\">VM Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">-Xms512m -Xmx1024m -Dnettyserver_home=/data/server/NettyServer</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h1><p>jmap是java虚拟机自带的一种内存映像工具。（如：产生那些对象，及其数量）。<br><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定进程号(pid)的进程</span><br><span class=\"line\">jmap [option] &lt;pid&gt;</span><br><span class=\"line\">#指定核心文件</span><br><span class=\"line\">jmap [option] &lt;executable &lt;core&gt;</span><br><span class=\"line\">#指定远程调试服务器</span><br><span class=\"line\">jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pid</td>\n<td style=\"text-align:left\">需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">executable</td>\n<td style=\"text-align:left\">产生核心dump的Java可执行文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">core</td>\n<td style=\"text-align:left\">需要打印配置信息的核心文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remote-hostname-or-IP</td>\n<td style=\"text-align:left\">远程调试服务器的(请查看jsadebugd)主机名或IP地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">server-id</td>\n<td style=\"text-align:left\">可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-heap</td>\n<td style=\"text-align:left\">打印jvm heap的情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-histo[:live]</td>\n<td style=\"text-align:left\">打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-permstat</td>\n<td style=\"text-align:left\">打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-finalizerinfo</td>\n<td style=\"text-align:left\">打印正等候回收的对象的信息.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-dump:dump-options</td>\n<td style=\"text-align:left\">使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-F</td>\n<td style=\"text-align:left\">强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h/-help</td>\n<td style=\"text-align:left\">打印帮助信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-j</td>\n<td style=\"text-align:left\">传递参数给jmap启动的jvm.</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jmap -heap 80838</span><br><span class=\"line\">Attaching to process ID 80838, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 24.65-b04</span><br><span class=\"line\"></span><br><span class=\"line\">using thread-local object allocation.</span><br><span class=\"line\">Parallel GC with 4 thread(s)</span><br><span class=\"line\"></span><br><span class=\"line\">Heap Configuration:</span><br><span class=\"line\">   MinHeapFreeRatio = 0</span><br><span class=\"line\">   MaxHeapFreeRatio = 100</span><br><span class=\"line\">   MaxHeapSize      = 1073741824 (1024.0MB)</span><br><span class=\"line\">   NewSize          = 1310720 (1.25MB)</span><br><span class=\"line\">   MaxNewSize       = 17592186044415 MB</span><br><span class=\"line\">   OldSize          = 5439488 (5.1875MB)</span><br><span class=\"line\">   NewRatio         = 2</span><br><span class=\"line\">   SurvivorRatio    = 8</span><br><span class=\"line\">   PermSize         = 21757952 (20.75MB)</span><br><span class=\"line\">   MaxPermSize      = 85983232 (82.0MB)</span><br><span class=\"line\">   G1HeapRegionSize = 0 (0.0MB)</span><br><span class=\"line\"></span><br><span class=\"line\">Heap Usage:</span><br><span class=\"line\">PS Young Generation</span><br><span class=\"line\">Eden Space:</span><br><span class=\"line\">   capacity = 135266304 (129.0MB)</span><br><span class=\"line\">   used     = 94343312 (89.97279357910156MB)</span><br><span class=\"line\">   free     = 40922992 (39.02720642089844MB)</span><br><span class=\"line\">   69.74635161170664% used</span><br><span class=\"line\">From Space:</span><br><span class=\"line\">   capacity = 22020096 (21.0MB)</span><br><span class=\"line\">   used     = 17064032 (16.273529052734375MB)</span><br><span class=\"line\">   free     = 4956064 (4.726470947265625MB)</span><br><span class=\"line\">   77.49299548921131% used</span><br><span class=\"line\">To Space:</span><br><span class=\"line\">   capacity = 22020096 (21.0MB)</span><br><span class=\"line\">   used     = 0 (0.0MB)</span><br><span class=\"line\">   free     = 22020096 (21.0MB)</span><br><span class=\"line\">   0.0% used</span><br><span class=\"line\">PS Old Generation</span><br><span class=\"line\">   capacity = 358088704 (341.5MB)</span><br><span class=\"line\">   used     = 4098176 (3.9083251953125MB)</span><br><span class=\"line\">   free     = 353990528 (337.5916748046875MB)</span><br><span class=\"line\">   1.1444583295204978% used</span><br><span class=\"line\">PS Perm Generation</span><br><span class=\"line\">   capacity = 25690112 (24.5MB)</span><br><span class=\"line\">   used     = 25659024 (24.470352172851562MB)</span><br><span class=\"line\">   free     = 31088 (0.0296478271484375MB)</span><br><span class=\"line\">   99.87898846061863% used</span><br><span class=\"line\"></span><br><span class=\"line\">9192 interned Strings occupying 743744 bytes.</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]#jmap -dump:format=b,file=netty.bin 80838</span><br><span class=\"line\">Attaching to process ID 80838, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 20.10-b01</span><br><span class=\"line\">Dumping heap to tomcat.bin ...</span><br><span class=\"line\">Finding object size using Printezis bits and skipping over...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jhat\"><a href=\"#jhat\" class=\"headerlink\" title=\"jhat\"></a>jhat</h1><p>jhat(Java Heap Analysis Tool)，是JDK自带的Java堆内存分析工具</p>\n<p><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jhat [ options ] &lt;heap-dump-file&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项参数.如果使用，请直接跟在命令名称之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">heap-dump-file</td>\n<td style=\"text-align:left\">指定用于浏览的Java二进制heap dump文件。对于一个包含多个heap dump的dump文件，你可以在文件名称后面追加”#<number>“来指定文件中的某个dump</number></td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-stack false/true</td>\n<td style=\"text-align:left\">关闭跟踪对象分配调用堆栈。注意，如果heap dump中的分配位置信息不可用，你必须设置此标识为false。此选项的默认值为</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-refs false/true</td>\n<td style=\"text-align:left\">关闭对象的引用跟踪。默认为true。默认情况下，反向指针(指向给定对象的对象，又叫做引用或外部引用)用于计算堆中的所有对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-port port-number</td>\n<td style=\"text-align:left\">设置jhat的HTTP服务器的端口号。默认为7000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-exclude exclude-file</td>\n<td style=\"text-align:left\">指定一个数据成员列表的文件，这些数据成员将被排除在”reachable objects”查询的范围之外。举个例子，如果文件列有java.lang.String.value，那么，当计算指定对象”o”的可达对象列表时，涉及到java.lang.String.value字段的引用路径将会被忽略掉</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-baseline baseline-dump-file</td>\n<td style=\"text-align:left\">指定一个基线heap dump。在两个heap dump(当前heap dump和基线heap dump)中存在相同对象ID的对象，不会被标记为”new”。其他的对象将被标记为”new”。这在比较两个不同的heap dump时非常有用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-debug int</td>\n<td style=\"text-align:left\">设置此工具的调试级别。0意味着没有调试输出。设置的值越高，输出的信息就越详细</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-version</td>\n<td style=\"text-align:left\">报告版本号并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h</td>\n<td style=\"text-align:left\">输出帮助信息并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-help</td>\n<td style=\"text-align:left\">输出帮助信息并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-J</td>\n<td style=\"text-align:left\">将运行时参数传递给运行jhat的JVM。例如，-J-Xmx512m设置使用的最大堆内存大小为512MB</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jhat netty.bin</span><br><span class=\"line\">.....</span><br><span class=\"line\">Started HTTP server on port 7000</span><br><span class=\"line\">Server is ready.</span><br></pre></td></tr></table></figure></p>\n<p>访问 <a href=\"http://localhost:7000，就可以查看详细的内存信息\" target=\"_blank\" rel=\"noopener\">http://localhost:7000，就可以查看详细的内存信息</a><br>有时你dump出来的堆很大，在启动时会报堆空间不足的错误，可以使用如下参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jhat -J-Xmx512m &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h1><p>jstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据，在没有GUI图形界面，只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首选工具。</p>\n<p><strong><em>语法：</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数：</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项，主要有-gcutil,-class,-gcnew，我们一般使用 -gcutil 查看gc情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vmid</td>\n<td style=\"text-align:left\">VM的进程号，即当前运行的java进程号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">interval</td>\n<td style=\"text-align:left\">间隔时间，单位为秒或者毫秒</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">count</td>\n<td style=\"text-align:left\">打印次数，如果缺省则打印无数次</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-class</td>\n<td style=\"text-align:left\">监视类装载、卸载数量、总空间以及类装载所耗时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-compiler</td>\n<td style=\"text-align:left\">输出JIT编译器编译的方法，耗时等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gc</td>\n<td style=\"text-align:left\">监视Java堆状况，包括Eden区，两个survivor区，老年代，永久代等的容量，已用空间，GC时间合计信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gccapacity</td>\n<td style=\"text-align:left\">监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大，最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gccause</td>\n<td style=\"text-align:left\">与-gcutil功能一样，单输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcnew</td>\n<td style=\"text-align:left\">监视新生代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcnewcapacity</td>\n<td style=\"text-align:left\">监视内容yu-gcnew基本相同，输出主要关注使用到的最大、最少空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcold</td>\n<td style=\"text-align:left\">监视老年代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcoldcapacity</td>\n<td style=\"text-align:left\">监视内容与-gcold基本相同,输出主要关注使用到的最大、最少空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcpermcapacity</td>\n<td style=\"text-align:left\">输出永久代使用到的最大、最少空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcutil</td>\n<td style=\"text-align:left\">与-gc功能基本相同，单输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-printcompilation</td>\n<td style=\"text-align:left\">输出已经被JIT编译的方法</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jstat -gcutil 80838 100 5</span><br><span class=\"line\">  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>数据含义:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">列</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">S0</td>\n<td style=\"text-align:left\">Heap上的 Survivor space 0 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S1</td>\n<td style=\"text-align:left\">Heap上的 Survivor space 1 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E</td>\n<td style=\"text-align:left\">Heap上的 Eden space 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">Heap上的 Old space 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">P</td>\n<td style=\"text-align:left\">Perm space 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">YGC</td>\n<td style=\"text-align:left\">从应用程序启动到采样时发生 Young GC 的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">YGCT</td>\n<td style=\"text-align:left\">从应用程序启动到采样时 Young GC 所用的时间(单位秒)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FGC</td>\n<td style=\"text-align:left\">从应用程序启动到采样时发生 Full GC 的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FGCT</td>\n<td style=\"text-align:left\">从应用程序启动到采样时 Full GC 所用的时间(单位秒)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GCT</td>\n<td style=\"text-align:left\">从应用程序启动到采样时用于垃圾回收的总时间(单位秒)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h1><p>jstack: 查看进程线程栈信息<br>如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。 如果运行的java程序呈现hung的状态，jstack可以查看线程堆栈。</p>\n<p><strong><em>语法：</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定进程号(pid)的进程</span><br><span class=\"line\">jstack [-l] &lt;pid&gt;</span><br><span class=\"line\">jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class=\"line\">#指定核心文件</span><br><span class=\"line\">jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class=\"line\">#指定远程调试服务器</span><br><span class=\"line\">jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-F</td>\n<td style=\"text-align:left\">pid无法响应时，强制打印堆栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m</td>\n<td style=\"text-align:left\">打印混合模式(Java和本地C/C++帧)的堆栈跟踪信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-l</td>\n<td style=\"text-align:left\">长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h</td>\n<td style=\"text-align:left\">输出帮助信息</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jstack -l 80838</span><br><span class=\"line\">2016-08-22 15:40:02</span><br><span class=\"line\">Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.65-b04 mixed mode):</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;RMI Scheduler(0)&quot; daemon prio=10 tid=0x00007feb98005800 nid=0xea72 waiting on condition [0x00007febac1e5000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (parking)</span><br><span class=\"line\">        at sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">        - parking to wait for  &lt;0x00000000f4174500&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class=\"line\">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)</span><br><span class=\"line\">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)</span><br><span class=\"line\">        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1079)</span><br><span class=\"line\">        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:807)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">.......</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;VM Thread&quot; prio=10 tid=0x00007fec1c068800 nid=0x13bcc runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#0 (ParallelGC)&quot; prio=10 tid=0x00007fec1c01e800 nid=0x13bc8 runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#1 (ParallelGC)&quot; prio=10 tid=0x00007fec1c020800 nid=0x13bc9 runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#2 (ParallelGC)&quot; prio=10 tid=0x00007fec1c022800 nid=0x13bca runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#3 (ParallelGC)&quot; prio=10 tid=0x00007fec1c024800 nid=0x13bcb runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;VM Periodic Task Thread&quot; prio=10 tid=0x00007fec1c0a8000 nid=0x13bd3 waiting on condition </span><br><span class=\"line\"></span><br><span class=\"line\">JNI global references: 255</span><br></pre></td></tr></table></figure></p>\n<p>将线程栈信息输出到指定文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost logs]# jstack -l 80838 &gt; netty.stack</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>注意</em></strong><br>在jdk bin目录下提供了一个集成以上命令行的一个可视化工具jvisualvm能更加直观的查看数据信息</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h1><p>jps（JVM Process Status Too)可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class,main（）函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）。虽然功能比较单一，但它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到的LVMID来确定要监控的是哪一个虚拟机进程。对于本地虚拟机进程来说，LVMID与操作系统的进程ID（Process Identifier,PID）是一致的，使用Windows的任务管理器或者UNIX的ps命令也可以查询到虚拟机进程的LVMID，但如果同时启动了多个虚拟机进程，无法根据进程名称定位时，那就只能依赖jps命令显示主类的功能才能区分了。<br>","more":"<br><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps [-q] [-mlvV] [&lt;hostid&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-l</td>\n<td style=\"text-align:left\">输出应用程序main class的完整package名 或者 应用程序的jar文件完整路径名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m</td>\n<td style=\"text-align:left\">输出传递给main 方法的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-q</td>\n<td style=\"text-align:left\">显示pid</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v</td>\n<td style=\"text-align:left\">输出传递给JVM的参数</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jps -l -m</span><br><span class=\"line\">63706 sun.tools.jps.Jps -l -m</span><br><span class=\"line\">79105 org.apache.catalina.startup.Bootstrap start</span><br><span class=\"line\">80838 com.yonyouup.openapi.netty.startup.Bootstrap</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h1><p>jinfo(Java Configuration Information)，主要用于查看指定Java进程(或核心文件、远程调试服务器)的Java配置信息。<br><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定进程号(pid)的进程</span><br><span class=\"line\">jinfo [option] &lt;pid&gt;</span><br><span class=\"line\">#指定核心文件</span><br><span class=\"line\">jinfo [option] &lt;executable &lt;core&gt;</span><br><span class=\"line\">#指定远程调试服务器</span><br><span class=\"line\">jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pid</td>\n<td style=\"text-align:left\">需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">executable</td>\n<td style=\"text-align:left\">产生核心dump的Java可执行文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">core</td>\n<td style=\"text-align:left\">需要打印配置信息的核心文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remote-hostname-or-IP</td>\n<td style=\"text-align:left\">远程调试服务器的(请查看jsadebugd)主机名或IP地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">server-id</td>\n<td style=\"text-align:left\">可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">none</td>\n<td style=\"text-align:left\">打印命令行标识参数和系统属性键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flag name</td>\n<td style=\"text-align:left\">打印指定的命令行标识参数的名称和值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flag [+/-]name</td>\n<td style=\"text-align:left\">启用或禁用指定的boolean类型的命令行标识参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flag name=value</td>\n<td style=\"text-align:left\">为给定的命令行标识参数设置指定的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-flags</td>\n<td style=\"text-align:left\">成对打印传递给JVM的命令行标识参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-sysprops</td>\n<td style=\"text-align:left\">以键值对形式打印Java系统属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h</td>\n<td style=\"text-align:left\">打印帮助信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-help</td>\n<td style=\"text-align:left\">打印帮助信息</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jinfo 80838</span><br><span class=\"line\">Attaching to process ID 80838, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 24.65-b04</span><br><span class=\"line\">Java System Properties:</span><br><span class=\"line\">此处省略n行。。。。</span><br><span class=\"line\">VM Flags:</span><br><span class=\"line\"></span><br><span class=\"line\">-Xms512m -Xmx1024m -Dnettyserver_home=/data/server/NettyServer</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h1><p>jmap是java虚拟机自带的一种内存映像工具。（如：产生那些对象，及其数量）。<br><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定进程号(pid)的进程</span><br><span class=\"line\">jmap [option] &lt;pid&gt;</span><br><span class=\"line\">#指定核心文件</span><br><span class=\"line\">jmap [option] &lt;executable &lt;core&gt;</span><br><span class=\"line\">#指定远程调试服务器</span><br><span class=\"line\">jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pid</td>\n<td style=\"text-align:left\">需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">executable</td>\n<td style=\"text-align:left\">产生核心dump的Java可执行文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">core</td>\n<td style=\"text-align:left\">需要打印配置信息的核心文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remote-hostname-or-IP</td>\n<td style=\"text-align:left\">远程调试服务器的(请查看jsadebugd)主机名或IP地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">server-id</td>\n<td style=\"text-align:left\">可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-heap</td>\n<td style=\"text-align:left\">打印jvm heap的情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-histo[:live]</td>\n<td style=\"text-align:left\">打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-permstat</td>\n<td style=\"text-align:left\">打印classload和jvm heap长久层的信息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占用内存数也会打印出来.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-finalizerinfo</td>\n<td style=\"text-align:left\">打印正等候回收的对象的信息.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-dump:dump-options</td>\n<td style=\"text-align:left\">使用hprof二进制形式,输出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-F</td>\n<td style=\"text-align:left\">强迫.在pid没有相应的时候使用-dump或者-histo参数. 在这个模式下,live子参数无效.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h/-help</td>\n<td style=\"text-align:left\">打印帮助信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-j</td>\n<td style=\"text-align:left\">传递参数给jmap启动的jvm.</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jmap -heap 80838</span><br><span class=\"line\">Attaching to process ID 80838, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 24.65-b04</span><br><span class=\"line\"></span><br><span class=\"line\">using thread-local object allocation.</span><br><span class=\"line\">Parallel GC with 4 thread(s)</span><br><span class=\"line\"></span><br><span class=\"line\">Heap Configuration:</span><br><span class=\"line\">   MinHeapFreeRatio = 0</span><br><span class=\"line\">   MaxHeapFreeRatio = 100</span><br><span class=\"line\">   MaxHeapSize      = 1073741824 (1024.0MB)</span><br><span class=\"line\">   NewSize          = 1310720 (1.25MB)</span><br><span class=\"line\">   MaxNewSize       = 17592186044415 MB</span><br><span class=\"line\">   OldSize          = 5439488 (5.1875MB)</span><br><span class=\"line\">   NewRatio         = 2</span><br><span class=\"line\">   SurvivorRatio    = 8</span><br><span class=\"line\">   PermSize         = 21757952 (20.75MB)</span><br><span class=\"line\">   MaxPermSize      = 85983232 (82.0MB)</span><br><span class=\"line\">   G1HeapRegionSize = 0 (0.0MB)</span><br><span class=\"line\"></span><br><span class=\"line\">Heap Usage:</span><br><span class=\"line\">PS Young Generation</span><br><span class=\"line\">Eden Space:</span><br><span class=\"line\">   capacity = 135266304 (129.0MB)</span><br><span class=\"line\">   used     = 94343312 (89.97279357910156MB)</span><br><span class=\"line\">   free     = 40922992 (39.02720642089844MB)</span><br><span class=\"line\">   69.74635161170664% used</span><br><span class=\"line\">From Space:</span><br><span class=\"line\">   capacity = 22020096 (21.0MB)</span><br><span class=\"line\">   used     = 17064032 (16.273529052734375MB)</span><br><span class=\"line\">   free     = 4956064 (4.726470947265625MB)</span><br><span class=\"line\">   77.49299548921131% used</span><br><span class=\"line\">To Space:</span><br><span class=\"line\">   capacity = 22020096 (21.0MB)</span><br><span class=\"line\">   used     = 0 (0.0MB)</span><br><span class=\"line\">   free     = 22020096 (21.0MB)</span><br><span class=\"line\">   0.0% used</span><br><span class=\"line\">PS Old Generation</span><br><span class=\"line\">   capacity = 358088704 (341.5MB)</span><br><span class=\"line\">   used     = 4098176 (3.9083251953125MB)</span><br><span class=\"line\">   free     = 353990528 (337.5916748046875MB)</span><br><span class=\"line\">   1.1444583295204978% used</span><br><span class=\"line\">PS Perm Generation</span><br><span class=\"line\">   capacity = 25690112 (24.5MB)</span><br><span class=\"line\">   used     = 25659024 (24.470352172851562MB)</span><br><span class=\"line\">   free     = 31088 (0.0296478271484375MB)</span><br><span class=\"line\">   99.87898846061863% used</span><br><span class=\"line\"></span><br><span class=\"line\">9192 interned Strings occupying 743744 bytes.</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]#jmap -dump:format=b,file=netty.bin 80838</span><br><span class=\"line\">Attaching to process ID 80838, please wait...</span><br><span class=\"line\">Debugger attached successfully.</span><br><span class=\"line\">Server compiler detected.</span><br><span class=\"line\">JVM version is 20.10-b01</span><br><span class=\"line\">Dumping heap to tomcat.bin ...</span><br><span class=\"line\">Finding object size using Printezis bits and skipping over...</span><br><span class=\"line\">Heap dump file created</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jhat\"><a href=\"#jhat\" class=\"headerlink\" title=\"jhat\"></a>jhat</h1><p>jhat(Java Heap Analysis Tool)，是JDK自带的Java堆内存分析工具</p>\n<p><strong><em>语法:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jhat [ options ] &lt;heap-dump-file&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项参数.如果使用，请直接跟在命令名称之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">heap-dump-file</td>\n<td style=\"text-align:left\">指定用于浏览的Java二进制heap dump文件。对于一个包含多个heap dump的dump文件，你可以在文件名称后面追加”#<number>“来指定文件中的某个dump</number></td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-stack false/true</td>\n<td style=\"text-align:left\">关闭跟踪对象分配调用堆栈。注意，如果heap dump中的分配位置信息不可用，你必须设置此标识为false。此选项的默认值为</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-refs false/true</td>\n<td style=\"text-align:left\">关闭对象的引用跟踪。默认为true。默认情况下，反向指针(指向给定对象的对象，又叫做引用或外部引用)用于计算堆中的所有对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-port port-number</td>\n<td style=\"text-align:left\">设置jhat的HTTP服务器的端口号。默认为7000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-exclude exclude-file</td>\n<td style=\"text-align:left\">指定一个数据成员列表的文件，这些数据成员将被排除在”reachable objects”查询的范围之外。举个例子，如果文件列有java.lang.String.value，那么，当计算指定对象”o”的可达对象列表时，涉及到java.lang.String.value字段的引用路径将会被忽略掉</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-baseline baseline-dump-file</td>\n<td style=\"text-align:left\">指定一个基线heap dump。在两个heap dump(当前heap dump和基线heap dump)中存在相同对象ID的对象，不会被标记为”new”。其他的对象将被标记为”new”。这在比较两个不同的heap dump时非常有用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-debug int</td>\n<td style=\"text-align:left\">设置此工具的调试级别。0意味着没有调试输出。设置的值越高，输出的信息就越详细</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-version</td>\n<td style=\"text-align:left\">报告版本号并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h</td>\n<td style=\"text-align:left\">输出帮助信息并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-help</td>\n<td style=\"text-align:left\">输出帮助信息并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-J</td>\n<td style=\"text-align:left\">将运行时参数传递给运行jhat的JVM。例如，-J-Xmx512m设置使用的最大堆内存大小为512MB</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jhat netty.bin</span><br><span class=\"line\">.....</span><br><span class=\"line\">Started HTTP server on port 7000</span><br><span class=\"line\">Server is ready.</span><br></pre></td></tr></table></figure></p>\n<p>访问 <a href=\"http://localhost:7000，就可以查看详细的内存信息\" target=\"_blank\" rel=\"noopener\">http://localhost:7000，就可以查看详细的内存信息</a><br>有时你dump出来的堆很大，在启动时会报堆空间不足的错误，可以使用如下参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jhat -J-Xmx512m &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h1><p>jstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据，在没有GUI图形界面，只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首选工具。</p>\n<p><strong><em>语法：</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>参数：</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">选项，主要有-gcutil,-class,-gcnew，我们一般使用 -gcutil 查看gc情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vmid</td>\n<td style=\"text-align:left\">VM的进程号，即当前运行的java进程号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">interval</td>\n<td style=\"text-align:left\">间隔时间，单位为秒或者毫秒</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">count</td>\n<td style=\"text-align:left\">打印次数，如果缺省则打印无数次</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-class</td>\n<td style=\"text-align:left\">监视类装载、卸载数量、总空间以及类装载所耗时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-compiler</td>\n<td style=\"text-align:left\">输出JIT编译器编译的方法，耗时等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gc</td>\n<td style=\"text-align:left\">监视Java堆状况，包括Eden区，两个survivor区，老年代，永久代等的容量，已用空间，GC时间合计信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gccapacity</td>\n<td style=\"text-align:left\">监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大，最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gccause</td>\n<td style=\"text-align:left\">与-gcutil功能一样，单输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcnew</td>\n<td style=\"text-align:left\">监视新生代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcnewcapacity</td>\n<td style=\"text-align:left\">监视内容yu-gcnew基本相同，输出主要关注使用到的最大、最少空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcold</td>\n<td style=\"text-align:left\">监视老年代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcoldcapacity</td>\n<td style=\"text-align:left\">监视内容与-gcold基本相同,输出主要关注使用到的最大、最少空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcpermcapacity</td>\n<td style=\"text-align:left\">输出永久代使用到的最大、最少空间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gcutil</td>\n<td style=\"text-align:left\">与-gc功能基本相同，单输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-printcompilation</td>\n<td style=\"text-align:left\">输出已经被JIT编译的方法</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jstat -gcutil 80838 100 5</span><br><span class=\"line\">  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br><span class=\"line\"> 77.49   0.00  69.75   1.14  99.88      2    4.719     0    0.000    4.719</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>数据含义:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">列</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">S0</td>\n<td style=\"text-align:left\">Heap上的 Survivor space 0 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S1</td>\n<td style=\"text-align:left\">Heap上的 Survivor space 1 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E</td>\n<td style=\"text-align:left\">Heap上的 Eden space 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">Heap上的 Old space 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">P</td>\n<td style=\"text-align:left\">Perm space 区已使用空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">YGC</td>\n<td style=\"text-align:left\">从应用程序启动到采样时发生 Young GC 的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">YGCT</td>\n<td style=\"text-align:left\">从应用程序启动到采样时 Young GC 所用的时间(单位秒)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FGC</td>\n<td style=\"text-align:left\">从应用程序启动到采样时发生 Full GC 的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FGCT</td>\n<td style=\"text-align:left\">从应用程序启动到采样时 Full GC 所用的时间(单位秒)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GCT</td>\n<td style=\"text-align:left\">从应用程序启动到采样时用于垃圾回收的总时间(单位秒)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h1><p>jstack: 查看进程线程栈信息<br>如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。 如果运行的java程序呈现hung的状态，jstack可以查看线程堆栈。</p>\n<p><strong><em>语法：</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定进程号(pid)的进程</span><br><span class=\"line\">jstack [-l] &lt;pid&gt;</span><br><span class=\"line\">jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class=\"line\">#指定核心文件</span><br><span class=\"line\">jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class=\"line\">#指定远程调试服务器</span><br><span class=\"line\">jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>可用的options:</em></strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描叙</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-F</td>\n<td style=\"text-align:left\">pid无法响应时，强制打印堆栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m</td>\n<td style=\"text-align:left\">打印混合模式(Java和本地C/C++帧)的堆栈跟踪信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-l</td>\n<td style=\"text-align:left\">长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h</td>\n<td style=\"text-align:left\">输出帮助信息</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>实例:</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# jstack -l 80838</span><br><span class=\"line\">2016-08-22 15:40:02</span><br><span class=\"line\">Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.65-b04 mixed mode):</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;RMI Scheduler(0)&quot; daemon prio=10 tid=0x00007feb98005800 nid=0xea72 waiting on condition [0x00007febac1e5000]</span><br><span class=\"line\">   java.lang.Thread.State: WAITING (parking)</span><br><span class=\"line\">        at sun.misc.Unsafe.park(Native Method)</span><br><span class=\"line\">        - parking to wait for  &lt;0x00000000f4174500&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class=\"line\">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)</span><br><span class=\"line\">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)</span><br><span class=\"line\">        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1079)</span><br><span class=\"line\">        at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:807)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)</span><br><span class=\"line\">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">.......</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;VM Thread&quot; prio=10 tid=0x00007fec1c068800 nid=0x13bcc runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#0 (ParallelGC)&quot; prio=10 tid=0x00007fec1c01e800 nid=0x13bc8 runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#1 (ParallelGC)&quot; prio=10 tid=0x00007fec1c020800 nid=0x13bc9 runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#2 (ParallelGC)&quot; prio=10 tid=0x00007fec1c022800 nid=0x13bca runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;GC task thread#3 (ParallelGC)&quot; prio=10 tid=0x00007fec1c024800 nid=0x13bcb runnable </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;VM Periodic Task Thread&quot; prio=10 tid=0x00007fec1c0a8000 nid=0x13bd3 waiting on condition </span><br><span class=\"line\"></span><br><span class=\"line\">JNI global references: 255</span><br></pre></td></tr></table></figure></p>\n<p>将线程栈信息输出到指定文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost logs]# jstack -l 80838 &gt; netty.stack</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>注意</em></strong><br>在jdk bin目录下提供了一个集成以上命令行的一个可视化工具jvisualvm能更加直观的查看数据信息</p>"},{"title":"JVMTI随记","date":"2021-04-10T14:48:20.000Z","comments":1,"toc":false,"_content":"JVM工具接口（JVM TI）是供工具使用的本机编程接口。它提供了一种检查状态和控制Java虚拟机中运行的应用程序执行的方法。JVMTI支持需要访问JVM状态的各种工具。\n\n<!--more-->\n\n### jvmti_ext_ex.cpp\n```C++\n\n#include <jvmti.h>\n#include <stdio.h>\n#include <memory.h>\n#include <string.h>\n\nvoid printStackTrace(JNIEnv* env, jobject exception) {\n\tjclass throwable_class = (*env).FindClass(\"java/lang/Throwable\");\n\tjmethodID print_method = (*env).GetMethodID(throwable_class, \"printStackTrace\", \"()V\");\n\t(*env).CallVoidMethod(exception, print_method);\n}\n\nvoid notify(JNIEnv* env){\n       jclass notify_class = env->FindClass(\"Demo\");\n       jmethodID notify_method = env->GetStaticMethodID(notify_class, \"jvm_notify\", \"()V\");\n       env->CallStaticObjectMethod(notify_class,notify_method);\n}\n\nvoid printLocalVar(jvmtiEnv *jvmti,JNIEnv* env, jthread thread, jmethodID method,jobject obj){\n      jint max_ptr;\n      jvmtiError error= jvmti->GetMaxLocals(method,&max_ptr);\n      if(error != JVMTI_ERROR_NONE) {\n        fprintf(stderr, \"ERROR: Unable to GetMaxLocals JVMTI\");\n        return;\n      }\n     // char *method_name;\n\n      //printf(\"loclasMax:%d\\n\",max_ptr);\n      jint entry_count_ptr;\n      jvmtiLocalVariableEntry *table_ptr;\n      error = jvmti->GetLocalVariableTable(method,&entry_count_ptr,&table_ptr);\n      if(error != JVMTI_ERROR_NONE) {\n        fprintf(stderr, \"ERROR: Unable to GetLocalVariableTable JVMTI error %d \\n\",error);\n        return;\n      }\n     // printf(\"entry_count_ptr:%d\\n\",entry_count_ptr); \n      for(int i=0;i<entry_count_ptr;i++){\n         //printf(\"name:%s slot:%d\\n\",table_ptr->name,table_ptr->slot);\n         jint value_ptr;\n         jvmti->GetLocalInt(thread,0,i,&value_ptr);\n         printf(\"name:%s slot:%d value %d\\n\",table_ptr->name,table_ptr->slot,value_ptr);\n         table_ptr++;\n      }\n\n}\n/*\n *thread 发生异常的线程\n *method 发生异常的方法\n *location 发生异常的位置\n *exception 发生的异常\n *catch_method 捕获异常的方法 如果没有catch 则为null\n *catch_location 捕获异常的位置 如果没有catch 则为0\n */\nvoid JNICALL Callback_JVMTI_EVENT_EXCEPTION (jvmtiEnv *jvmti_env,\n\tJNIEnv* jni_env,\n\tjthread thread,\n\tjmethodID method,\n\tjlocation location,\n\tjobject exception,\n\tjmethodID catch_method,\n\tjlocation catch_location) {\n\n\t//printf(\"loaded class name=%s\\n \", \"run in Callback_JVMTI_EVENT_EXCEPTION method\");\n        char* class_name;\n        jclass exception_class = jni_env->GetObjectClass(exception);\n        jvmti_env->GetClassSignature(exception_class, &class_name, NULL);\n        printf(\"Exception: %s %ld %ld\\n\", class_name,location,catch_location);\t\n        printStackTrace(jni_env, exception);\n\n        if(strcmp(class_name,\"Ljava/lang/ClassNotFoundException;\")\n            && strcmp(class_name,\"Ljava/lang/NoSuchFieldError;\")\n            && strcmp(class_name,\"Ljava/lang/NoSuchMethodException;\")){\n             notify(jni_env);\n             printLocalVar(jvmti_env,jni_env,thread,method,exception);\n        }\n}\n\nvoid JNICALL Callback_JVMTI_EVENT_EXCEPTIONCATCH(jvmtiEnv *jvmti_env,\n            JNIEnv* jni_env,\n            jthread thread,\n            jmethodID method,\n            jlocation location,\n            jobject exception){\n\n        char* class_name;\n        jclass exception_class = jni_env->GetObjectClass(exception);\n        jvmti_env->GetClassSignature(exception_class, &class_name, NULL);\n       //printf(\"Exception: %s %ld\\n\", class_name,location);\n       //printStackTrace(jni_env, exception);\n\n\n}\n\nvoid JNICALL Callback_JVMTI_EVENT_METHODENTRY(jvmtiEnv *jvmti_env,\n            JNIEnv* jni_env,\n            jthread thread,\n            jmethodID method){\n       //printf(\"method entry;\");\n}\n\nvoid JNICALL Callback_JVMTI_EVENT_METHODEXIT(jvmtiEnv *jvmti_env,\n            JNIEnv* jni_env,\n            jthread thread,\n            jmethodID method,\n            jboolean was_popped_by_exception,\n            jvalue return_value){\n      //printf(\"method exit;\");\n}\n\nJNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved){\n   fprintf(stderr,\"agent onload\\n\"); \n   jvmtiEnv *jvmti = NULL;\n   //获取JVMTI environment\n   jint erno = vm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_1);\n   if (erno != JNI_OK) {\n        fprintf(stderr, \"ERROR: Couldn't get JVMTI environment\");\n        return JNI_ERR;\n   }\n   //注册功能\n   jvmtiCapabilities capabilities;\n   (void)memset(&capabilities, 0, sizeof(jvmtiCapabilities));\n   capabilities.can_generate_exception_events=1;\n   capabilities.can_access_local_variables = 1;\n   capabilities.can_generate_method_entry_events=1;\n   capabilities.can_generate_method_exit_events=1;\n   \n   jvmtiError error = jvmti->AddCapabilities(&capabilities);\n   if(error != JVMTI_ERROR_NONE) {\n\tfprintf(stderr, \"ERROR: Unable to AddCapabilities JVMTI\");\n\treturn  error;\n   } \n   //设置JVM事件 (JVMTI_EVENT_EXCEPTION) 回调\n   jvmtiEventCallbacks ex_callbacks;\n   ex_callbacks.Exception = &Callback_JVMTI_EVENT_EXCEPTION;\n   ex_callbacks.ExceptionCatch = &Callback_JVMTI_EVENT_EXCEPTIONCATCH;\n   ex_callbacks.MethodEntry = &Callback_JVMTI_EVENT_METHODENTRY;\n   ex_callbacks.MethodExit = &Callback_JVMTI_EVENT_METHODEXIT;\n   error = jvmti->SetEventCallbacks(&ex_callbacks, (jint)sizeof(ex_callbacks));\n   if(error != JVMTI_ERROR_NONE) {\n\tfprintf(stderr, \"ERROR: Unable to SetEventCallbacks JVMTI!\");\t\t\n\treturn error;\n   }\n   //设置事件通知\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION, (jthread)NULL);\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION_CATCH, (jthread)NULL);\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT, (jthread)NULL);\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_ENTRY, (jthread)NULL);\n   if(error != JVMTI_ERROR_NONE) {\n\tfprintf(stderr, \" ERROR: Unable to SetEventNotificationMode JVMTI!,the error code=%d\",error);\n\treturn  error;\n   }\n   \n   return JNI_OK;\n}\n\nJNIEXPORT void JNICALL Agent_OnUnload(JavaVM *vm){\n   fprintf(stderr,\"agent onUnload\\n\");\n}\n\n```\n### build.sh\n\n```shell\n\n#!/bin/sh\nBASE_HOME=`pwd`\nINCLUDES=\"-I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include -I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include/linux\"\ng++ $BASE_HOME/jvmti_ext_ex.cpp $INCLUDES -Wall -Wno-deprecated -fPIC --share -o $BASE_HOME/jvmti_ext_ex.so\n\n```\n\n### Demo.java\n```java\n\npublic class Demo{\n\n   public static void main(String[] args){\n     \n      System.out.println(\"hello world\");\n      int i=0;\n      try{\n         i=100/i;\n      }catch(Exception e){\n    \n      }\n      new Thread(()->{\n         msg(1);\n      }).start();\n    \n      // msg(10);\n   }\n   \n   public static int msg(int i){\n      return i+1;\n   }\n  \n   public static void error(int i){\n      i++;\n      throw new RuntimeException();\n   }\n  \n   public static void jvm_notify(){\n       System.out.println(\"notify\");\n   }\n \n}\n\n```\n\n### run.sh\n\n\n```shell\n#!/bin/sh\n\njava -agentpath:jvmti_ext_ex.so  Demo\n#java -agentlib:hprof=cpu=samples,interval=1,depth=3 Demo\n\n```","source":"_posts/JVMTI随记.md","raw":"---\ntitle: JVMTI随记\ndate: 2021-04-10 22:48:20\ncomments: true \ncategories: JVM\ntoc: false\n---\nJVM工具接口（JVM TI）是供工具使用的本机编程接口。它提供了一种检查状态和控制Java虚拟机中运行的应用程序执行的方法。JVMTI支持需要访问JVM状态的各种工具。\n\n<!--more-->\n\n### jvmti_ext_ex.cpp\n```C++\n\n#include <jvmti.h>\n#include <stdio.h>\n#include <memory.h>\n#include <string.h>\n\nvoid printStackTrace(JNIEnv* env, jobject exception) {\n\tjclass throwable_class = (*env).FindClass(\"java/lang/Throwable\");\n\tjmethodID print_method = (*env).GetMethodID(throwable_class, \"printStackTrace\", \"()V\");\n\t(*env).CallVoidMethod(exception, print_method);\n}\n\nvoid notify(JNIEnv* env){\n       jclass notify_class = env->FindClass(\"Demo\");\n       jmethodID notify_method = env->GetStaticMethodID(notify_class, \"jvm_notify\", \"()V\");\n       env->CallStaticObjectMethod(notify_class,notify_method);\n}\n\nvoid printLocalVar(jvmtiEnv *jvmti,JNIEnv* env, jthread thread, jmethodID method,jobject obj){\n      jint max_ptr;\n      jvmtiError error= jvmti->GetMaxLocals(method,&max_ptr);\n      if(error != JVMTI_ERROR_NONE) {\n        fprintf(stderr, \"ERROR: Unable to GetMaxLocals JVMTI\");\n        return;\n      }\n     // char *method_name;\n\n      //printf(\"loclasMax:%d\\n\",max_ptr);\n      jint entry_count_ptr;\n      jvmtiLocalVariableEntry *table_ptr;\n      error = jvmti->GetLocalVariableTable(method,&entry_count_ptr,&table_ptr);\n      if(error != JVMTI_ERROR_NONE) {\n        fprintf(stderr, \"ERROR: Unable to GetLocalVariableTable JVMTI error %d \\n\",error);\n        return;\n      }\n     // printf(\"entry_count_ptr:%d\\n\",entry_count_ptr); \n      for(int i=0;i<entry_count_ptr;i++){\n         //printf(\"name:%s slot:%d\\n\",table_ptr->name,table_ptr->slot);\n         jint value_ptr;\n         jvmti->GetLocalInt(thread,0,i,&value_ptr);\n         printf(\"name:%s slot:%d value %d\\n\",table_ptr->name,table_ptr->slot,value_ptr);\n         table_ptr++;\n      }\n\n}\n/*\n *thread 发生异常的线程\n *method 发生异常的方法\n *location 发生异常的位置\n *exception 发生的异常\n *catch_method 捕获异常的方法 如果没有catch 则为null\n *catch_location 捕获异常的位置 如果没有catch 则为0\n */\nvoid JNICALL Callback_JVMTI_EVENT_EXCEPTION (jvmtiEnv *jvmti_env,\n\tJNIEnv* jni_env,\n\tjthread thread,\n\tjmethodID method,\n\tjlocation location,\n\tjobject exception,\n\tjmethodID catch_method,\n\tjlocation catch_location) {\n\n\t//printf(\"loaded class name=%s\\n \", \"run in Callback_JVMTI_EVENT_EXCEPTION method\");\n        char* class_name;\n        jclass exception_class = jni_env->GetObjectClass(exception);\n        jvmti_env->GetClassSignature(exception_class, &class_name, NULL);\n        printf(\"Exception: %s %ld %ld\\n\", class_name,location,catch_location);\t\n        printStackTrace(jni_env, exception);\n\n        if(strcmp(class_name,\"Ljava/lang/ClassNotFoundException;\")\n            && strcmp(class_name,\"Ljava/lang/NoSuchFieldError;\")\n            && strcmp(class_name,\"Ljava/lang/NoSuchMethodException;\")){\n             notify(jni_env);\n             printLocalVar(jvmti_env,jni_env,thread,method,exception);\n        }\n}\n\nvoid JNICALL Callback_JVMTI_EVENT_EXCEPTIONCATCH(jvmtiEnv *jvmti_env,\n            JNIEnv* jni_env,\n            jthread thread,\n            jmethodID method,\n            jlocation location,\n            jobject exception){\n\n        char* class_name;\n        jclass exception_class = jni_env->GetObjectClass(exception);\n        jvmti_env->GetClassSignature(exception_class, &class_name, NULL);\n       //printf(\"Exception: %s %ld\\n\", class_name,location);\n       //printStackTrace(jni_env, exception);\n\n\n}\n\nvoid JNICALL Callback_JVMTI_EVENT_METHODENTRY(jvmtiEnv *jvmti_env,\n            JNIEnv* jni_env,\n            jthread thread,\n            jmethodID method){\n       //printf(\"method entry;\");\n}\n\nvoid JNICALL Callback_JVMTI_EVENT_METHODEXIT(jvmtiEnv *jvmti_env,\n            JNIEnv* jni_env,\n            jthread thread,\n            jmethodID method,\n            jboolean was_popped_by_exception,\n            jvalue return_value){\n      //printf(\"method exit;\");\n}\n\nJNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved){\n   fprintf(stderr,\"agent onload\\n\"); \n   jvmtiEnv *jvmti = NULL;\n   //获取JVMTI environment\n   jint erno = vm->GetEnv((void **)&jvmti, JVMTI_VERSION_1_1);\n   if (erno != JNI_OK) {\n        fprintf(stderr, \"ERROR: Couldn't get JVMTI environment\");\n        return JNI_ERR;\n   }\n   //注册功能\n   jvmtiCapabilities capabilities;\n   (void)memset(&capabilities, 0, sizeof(jvmtiCapabilities));\n   capabilities.can_generate_exception_events=1;\n   capabilities.can_access_local_variables = 1;\n   capabilities.can_generate_method_entry_events=1;\n   capabilities.can_generate_method_exit_events=1;\n   \n   jvmtiError error = jvmti->AddCapabilities(&capabilities);\n   if(error != JVMTI_ERROR_NONE) {\n\tfprintf(stderr, \"ERROR: Unable to AddCapabilities JVMTI\");\n\treturn  error;\n   } \n   //设置JVM事件 (JVMTI_EVENT_EXCEPTION) 回调\n   jvmtiEventCallbacks ex_callbacks;\n   ex_callbacks.Exception = &Callback_JVMTI_EVENT_EXCEPTION;\n   ex_callbacks.ExceptionCatch = &Callback_JVMTI_EVENT_EXCEPTIONCATCH;\n   ex_callbacks.MethodEntry = &Callback_JVMTI_EVENT_METHODENTRY;\n   ex_callbacks.MethodExit = &Callback_JVMTI_EVENT_METHODEXIT;\n   error = jvmti->SetEventCallbacks(&ex_callbacks, (jint)sizeof(ex_callbacks));\n   if(error != JVMTI_ERROR_NONE) {\n\tfprintf(stderr, \"ERROR: Unable to SetEventCallbacks JVMTI!\");\t\t\n\treturn error;\n   }\n   //设置事件通知\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION, (jthread)NULL);\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION_CATCH, (jthread)NULL);\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT, (jthread)NULL);\n   error = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_ENTRY, (jthread)NULL);\n   if(error != JVMTI_ERROR_NONE) {\n\tfprintf(stderr, \" ERROR: Unable to SetEventNotificationMode JVMTI!,the error code=%d\",error);\n\treturn  error;\n   }\n   \n   return JNI_OK;\n}\n\nJNIEXPORT void JNICALL Agent_OnUnload(JavaVM *vm){\n   fprintf(stderr,\"agent onUnload\\n\");\n}\n\n```\n### build.sh\n\n```shell\n\n#!/bin/sh\nBASE_HOME=`pwd`\nINCLUDES=\"-I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include -I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include/linux\"\ng++ $BASE_HOME/jvmti_ext_ex.cpp $INCLUDES -Wall -Wno-deprecated -fPIC --share -o $BASE_HOME/jvmti_ext_ex.so\n\n```\n\n### Demo.java\n```java\n\npublic class Demo{\n\n   public static void main(String[] args){\n     \n      System.out.println(\"hello world\");\n      int i=0;\n      try{\n         i=100/i;\n      }catch(Exception e){\n    \n      }\n      new Thread(()->{\n         msg(1);\n      }).start();\n    \n      // msg(10);\n   }\n   \n   public static int msg(int i){\n      return i+1;\n   }\n  \n   public static void error(int i){\n      i++;\n      throw new RuntimeException();\n   }\n  \n   public static void jvm_notify(){\n       System.out.println(\"notify\");\n   }\n \n}\n\n```\n\n### run.sh\n\n\n```shell\n#!/bin/sh\n\njava -agentpath:jvmti_ext_ex.so  Demo\n#java -agentlib:hprof=cpu=samples,interval=1,depth=3 Demo\n\n```","slug":"JVMTI随记","published":1,"updated":"2021-06-30T07:49:02.970Z","layout":"post","photos":[],"link":"","_id":"ckqjatokn000bqkl53rpjb7ze","content":"<p>JVM工具接口（JVM TI）是供工具使用的本机编程接口。它提供了一种检查状态和控制Java虚拟机中运行的应用程序执行的方法。JVMTI支持需要访问JVM状态的各种工具。</p>\n<a id=\"more\"></a>\n<h3 id=\"jvmti-ext-ex-cpp\"><a href=\"#jvmti-ext-ex-cpp\" class=\"headerlink\" title=\"jvmti_ext_ex.cpp\"></a>jvmti_ext_ex.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jvmti.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStackTrace</span><span class=\"params\">(JNIEnv* env, jobject exception)</span> </span>&#123;</span><br><span class=\"line\">\tjclass throwable_class = (*env).FindClass(<span class=\"string\">\"java/lang/Throwable\"</span>);</span><br><span class=\"line\">\tjmethodID print_method = (*env).GetMethodID(throwable_class, <span class=\"string\">\"printStackTrace\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">\t(*env).CallVoidMethod(exception, print_method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">(JNIEnv* env)</span></span>&#123;</span><br><span class=\"line\">       jclass notify_class = env-&gt;FindClass(<span class=\"string\">\"Demo\"</span>);</span><br><span class=\"line\">       jmethodID notify_method = env-&gt;GetStaticMethodID(notify_class, <span class=\"string\">\"jvm_notify\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">       env-&gt;CallStaticObjectMethod(notify_class,notify_method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printLocalVar</span><span class=\"params\">(jvmtiEnv *jvmti,JNIEnv* env, jthread thread, jmethodID method,jobject obj)</span></span>&#123;</span><br><span class=\"line\">      jint max_ptr;</span><br><span class=\"line\">      jvmtiError error= jvmti-&gt;GetMaxLocals(method,&amp;max_ptr);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to GetMaxLocals JVMTI\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     <span class=\"comment\">// char *method_name;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//printf(\"loclasMax:%d\\n\",max_ptr);</span></span><br><span class=\"line\">      jint entry_count_ptr;</span><br><span class=\"line\">      jvmtiLocalVariableEntry *table_ptr;</span><br><span class=\"line\">      error = jvmti-&gt;GetLocalVariableTable(method,&amp;entry_count_ptr,&amp;table_ptr);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to GetLocalVariableTable JVMTI error %d \\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     <span class=\"comment\">// printf(\"entry_count_ptr:%d\\n\",entry_count_ptr); </span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;entry_count_ptr;i++)&#123;</span><br><span class=\"line\">         <span class=\"comment\">//printf(\"name:%s slot:%d\\n\",table_ptr-&gt;name,table_ptr-&gt;slot);</span></span><br><span class=\"line\">         jint value_ptr;</span><br><span class=\"line\">         jvmti-&gt;GetLocalInt(thread,<span class=\"number\">0</span>,i,&amp;value_ptr);</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"name:%s slot:%d value %d\\n\"</span>,table_ptr-&gt;name,table_ptr-&gt;slot,value_ptr);</span><br><span class=\"line\">         table_ptr++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *thread 发生异常的线程</span></span><br><span class=\"line\"><span class=\"comment\"> *method 发生异常的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *location 发生异常的位置</span></span><br><span class=\"line\"><span class=\"comment\"> *exception 发生的异常</span></span><br><span class=\"line\"><span class=\"comment\"> *catch_method 捕获异常的方法 如果没有catch 则为null</span></span><br><span class=\"line\"><span class=\"comment\"> *catch_location 捕获异常的位置 如果没有catch 则为0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_EXCEPTION</span> <span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tJNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjmethodID method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjlocation location,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjobject exception,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjmethodID catch_method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjlocation catch_location)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"loaded class name=%s\\n \", \"run in Callback_JVMTI_EVENT_EXCEPTION method\");</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* class_name;</span><br><span class=\"line\">        jclass exception_class = jni_env-&gt;GetObjectClass(exception);</span><br><span class=\"line\">        jvmti_env-&gt;GetClassSignature(exception_class, &amp;class_name, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Exception: %s %ld %ld\\n\"</span>, class_name,location,catch_location);\t</span><br><span class=\"line\">        printStackTrace(jni_env, exception);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(class_name,<span class=\"string\">\"Ljava/lang/ClassNotFoundException;\"</span>)</span><br><span class=\"line\">            &amp;&amp; <span class=\"built_in\">strcmp</span>(class_name,<span class=\"string\">\"Ljava/lang/NoSuchFieldError;\"</span>)</span><br><span class=\"line\">            &amp;&amp; <span class=\"built_in\">strcmp</span>(class_name,<span class=\"string\">\"Ljava/lang/NoSuchMethodException;\"</span>))&#123;</span><br><span class=\"line\">             notify(jni_env);</span><br><span class=\"line\">             printLocalVar(jvmti_env,jni_env,thread,method,exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_EXCEPTIONCATCH</span><span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            JNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jmethodID method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jlocation location,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jobject exception)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* class_name;</span><br><span class=\"line\">        jclass exception_class = jni_env-&gt;GetObjectClass(exception);</span><br><span class=\"line\">        jvmti_env-&gt;GetClassSignature(exception_class, &amp;class_name, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">       <span class=\"comment\">//printf(\"Exception: %s %ld\\n\", class_name,location);</span></span><br><span class=\"line\">       <span class=\"comment\">//printStackTrace(jni_env, exception);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_METHODENTRY</span><span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            JNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jmethodID method)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//printf(\"method entry;\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_METHODEXIT</span><span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            JNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jmethodID method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jboolean was_popped_by_exception,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jvalue return_value)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//printf(\"method exit;\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jint JNICALL <span class=\"title\">Agent_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"keyword\">char</span> *options, <span class=\"keyword\">void</span> *reserved)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"agent onload\\n\"</span>); </span><br><span class=\"line\">   jvmtiEnv *jvmti = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   <span class=\"comment\">//获取JVMTI environment</span></span><br><span class=\"line\">   jint erno = vm-&gt;GetEnv((<span class=\"keyword\">void</span> **)&amp;jvmti, JVMTI_VERSION_1_1);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (erno != JNI_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Couldn't get JVMTI environment\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JNI_ERR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//注册功能</span></span><br><span class=\"line\">   jvmtiCapabilities capabilities;</span><br><span class=\"line\">   (<span class=\"keyword\">void</span>)<span class=\"built_in\">memset</span>(&amp;capabilities, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(jvmtiCapabilities));</span><br><span class=\"line\">   capabilities.can_generate_exception_events=<span class=\"number\">1</span>;</span><br><span class=\"line\">   capabilities.can_access_local_variables = <span class=\"number\">1</span>;</span><br><span class=\"line\">   capabilities.can_generate_method_entry_events=<span class=\"number\">1</span>;</span><br><span class=\"line\">   capabilities.can_generate_method_exit_events=<span class=\"number\">1</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   jvmtiError error = jvmti-&gt;AddCapabilities(&amp;capabilities);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to AddCapabilities JVMTI\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  error;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"comment\">//设置JVM事件 (JVMTI_EVENT_EXCEPTION) 回调</span></span><br><span class=\"line\">   jvmtiEventCallbacks ex_callbacks;</span><br><span class=\"line\">   ex_callbacks.Exception = &amp;Callback_JVMTI_EVENT_EXCEPTION;</span><br><span class=\"line\">   ex_callbacks.ExceptionCatch = &amp;Callback_JVMTI_EVENT_EXCEPTIONCATCH;</span><br><span class=\"line\">   ex_callbacks.MethodEntry = &amp;Callback_JVMTI_EVENT_METHODENTRY;</span><br><span class=\"line\">   ex_callbacks.MethodExit = &amp;Callback_JVMTI_EVENT_METHODEXIT;</span><br><span class=\"line\">   error = jvmti-&gt;SetEventCallbacks(&amp;ex_callbacks, (jint)<span class=\"keyword\">sizeof</span>(ex_callbacks));</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to SetEventCallbacks JVMTI!\"</span>);\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> error;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设置事件通知</span></span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION_CATCH, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_ENTRY, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\" ERROR: Unable to SetEventNotificationMode JVMTI!,the error code=%d\"</span>,error);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  error;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Agent_OnUnload</span><span class=\"params\">(JavaVM *vm)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"agent onUnload\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"build-sh\"><a href=\"#build-sh\" class=\"headerlink\" title=\"build.sh\"></a>build.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\">BASE_HOME=`pwd`</span><br><span class=\"line\">INCLUDES=\"-I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include -I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include/linux\"</span><br><span class=\"line\">g++ $BASE_HOME/jvmti_ext_ex.cpp $INCLUDES -Wall -Wno-deprecated -fPIC --share -o $BASE_HOME/jvmti_ext_ex.so</span><br></pre></td></tr></table></figure>\n<h3 id=\"Demo-java\"><a href=\"#Demo-java\" class=\"headerlink\" title=\"Demo.java\"></a>Demo.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         i=<span class=\"number\">100</span>/i;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">         msg(<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;).start();</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// msg(10);</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">msg</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jvm_notify</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"notify\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"run-sh\"><a href=\"#run-sh\" class=\"headerlink\" title=\"run.sh\"></a>run.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">java -agentpath:jvmti_ext_ex.so  Demo</span><br><span class=\"line\"><span class=\"meta\">#</span>java -agentlib:hprof=cpu=samples,interval=1,depth=3 Demo</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>JVM工具接口（JVM TI）是供工具使用的本机编程接口。它提供了一种检查状态和控制Java虚拟机中运行的应用程序执行的方法。JVMTI支持需要访问JVM状态的各种工具。</p>","more":"<h3 id=\"jvmti-ext-ex-cpp\"><a href=\"#jvmti-ext-ex-cpp\" class=\"headerlink\" title=\"jvmti_ext_ex.cpp\"></a>jvmti_ext_ex.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jvmti.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStackTrace</span><span class=\"params\">(JNIEnv* env, jobject exception)</span> </span>&#123;</span><br><span class=\"line\">\tjclass throwable_class = (*env).FindClass(<span class=\"string\">\"java/lang/Throwable\"</span>);</span><br><span class=\"line\">\tjmethodID print_method = (*env).GetMethodID(throwable_class, <span class=\"string\">\"printStackTrace\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">\t(*env).CallVoidMethod(exception, print_method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">(JNIEnv* env)</span></span>&#123;</span><br><span class=\"line\">       jclass notify_class = env-&gt;FindClass(<span class=\"string\">\"Demo\"</span>);</span><br><span class=\"line\">       jmethodID notify_method = env-&gt;GetStaticMethodID(notify_class, <span class=\"string\">\"jvm_notify\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">       env-&gt;CallStaticObjectMethod(notify_class,notify_method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printLocalVar</span><span class=\"params\">(jvmtiEnv *jvmti,JNIEnv* env, jthread thread, jmethodID method,jobject obj)</span></span>&#123;</span><br><span class=\"line\">      jint max_ptr;</span><br><span class=\"line\">      jvmtiError error= jvmti-&gt;GetMaxLocals(method,&amp;max_ptr);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to GetMaxLocals JVMTI\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     <span class=\"comment\">// char *method_name;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//printf(\"loclasMax:%d\\n\",max_ptr);</span></span><br><span class=\"line\">      jint entry_count_ptr;</span><br><span class=\"line\">      jvmtiLocalVariableEntry *table_ptr;</span><br><span class=\"line\">      error = jvmti-&gt;GetLocalVariableTable(method,&amp;entry_count_ptr,&amp;table_ptr);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to GetLocalVariableTable JVMTI error %d \\n\"</span>,error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     <span class=\"comment\">// printf(\"entry_count_ptr:%d\\n\",entry_count_ptr); </span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;entry_count_ptr;i++)&#123;</span><br><span class=\"line\">         <span class=\"comment\">//printf(\"name:%s slot:%d\\n\",table_ptr-&gt;name,table_ptr-&gt;slot);</span></span><br><span class=\"line\">         jint value_ptr;</span><br><span class=\"line\">         jvmti-&gt;GetLocalInt(thread,<span class=\"number\">0</span>,i,&amp;value_ptr);</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"name:%s slot:%d value %d\\n\"</span>,table_ptr-&gt;name,table_ptr-&gt;slot,value_ptr);</span><br><span class=\"line\">         table_ptr++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *thread 发生异常的线程</span></span><br><span class=\"line\"><span class=\"comment\"> *method 发生异常的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *location 发生异常的位置</span></span><br><span class=\"line\"><span class=\"comment\"> *exception 发生的异常</span></span><br><span class=\"line\"><span class=\"comment\"> *catch_method 捕获异常的方法 如果没有catch 则为null</span></span><br><span class=\"line\"><span class=\"comment\"> *catch_location 捕获异常的位置 如果没有catch 则为0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_EXCEPTION</span> <span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tJNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjmethodID method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjlocation location,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjobject exception,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjmethodID catch_method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tjlocation catch_location)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"loaded class name=%s\\n \", \"run in Callback_JVMTI_EVENT_EXCEPTION method\");</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* class_name;</span><br><span class=\"line\">        jclass exception_class = jni_env-&gt;GetObjectClass(exception);</span><br><span class=\"line\">        jvmti_env-&gt;GetClassSignature(exception_class, &amp;class_name, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Exception: %s %ld %ld\\n\"</span>, class_name,location,catch_location);\t</span><br><span class=\"line\">        printStackTrace(jni_env, exception);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(class_name,<span class=\"string\">\"Ljava/lang/ClassNotFoundException;\"</span>)</span><br><span class=\"line\">            &amp;&amp; <span class=\"built_in\">strcmp</span>(class_name,<span class=\"string\">\"Ljava/lang/NoSuchFieldError;\"</span>)</span><br><span class=\"line\">            &amp;&amp; <span class=\"built_in\">strcmp</span>(class_name,<span class=\"string\">\"Ljava/lang/NoSuchMethodException;\"</span>))&#123;</span><br><span class=\"line\">             notify(jni_env);</span><br><span class=\"line\">             printLocalVar(jvmti_env,jni_env,thread,method,exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_EXCEPTIONCATCH</span><span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            JNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jmethodID method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jlocation location,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jobject exception)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* class_name;</span><br><span class=\"line\">        jclass exception_class = jni_env-&gt;GetObjectClass(exception);</span><br><span class=\"line\">        jvmti_env-&gt;GetClassSignature(exception_class, &amp;class_name, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">       <span class=\"comment\">//printf(\"Exception: %s %ld\\n\", class_name,location);</span></span><br><span class=\"line\">       <span class=\"comment\">//printStackTrace(jni_env, exception);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_METHODENTRY</span><span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            JNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jmethodID method)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//printf(\"method entry;\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> JNICALL <span class=\"title\">Callback_JVMTI_EVENT_METHODEXIT</span><span class=\"params\">(jvmtiEnv *jvmti_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            JNIEnv* jni_env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jthread thread,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jmethodID method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jboolean was_popped_by_exception,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            jvalue return_value)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//printf(\"method exit;\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jint JNICALL <span class=\"title\">Agent_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"keyword\">char</span> *options, <span class=\"keyword\">void</span> *reserved)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"agent onload\\n\"</span>); </span><br><span class=\"line\">   jvmtiEnv *jvmti = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   <span class=\"comment\">//获取JVMTI environment</span></span><br><span class=\"line\">   jint erno = vm-&gt;GetEnv((<span class=\"keyword\">void</span> **)&amp;jvmti, JVMTI_VERSION_1_1);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (erno != JNI_OK) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Couldn't get JVMTI environment\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JNI_ERR;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//注册功能</span></span><br><span class=\"line\">   jvmtiCapabilities capabilities;</span><br><span class=\"line\">   (<span class=\"keyword\">void</span>)<span class=\"built_in\">memset</span>(&amp;capabilities, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(jvmtiCapabilities));</span><br><span class=\"line\">   capabilities.can_generate_exception_events=<span class=\"number\">1</span>;</span><br><span class=\"line\">   capabilities.can_access_local_variables = <span class=\"number\">1</span>;</span><br><span class=\"line\">   capabilities.can_generate_method_entry_events=<span class=\"number\">1</span>;</span><br><span class=\"line\">   capabilities.can_generate_method_exit_events=<span class=\"number\">1</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   jvmtiError error = jvmti-&gt;AddCapabilities(&amp;capabilities);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to AddCapabilities JVMTI\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  error;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"comment\">//设置JVM事件 (JVMTI_EVENT_EXCEPTION) 回调</span></span><br><span class=\"line\">   jvmtiEventCallbacks ex_callbacks;</span><br><span class=\"line\">   ex_callbacks.Exception = &amp;Callback_JVMTI_EVENT_EXCEPTION;</span><br><span class=\"line\">   ex_callbacks.ExceptionCatch = &amp;Callback_JVMTI_EVENT_EXCEPTIONCATCH;</span><br><span class=\"line\">   ex_callbacks.MethodEntry = &amp;Callback_JVMTI_EVENT_METHODENTRY;</span><br><span class=\"line\">   ex_callbacks.MethodExit = &amp;Callback_JVMTI_EVENT_METHODEXIT;</span><br><span class=\"line\">   error = jvmti-&gt;SetEventCallbacks(&amp;ex_callbacks, (jint)<span class=\"keyword\">sizeof</span>(ex_callbacks));</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"ERROR: Unable to SetEventCallbacks JVMTI!\"</span>);\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> error;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设置事件通知</span></span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_EXCEPTION_CATCH, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   error = jvmti-&gt;SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_ENTRY, (jthread)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(error != JVMTI_ERROR_NONE) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\" ERROR: Unable to SetEventNotificationMode JVMTI!,the error code=%d\"</span>,error);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  error;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Agent_OnUnload</span><span class=\"params\">(JavaVM *vm)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"agent onUnload\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"build-sh\"><a href=\"#build-sh\" class=\"headerlink\" title=\"build.sh\"></a>build.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\">BASE_HOME=`pwd`</span><br><span class=\"line\">INCLUDES=\"-I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include -I/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.252.b09-2.el7_8.x86_64/include/linux\"</span><br><span class=\"line\">g++ $BASE_HOME/jvmti_ext_ex.cpp $INCLUDES -Wall -Wno-deprecated -fPIC --share -o $BASE_HOME/jvmti_ext_ex.so</span><br></pre></td></tr></table></figure>\n<h3 id=\"Demo-java\"><a href=\"#Demo-java\" class=\"headerlink\" title=\"Demo.java\"></a>Demo.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         i=<span class=\"number\">100</span>/i;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">         msg(<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;).start();</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// msg(10);</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">msg</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jvm_notify</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"notify\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"run-sh\"><a href=\"#run-sh\" class=\"headerlink\" title=\"run.sh\"></a>run.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">java -agentpath:jvmti_ext_ex.so  Demo</span><br><span class=\"line\"><span class=\"meta\">#</span>java -agentlib:hprof=cpu=samples,interval=1,depth=3 Demo</span><br></pre></td></tr></table></figure>"},{"title":"Jar转exe","date":"2013-11-24T13:28:01.000Z","comments":1,"toc":true,"_content":"\n最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。\n<!--more-->\n\n## 前言\n***为什么要将Jar转成exe执行文件***\n1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。\n\n2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装\n\n3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。\n\n## 安装exe4j\n\n1、  下载exe4j并进行安装\n[exe4j下载路径](http://www.ej-technologies.com/download/exe4j/files)选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。\n\n## Jar转exe\n1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包\n2、运行exe4j打开的界面如下图\n![exe4j](d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg)\n3、获取license\n![获取license](a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg)\n4、点击Next进入下一步\n![exe4j](f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg)\n在这个界面中我们将选择“JAR”in“EXE”mode选项\n5、点击Next进入下一步\n![exe4j](ac6eddc451da81cbd80640cc5066d016082431cb.jpg)\n6、点击Next继续下一步\n![exe4j](d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg)\nIcon File是选择应用程序的图标\nExecutable name 是应用程序的名称\n在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面\n![exe4j](4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg)\n7、点击Next继续下一步\n![exe4j](c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg)\n8、点击Next继续下一步\n![exe4j](0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg)\n点击界面中的“＋”号选择目标Jar文件\n![exe4j](2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg)\n选择Main函数所在的class类文件\n![exe4j](4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg)\nVM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next\n9、点击Next继续下一步\n![exe4j](7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg)\n在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本\n10、点击Next继续下一步\n![exe4j](b151f8198618367acea2bddc2c738bd4b31ce58c.jpg)\n11、点击Next继续下一步\n![exe4j](96dda144ad345982c72127930ef431adcbef840c.jpg)\n12、点击Next继续下一步\n![exe4j](e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg)\n稍等片刻就到了下个界面\n![exe4j](96dda144ad345982c7ab27930ef431adcbef848a.jpg)\n点击Click Here to Start the Application 进行测试\n![exe4j](c8ea15ce36d3d539d610c2c23887e950352ab086.jpg)\n测试运行\n![exe4j](c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg)\n测试成功。\n\n我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了\n![win.exe](5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg)\n点击win.exe\n![win.exe](1e30e924b899a90168ce99371f950a7b0208f53c.jpg)\n\n## Ant自动构建EXE\n### 新建项目\n创建好工程目录并写Mian函数类\n![java工程](4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg)\n### 获取exe4j的配置文件\n运行exe4j\n![运行exe4j](3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg)\n点击Open选择exe4j的配置文件\n我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭\n![运行exe4j](42166d224f4a20a4063cf1c692529822720ed095.jpg)\n弹出对话框我们选择保存\n在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。\n\n我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<exe4j version=\"4.5.2\" transformSequenceNumber=\"1\">\n  <directoryPresets config=\"H:/Program Files (x86)/Java\" />\n  <application name=\"PMS\" distributionSourceDir=\"@distributionSourceDir@\">\n    <languages>\n      <principalLanguage id=\"en\" customLocalizationFile=\"\" />\n    </languages>\n  </application>\n  <executable name=\"@app.name@\" type=\"2\" iconSet=\"true\" iconFile=\"@iconFile@\" executableDir=\"\" redirectStderr=\"true\" stderrFile=\"error.log\" stderrMode=\"overwrite\" redirectStdout=\"false\" stdoutFile=\"output.log\" stdoutMode=\"overwrite\" failOnStderrOutput=\"true\" executableMode=\"1\" changeWorkingDirectory=\"true\" workingDirectory=\".\" singleInstance=\"false\" serviceStartType=\"2\" serviceDependencies=\"\" serviceDescription=\"\" jreLocation=\"\" executionLevel=\"asInvoker\" checkConsoleParameter=\"false\" globalSingleInstance=\"false\" amd64=\"true\">\n    <messageSet />\n    <versionInfo include=\"false\" fileVersion=\"\" fileDescription=\"\" legalCopyright=\"\" internalName=\"\" productName=\"\" companyName=\"\" productVersion=\"\" />\n  </executable>\n  <splashScreen show=\"false\" autoOff=\"true\" alwaysOnTop=\"true\" width=\"0\" height=\"0\" bitmapFile=\"\" java6SplashScreen=\"false\">\n    <text>\n      <statusLine x=\"20\" y=\"20\" text=\"\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n      <versionLine x=\"20\" y=\"40\" text=\"version %VERSION%\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n    </text>\n  </splashScreen>\n  <java mainClass=\"@mianclass@\" vmParameters=\"\" arguments=\"\" allowVMPassthroughParameters=\"true\" preferredVM=\"client\" bundleRuntime=\"true\" minVersion=\"1.4\" maxVersion=\"1.7\" allowBetaVM=\"false\" jdkOnly=\"false\">\n    <searchSequence>\n      <registry />\n      <envVar name=\"JAVA_HOME\" />\n      <envVar name=\"JDK_HOME\" />\n      <directory location=\"H:/Program Files (x86)/Java/jre7\" />\n    </searchSequence>\n    <classPath>\n      <archive location=\"@todir@\" failOnError=\"false\" />\n    </classPath>\n    <nativeLibraryDirectories />\n  </java>\n  <includedFiles />\n  <unextractableFiles />\n</exe4j>\n```\n\n### build.xml\n```xml\n<?xml version=\"1.0\" encoding=\"GBK\"?>\n<project name=\"jar2exe\" basedir=\".\">\n\t<property file=\"build.properties\"/>\n\t<property name=\"lib.dir\" location=\"lib\"/>\n\t<property name=\"src.dir\" location=\"src\"/>\n\t<property name=\"dist.dir\" location=\"dist\"/>\n\t<property name=\"build.dir\" location=\"build\"/>\n\t<property name=\"config.dir\" location=\"config\"/>\n\t<property name=\"build.source\" value=\"1.5\" />\n\t<property name=\"build.target\" value=\"1.5\" />\n\t<property name=\"app.dir\" location=\"app\" />\n\t<property name=\"exe4j.template.dir\" location=\"config/template\"/>\n\t<path id=\"exe4j.path\">\n\t\t<pathelement path=\"${exe4j.ant.jar}\"/>\n\t</path>\n\t<target name=\"init\">\n\t\t<echo message=\"init\"/>\n\t\t<path id=\"base.path\"/>\n\t</target>\n    <target name=\"clean\" depends=\"init\">\n\t    <echo message=\"clean\"/>\n\t    <delete dir=\"${build.dir}\"/>\n\t    <delete dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"prepare\" depends=\"init,clean\">\n\t    <echo message=\"prepare\"/>\n\t    <mkdir dir=\"${build.dir}\"/>\n\t    <mkdir dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"build.exe4j\">\n\t\t<copy todir=\"${config.dir}\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${exe4j.template.dir}\" includes=\"template.exe4j\" />\n\t\t</copy>\n\t\t<replace file=\"${config.dir}/template.exe4j\">\n\t\t\t<replacefilter token=\"@distributionSourceDir@\" value=\"${distributionSourceDir}\" />\n\t\t\t<replacefilter token=\"@app.name@\" value=\"${app.name}\" />\n\t\t\t<replacefilter token=\"@amd64@\" value=\"${amd64}\" />\n\t\t\t<replacefilter token=\"@iconFile@\" value=\"${iconFile}\" />\n\t\t\t<replacefilter token=\"@mianclass@\" value=\"${mianclass}\" />\n\t\t\t<replacefilter token=\"@todir@\" value=\"${todir}\" />\n \t\t</replace>\n    </target>\n\t\n\t <target name=\"copy-file\">\n\t \t<copy todir=\"${distributionSourceDir}/app\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${app.dir}\">\n\t\t\t\t<include name=\"**/*\" />\n\t\t\t</fileset>\n  \t\t</copy>\n\t </target>\n\t  \n  <target name=\"javac-project\" depends=\"prepare,copy-file\">\n\t   <echo message=\"javac\"/>\n\t   <javac srcdir=\"${src.dir}\" verbose=\"true\" destdir=\"${build.dir}\" classpathref=\"base.path\"  optimize=\"true\" target=\"${build.target}\" source=\"${build.source}\" debuglevel=\"none\">\n\t\t\t<classpath>\n\t\t\t\t<fileset dir=\"${lib.dir}\">\n\t\t\t\t\t<include name=\"**/*jar\" />\n\t\t\t\t</fileset>\n\t\t\t\t<pathelement location=\"bin\" />\n\t\t\t</classpath>\n\t\t</javac>\n  </target>\n\t\n\t <target name=\"unjar\">\n\t\t<unjar src=\"${lib.dir}/DJNativeSwing-SWT.jar\" dest=\"${build.dir}\"/>\n\t \t<unjar src=\"${lib.dir}/DJNativeSwing.jar\" dest=\"${build.dir}\"/>\n\t\t<unjar src=\"${lib.dir}/swt.zip\" dest=\"${build.dir}\"/>\n\t </target>\n\t\n\t  <target name=\"jar-project\"  depends=\"javac-project,unjar\">\n\t\t   <echo message=\"jar-project\"/>\n\t\t   <jar jarfile=\"${dist.dir}/FileManager.jar\">\n\t\t\t    <fileset dir=\"${build.dir}\">\n\t\t\t\t     <include name=\"**/*.class\"/>\n\t\t\t\t     <include name=\"**/*.t\"/>\n\t\t\t    \t <include name=\"**/*.gif\"/>\n\t\t\t    \t <include name=\"**/*.png\"/>\n\t\t\t    \t <include name=\"**/*.jpg\"/>\n\t\t\t    \t <include name=\"**/*.dll\"/>\n\t\t\t\t     <!-- msutil.jar中的*.properties必须包含进来，否则运行时出错-->\n\t\t\t\t     <include name=\"**/*.properties\"/>\n\t\t\t    </fileset>\n\t\t  \t \t<manifest>\n\t                <attribute name=\"Class-Path\" value=\".\"/>\n\t                <attribute name=\"Main-Class\" value=\"${mianclass}\"/>\n\t            </manifest>\n\t\t   </jar>\n\t  </target>\n\t\n\t  <taskdef name=\"exe4j\" classname=\"com.exe4j.Exe4JTask\">\n\t   \t\t<classpath refid=\"exe4j.path\"/>\n\t  </taskdef>\n\t\n\t  <target name=\"jar2exe\" depends=\"build.exe4j,jar-project\">\n\t  \t \t<exe4j projectfile=\"${app.exe4j}\"/>\n\t  </target>\n\t\n\t  <target name=\"finish\" depends=\"jar2exe\">\n\t   \t\t<echo message=\"finish\"/>\n\t  </target>\n</project>\n```\n### build.properties\n文件内容已经参数说明\n```properties\n#exe4j ant jar包路径\nexe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar\n#文件保存路径\ndistributionSourceDir=C:/Users/yanwuyang/Desktop/test\n#exe4j模板配置文件路径\napp.template.exe4j=config/template/template.exe4j\n#exe4j配置文件路径\napp.exe4j=config/template.exe4j\n#应用程序main函数类路径\nmianclass=cn.com.win.Main\n#应用程序名称\napp.name=PMS\n#应用程序图标\niconFile=G:/image/ICO/4594/200.ico\n#jar输出路径\ntodir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar\n```\n经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下\n![finish](caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg)\n点击finish\n![finish](023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg)\n呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在\n![finish](c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg)\n","source":"_posts/Jar转exe.md","raw":"---\ntitle: Jar转exe\ndate: 2013-11-24 21:28:01\ncomments: true\ncategories: EXE4J\ntoc: true \n---\n\n最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。\n<!--more-->\n\n## 前言\n***为什么要将Jar转成exe执行文件***\n1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。\n\n2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装\n\n3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。\n\n## 安装exe4j\n\n1、  下载exe4j并进行安装\n[exe4j下载路径](http://www.ej-technologies.com/download/exe4j/files)选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。\n\n## Jar转exe\n1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包\n2、运行exe4j打开的界面如下图\n![exe4j](d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg)\n3、获取license\n![获取license](a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg)\n4、点击Next进入下一步\n![exe4j](f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg)\n在这个界面中我们将选择“JAR”in“EXE”mode选项\n5、点击Next进入下一步\n![exe4j](ac6eddc451da81cbd80640cc5066d016082431cb.jpg)\n6、点击Next继续下一步\n![exe4j](d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg)\nIcon File是选择应用程序的图标\nExecutable name 是应用程序的名称\n在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面\n![exe4j](4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg)\n7、点击Next继续下一步\n![exe4j](c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg)\n8、点击Next继续下一步\n![exe4j](0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg)\n点击界面中的“＋”号选择目标Jar文件\n![exe4j](2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg)\n选择Main函数所在的class类文件\n![exe4j](4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg)\nVM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next\n9、点击Next继续下一步\n![exe4j](7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg)\n在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本\n10、点击Next继续下一步\n![exe4j](b151f8198618367acea2bddc2c738bd4b31ce58c.jpg)\n11、点击Next继续下一步\n![exe4j](96dda144ad345982c72127930ef431adcbef840c.jpg)\n12、点击Next继续下一步\n![exe4j](e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg)\n稍等片刻就到了下个界面\n![exe4j](96dda144ad345982c7ab27930ef431adcbef848a.jpg)\n点击Click Here to Start the Application 进行测试\n![exe4j](c8ea15ce36d3d539d610c2c23887e950352ab086.jpg)\n测试运行\n![exe4j](c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg)\n测试成功。\n\n我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了\n![win.exe](5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg)\n点击win.exe\n![win.exe](1e30e924b899a90168ce99371f950a7b0208f53c.jpg)\n\n## Ant自动构建EXE\n### 新建项目\n创建好工程目录并写Mian函数类\n![java工程](4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg)\n### 获取exe4j的配置文件\n运行exe4j\n![运行exe4j](3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg)\n点击Open选择exe4j的配置文件\n我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭\n![运行exe4j](42166d224f4a20a4063cf1c692529822720ed095.jpg)\n弹出对话框我们选择保存\n在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。\n\n我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<exe4j version=\"4.5.2\" transformSequenceNumber=\"1\">\n  <directoryPresets config=\"H:/Program Files (x86)/Java\" />\n  <application name=\"PMS\" distributionSourceDir=\"@distributionSourceDir@\">\n    <languages>\n      <principalLanguage id=\"en\" customLocalizationFile=\"\" />\n    </languages>\n  </application>\n  <executable name=\"@app.name@\" type=\"2\" iconSet=\"true\" iconFile=\"@iconFile@\" executableDir=\"\" redirectStderr=\"true\" stderrFile=\"error.log\" stderrMode=\"overwrite\" redirectStdout=\"false\" stdoutFile=\"output.log\" stdoutMode=\"overwrite\" failOnStderrOutput=\"true\" executableMode=\"1\" changeWorkingDirectory=\"true\" workingDirectory=\".\" singleInstance=\"false\" serviceStartType=\"2\" serviceDependencies=\"\" serviceDescription=\"\" jreLocation=\"\" executionLevel=\"asInvoker\" checkConsoleParameter=\"false\" globalSingleInstance=\"false\" amd64=\"true\">\n    <messageSet />\n    <versionInfo include=\"false\" fileVersion=\"\" fileDescription=\"\" legalCopyright=\"\" internalName=\"\" productName=\"\" companyName=\"\" productVersion=\"\" />\n  </executable>\n  <splashScreen show=\"false\" autoOff=\"true\" alwaysOnTop=\"true\" width=\"0\" height=\"0\" bitmapFile=\"\" java6SplashScreen=\"false\">\n    <text>\n      <statusLine x=\"20\" y=\"20\" text=\"\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n      <versionLine x=\"20\" y=\"40\" text=\"version %VERSION%\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n    </text>\n  </splashScreen>\n  <java mainClass=\"@mianclass@\" vmParameters=\"\" arguments=\"\" allowVMPassthroughParameters=\"true\" preferredVM=\"client\" bundleRuntime=\"true\" minVersion=\"1.4\" maxVersion=\"1.7\" allowBetaVM=\"false\" jdkOnly=\"false\">\n    <searchSequence>\n      <registry />\n      <envVar name=\"JAVA_HOME\" />\n      <envVar name=\"JDK_HOME\" />\n      <directory location=\"H:/Program Files (x86)/Java/jre7\" />\n    </searchSequence>\n    <classPath>\n      <archive location=\"@todir@\" failOnError=\"false\" />\n    </classPath>\n    <nativeLibraryDirectories />\n  </java>\n  <includedFiles />\n  <unextractableFiles />\n</exe4j>\n```\n\n### build.xml\n```xml\n<?xml version=\"1.0\" encoding=\"GBK\"?>\n<project name=\"jar2exe\" basedir=\".\">\n\t<property file=\"build.properties\"/>\n\t<property name=\"lib.dir\" location=\"lib\"/>\n\t<property name=\"src.dir\" location=\"src\"/>\n\t<property name=\"dist.dir\" location=\"dist\"/>\n\t<property name=\"build.dir\" location=\"build\"/>\n\t<property name=\"config.dir\" location=\"config\"/>\n\t<property name=\"build.source\" value=\"1.5\" />\n\t<property name=\"build.target\" value=\"1.5\" />\n\t<property name=\"app.dir\" location=\"app\" />\n\t<property name=\"exe4j.template.dir\" location=\"config/template\"/>\n\t<path id=\"exe4j.path\">\n\t\t<pathelement path=\"${exe4j.ant.jar}\"/>\n\t</path>\n\t<target name=\"init\">\n\t\t<echo message=\"init\"/>\n\t\t<path id=\"base.path\"/>\n\t</target>\n    <target name=\"clean\" depends=\"init\">\n\t    <echo message=\"clean\"/>\n\t    <delete dir=\"${build.dir}\"/>\n\t    <delete dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"prepare\" depends=\"init,clean\">\n\t    <echo message=\"prepare\"/>\n\t    <mkdir dir=\"${build.dir}\"/>\n\t    <mkdir dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"build.exe4j\">\n\t\t<copy todir=\"${config.dir}\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${exe4j.template.dir}\" includes=\"template.exe4j\" />\n\t\t</copy>\n\t\t<replace file=\"${config.dir}/template.exe4j\">\n\t\t\t<replacefilter token=\"@distributionSourceDir@\" value=\"${distributionSourceDir}\" />\n\t\t\t<replacefilter token=\"@app.name@\" value=\"${app.name}\" />\n\t\t\t<replacefilter token=\"@amd64@\" value=\"${amd64}\" />\n\t\t\t<replacefilter token=\"@iconFile@\" value=\"${iconFile}\" />\n\t\t\t<replacefilter token=\"@mianclass@\" value=\"${mianclass}\" />\n\t\t\t<replacefilter token=\"@todir@\" value=\"${todir}\" />\n \t\t</replace>\n    </target>\n\t\n\t <target name=\"copy-file\">\n\t \t<copy todir=\"${distributionSourceDir}/app\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${app.dir}\">\n\t\t\t\t<include name=\"**/*\" />\n\t\t\t</fileset>\n  \t\t</copy>\n\t </target>\n\t  \n  <target name=\"javac-project\" depends=\"prepare,copy-file\">\n\t   <echo message=\"javac\"/>\n\t   <javac srcdir=\"${src.dir}\" verbose=\"true\" destdir=\"${build.dir}\" classpathref=\"base.path\"  optimize=\"true\" target=\"${build.target}\" source=\"${build.source}\" debuglevel=\"none\">\n\t\t\t<classpath>\n\t\t\t\t<fileset dir=\"${lib.dir}\">\n\t\t\t\t\t<include name=\"**/*jar\" />\n\t\t\t\t</fileset>\n\t\t\t\t<pathelement location=\"bin\" />\n\t\t\t</classpath>\n\t\t</javac>\n  </target>\n\t\n\t <target name=\"unjar\">\n\t\t<unjar src=\"${lib.dir}/DJNativeSwing-SWT.jar\" dest=\"${build.dir}\"/>\n\t \t<unjar src=\"${lib.dir}/DJNativeSwing.jar\" dest=\"${build.dir}\"/>\n\t\t<unjar src=\"${lib.dir}/swt.zip\" dest=\"${build.dir}\"/>\n\t </target>\n\t\n\t  <target name=\"jar-project\"  depends=\"javac-project,unjar\">\n\t\t   <echo message=\"jar-project\"/>\n\t\t   <jar jarfile=\"${dist.dir}/FileManager.jar\">\n\t\t\t    <fileset dir=\"${build.dir}\">\n\t\t\t\t     <include name=\"**/*.class\"/>\n\t\t\t\t     <include name=\"**/*.t\"/>\n\t\t\t    \t <include name=\"**/*.gif\"/>\n\t\t\t    \t <include name=\"**/*.png\"/>\n\t\t\t    \t <include name=\"**/*.jpg\"/>\n\t\t\t    \t <include name=\"**/*.dll\"/>\n\t\t\t\t     <!-- msutil.jar中的*.properties必须包含进来，否则运行时出错-->\n\t\t\t\t     <include name=\"**/*.properties\"/>\n\t\t\t    </fileset>\n\t\t  \t \t<manifest>\n\t                <attribute name=\"Class-Path\" value=\".\"/>\n\t                <attribute name=\"Main-Class\" value=\"${mianclass}\"/>\n\t            </manifest>\n\t\t   </jar>\n\t  </target>\n\t\n\t  <taskdef name=\"exe4j\" classname=\"com.exe4j.Exe4JTask\">\n\t   \t\t<classpath refid=\"exe4j.path\"/>\n\t  </taskdef>\n\t\n\t  <target name=\"jar2exe\" depends=\"build.exe4j,jar-project\">\n\t  \t \t<exe4j projectfile=\"${app.exe4j}\"/>\n\t  </target>\n\t\n\t  <target name=\"finish\" depends=\"jar2exe\">\n\t   \t\t<echo message=\"finish\"/>\n\t  </target>\n</project>\n```\n### build.properties\n文件内容已经参数说明\n```properties\n#exe4j ant jar包路径\nexe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar\n#文件保存路径\ndistributionSourceDir=C:/Users/yanwuyang/Desktop/test\n#exe4j模板配置文件路径\napp.template.exe4j=config/template/template.exe4j\n#exe4j配置文件路径\napp.exe4j=config/template.exe4j\n#应用程序main函数类路径\nmianclass=cn.com.win.Main\n#应用程序名称\napp.name=PMS\n#应用程序图标\niconFile=G:/image/ICO/4594/200.ico\n#jar输出路径\ntodir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar\n```\n经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下\n![finish](caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg)\n点击finish\n![finish](023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg)\n呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在\n![finish](c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg)\n","slug":"Jar转exe","published":1,"updated":"2021-06-25T02:00:17.856Z","layout":"post","photos":[],"link":"","_id":"ckqjatoko000cqkl5wwgon2td","content":"<p>最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。<br><a id=\"more\"></a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong><em>为什么要将Jar转成exe执行文件</em></strong><br>1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。</p>\n<p>2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装</p>\n<p>3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。</p>\n<h2 id=\"安装exe4j\"><a href=\"#安装exe4j\" class=\"headerlink\" title=\"安装exe4j\"></a>安装exe4j</h2><p>1、  下载exe4j并进行安装<br><a href=\"http://www.ej-technologies.com/download/exe4j/files\" target=\"_blank\" rel=\"noopener\">exe4j下载路径</a>选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。</p>\n<h2 id=\"Jar转exe\"><a href=\"#Jar转exe\" class=\"headerlink\" title=\"Jar转exe\"></a>Jar转exe</h2><p>1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包<br>2、运行exe4j打开的界面如下图<br><img src=\"d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg\" alt=\"exe4j\"><br>3、获取license<br><img src=\"a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg\" alt=\"获取license\"><br>4、点击Next进入下一步<br><img src=\"f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg\" alt=\"exe4j\"><br>在这个界面中我们将选择“JAR”in“EXE”mode选项<br>5、点击Next进入下一步<br><img src=\"ac6eddc451da81cbd80640cc5066d016082431cb.jpg\" alt=\"exe4j\"><br>6、点击Next继续下一步<br><img src=\"d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg\" alt=\"exe4j\"><br>Icon File是选择应用程序的图标<br>Executable name 是应用程序的名称<br>在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面<br><img src=\"4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg\" alt=\"exe4j\"><br>7、点击Next继续下一步<br><img src=\"c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg\" alt=\"exe4j\"><br>8、点击Next继续下一步<br><img src=\"0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg\" alt=\"exe4j\"><br>点击界面中的“＋”号选择目标Jar文件<br><img src=\"2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg\" alt=\"exe4j\"><br>选择Main函数所在的class类文件<br><img src=\"4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg\" alt=\"exe4j\"><br>VM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next<br>9、点击Next继续下一步<br><img src=\"7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg\" alt=\"exe4j\"><br>在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本<br>10、点击Next继续下一步<br><img src=\"b151f8198618367acea2bddc2c738bd4b31ce58c.jpg\" alt=\"exe4j\"><br>11、点击Next继续下一步<br><img src=\"96dda144ad345982c72127930ef431adcbef840c.jpg\" alt=\"exe4j\"><br>12、点击Next继续下一步<br><img src=\"e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg\" alt=\"exe4j\"><br>稍等片刻就到了下个界面<br><img src=\"96dda144ad345982c7ab27930ef431adcbef848a.jpg\" alt=\"exe4j\"><br>点击Click Here to Start the Application 进行测试<br><img src=\"c8ea15ce36d3d539d610c2c23887e950352ab086.jpg\" alt=\"exe4j\"><br>测试运行<br><img src=\"c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg\" alt=\"exe4j\"><br>测试成功。</p>\n<p>我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了<br><img src=\"5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg\" alt=\"win.exe\"><br>点击win.exe<br><img src=\"1e30e924b899a90168ce99371f950a7b0208f53c.jpg\" alt=\"win.exe\"></p>\n<h2 id=\"Ant自动构建EXE\"><a href=\"#Ant自动构建EXE\" class=\"headerlink\" title=\"Ant自动构建EXE\"></a>Ant自动构建EXE</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>创建好工程目录并写Mian函数类<br><img src=\"4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg\" alt=\"java工程\"></p>\n<h3 id=\"获取exe4j的配置文件\"><a href=\"#获取exe4j的配置文件\" class=\"headerlink\" title=\"获取exe4j的配置文件\"></a>获取exe4j的配置文件</h3><p>运行exe4j<br><img src=\"3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg\" alt=\"运行exe4j\"><br>点击Open选择exe4j的配置文件<br>我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭<br><img src=\"42166d224f4a20a4063cf1c692529822720ed095.jpg\" alt=\"运行exe4j\"><br>弹出对话框我们选择保存<br>在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。</p>\n<p>我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">version</span>=<span class=\"string\">\"4.5.2\"</span> <span class=\"attr\">transformSequenceNumber</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">directoryPresets</span> <span class=\"attr\">config</span>=<span class=\"string\">\"H:/Program Files (x86)/Java\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">name</span>=<span class=\"string\">\"PMS\"</span> <span class=\"attr\">distributionSourceDir</span>=<span class=\"string\">\"@distributionSourceDir@\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">principalLanguage</span> <span class=\"attr\">id</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">customLocalizationFile</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">iconSet</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">iconFile</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">executableDir</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">redirectStderr</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">stderrFile</span>=<span class=\"string\">\"error.log\"</span> <span class=\"attr\">stderrMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">redirectStdout</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">stdoutFile</span>=<span class=\"string\">\"output.log\"</span> <span class=\"attr\">stdoutMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">failOnStderrOutput</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">executableMode</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">changeWorkingDirectory</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">workingDirectory</span>=<span class=\"string\">\".\"</span> <span class=\"attr\">singleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">serviceStartType</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">serviceDependencies</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">serviceDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">jreLocation</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">executionLevel</span>=<span class=\"string\">\"asInvoker\"</span> <span class=\"attr\">checkConsoleParameter</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">globalSingleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">amd64</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">messageSet</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">versionInfo</span> <span class=\"attr\">include</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">fileVersion</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">fileDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">legalCopyright</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">internalName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">companyName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productVersion</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">splashScreen</span> <span class=\"attr\">show</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autoOff</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">alwaysOnTop</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">bitmapFile</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">java6SplashScreen</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">statusLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">versionLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"version %VERSION%\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">splashScreen</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">java</span> <span class=\"attr\">mainClass</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">vmParameters</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">arguments</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">allowVMPassthroughParameters</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">preferredVM</span>=<span class=\"string\">\"client\"</span> <span class=\"attr\">bundleRuntime</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">minVersion</span>=<span class=\"string\">\"1.4\"</span> <span class=\"attr\">maxVersion</span>=<span class=\"string\">\"1.7\"</span> <span class=\"attr\">allowBetaVM</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">jdkOnly</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">registry</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JAVA_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JDK_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span> <span class=\"attr\">location</span>=<span class=\"string\">\"H:/Program Files (x86)/Java/jre7\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">archive</span> <span class=\"attr\">location</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">failOnError</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nativeLibraryDirectories</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">java</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">includedFiles</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">unextractableFiles</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">exe4j</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"build-xml\"><a href=\"#build-xml\" class=\"headerlink\" title=\"build.xml\"></a>build.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"GBK\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">basedir</span>=<span class=\"string\">\".\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">file</span>=<span class=\"string\">\"build.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lib.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"lib\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"src.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"src\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dist.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"dist\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"config.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.source\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.target\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"app\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j.template.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config/template\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exe4j.path\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">path</span>=<span class=\"string\">\"$&#123;exe4j.ant.jar&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"init\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"base.path\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clean\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"clean\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prepare\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init,clean\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"prepare\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;config.dir&#125;\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;exe4j.template.dir&#125;\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"template.exe4j\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">replace</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$&#123;config.dir&#125;/template.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@distributionSourceDir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;app.name&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@amd64@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;amd64&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;iconFile&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;todir&#125;\"</span> /&gt;</span></span><br><span class=\"line\"> \t\t<span class=\"tag\">&lt;/<span class=\"name\">replace</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;/app\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;app.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"javac-project\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"prepare,copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"javac\"</span>/&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">javac</span> <span class=\"attr\">srcdir</span>=<span class=\"string\">\"$&#123;src.dir&#125;\"</span> <span class=\"attr\">verbose</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">destdir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span> <span class=\"attr\">classpathref</span>=<span class=\"string\">\"base.path\"</span>  <span class=\"attr\">optimize</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"$&#123;build.target&#125;\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"$&#123;build.source&#125;\"</span> <span class=\"attr\">debuglevel</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;lib.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*jar\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"bin\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javac</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing-SWT.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/swt.zip\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar-project\"</span>  <span class=\"attr\">depends</span>=<span class=\"string\">\"javac-project,unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"jar-project\"</span>/&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">jar</span> <span class=\"attr\">jarfile</span>=<span class=\"string\">\"$&#123;dist.dir&#125;/FileManager.jar\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.class\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.t\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.gif\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.png\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.jpg\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.dll\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"comment\">&lt;!-- msutil.jar中的*.properties必须包含进来，否则运行时出错--&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Class-Path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".\"</span>/&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Main-Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">jar</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">taskdef</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j\"</span> <span class=\"attr\">classname</span>=<span class=\"string\">\"com.exe4j.Exe4JTask\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"exe4j.path\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">taskdef</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"build.exe4j,jar-project\"</span>&gt;</span></span><br><span class=\"line\">\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">projectfile</span>=<span class=\"string\">\"$&#123;app.exe4j&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"finish\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"jar2exe\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"finish\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"build-properties\"><a href=\"#build-properties\" class=\"headerlink\" title=\"build.properties\"></a>build.properties</h3><p>文件内容已经参数说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#exe4j ant jar包路径</span><br><span class=\"line\">exe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar</span><br><span class=\"line\">#文件保存路径</span><br><span class=\"line\">distributionSourceDir=C:/Users/yanwuyang/Desktop/test</span><br><span class=\"line\">#exe4j模板配置文件路径</span><br><span class=\"line\">app.template.exe4j=config/template/template.exe4j</span><br><span class=\"line\">#exe4j配置文件路径</span><br><span class=\"line\">app.exe4j=config/template.exe4j</span><br><span class=\"line\">#应用程序main函数类路径</span><br><span class=\"line\">mianclass=cn.com.win.Main</span><br><span class=\"line\">#应用程序名称</span><br><span class=\"line\">app.name=PMS</span><br><span class=\"line\">#应用程序图标</span><br><span class=\"line\">iconFile=G:/image/ICO/4594/200.ico</span><br><span class=\"line\">#jar输出路径</span><br><span class=\"line\">todir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar</span><br></pre></td></tr></table></figure></p>\n<p>经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下<br><img src=\"caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg\" alt=\"finish\"><br>点击finish<br><img src=\"023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg\" alt=\"finish\"><br>呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在<br><img src=\"c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg\" alt=\"finish\"></p>\n","site":{"data":{}},"excerpt":"<p>最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。<br>","more":"</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong><em>为什么要将Jar转成exe执行文件</em></strong><br>1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。</p>\n<p>2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装</p>\n<p>3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。</p>\n<h2 id=\"安装exe4j\"><a href=\"#安装exe4j\" class=\"headerlink\" title=\"安装exe4j\"></a>安装exe4j</h2><p>1、  下载exe4j并进行安装<br><a href=\"http://www.ej-technologies.com/download/exe4j/files\" target=\"_blank\" rel=\"noopener\">exe4j下载路径</a>选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。</p>\n<h2 id=\"Jar转exe\"><a href=\"#Jar转exe\" class=\"headerlink\" title=\"Jar转exe\"></a>Jar转exe</h2><p>1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包<br>2、运行exe4j打开的界面如下图<br><img src=\"d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg\" alt=\"exe4j\"><br>3、获取license<br><img src=\"a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg\" alt=\"获取license\"><br>4、点击Next进入下一步<br><img src=\"f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg\" alt=\"exe4j\"><br>在这个界面中我们将选择“JAR”in“EXE”mode选项<br>5、点击Next进入下一步<br><img src=\"ac6eddc451da81cbd80640cc5066d016082431cb.jpg\" alt=\"exe4j\"><br>6、点击Next继续下一步<br><img src=\"d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg\" alt=\"exe4j\"><br>Icon File是选择应用程序的图标<br>Executable name 是应用程序的名称<br>在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面<br><img src=\"4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg\" alt=\"exe4j\"><br>7、点击Next继续下一步<br><img src=\"c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg\" alt=\"exe4j\"><br>8、点击Next继续下一步<br><img src=\"0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg\" alt=\"exe4j\"><br>点击界面中的“＋”号选择目标Jar文件<br><img src=\"2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg\" alt=\"exe4j\"><br>选择Main函数所在的class类文件<br><img src=\"4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg\" alt=\"exe4j\"><br>VM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next<br>9、点击Next继续下一步<br><img src=\"7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg\" alt=\"exe4j\"><br>在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本<br>10、点击Next继续下一步<br><img src=\"b151f8198618367acea2bddc2c738bd4b31ce58c.jpg\" alt=\"exe4j\"><br>11、点击Next继续下一步<br><img src=\"96dda144ad345982c72127930ef431adcbef840c.jpg\" alt=\"exe4j\"><br>12、点击Next继续下一步<br><img src=\"e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg\" alt=\"exe4j\"><br>稍等片刻就到了下个界面<br><img src=\"96dda144ad345982c7ab27930ef431adcbef848a.jpg\" alt=\"exe4j\"><br>点击Click Here to Start the Application 进行测试<br><img src=\"c8ea15ce36d3d539d610c2c23887e950352ab086.jpg\" alt=\"exe4j\"><br>测试运行<br><img src=\"c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg\" alt=\"exe4j\"><br>测试成功。</p>\n<p>我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了<br><img src=\"5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg\" alt=\"win.exe\"><br>点击win.exe<br><img src=\"1e30e924b899a90168ce99371f950a7b0208f53c.jpg\" alt=\"win.exe\"></p>\n<h2 id=\"Ant自动构建EXE\"><a href=\"#Ant自动构建EXE\" class=\"headerlink\" title=\"Ant自动构建EXE\"></a>Ant自动构建EXE</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>创建好工程目录并写Mian函数类<br><img src=\"4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg\" alt=\"java工程\"></p>\n<h3 id=\"获取exe4j的配置文件\"><a href=\"#获取exe4j的配置文件\" class=\"headerlink\" title=\"获取exe4j的配置文件\"></a>获取exe4j的配置文件</h3><p>运行exe4j<br><img src=\"3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg\" alt=\"运行exe4j\"><br>点击Open选择exe4j的配置文件<br>我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭<br><img src=\"42166d224f4a20a4063cf1c692529822720ed095.jpg\" alt=\"运行exe4j\"><br>弹出对话框我们选择保存<br>在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。</p>\n<p>我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">version</span>=<span class=\"string\">\"4.5.2\"</span> <span class=\"attr\">transformSequenceNumber</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">directoryPresets</span> <span class=\"attr\">config</span>=<span class=\"string\">\"H:/Program Files (x86)/Java\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">name</span>=<span class=\"string\">\"PMS\"</span> <span class=\"attr\">distributionSourceDir</span>=<span class=\"string\">\"@distributionSourceDir@\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">principalLanguage</span> <span class=\"attr\">id</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">customLocalizationFile</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">iconSet</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">iconFile</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">executableDir</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">redirectStderr</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">stderrFile</span>=<span class=\"string\">\"error.log\"</span> <span class=\"attr\">stderrMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">redirectStdout</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">stdoutFile</span>=<span class=\"string\">\"output.log\"</span> <span class=\"attr\">stdoutMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">failOnStderrOutput</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">executableMode</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">changeWorkingDirectory</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">workingDirectory</span>=<span class=\"string\">\".\"</span> <span class=\"attr\">singleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">serviceStartType</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">serviceDependencies</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">serviceDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">jreLocation</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">executionLevel</span>=<span class=\"string\">\"asInvoker\"</span> <span class=\"attr\">checkConsoleParameter</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">globalSingleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">amd64</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">messageSet</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">versionInfo</span> <span class=\"attr\">include</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">fileVersion</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">fileDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">legalCopyright</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">internalName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">companyName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productVersion</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">splashScreen</span> <span class=\"attr\">show</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autoOff</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">alwaysOnTop</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">bitmapFile</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">java6SplashScreen</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">statusLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">versionLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"version %VERSION%\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">splashScreen</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">java</span> <span class=\"attr\">mainClass</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">vmParameters</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">arguments</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">allowVMPassthroughParameters</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">preferredVM</span>=<span class=\"string\">\"client\"</span> <span class=\"attr\">bundleRuntime</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">minVersion</span>=<span class=\"string\">\"1.4\"</span> <span class=\"attr\">maxVersion</span>=<span class=\"string\">\"1.7\"</span> <span class=\"attr\">allowBetaVM</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">jdkOnly</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">registry</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JAVA_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JDK_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span> <span class=\"attr\">location</span>=<span class=\"string\">\"H:/Program Files (x86)/Java/jre7\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">archive</span> <span class=\"attr\">location</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">failOnError</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nativeLibraryDirectories</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">java</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">includedFiles</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">unextractableFiles</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">exe4j</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"build-xml\"><a href=\"#build-xml\" class=\"headerlink\" title=\"build.xml\"></a>build.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"GBK\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">basedir</span>=<span class=\"string\">\".\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">file</span>=<span class=\"string\">\"build.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lib.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"lib\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"src.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"src\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dist.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"dist\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"config.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.source\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.target\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"app\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j.template.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config/template\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exe4j.path\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">path</span>=<span class=\"string\">\"$&#123;exe4j.ant.jar&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"init\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"base.path\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clean\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"clean\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prepare\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init,clean\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"prepare\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;config.dir&#125;\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;exe4j.template.dir&#125;\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"template.exe4j\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">replace</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$&#123;config.dir&#125;/template.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@distributionSourceDir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;app.name&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@amd64@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;amd64&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;iconFile&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;todir&#125;\"</span> /&gt;</span></span><br><span class=\"line\"> \t\t<span class=\"tag\">&lt;/<span class=\"name\">replace</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;/app\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;app.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"javac-project\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"prepare,copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"javac\"</span>/&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">javac</span> <span class=\"attr\">srcdir</span>=<span class=\"string\">\"$&#123;src.dir&#125;\"</span> <span class=\"attr\">verbose</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">destdir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span> <span class=\"attr\">classpathref</span>=<span class=\"string\">\"base.path\"</span>  <span class=\"attr\">optimize</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"$&#123;build.target&#125;\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"$&#123;build.source&#125;\"</span> <span class=\"attr\">debuglevel</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;lib.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*jar\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"bin\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javac</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing-SWT.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/swt.zip\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar-project\"</span>  <span class=\"attr\">depends</span>=<span class=\"string\">\"javac-project,unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"jar-project\"</span>/&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">jar</span> <span class=\"attr\">jarfile</span>=<span class=\"string\">\"$&#123;dist.dir&#125;/FileManager.jar\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.class\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.t\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.gif\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.png\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.jpg\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.dll\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"comment\">&lt;!-- msutil.jar中的*.properties必须包含进来，否则运行时出错--&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Class-Path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".\"</span>/&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Main-Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">jar</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">taskdef</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j\"</span> <span class=\"attr\">classname</span>=<span class=\"string\">\"com.exe4j.Exe4JTask\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"exe4j.path\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">taskdef</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"build.exe4j,jar-project\"</span>&gt;</span></span><br><span class=\"line\">\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">projectfile</span>=<span class=\"string\">\"$&#123;app.exe4j&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"finish\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"jar2exe\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"finish\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"build-properties\"><a href=\"#build-properties\" class=\"headerlink\" title=\"build.properties\"></a>build.properties</h3><p>文件内容已经参数说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#exe4j ant jar包路径</span><br><span class=\"line\">exe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar</span><br><span class=\"line\">#文件保存路径</span><br><span class=\"line\">distributionSourceDir=C:/Users/yanwuyang/Desktop/test</span><br><span class=\"line\">#exe4j模板配置文件路径</span><br><span class=\"line\">app.template.exe4j=config/template/template.exe4j</span><br><span class=\"line\">#exe4j配置文件路径</span><br><span class=\"line\">app.exe4j=config/template.exe4j</span><br><span class=\"line\">#应用程序main函数类路径</span><br><span class=\"line\">mianclass=cn.com.win.Main</span><br><span class=\"line\">#应用程序名称</span><br><span class=\"line\">app.name=PMS</span><br><span class=\"line\">#应用程序图标</span><br><span class=\"line\">iconFile=G:/image/ICO/4594/200.ico</span><br><span class=\"line\">#jar输出路径</span><br><span class=\"line\">todir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar</span><br></pre></td></tr></table></figure></p>\n<p>经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下<br><img src=\"caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg\" alt=\"finish\"><br>点击finish<br><img src=\"023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg\" alt=\"finish\"><br>呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在<br><img src=\"c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg\" alt=\"finish\"></p>"},{"title":"JavaScript函数","date":"2013-07-17T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## 函数概念\n函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示\n<!--more-->\n```javascript\nfunction funName(arg0,arg1,.....argN){\n    statements\n} \n//以下是函数示例\nfunction syaHi(name,message){\n    alert(\"hello \"+ name + \" ,\"+ message);\n}\n```\n这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：\n```javascript\nsayHi(\"Nicholas\",\"how are you today?\");\n```\nECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值\n```javascript\nfunction sum(num1,num2){\n    return num1+num2;\n}\n```\n这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：\n```javascript\nvar result = sum(5,10);\n```\n这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。\n推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。\n\n## 理解参数\nECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。\n其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。\n```javascript\nfunction doAdd(num1,num2){\n    if(arguments[0]==num1){\n        alert(true);\n    }\n    if(argumengs[1]==num2){\n        alert(true);\n    }\n}\n```\n结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。\n关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。\n```javascript\nfunction doAdd(num1,num2){\n    arguments[1]=10;\n    alert(arguments[0]+num2)；\n}\n```\n每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。\n\n##  没有重载\nECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。\n关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，","source":"_posts/JavaScript函数.md","raw":"---\ntitle: JavaScript函数\ndate: 2013-07-18\ncomments: true\ncategories: JavaScript\ntoc: true \n---\n\n## 函数概念\n函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示\n<!--more-->\n```javascript\nfunction funName(arg0,arg1,.....argN){\n    statements\n} \n//以下是函数示例\nfunction syaHi(name,message){\n    alert(\"hello \"+ name + \" ,\"+ message);\n}\n```\n这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：\n```javascript\nsayHi(\"Nicholas\",\"how are you today?\");\n```\nECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值\n```javascript\nfunction sum(num1,num2){\n    return num1+num2;\n}\n```\n这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：\n```javascript\nvar result = sum(5,10);\n```\n这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。\n推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。\n\n## 理解参数\nECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。\n其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。\n```javascript\nfunction doAdd(num1,num2){\n    if(arguments[0]==num1){\n        alert(true);\n    }\n    if(argumengs[1]==num2){\n        alert(true);\n    }\n}\n```\n结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。\n关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。\n```javascript\nfunction doAdd(num1,num2){\n    arguments[1]=10;\n    alert(arguments[0]+num2)；\n}\n```\n每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。\n\n##  没有重载\nECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。\n关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，","slug":"JavaScript函数","published":1,"updated":"2021-06-25T02:00:17.934Z","layout":"post","photos":[],"link":"","_id":"ckqjatokq000fqkl560xcrqe9","content":"<h2 id=\"函数概念\"><a href=\"#函数概念\" class=\"headerlink\" title=\"函数概念\"></a>函数概念</h2><p>函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\">arg0,arg1,.....argN</span>)</span>&#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//以下是函数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syaHi</span>(<span class=\"params\">name,message</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hello \"</span>+ name + <span class=\"string\">\" ,\"</span>+ message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sayHi(<span class=\"string\">\"Nicholas\"</span>,<span class=\"string\">\"how are you today?\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>ECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = sum(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。<br>推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。</p>\n<h2 id=\"理解参数\"><a href=\"#理解参数\" class=\"headerlink\" title=\"理解参数\"></a>理解参数</h2><p>ECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。<br>其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]==num1)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argumengs[<span class=\"number\">1</span>]==num2)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。<br>关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+num2)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。</p>\n<h2 id=\"没有重载\"><a href=\"#没有重载\" class=\"headerlink\" title=\"没有重载\"></a>没有重载</h2><p>ECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。<br>关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数概念\"><a href=\"#函数概念\" class=\"headerlink\" title=\"函数概念\"></a>函数概念</h2><p>函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\">arg0,arg1,.....argN</span>)</span>&#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//以下是函数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syaHi</span>(<span class=\"params\">name,message</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hello \"</span>+ name + <span class=\"string\">\" ,\"</span>+ message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sayHi(<span class=\"string\">\"Nicholas\"</span>,<span class=\"string\">\"how are you today?\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>ECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = sum(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。<br>推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。</p>\n<h2 id=\"理解参数\"><a href=\"#理解参数\" class=\"headerlink\" title=\"理解参数\"></a>理解参数</h2><p>ECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。<br>其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]==num1)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argumengs[<span class=\"number\">1</span>]==num2)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。<br>关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+num2)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。</p>\n<h2 id=\"没有重载\"><a href=\"#没有重载\" class=\"headerlink\" title=\"没有重载\"></a>没有重载</h2><p>ECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。<br>关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，</p>"},{"title":"JavaScript学习随手记","date":"2016-12-04T16:00:00.000Z","comments":1,"toc":false,"_content":"\n- 今天学习react-redux时学到connect函数组件时对connect函数有点蒙圈，表示不能理解，请看如下代码:\n```javascript\nfunction Users(props){\n   return (<div></div>);\n}\nfunction mapStateToProps({ users }) {\n  return { users };\n}\nexport default connect(mapStateToProps)(Users);\n```\n<!--more-->\n以为这种写发属于ES6语法糖，于是翻阅ES6标志并没有此项。苦思冥想最后灵光一闪既然是dva的函数那他的源码中肯定有此函数的定义，打开源码一看其实原理很简单,就是connect函数中返回了一个函数，然后在返回函数中在传入了参数Users。参考代码定义如下；\n- \n```javascript\n//获取函数名称displayName和name属于Function的原型属性\nfunction getDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\nfunction connect(mapStateToProps){\n   return function wrapWithConnect(WrappedComponent) {\n\t var name = getDisplayName(WrappedComponent);\n\t console.log(\"function name:\"+name);\n   }\n}\n\n//测试代码\nfunction Users(props){\n   return (<div></div>);\n}\nfunction mapStateToProps({ users }) {\n  return { users };\n}\nconnect(mapStateToProps)(Users);\n\n//控制台输出\nfunction name:Users\n```\n这种定义方法叫做**“柯里化”**函数，是指把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。\n**箭头函数**\n- \n```javascript\n//ES6写法\n()=>{\n\t\n}\n//ES5 写法\nfunction arrow(){\n  return {}; \n}\n```","source":"_posts/JavaScript学习随手记.md","raw":"---\ntitle: JavaScript学习随手记\ndate: 2016-12-05\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\n- 今天学习react-redux时学到connect函数组件时对connect函数有点蒙圈，表示不能理解，请看如下代码:\n```javascript\nfunction Users(props){\n   return (<div></div>);\n}\nfunction mapStateToProps({ users }) {\n  return { users };\n}\nexport default connect(mapStateToProps)(Users);\n```\n<!--more-->\n以为这种写发属于ES6语法糖，于是翻阅ES6标志并没有此项。苦思冥想最后灵光一闪既然是dva的函数那他的源码中肯定有此函数的定义，打开源码一看其实原理很简单,就是connect函数中返回了一个函数，然后在返回函数中在传入了参数Users。参考代码定义如下；\n- \n```javascript\n//获取函数名称displayName和name属于Function的原型属性\nfunction getDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\nfunction connect(mapStateToProps){\n   return function wrapWithConnect(WrappedComponent) {\n\t var name = getDisplayName(WrappedComponent);\n\t console.log(\"function name:\"+name);\n   }\n}\n\n//测试代码\nfunction Users(props){\n   return (<div></div>);\n}\nfunction mapStateToProps({ users }) {\n  return { users };\n}\nconnect(mapStateToProps)(Users);\n\n//控制台输出\nfunction name:Users\n```\n这种定义方法叫做**“柯里化”**函数，是指把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。\n**箭头函数**\n- \n```javascript\n//ES6写法\n()=>{\n\t\n}\n//ES5 写法\nfunction arrow(){\n  return {}; \n}\n```","slug":"JavaScript学习随手记","published":1,"updated":"2021-06-25T02:00:17.936Z","layout":"post","photos":[],"link":"","_id":"ckqjatoks000gqkl58i9idqny","content":"<ul>\n<li>今天学习react-redux时学到connect函数组件时对connect函数有点蒙圈，表示不能理解，请看如下代码:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Users</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">&#123; users &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; users &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Users);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>以为这种写发属于ES6语法糖，于是翻阅ES6标志并没有此项。苦思冥想最后灵光一闪既然是dva的函数那他的源码中肯定有此函数的定义，打开源码一看其实原理很简单,就是connect函数中返回了一个函数，然后在返回函数中在传入了参数Users。参考代码定义如下；</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取函数名称displayName和name属于Function的原型属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDisplayName</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> WrappedComponent.displayName || WrappedComponent.name || <span class=\"string\">'Component'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">mapStateToProps</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">var</span> name = getDisplayName(WrappedComponent);</span><br><span class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function name:\"</span>+name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Users</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">&#123; users &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; users &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">connect(mapStateToProps)(Users);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>:<span class=\"title\">Users</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种定义方法叫做<strong>“柯里化”</strong>函数，是指把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。<br><strong>箭头函数</strong></p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">()=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ES5 写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrow</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;&#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>今天学习react-redux时学到connect函数组件时对connect函数有点蒙圈，表示不能理解，请看如下代码:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Users</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">&#123; users &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; users &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Users);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<p>以为这种写发属于ES6语法糖，于是翻阅ES6标志并没有此项。苦思冥想最后灵光一闪既然是dva的函数那他的源码中肯定有此函数的定义，打开源码一看其实原理很简单,就是connect函数中返回了一个函数，然后在返回函数中在传入了参数Users。参考代码定义如下；</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取函数名称displayName和name属于Function的原型属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDisplayName</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> WrappedComponent.displayName || WrappedComponent.name || <span class=\"string\">'Component'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">mapStateToProps</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">var</span> name = getDisplayName(WrappedComponent);</span><br><span class=\"line\">\t <span class=\"built_in\">console</span>.log(<span class=\"string\">\"function name:\"</span>+name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Users</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">&#123; users &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; users &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">connect(mapStateToProps)(Users);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>:<span class=\"title\">Users</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种定义方法叫做<strong>“柯里化”</strong>函数，是指把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。<br><strong>箭头函数</strong></p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES6写法</span></span><br><span class=\"line\">()=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ES5 写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrow</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;&#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"JavaScript常用脚本","date":"2014-02-13T13:28:01.000Z","comments":1,"toc":true,"_content":"\n## 字符串函数\n\n### 是否包含\n```javascript\nString.prototype.Contains = function (A) {\n    return (this.indexOf(A) > -1);\n};\n```\n<!--more-->\n### 是否相等\n```javascript\nString.prototype.Equals = function () {\n    var A = arguments;\n    if (A.length == 1 && A[0].pop)\n        A = A[0];\n    for (var i = 0; i < A.length; i++) {\n        if (this == A[i])\n            return true;\n    };\n    return false;\n};\n```\n\n### 是否相等(不区分大小写)\n```javascript\nString.prototype.IEquals = function () {\n    var A = this.toUpperCase();\n    var B = arguments;\n    if (B.length == 1 && B[0].pop)\n        B = B[0];\n    for (var i = 0; i < B.length; i++) {\n        if (A == B[i].toUpperCase())\n            return true;\n    };\n    return false;\n};\n```\n\n### 替换所有\n```javascript\nString.prototype.ReplaceAll = function (A, B) {\n    var C = this;\n    for (var i = 0; i < A.length; i++) {\n        C = C.replace(A[i], B[i]);\n    };\n    return C;\n}; \n或\nString.prototype.ReplaceAll = function(A,B){\n       var C = this;\n       C=C.replace(/A/g,B);\n       return C;  \n}\n```\n\n### StartsWith\n```javascript\nString.prototype.StartsWith = function (A) {\n    return (this.substr(0, A.length) == A);\n};\n```\n\n### EndsWith\n```javascript\nString.prototype.EndsWith = function (A, B) {\n    var C = this.length;\n    var D = A.length;\n    if (D > C)\n        return false;\n    if (B) {\n        var E = new RegExp(A + '$', 'i');\n        return E.test(this);\n    } else\n        return (D == 0 || this.substr(C - D, D) == A);\n};\n```\n\n### Remove\n```javascript\nString.prototype.Remove = function (A, B) {\n    var s = '';\n    if (A > 0)\n        s = this.substring(0, A);\n    if (A + B < this.length)\n        s += this.substring(A + B, this.length);\n    return s;\n};\n```\n\n### Trim\n```javascript\nString.prototype.Trim = function () {\n    return this.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '');\n};\n```\n\n### LTrim\n```javascript\nString.prototype.LTrim = function () {\n    return this.replace(/^[ \\t\\n\\r]*/g, '');\n};\n```\n\n### RTrim\n```javascript\nString.prototype.RTrim = function () {\n    return this.replace(/[ \\t\\n\\r]*$/g, '');\n}\n```\n\n### ReplaceNewLineChars\n```javascript\nString.prototype.ReplaceNewLineChars = function (A) {\n    return this.replace(/\\n/g, A);\n};\n```\n\n### Replace\n```javascript\nString.prototype.Replace = function (A, B, C) {\n    if (typeof B == 'function') {\n        return this.replace(A, function () {\n            return B.apply(C || this, arguments);\n        });\n    } else\n        return this.replace(A, B);\n};\n```\n\n## 获取浏览器信息\n```javascript\n var gecko = /gecko\\/\\d/i.test(navigator.userAgent);\n var ie = /MSIE \\d/.test(navigator.userAgent);\n var ie_lt8 = ie && (document.documentMode == null || document.documentMode < 8);\n var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n var webkit = /WebKit\\//.test(navigator.userAgent);\n var qtwebkit = webkit && /Qt\\/\\d+\\.\\d+/.test(navigator.userAgent);\n var chrome = /Chrome\\//.test(navigator.userAgent);\n var opera = /Opera\\//.test(navigator.userAgent);\n var safari = /Apple Computer/.test(navigator.vendor);\n var khtml = /KHTML\\//.test(navigator.userAgent);\n var mac_geLion = /Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var mac_geMountainLion = /Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var phantom = /PhantomJS/.test(navigator.userAgent);\n ```\n \n ## 获取操作系统信息\n ```javascript\n var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\n // This is woefully incomplete. Suggestions for alternative methods welcome.\n var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);\n var mac = ios || /Mac/.test(navigator.platform);\n var windows = /win/i.test(navigator.platform);\n ```","source":"_posts/JavaScript常用脚本.md","raw":"---\ntitle: JavaScript常用脚本\ndate: 2014-02-13 21:28:01\ncomments: true\ncategories: JavaScript\ntoc: true \n---\n\n## 字符串函数\n\n### 是否包含\n```javascript\nString.prototype.Contains = function (A) {\n    return (this.indexOf(A) > -1);\n};\n```\n<!--more-->\n### 是否相等\n```javascript\nString.prototype.Equals = function () {\n    var A = arguments;\n    if (A.length == 1 && A[0].pop)\n        A = A[0];\n    for (var i = 0; i < A.length; i++) {\n        if (this == A[i])\n            return true;\n    };\n    return false;\n};\n```\n\n### 是否相等(不区分大小写)\n```javascript\nString.prototype.IEquals = function () {\n    var A = this.toUpperCase();\n    var B = arguments;\n    if (B.length == 1 && B[0].pop)\n        B = B[0];\n    for (var i = 0; i < B.length; i++) {\n        if (A == B[i].toUpperCase())\n            return true;\n    };\n    return false;\n};\n```\n\n### 替换所有\n```javascript\nString.prototype.ReplaceAll = function (A, B) {\n    var C = this;\n    for (var i = 0; i < A.length; i++) {\n        C = C.replace(A[i], B[i]);\n    };\n    return C;\n}; \n或\nString.prototype.ReplaceAll = function(A,B){\n       var C = this;\n       C=C.replace(/A/g,B);\n       return C;  \n}\n```\n\n### StartsWith\n```javascript\nString.prototype.StartsWith = function (A) {\n    return (this.substr(0, A.length) == A);\n};\n```\n\n### EndsWith\n```javascript\nString.prototype.EndsWith = function (A, B) {\n    var C = this.length;\n    var D = A.length;\n    if (D > C)\n        return false;\n    if (B) {\n        var E = new RegExp(A + '$', 'i');\n        return E.test(this);\n    } else\n        return (D == 0 || this.substr(C - D, D) == A);\n};\n```\n\n### Remove\n```javascript\nString.prototype.Remove = function (A, B) {\n    var s = '';\n    if (A > 0)\n        s = this.substring(0, A);\n    if (A + B < this.length)\n        s += this.substring(A + B, this.length);\n    return s;\n};\n```\n\n### Trim\n```javascript\nString.prototype.Trim = function () {\n    return this.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '');\n};\n```\n\n### LTrim\n```javascript\nString.prototype.LTrim = function () {\n    return this.replace(/^[ \\t\\n\\r]*/g, '');\n};\n```\n\n### RTrim\n```javascript\nString.prototype.RTrim = function () {\n    return this.replace(/[ \\t\\n\\r]*$/g, '');\n}\n```\n\n### ReplaceNewLineChars\n```javascript\nString.prototype.ReplaceNewLineChars = function (A) {\n    return this.replace(/\\n/g, A);\n};\n```\n\n### Replace\n```javascript\nString.prototype.Replace = function (A, B, C) {\n    if (typeof B == 'function') {\n        return this.replace(A, function () {\n            return B.apply(C || this, arguments);\n        });\n    } else\n        return this.replace(A, B);\n};\n```\n\n## 获取浏览器信息\n```javascript\n var gecko = /gecko\\/\\d/i.test(navigator.userAgent);\n var ie = /MSIE \\d/.test(navigator.userAgent);\n var ie_lt8 = ie && (document.documentMode == null || document.documentMode < 8);\n var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n var webkit = /WebKit\\//.test(navigator.userAgent);\n var qtwebkit = webkit && /Qt\\/\\d+\\.\\d+/.test(navigator.userAgent);\n var chrome = /Chrome\\//.test(navigator.userAgent);\n var opera = /Opera\\//.test(navigator.userAgent);\n var safari = /Apple Computer/.test(navigator.vendor);\n var khtml = /KHTML\\//.test(navigator.userAgent);\n var mac_geLion = /Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var mac_geMountainLion = /Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var phantom = /PhantomJS/.test(navigator.userAgent);\n ```\n \n ## 获取操作系统信息\n ```javascript\n var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\n // This is woefully incomplete. Suggestions for alternative methods welcome.\n var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);\n var mac = ios || /Mac/.test(navigator.platform);\n var windows = /win/i.test(navigator.platform);\n ```","slug":"JavaScript常用脚本","published":1,"updated":"2021-06-25T02:00:17.937Z","layout":"post","photos":[],"link":"","_id":"ckqjatoku000jqkl55diwd7x8","content":"<h2 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h2><h3 id=\"是否包含\"><a href=\"#是否包含\" class=\"headerlink\" title=\"是否包含\"></a>是否包含</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Contains = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.indexOf(A) &gt; <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"是否相等\"><a href=\"#是否相等\" class=\"headerlink\" title=\"是否相等\"></a>是否相等</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.length == <span class=\"number\">1</span> &amp;&amp; A[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        A = A[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == A[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"是否相等-不区分大小写\"><a href=\"#是否相等-不区分大小写\" class=\"headerlink\" title=\"是否相等(不区分大小写)\"></a>是否相等(不区分大小写)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.IEquals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"keyword\">this</span>.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> B = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B.length == <span class=\"number\">1</span> &amp;&amp; B[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        B = B[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; B.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A == B[i].toUpperCase())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"替换所有\"><a href=\"#替换所有\" class=\"headerlink\" title=\"替换所有\"></a>替换所有</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        C = C.replace(A[i], B[i]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A,B</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       C=C.replace(<span class=\"regexp\">/A/g</span>,B);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> C;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StartsWith\"><a href=\"#StartsWith\" class=\"headerlink\" title=\"StartsWith\"></a>StartsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.StartsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.substr(<span class=\"number\">0</span>, A.length) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"EndsWith\"><a href=\"#EndsWith\" class=\"headerlink\" title=\"EndsWith\"></a>EndsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.EndsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> D = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (D &gt; C)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> E = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(A + <span class=\"string\">'$'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> E.test(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (D == <span class=\"number\">0</span> || <span class=\"keyword\">this</span>.substr(C - D, D) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Remove\"><a href=\"#Remove\" class=\"headerlink\" title=\"Remove\"></a>Remove</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        s = <span class=\"keyword\">this</span>.substring(<span class=\"number\">0</span>, A);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A + B &lt; <span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">        s += <span class=\"keyword\">this</span>.substring(A + B, <span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Trim\"><a href=\"#Trim\" class=\"headerlink\" title=\"Trim\"></a>Trim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LTrim\"><a href=\"#LTrim\" class=\"headerlink\" title=\"LTrim\"></a>LTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.LTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^[ \\t\\n\\r]*/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RTrim\"><a href=\"#RTrim\" class=\"headerlink\" title=\"RTrim\"></a>RTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.RTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/[ \\t\\n\\r]*$/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReplaceNewLineChars\"><a href=\"#ReplaceNewLineChars\" class=\"headerlink\" title=\"ReplaceNewLineChars\"></a>ReplaceNewLineChars</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceNewLineChars = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\n/g</span>, A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Replace\"><a href=\"#Replace\" class=\"headerlink\" title=\"Replace\"></a>Replace</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Replace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B, C</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> B == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> B.apply(C || <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, B);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取浏览器信息\"><a href=\"#获取浏览器信息\" class=\"headerlink\" title=\"获取浏览器信息\"></a>获取浏览器信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gecko = <span class=\"regexp\">/gecko\\/\\d/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie = <span class=\"regexp\">/MSIE \\d/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt8 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt9 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webkit = <span class=\"regexp\">/WebKit\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qtwebkit = webkit &amp;&amp; <span class=\"regexp\">/Qt\\/\\d+\\.\\d+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chrome = <span class=\"regexp\">/Chrome\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> opera = <span class=\"regexp\">/Opera\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> safari = <span class=\"regexp\">/Apple Computer/</span>.test(navigator.vendor);</span><br><span class=\"line\"><span class=\"keyword\">var</span> khtml = <span class=\"regexp\">/KHTML\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geMountainLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> phantom = <span class=\"regexp\">/PhantomJS/</span>.test(navigator.userAgent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取操作系统信息\"><a href=\"#获取操作系统信息\" class=\"headerlink\" title=\"获取操作系统信息\"></a>获取操作系统信息</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ios = <span class=\"regexp\">/AppleWebKit/</span>.test(navigator.userAgent) &amp;&amp; <span class=\"regexp\">/Mobile\\/\\w+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"comment\">// This is woefully incomplete. Suggestions for alternative methods welcome.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobile = ios || <span class=\"regexp\">/Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac = ios || <span class=\"regexp\">/Mac/</span>.test(navigator.platform);</span><br><span class=\"line\"><span class=\"keyword\">var</span> windows = <span class=\"regexp\">/win/i</span>.test(navigator.platform);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h2><h3 id=\"是否包含\"><a href=\"#是否包含\" class=\"headerlink\" title=\"是否包含\"></a>是否包含</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Contains = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.indexOf(A) &gt; <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"是否相等\"><a href=\"#是否相等\" class=\"headerlink\" title=\"是否相等\"></a>是否相等</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.length == <span class=\"number\">1</span> &amp;&amp; A[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        A = A[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == A[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"是否相等-不区分大小写\"><a href=\"#是否相等-不区分大小写\" class=\"headerlink\" title=\"是否相等(不区分大小写)\"></a>是否相等(不区分大小写)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.IEquals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"keyword\">this</span>.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> B = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B.length == <span class=\"number\">1</span> &amp;&amp; B[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        B = B[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; B.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A == B[i].toUpperCase())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"替换所有\"><a href=\"#替换所有\" class=\"headerlink\" title=\"替换所有\"></a>替换所有</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        C = C.replace(A[i], B[i]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A,B</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       C=C.replace(<span class=\"regexp\">/A/g</span>,B);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> C;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StartsWith\"><a href=\"#StartsWith\" class=\"headerlink\" title=\"StartsWith\"></a>StartsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.StartsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.substr(<span class=\"number\">0</span>, A.length) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"EndsWith\"><a href=\"#EndsWith\" class=\"headerlink\" title=\"EndsWith\"></a>EndsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.EndsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> D = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (D &gt; C)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> E = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(A + <span class=\"string\">'$'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> E.test(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (D == <span class=\"number\">0</span> || <span class=\"keyword\">this</span>.substr(C - D, D) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Remove\"><a href=\"#Remove\" class=\"headerlink\" title=\"Remove\"></a>Remove</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        s = <span class=\"keyword\">this</span>.substring(<span class=\"number\">0</span>, A);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A + B &lt; <span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">        s += <span class=\"keyword\">this</span>.substring(A + B, <span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Trim\"><a href=\"#Trim\" class=\"headerlink\" title=\"Trim\"></a>Trim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LTrim\"><a href=\"#LTrim\" class=\"headerlink\" title=\"LTrim\"></a>LTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.LTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^[ \\t\\n\\r]*/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RTrim\"><a href=\"#RTrim\" class=\"headerlink\" title=\"RTrim\"></a>RTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.RTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/[ \\t\\n\\r]*$/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReplaceNewLineChars\"><a href=\"#ReplaceNewLineChars\" class=\"headerlink\" title=\"ReplaceNewLineChars\"></a>ReplaceNewLineChars</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceNewLineChars = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\n/g</span>, A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Replace\"><a href=\"#Replace\" class=\"headerlink\" title=\"Replace\"></a>Replace</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Replace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B, C</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> B == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> B.apply(C || <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, B);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取浏览器信息\"><a href=\"#获取浏览器信息\" class=\"headerlink\" title=\"获取浏览器信息\"></a>获取浏览器信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gecko = <span class=\"regexp\">/gecko\\/\\d/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie = <span class=\"regexp\">/MSIE \\d/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt8 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt9 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webkit = <span class=\"regexp\">/WebKit\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qtwebkit = webkit &amp;&amp; <span class=\"regexp\">/Qt\\/\\d+\\.\\d+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chrome = <span class=\"regexp\">/Chrome\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> opera = <span class=\"regexp\">/Opera\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> safari = <span class=\"regexp\">/Apple Computer/</span>.test(navigator.vendor);</span><br><span class=\"line\"><span class=\"keyword\">var</span> khtml = <span class=\"regexp\">/KHTML\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geMountainLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> phantom = <span class=\"regexp\">/PhantomJS/</span>.test(navigator.userAgent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取操作系统信息\"><a href=\"#获取操作系统信息\" class=\"headerlink\" title=\"获取操作系统信息\"></a>获取操作系统信息</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ios = <span class=\"regexp\">/AppleWebKit/</span>.test(navigator.userAgent) &amp;&amp; <span class=\"regexp\">/Mobile\\/\\w+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"comment\">// This is woefully incomplete. Suggestions for alternative methods welcome.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobile = ios || <span class=\"regexp\">/Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac = ios || <span class=\"regexp\">/Mac/</span>.test(navigator.platform);</span><br><span class=\"line\"><span class=\"keyword\">var</span> windows = <span class=\"regexp\">/win/i</span>.test(navigator.platform);</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript模仿块级作用域","date":"2013-07-16T16:00:00.000Z","comments":1,"toc":false,"_content":"\nJavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。\n```javascript\nfunction ouputNumbers(count){\n     for(var i=0;i<count;i++){\n                ...\n     }\n     alert(i);//i==count\n}\n```\n<!--more-->\n这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。\n\n```javascript\nfunction outputNumbers(count){\n    for(var i=0;i<count;i++){\n        alert(i);\n    }\n    var i;//重新声明变量\n    alert(i);//i==count\n}\n```\nJavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。\n用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。\n```javascript\nvar count =5;\noutputNumbers(count);\n```\n这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。\n```javascript\noutputNumbers(5);\n```\n这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。\n```javascript\nvar someFunction = function(){\n    //这里是块级作用域\n};\nsomeFunction();\n```\n这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。\n```javascript\nfunction(){\n    //这里是块级作用域\n}();//出错\n```\n这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：\n```javascript\nfunction outputNumbers(count){\n    (function(){\n        for(var i=0;i<count;i++){\n            alert(i);\n        }\n    })();\n    alert(i);//导致一个错误！\n}\n```\n在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。\n这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：\n```javascript\n(function(){\n    var now = new Date();\n    if(now.getMont()==0 && now.getDate() ==1){\n        alert(\"Happy new year\");\n    }\n})();\n```\n把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。\n\n***注意：***\n这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。","source":"_posts/JavaScript模仿块级作用域.md","raw":"---\ntitle: JavaScript模仿块级作用域\ndate: 2013-07-17\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\nJavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。\n```javascript\nfunction ouputNumbers(count){\n     for(var i=0;i<count;i++){\n                ...\n     }\n     alert(i);//i==count\n}\n```\n<!--more-->\n这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。\n\n```javascript\nfunction outputNumbers(count){\n    for(var i=0;i<count;i++){\n        alert(i);\n    }\n    var i;//重新声明变量\n    alert(i);//i==count\n}\n```\nJavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。\n用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。\n```javascript\nvar count =5;\noutputNumbers(count);\n```\n这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。\n```javascript\noutputNumbers(5);\n```\n这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。\n```javascript\nvar someFunction = function(){\n    //这里是块级作用域\n};\nsomeFunction();\n```\n这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。\n```javascript\nfunction(){\n    //这里是块级作用域\n}();//出错\n```\n这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：\n```javascript\nfunction outputNumbers(count){\n    (function(){\n        for(var i=0;i<count;i++){\n            alert(i);\n        }\n    })();\n    alert(i);//导致一个错误！\n}\n```\n在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。\n这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：\n```javascript\n(function(){\n    var now = new Date();\n    if(now.getMont()==0 && now.getDate() ==1){\n        alert(\"Happy new year\");\n    }\n})();\n```\n把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。\n\n***注意：***\n这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。","slug":"JavaScript模仿块级作用域","published":1,"updated":"2021-06-25T02:00:17.938Z","layout":"post","photos":[],"link":"","_id":"ckqjatokv000kqkl58690hll2","content":"<p>JavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ouputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">        alert(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;<span class=\"comment\">//重新声明变量</span></span><br><span class=\"line\">    alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。<br>用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">5</span>;</span><br><span class=\"line\">outputNumbers(count);</span><br></pre></td></tr></table></figure></p>\n<p>这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputNumbers(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">someFunction();</span><br></pre></td></tr></table></figure></p>\n<p>这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//出错</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">            alert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    alert(i);<span class=\"comment\">//导致一个错误！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。<br>这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now.getMont()==<span class=\"number\">0</span> &amp;&amp; now.getDate() ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Happy new year\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。</p>\n<p><strong><em>注意：</em></strong><br>这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。</p>\n","site":{"data":{}},"excerpt":"<p>JavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ouputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">        alert(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;<span class=\"comment\">//重新声明变量</span></span><br><span class=\"line\">    alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。<br>用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">5</span>;</span><br><span class=\"line\">outputNumbers(count);</span><br></pre></td></tr></table></figure></p>\n<p>这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputNumbers(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">someFunction();</span><br></pre></td></tr></table></figure></p>\n<p>这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//出错</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">            alert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    alert(i);<span class=\"comment\">//导致一个错误！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。<br>这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now.getMont()==<span class=\"number\">0</span> &amp;&amp; now.getDate() ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Happy new year\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。</p>\n<p><strong><em>注意：</em></strong><br>这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。</p>"},{"title":"JavaScript闭包","date":"2013-07-16T16:00:00.000Z","comments":1,"toc":false,"_content":"\n有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。\n```javascript\nfunction createComparisonFunction(name){\n  return function(object1){\n       return object1[name];\n  }\n}\n```\n<!--more-->\n变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。\n有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，......直至作为作用域链终点的全局执行环境。\n在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。\n\n```javascript\nfunction compare(value1,value2){\n  if(value1<value2){\n     return -1;\n  }else if(value1>value2){\n     return 1;\n  }else{\n     return 0;\n  }  \n}\nvar result = compare(5,10);\n```\n以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。\n\n后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。\n\n无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。\n\n由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。","source":"_posts/JavaScript闭包.md","raw":"---\ntitle: JavaScript闭包\ndate: 2013-07-17\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\n有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。\n```javascript\nfunction createComparisonFunction(name){\n  return function(object1){\n       return object1[name];\n  }\n}\n```\n<!--more-->\n变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。\n有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，......直至作为作用域链终点的全局执行环境。\n在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。\n\n```javascript\nfunction compare(value1,value2){\n  if(value1<value2){\n     return -1;\n  }else if(value1>value2){\n     return 1;\n  }else{\n     return 0;\n  }  \n}\nvar result = compare(5,10);\n```\n以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。\n\n后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。\n\n无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。\n\n由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。","slug":"JavaScript闭包","published":1,"updated":"2021-06-25T02:00:17.939Z","layout":"post","photos":[],"link":"","_id":"ckqjatokx000nqkl5vgwcb9eh","content":"<p>有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> object1[name];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。<br>有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，……直至作为作用域链终点的全局执行环境。<br>在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value1&lt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1&gt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = compare(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。</p>\n<p>后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。</p>\n<p>无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。</p>\n<p>由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。</p>\n","site":{"data":{}},"excerpt":"<p>有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> object1[name];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。<br>有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，……直至作为作用域链终点的全局执行环境。<br>在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value1&lt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1&gt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = compare(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。</p>\n<p>后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。</p>\n<p>无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。</p>\n<p>由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。</p>"},{"title":"JavaScript面向对象编程","date":"2016-05-11T03:05:20.000Z","comments":1,"toc":true,"_content":"\n## this\njavascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：\n\n```javascript\nfunction Test(){\n  alert(this);\n}\n//此时的this，是window弹出[object Window]\nTest();\n//此时的this，是当前对象的的object 弹出[object Object]\nvar t = new Test();\n```\n<!-- more -->\n会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。\n由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。\n### apply、call\n\ncall, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.\n\n区分apply,call就一句话,\n```javascript\nfoo.call(this, arg1,arg2,arg3) == foo.apply(this, arguments)==this.foo(arg1, arg2, arg3)\n```\n***相同点:两个方法产生的作用是完全一样的***\n***不同点:方法传递的参数不同***\n***call, apply作用就是借用别人的方法来调用,就像调用自己的一样.***\n```javascript\n//声明人类 人类含有属性、name、age、sex\nfunction person(name,age,sex){\n   this.name = name;\n   this.age=age;\n   this.sex=sex;\n}\n//声明中国人  \nfunction chinese(name,age,sex){\n  this.colour=\"yellow\";\n  //用call方式借用person,参数显式打散传递\n  person.call(this, name, age, sex);\n  //用apply方式借用person, 参数作为一个数组传递,\n  //这里直接用JavaScript方法内本身有的arguments数组\n  person.apply(this, arguments);\n  //或者封装成数组\n  person.apply(this, [name,age,sex]);\n  \n  this.sayHello=function(){\n    alert(\"大家好我叫：\"+this.name+\" 性别：\"+this.sex+\" 年龄：\"+this.age+\" 肤色：\"+this.colour);\n  }\n}\nvar p =new chinese(\"张三\",18,\"男\");\np.sayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\nchinese(\"张三\",18,\"男\");\nsayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\n```\n在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,\n23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错\n\n***应用场景:***\n当参数明确时可用call, 当参数不明确时可用apply给合arguments\n\n***总结：***通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的***继承***\n## Prototype\njavascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。\n\n## 对于对象常用的操作\n\n### constructor\n每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object\n### instanceof\n用于验证原型对象与实例对象之间的关系 obj  instanceof Object\n\n### isPrototypeOf \n判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)\n\n### hasOwnProperty\n用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(\"name\")\n\n\n ### in\n某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj\nin运算符还可以用来遍历某个对象的所有属性\n```javascript\nfor(var prop in cat1) {\n  alert(\"cat1[\"+prop+\"]=\"+cat1[prop]); \n}\n```\n\n","source":"_posts/JavaScript面向对象编程.md","raw":"---\ntitle: JavaScript面向对象编程\ndate: 2016-05-11 11:05:20\ncomments: true \ncategories: JavaScript\ntoc: true\n---\n\n## this\njavascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：\n\n```javascript\nfunction Test(){\n  alert(this);\n}\n//此时的this，是window弹出[object Window]\nTest();\n//此时的this，是当前对象的的object 弹出[object Object]\nvar t = new Test();\n```\n<!-- more -->\n会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。\n由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。\n### apply、call\n\ncall, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.\n\n区分apply,call就一句话,\n```javascript\nfoo.call(this, arg1,arg2,arg3) == foo.apply(this, arguments)==this.foo(arg1, arg2, arg3)\n```\n***相同点:两个方法产生的作用是完全一样的***\n***不同点:方法传递的参数不同***\n***call, apply作用就是借用别人的方法来调用,就像调用自己的一样.***\n```javascript\n//声明人类 人类含有属性、name、age、sex\nfunction person(name,age,sex){\n   this.name = name;\n   this.age=age;\n   this.sex=sex;\n}\n//声明中国人  \nfunction chinese(name,age,sex){\n  this.colour=\"yellow\";\n  //用call方式借用person,参数显式打散传递\n  person.call(this, name, age, sex);\n  //用apply方式借用person, 参数作为一个数组传递,\n  //这里直接用JavaScript方法内本身有的arguments数组\n  person.apply(this, arguments);\n  //或者封装成数组\n  person.apply(this, [name,age,sex]);\n  \n  this.sayHello=function(){\n    alert(\"大家好我叫：\"+this.name+\" 性别：\"+this.sex+\" 年龄：\"+this.age+\" 肤色：\"+this.colour);\n  }\n}\nvar p =new chinese(\"张三\",18,\"男\");\np.sayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\nchinese(\"张三\",18,\"男\");\nsayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\n```\n在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,\n23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错\n\n***应用场景:***\n当参数明确时可用call, 当参数不明确时可用apply给合arguments\n\n***总结：***通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的***继承***\n## Prototype\njavascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。\n\n## 对于对象常用的操作\n\n### constructor\n每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object\n### instanceof\n用于验证原型对象与实例对象之间的关系 obj  instanceof Object\n\n### isPrototypeOf \n判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)\n\n### hasOwnProperty\n用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(\"name\")\n\n\n ### in\n某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj\nin运算符还可以用来遍历某个对象的所有属性\n```javascript\nfor(var prop in cat1) {\n  alert(\"cat1[\"+prop+\"]=\"+cat1[prop]); \n}\n```\n\n","slug":"JavaScript面向对象编程","published":1,"updated":"2021-06-25T02:00:17.941Z","layout":"post","photos":[],"link":"","_id":"ckqjatokz000oqkl5sn6ddmay","content":"<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>javascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是window弹出[object Window]</span></span><br><span class=\"line\">Test();</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是当前对象的的object 弹出[object Object]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。<br>由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。</p>\n<h3 id=\"apply、call\"><a href=\"#apply、call\" class=\"headerlink\" title=\"apply、call\"></a>apply、call</h3><p>call, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.</p>\n<p>区分apply,call就一句话,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.call(<span class=\"keyword\">this</span>, arg1,arg2,arg3) == foo.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)==<span class=\"keyword\">this</span>.foo(arg1, arg2, arg3)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>相同点:两个方法产生的作用是完全一样的</em></strong><br><strong><em>不同点:方法传递的参数不同</em></strong><br><strong><em>call, apply作用就是借用别人的方法来调用,就像调用自己的一样.</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明人类 人类含有属性、name、age、sex</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sex=sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明中国人  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chinese</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colour=<span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用call方式借用person,参数显式打散传递</span></span><br><span class=\"line\">  person.call(<span class=\"keyword\">this</span>, name, age, sex);</span><br><span class=\"line\">  <span class=\"comment\">//用apply方式借用person, 参数作为一个数组传递,</span></span><br><span class=\"line\">  <span class=\"comment\">//这里直接用JavaScript方法内本身有的arguments数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">//或者封装成数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, [name,age,sex]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"大家好我叫：\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\" 性别：\"</span>+<span class=\"keyword\">this</span>.sex+<span class=\"string\">\" 年龄：\"</span>+<span class=\"keyword\">this</span>.age+<span class=\"string\">\" 肤色：\"</span>+<span class=\"keyword\">this</span>.colour);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p =<span class=\"keyword\">new</span> chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br><span class=\"line\">chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br></pre></td></tr></table></figure></p>\n<p>在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,<br>23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错</p>\n<p><strong><em>应用场景:</em></strong><br>当参数明确时可用call, 当参数不明确时可用apply给合arguments</p>\n<p><strong><em>总结：</em></strong>通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的<strong><em>继承</em></strong></p>\n<h2 id=\"Prototype\"><a href=\"#Prototype\" class=\"headerlink\" title=\"Prototype\"></a>Prototype</h2><p>javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。</p>\n<h2 id=\"对于对象常用的操作\"><a href=\"#对于对象常用的操作\" class=\"headerlink\" title=\"对于对象常用的操作\"></a>对于对象常用的操作</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p>每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于验证原型对象与实例对象之间的关系 obj  instanceof Object</p>\n<h3 id=\"isPrototypeOf-NaN\"><a href=\"#isPrototypeOf-NaN\" class=\"headerlink\" title=\"isPrototypeOf\"></a>isPrototypeOf</h3><p>判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)</p>\n<h3 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h3><p>用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(“name”)</p>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><p>某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj<br>in运算符还可以用来遍历某个对象的所有属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> cat1) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"cat1[\"</span>+prop+<span class=\"string\">\"]=\"</span>+cat1[prop]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>javascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是window弹出[object Window]</span></span><br><span class=\"line\">Test();</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是当前对象的的object 弹出[object Object]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();</span><br></pre></td></tr></table></figure>","more":"<p>会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。<br>由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。</p>\n<h3 id=\"apply、call\"><a href=\"#apply、call\" class=\"headerlink\" title=\"apply、call\"></a>apply、call</h3><p>call, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.</p>\n<p>区分apply,call就一句话,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.call(<span class=\"keyword\">this</span>, arg1,arg2,arg3) == foo.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)==<span class=\"keyword\">this</span>.foo(arg1, arg2, arg3)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>相同点:两个方法产生的作用是完全一样的</em></strong><br><strong><em>不同点:方法传递的参数不同</em></strong><br><strong><em>call, apply作用就是借用别人的方法来调用,就像调用自己的一样.</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明人类 人类含有属性、name、age、sex</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sex=sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明中国人  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chinese</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colour=<span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用call方式借用person,参数显式打散传递</span></span><br><span class=\"line\">  person.call(<span class=\"keyword\">this</span>, name, age, sex);</span><br><span class=\"line\">  <span class=\"comment\">//用apply方式借用person, 参数作为一个数组传递,</span></span><br><span class=\"line\">  <span class=\"comment\">//这里直接用JavaScript方法内本身有的arguments数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">//或者封装成数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, [name,age,sex]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"大家好我叫：\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\" 性别：\"</span>+<span class=\"keyword\">this</span>.sex+<span class=\"string\">\" 年龄：\"</span>+<span class=\"keyword\">this</span>.age+<span class=\"string\">\" 肤色：\"</span>+<span class=\"keyword\">this</span>.colour);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p =<span class=\"keyword\">new</span> chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br><span class=\"line\">chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br></pre></td></tr></table></figure></p>\n<p>在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,<br>23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错</p>\n<p><strong><em>应用场景:</em></strong><br>当参数明确时可用call, 当参数不明确时可用apply给合arguments</p>\n<p><strong><em>总结：</em></strong>通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的<strong><em>继承</em></strong></p>\n<h2 id=\"Prototype\"><a href=\"#Prototype\" class=\"headerlink\" title=\"Prototype\"></a>Prototype</h2><p>javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。</p>\n<h2 id=\"对于对象常用的操作\"><a href=\"#对于对象常用的操作\" class=\"headerlink\" title=\"对于对象常用的操作\"></a>对于对象常用的操作</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p>每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于验证原型对象与实例对象之间的关系 obj  instanceof Object</p>\n<h3 id=\"isPrototypeOf-NaN\"><a href=\"#isPrototypeOf-NaN\" class=\"headerlink\" title=\"isPrototypeOf\"></a>isPrototypeOf</h3><p>判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)</p>\n<h3 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h3><p>用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(“name”)</p>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><p>某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj<br>in运算符还可以用来遍历某个对象的所有属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> cat1) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"cat1[\"</span>+prop+<span class=\"string\">\"]=\"</span>+cat1[prop]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Java动态编程","date":"2016-06-05T08:55:01.000Z","comments":1,"toc":true,"_content":"\n动态编程指的是在运行时动态修改代码逻辑。\n\n## java运行原理\njava的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。\nclass字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。\n<!--more-->\n![](43918004_1.png)\n由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。\n![](43918004_2.png)\n## 动态修改字节码\n***能实现java动态编程的框架有三种分别是 asm、cglib、javassist***\nasm性能最佳、技术难度大\ncglib是对asm的封装,技术难度低\nJavassist 性能弱于asm、技术难度低\n### asm\n\n### cglib\n\n### javassist\n```java\n//Demo.java\npackage com.dynamic.demo;\n  public class Demo {\n  \n  }\n}\n//DemoSuper.java\npackage com.dynamic.demo.supers;\npublic class DemoSuper {\n  public void sysHello(){\n\tSystem.out.println(\"hello world\");\n  }\n\n}\n//JavassistTest.java\npackage com.dynamic.test;\nimport java.lang.reflect.Method;\nimport com.dynamic.demo.Demo;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\nimport javassist.CtNewMethod;\n\npublic class JavassistTest {\n\n  /**\n  * @param args\n  * @throws Exception \n  */\n  public static void main(String[] args) throws Exception {\n\tClassPool pool = ClassPool.getDefault();\n\tCtClass cc = pool.get(\"com.dynamic.demo.Demo\");\n\tcc.setSuperclass(pool.get(\"com.dynamic.demo.supers.DemoSuper\"));//添加父类\n\tCtMethod mthd = CtNewMethod.make(\"public void sysHello() { }\", cc);//创建方法\n\tcc.addMethod(mthd);//添加方法\n\tCtMethod m = cc.getDeclaredMethod(\"sysHello\");\n\tm.insertBefore(\"{ super.sysHello(); }\");\n\tcc.writeFile();//保存class文件\n\tClass c = cc.toClass();\n\tMethod method = c.getMethod(\"sysHello\", null);\n\tmethod.invoke(c.newInstance(), null);\n\t\n\tDemo e = new Demo();\n\tClass cl = Class.forName(\"com.dynamic.demo.Demo\");\n\tMethod mm = cl.getMethod(\"sysHello\", null);\n\tmm.invoke(e, null);\n  }\n}\n```\n最后控制台打印结果分别是\n```\nhello world\nhello world\n```\n","source":"_posts/Java动态编程.md","raw":"---\ntitle: Java动态编程\ndate: 2016-06-05 16:55:01\ncomments: true\ncategories: Java\ntoc: true \n---\n\n动态编程指的是在运行时动态修改代码逻辑。\n\n## java运行原理\njava的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。\nclass字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。\n<!--more-->\n![](43918004_1.png)\n由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。\n![](43918004_2.png)\n## 动态修改字节码\n***能实现java动态编程的框架有三种分别是 asm、cglib、javassist***\nasm性能最佳、技术难度大\ncglib是对asm的封装,技术难度低\nJavassist 性能弱于asm、技术难度低\n### asm\n\n### cglib\n\n### javassist\n```java\n//Demo.java\npackage com.dynamic.demo;\n  public class Demo {\n  \n  }\n}\n//DemoSuper.java\npackage com.dynamic.demo.supers;\npublic class DemoSuper {\n  public void sysHello(){\n\tSystem.out.println(\"hello world\");\n  }\n\n}\n//JavassistTest.java\npackage com.dynamic.test;\nimport java.lang.reflect.Method;\nimport com.dynamic.demo.Demo;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\nimport javassist.CtNewMethod;\n\npublic class JavassistTest {\n\n  /**\n  * @param args\n  * @throws Exception \n  */\n  public static void main(String[] args) throws Exception {\n\tClassPool pool = ClassPool.getDefault();\n\tCtClass cc = pool.get(\"com.dynamic.demo.Demo\");\n\tcc.setSuperclass(pool.get(\"com.dynamic.demo.supers.DemoSuper\"));//添加父类\n\tCtMethod mthd = CtNewMethod.make(\"public void sysHello() { }\", cc);//创建方法\n\tcc.addMethod(mthd);//添加方法\n\tCtMethod m = cc.getDeclaredMethod(\"sysHello\");\n\tm.insertBefore(\"{ super.sysHello(); }\");\n\tcc.writeFile();//保存class文件\n\tClass c = cc.toClass();\n\tMethod method = c.getMethod(\"sysHello\", null);\n\tmethod.invoke(c.newInstance(), null);\n\t\n\tDemo e = new Demo();\n\tClass cl = Class.forName(\"com.dynamic.demo.Demo\");\n\tMethod mm = cl.getMethod(\"sysHello\", null);\n\tmm.invoke(e, null);\n  }\n}\n```\n最后控制台打印结果分别是\n```\nhello world\nhello world\n```\n","slug":"Java动态编程","published":1,"updated":"2021-06-25T02:00:17.948Z","layout":"post","photos":[],"link":"","_id":"ckqjatol0000rqkl5stcrmpif","content":"<p>动态编程指的是在运行时动态修改代码逻辑。</p>\n<h2 id=\"java运行原理\"><a href=\"#java运行原理\" class=\"headerlink\" title=\"java运行原理\"></a>java运行原理</h2><p>java的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。<br>class字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。<br><a id=\"more\"></a><br><img src=\"43918004_1.png\" alt><br>由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。<br><img src=\"43918004_2.png\" alt></p>\n<h2 id=\"动态修改字节码\"><a href=\"#动态修改字节码\" class=\"headerlink\" title=\"动态修改字节码\"></a>动态修改字节码</h2><p><strong><em>能实现java动态编程的框架有三种分别是 asm、cglib、javassist</em></strong><br>asm性能最佳、技术难度大<br>cglib是对asm的封装,技术难度低<br>Javassist 性能弱于asm、技术难度低</p>\n<h3 id=\"asm\"><a href=\"#asm\" class=\"headerlink\" title=\"asm\"></a>asm</h3><h3 id=\"cglib\"><a href=\"#cglib\" class=\"headerlink\" title=\"cglib\"></a>cglib</h3><h3 id=\"javassist\"><a href=\"#javassist\" class=\"headerlink\" title=\"javassist\"></a>javassist</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Demo.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//DemoSuper.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo.supers;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoSuper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sysHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//JavassistTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.dynamic.demo.Demo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtNewMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavassistTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@throws</span> Exception </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">\tCtClass cc = pool.get(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tcc.setSuperclass(pool.get(<span class=\"string\">\"com.dynamic.demo.supers.DemoSuper\"</span>));<span class=\"comment\">//添加父类</span></span><br><span class=\"line\">\tCtMethod mthd = CtNewMethod.make(<span class=\"string\">\"public void sysHello() &#123; &#125;\"</span>, cc);<span class=\"comment\">//创建方法</span></span><br><span class=\"line\">\tcc.addMethod(mthd);<span class=\"comment\">//添加方法</span></span><br><span class=\"line\">\tCtMethod m = cc.getDeclaredMethod(<span class=\"string\">\"sysHello\"</span>);</span><br><span class=\"line\">\tm.insertBefore(<span class=\"string\">\"&#123; super.sysHello(); &#125;\"</span>);</span><br><span class=\"line\">\tcc.writeFile();<span class=\"comment\">//保存class文件</span></span><br><span class=\"line\">\tClass c = cc.toClass();</span><br><span class=\"line\">\tMethod method = c.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmethod.invoke(c.newInstance(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDemo e = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">\tClass cl = Class.forName(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tMethod mm = cl.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmm.invoke(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后控制台打印结果分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>动态编程指的是在运行时动态修改代码逻辑。</p>\n<h2 id=\"java运行原理\"><a href=\"#java运行原理\" class=\"headerlink\" title=\"java运行原理\"></a>java运行原理</h2><p>java的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。<br>class字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。<br>","more":"<br><img src=\"43918004_1.png\" alt><br>由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。<br><img src=\"43918004_2.png\" alt></p>\n<h2 id=\"动态修改字节码\"><a href=\"#动态修改字节码\" class=\"headerlink\" title=\"动态修改字节码\"></a>动态修改字节码</h2><p><strong><em>能实现java动态编程的框架有三种分别是 asm、cglib、javassist</em></strong><br>asm性能最佳、技术难度大<br>cglib是对asm的封装,技术难度低<br>Javassist 性能弱于asm、技术难度低</p>\n<h3 id=\"asm\"><a href=\"#asm\" class=\"headerlink\" title=\"asm\"></a>asm</h3><h3 id=\"cglib\"><a href=\"#cglib\" class=\"headerlink\" title=\"cglib\"></a>cglib</h3><h3 id=\"javassist\"><a href=\"#javassist\" class=\"headerlink\" title=\"javassist\"></a>javassist</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Demo.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//DemoSuper.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo.supers;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoSuper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sysHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//JavassistTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.dynamic.demo.Demo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtNewMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavassistTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@throws</span> Exception </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">\tCtClass cc = pool.get(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tcc.setSuperclass(pool.get(<span class=\"string\">\"com.dynamic.demo.supers.DemoSuper\"</span>));<span class=\"comment\">//添加父类</span></span><br><span class=\"line\">\tCtMethod mthd = CtNewMethod.make(<span class=\"string\">\"public void sysHello() &#123; &#125;\"</span>, cc);<span class=\"comment\">//创建方法</span></span><br><span class=\"line\">\tcc.addMethod(mthd);<span class=\"comment\">//添加方法</span></span><br><span class=\"line\">\tCtMethod m = cc.getDeclaredMethod(<span class=\"string\">\"sysHello\"</span>);</span><br><span class=\"line\">\tm.insertBefore(<span class=\"string\">\"&#123; super.sysHello(); &#125;\"</span>);</span><br><span class=\"line\">\tcc.writeFile();<span class=\"comment\">//保存class文件</span></span><br><span class=\"line\">\tClass c = cc.toClass();</span><br><span class=\"line\">\tMethod method = c.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmethod.invoke(c.newInstance(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDemo e = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">\tClass cl = Class.forName(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tMethod mm = cl.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmm.invoke(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后控制台打印结果分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>"},{"title":"Java中的IO技术：BIO,NIO,AIO","date":"2016-08-09T16:00:00.000Z","comments":1,"toc":true,"_content":"\n# 同步异步、阻塞非阻塞概念\n同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。\n<!--more-->\n## 同步与异步\n同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;\n![同步](02.png)\n``` java\n\nInputStream in = new FileInputStream(licenseDir);\nBufferedReader br = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\nString data = null;\nStringBuffer encodedData = new StringBuffer();\nwhile ((data = br.readLine()) != null) {\n\tencodedData.append(data);\n}\nin.close();\nbr.close();\n\n```\n异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。\n![异步](01.png)\n``` java\npublic class Demo1 {\n\n    static Thread current;\n\n    public static void main(String[] args) throws IOException {\n        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths\n                .get(\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"));\n        ByteBuffer byteBuffer = ByteBuffer.allocate(16 * 1024);\n        current = Thread.currentThread();\n        afc.read(byteBuffer, 0, null, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                System.out.println(\"Bytes Read = \" + result);\n                //中断主线程挂起 \n                current.interrupt();\n            }\n            @Override\n            public void failed(Throwable exc, Object attachment) {\n                System.out.println(exc.getCause());\n                current.interrupt();\n            }\n        });\n        System.out.println(\"Waiting for completion...\");\n        try {\n            current.join();//挂起现成 等待 消息读取完成 \n        } catch (InterruptedException e) {\n        }\n\n        afc.close();\n        byteBuffer.flip();\n        while(byteBuffer.hasRemaining()){ \n            System.out.print((char) byteBuffer.get()); // read 1 byte at a time \n        } \n    }\n\n}\n```\n## 阻塞非阻塞\n阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；\n非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；\n\n\n# BIO\n在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。\n```java\npublic class PlainEchoServer {\n  public void serve(int port) throws IOException {\n    final ServerSocket socket = new ServerSocket(port); //Bind server to port\n    try {\n      while (true) {\n        //Block until new client connection is accepted\n        final Socket clientSocket = socket.accept();\n        System.out.println(\"Accepted connection from \" + clientSocket);\n        //Create new thread to handle client connection\n        //KeepAlive 设置为true表示保持长连接Socket 底层会定期发送心跳包检查连接是否中断。\n        clientSocket.setKeepAlive(true);\n        //设置超过指定时间没有数据可读的时候read立即返回并抛出异常SocketTimeoutException\n        socket.setSoTimeout(1000);\n        new Thread(new Runnable() {\n          @Override\n          public void run() {\n            try {\n                while(true){\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                    PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);\n                    //Read data from client and write it back\n                    //如果此时没有数据可读将一直阻塞在read函数上除非设置socket.setSoTimeout()，\n                    //超过过期时间抛出异常SocketTimeoutException\n                    while (true) {\n                      writer.println(reader.readLine());\n                      writer.flush();\n                    }\n                }\n            } catch (IOException e) {\n              e.printStackTrace();\n              try {\n                clientSocket.close();\n              } catch (IOException ex) {\n                // ignore on close\n              }\n            }\n          }\n        }).start();\n        //Start thread\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n```\n# NIO\n在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。\n\nNIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。\n```java\npublic class PlainNioEchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    ServerSocketChannel serverChannel = ServerSocketChannel.open();\n    ServerSocket ss = serverChannel.socket();\n    InetSocketAddress address = new InetSocketAddress(port);\n    //Bind server to port\n    ss.bind(address);\n    serverChannel.configureBlocking(false);\n    Selector selector = Selector.open();\n    //Register the channel with the selector to be interested in new Client connections that get accepted\n    serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n    while (true) {\n      try {\n        //Block until something is selected\n        selector.select();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        //handle in a proper way\n        break;\n      }\n      //Get all SelectedKey instances\n      Set<SelectionKey> readyKeys = selector.selectedKeys();\n      Iterator<SelectionKey> iterator = readyKeys.iterator();\n      while (iterator.hasNext()) {\n        SelectionKey key = (SelectionKey) iterator.next();\n        //Remove the SelectedKey from the iterator\n        iterator.remove();\n        try {\n          if (key.isAcceptable()) {\n            ServerSocketChannel server = (ServerSocketChannel) key.channel();\n            //Accept the client connection\n            SocketChannel client = server.accept();\n            System.out.println(\"Accepted connection from \" + client);\n            client.configureBlocking(false);\n            //Register connection to selector and set ByteBuffer\n            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(100));\n          }\n          //Check for SelectedKey for read\n          if (key.isReadable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            //Read data to ByteBuffer\n            client.read(output);\n          }\n          //Check for SelectedKey for write\n          if (key.isWritable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            output.flip();\n            //Write data from ByteBuffer to channel\n            client.write(output);\n            output.compact();\n          }\n        } catch (IOException ex) {\n          key.cancel();\n          try {\n            key.channel().close();\n          } catch (IOException cex) {\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n# AIO\n\n当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。\n\n即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。\n\n在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：\n•AsynchronousSocketChannel\n•AsynchronousServerSocketChannel\n•AsynchronousFileChannel\n•AsynchronousDatagramChannel\n\n其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。\n```java\npublic class PlainNio2EchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    final AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();\n    InetSocketAddress address = new InetSocketAddress(port);\n    // Bind Server to port\n    serverChannel.bind(address);\n    final CountDownLatch latch = new CountDownLatch(1);\n    // Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.\n    serverChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() {\n      @Override\n      public void completed(final AsynchronousSocketChannel channel, Object attachment) {\n        // Again accept new Client connections\n        serverChannel.accept(null, this);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n        channel.read(buffer, buffer, new EchoCompletionHandler(channel));\n      }\n\n      @Override\n      public void failed(Throwable throwable, Object attachment) {\n        try {\n          // Close the socket on error\n          serverChannel.close();\n        } catch (IOException e) {\n          // ingnore on close\n        } finally {\n          latch.countDown();\n        }\n      }\n    });\n    try {\n      latch.await();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  private final class EchoCompletionHandler implements CompletionHandler<Integer, ByteBuffer> {\n    private final AsynchronousSocketChannel channel;\n\n    EchoCompletionHandler(AsynchronousSocketChannel channel) {\n      this.channel = channel;\n    }\n\n    @Override\n    public void completed(Integer result, ByteBuffer buffer) {\n      buffer.flip();\n      // Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written\n      channel.write(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n        @Override\n        public void completed(Integer result, ByteBuffer buffer) {\n          if (buffer.hasRemaining()) {\n            // Trigger again a write operation if something is left in the ByteBuffer\n            channel.write(buffer, buffer, this);\n          } else {\n            buffer.compact();\n            // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n            channel.read(buffer, buffer, EchoCompletionHandler.this);\n          }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n          try {\n            channel.close();\n          } catch (IOException e) {\n            // ingnore on close\n          }\n        }\n      });\n    }\n\n    @Override\n    public void failed(Throwable exc, ByteBuffer attachment) {\n      try {\n        channel.close();\n      } catch (IOException e) {\n        // ingnore on close\n      }\n    }\n  }\n}\n\n```\n\n# 实现原理\n说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。\n\n说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。\n\n# 场景分析\nBIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。\nNIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。\nAIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。\n另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。\n","source":"_posts/Java中的IO技术：BIO,NIO,AIO.md","raw":"---\ntitle: Java中的IO技术：BIO,NIO,AIO\ndate: 2016-08-10\ncomments: true\ncategories: Java\ntoc: true\n---\n\n# 同步异步、阻塞非阻塞概念\n同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。\n<!--more-->\n## 同步与异步\n同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;\n![同步](02.png)\n``` java\n\nInputStream in = new FileInputStream(licenseDir);\nBufferedReader br = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\nString data = null;\nStringBuffer encodedData = new StringBuffer();\nwhile ((data = br.readLine()) != null) {\n\tencodedData.append(data);\n}\nin.close();\nbr.close();\n\n```\n异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。\n![异步](01.png)\n``` java\npublic class Demo1 {\n\n    static Thread current;\n\n    public static void main(String[] args) throws IOException {\n        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths\n                .get(\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"));\n        ByteBuffer byteBuffer = ByteBuffer.allocate(16 * 1024);\n        current = Thread.currentThread();\n        afc.read(byteBuffer, 0, null, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                System.out.println(\"Bytes Read = \" + result);\n                //中断主线程挂起 \n                current.interrupt();\n            }\n            @Override\n            public void failed(Throwable exc, Object attachment) {\n                System.out.println(exc.getCause());\n                current.interrupt();\n            }\n        });\n        System.out.println(\"Waiting for completion...\");\n        try {\n            current.join();//挂起现成 等待 消息读取完成 \n        } catch (InterruptedException e) {\n        }\n\n        afc.close();\n        byteBuffer.flip();\n        while(byteBuffer.hasRemaining()){ \n            System.out.print((char) byteBuffer.get()); // read 1 byte at a time \n        } \n    }\n\n}\n```\n## 阻塞非阻塞\n阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；\n非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；\n\n\n# BIO\n在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。\n```java\npublic class PlainEchoServer {\n  public void serve(int port) throws IOException {\n    final ServerSocket socket = new ServerSocket(port); //Bind server to port\n    try {\n      while (true) {\n        //Block until new client connection is accepted\n        final Socket clientSocket = socket.accept();\n        System.out.println(\"Accepted connection from \" + clientSocket);\n        //Create new thread to handle client connection\n        //KeepAlive 设置为true表示保持长连接Socket 底层会定期发送心跳包检查连接是否中断。\n        clientSocket.setKeepAlive(true);\n        //设置超过指定时间没有数据可读的时候read立即返回并抛出异常SocketTimeoutException\n        socket.setSoTimeout(1000);\n        new Thread(new Runnable() {\n          @Override\n          public void run() {\n            try {\n                while(true){\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                    PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);\n                    //Read data from client and write it back\n                    //如果此时没有数据可读将一直阻塞在read函数上除非设置socket.setSoTimeout()，\n                    //超过过期时间抛出异常SocketTimeoutException\n                    while (true) {\n                      writer.println(reader.readLine());\n                      writer.flush();\n                    }\n                }\n            } catch (IOException e) {\n              e.printStackTrace();\n              try {\n                clientSocket.close();\n              } catch (IOException ex) {\n                // ignore on close\n              }\n            }\n          }\n        }).start();\n        //Start thread\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n```\n# NIO\n在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。\n\nNIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。\n```java\npublic class PlainNioEchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    ServerSocketChannel serverChannel = ServerSocketChannel.open();\n    ServerSocket ss = serverChannel.socket();\n    InetSocketAddress address = new InetSocketAddress(port);\n    //Bind server to port\n    ss.bind(address);\n    serverChannel.configureBlocking(false);\n    Selector selector = Selector.open();\n    //Register the channel with the selector to be interested in new Client connections that get accepted\n    serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n    while (true) {\n      try {\n        //Block until something is selected\n        selector.select();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        //handle in a proper way\n        break;\n      }\n      //Get all SelectedKey instances\n      Set<SelectionKey> readyKeys = selector.selectedKeys();\n      Iterator<SelectionKey> iterator = readyKeys.iterator();\n      while (iterator.hasNext()) {\n        SelectionKey key = (SelectionKey) iterator.next();\n        //Remove the SelectedKey from the iterator\n        iterator.remove();\n        try {\n          if (key.isAcceptable()) {\n            ServerSocketChannel server = (ServerSocketChannel) key.channel();\n            //Accept the client connection\n            SocketChannel client = server.accept();\n            System.out.println(\"Accepted connection from \" + client);\n            client.configureBlocking(false);\n            //Register connection to selector and set ByteBuffer\n            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(100));\n          }\n          //Check for SelectedKey for read\n          if (key.isReadable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            //Read data to ByteBuffer\n            client.read(output);\n          }\n          //Check for SelectedKey for write\n          if (key.isWritable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            output.flip();\n            //Write data from ByteBuffer to channel\n            client.write(output);\n            output.compact();\n          }\n        } catch (IOException ex) {\n          key.cancel();\n          try {\n            key.channel().close();\n          } catch (IOException cex) {\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n# AIO\n\n当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。\n\n即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。\n\n在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：\n•AsynchronousSocketChannel\n•AsynchronousServerSocketChannel\n•AsynchronousFileChannel\n•AsynchronousDatagramChannel\n\n其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。\n```java\npublic class PlainNio2EchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    final AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();\n    InetSocketAddress address = new InetSocketAddress(port);\n    // Bind Server to port\n    serverChannel.bind(address);\n    final CountDownLatch latch = new CountDownLatch(1);\n    // Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.\n    serverChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() {\n      @Override\n      public void completed(final AsynchronousSocketChannel channel, Object attachment) {\n        // Again accept new Client connections\n        serverChannel.accept(null, this);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n        channel.read(buffer, buffer, new EchoCompletionHandler(channel));\n      }\n\n      @Override\n      public void failed(Throwable throwable, Object attachment) {\n        try {\n          // Close the socket on error\n          serverChannel.close();\n        } catch (IOException e) {\n          // ingnore on close\n        } finally {\n          latch.countDown();\n        }\n      }\n    });\n    try {\n      latch.await();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  private final class EchoCompletionHandler implements CompletionHandler<Integer, ByteBuffer> {\n    private final AsynchronousSocketChannel channel;\n\n    EchoCompletionHandler(AsynchronousSocketChannel channel) {\n      this.channel = channel;\n    }\n\n    @Override\n    public void completed(Integer result, ByteBuffer buffer) {\n      buffer.flip();\n      // Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written\n      channel.write(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n        @Override\n        public void completed(Integer result, ByteBuffer buffer) {\n          if (buffer.hasRemaining()) {\n            // Trigger again a write operation if something is left in the ByteBuffer\n            channel.write(buffer, buffer, this);\n          } else {\n            buffer.compact();\n            // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n            channel.read(buffer, buffer, EchoCompletionHandler.this);\n          }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n          try {\n            channel.close();\n          } catch (IOException e) {\n            // ingnore on close\n          }\n        }\n      });\n    }\n\n    @Override\n    public void failed(Throwable exc, ByteBuffer attachment) {\n      try {\n        channel.close();\n      } catch (IOException e) {\n        // ingnore on close\n      }\n    }\n  }\n}\n\n```\n\n# 实现原理\n说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。\n\n说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。\n\n# 场景分析\nBIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。\nNIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。\nAIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。\n另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。\n","slug":"Java中的IO技术：BIO,NIO,AIO","published":1,"updated":"2021-06-25T02:00:17.943Z","layout":"post","photos":[],"link":"","_id":"ckqjatol1000sqkl5mmor3q7d","content":"<h1 id=\"同步异步、阻塞非阻塞概念\"><a href=\"#同步异步、阻塞非阻塞概念\" class=\"headerlink\" title=\"同步异步、阻塞非阻塞概念\"></a>同步异步、阻塞非阻塞概念</h1><p>同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。<br><a id=\"more\"></a></p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;<br><img src=\"02.png\" alt=\"同步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">InputStream in = <span class=\"keyword\">new</span> FileInputStream(licenseDir);</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in,<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">String data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">StringBuffer encodedData = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((data = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tencodedData.append(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">in.close();</span><br><span class=\"line\">br.close();</span><br></pre></td></tr></table></figure></p>\n<p>异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。<br><img src=\"01.png\" alt=\"异步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread current;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths</span><br><span class=\"line\">                .get(<span class=\"string\">\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"</span>));</span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">16</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">        current = Thread.currentThread();</span><br><span class=\"line\">        afc.read(byteBuffer, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Bytes Read = \"</span> + result);</span><br><span class=\"line\">                <span class=\"comment\">//中断主线程挂起 </span></span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(exc.getCause());</span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Waiting for completion...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            current.join();<span class=\"comment\">//挂起现成 等待 消息读取完成 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        afc.close();</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(byteBuffer.hasRemaining())&#123; </span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>) byteBuffer.get()); <span class=\"comment\">// read 1 byte at a time </span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h2><p>阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；<br>非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；</p>\n<h1 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h1><p>在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ServerSocket socket = <span class=\"keyword\">new</span> ServerSocket(port); <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until new client connection is accepted</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Socket clientSocket = socket.accept();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + clientSocket);</span><br><span class=\"line\">        <span class=\"comment\">//Create new thread to handle client connection</span></span><br><span class=\"line\">        <span class=\"comment\">//KeepAlive 设置为true表示保持长连接Socket 底层会定期发送心跳包检查连接是否中断。</span></span><br><span class=\"line\">        clientSocket.setKeepAlive(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置超过指定时间没有数据可读的时候read立即返回并抛出异常SocketTimeoutException</span></span><br><span class=\"line\">        socket.setSoTimeout(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class=\"line\">                    PrintWriter writer = <span class=\"keyword\">new</span> PrintWriter(clientSocket.getOutputStream(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//Read data from client and write it back</span></span><br><span class=\"line\">                    <span class=\"comment\">//如果此时没有数据可读将一直阻塞在read函数上除非设置socket.setSoTimeout()，</span></span><br><span class=\"line\">                    <span class=\"comment\">//超过过期时间抛出异常SocketTimeoutException</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                      writer.println(reader.readLine());</span><br><span class=\"line\">                      writer.flush();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                clientSocket.close();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore on close</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">//Start thread</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。</p>\n<p>NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNioEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class=\"line\">    ServerSocket ss = serverChannel.socket();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    ss.bind(address);</span><br><span class=\"line\">    serverChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    Selector selector = Selector.open();</span><br><span class=\"line\">    <span class=\"comment\">//Register the channel with the selector to be interested in new Client connections that get accepted</span></span><br><span class=\"line\">    serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until something is selected</span></span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"comment\">//handle in a proper way</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//Get all SelectedKey instances</span></span><br><span class=\"line\">      Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">      Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        SelectionKey key = (SelectionKey) iterator.next();</span><br><span class=\"line\">        <span class=\"comment\">//Remove the SelectedKey from the iterator</span></span><br><span class=\"line\">        iterator.remove();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">            ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//Accept the client connection</span></span><br><span class=\"line\">            SocketChannel client = server.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + client);</span><br><span class=\"line\">            client.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Register connection to selector and set ByteBuffer</span></span><br><span class=\"line\">            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(<span class=\"number\">100</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for read</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            <span class=\"comment\">//Read data to ByteBuffer</span></span><br><span class=\"line\">            client.read(output);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for write</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isWritable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            output.flip();</span><br><span class=\"line\">            <span class=\"comment\">//Write data from ByteBuffer to channel</span></span><br><span class=\"line\">            client.write(output);</span><br><span class=\"line\">            output.compact();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">          key.cancel();</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            key.channel().close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException cex) &#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h1><p>当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。</p>\n<p>即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。</p>\n<p>在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：<br>•AsynchronousSocketChannel<br>•AsynchronousServerSocketChannel<br>•AsynchronousFileChannel<br>•AsynchronousDatagramChannel</p>\n<p>其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNio2EchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">// Bind Server to port</span></span><br><span class=\"line\">    serverChannel.bind(address);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.</span></span><br><span class=\"line\">    serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(<span class=\"keyword\">final</span> AsynchronousSocketChannel channel, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Again accept new Client connections</span></span><br><span class=\"line\">        serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">        channel.read(buffer, buffer, <span class=\"keyword\">new</span> EchoCompletionHandler(channel));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable throwable, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Close the socket on error</span></span><br><span class=\"line\">          serverChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          latch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      latch.await();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchoCompletionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompletionHandler</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">ByteBuffer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AsynchronousSocketChannel channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    EchoCompletionHandler(AsynchronousSocketChannel channel) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.channel = channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">      buffer.flip();</span><br><span class=\"line\">      <span class=\"comment\">// Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written</span></span><br><span class=\"line\">      channel.write(buffer, buffer, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Trigger again a write operation if something is left in the ByteBuffer</span></span><br><span class=\"line\">            channel.write(buffer, buffer, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buffer.compact();</span><br><span class=\"line\">            <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">            channel.read(buffer, buffer, EchoCompletionHandler.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            channel.close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h1><p>说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。</p>\n<p>说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。</p>\n<h1 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h1><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。<br>另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"同步异步、阻塞非阻塞概念\"><a href=\"#同步异步、阻塞非阻塞概念\" class=\"headerlink\" title=\"同步异步、阻塞非阻塞概念\"></a>同步异步、阻塞非阻塞概念</h1><p>同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。<br>","more":"</p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;<br><img src=\"02.png\" alt=\"同步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">InputStream in = <span class=\"keyword\">new</span> FileInputStream(licenseDir);</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in,<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">String data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">StringBuffer encodedData = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((data = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tencodedData.append(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">in.close();</span><br><span class=\"line\">br.close();</span><br></pre></td></tr></table></figure></p>\n<p>异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。<br><img src=\"01.png\" alt=\"异步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread current;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths</span><br><span class=\"line\">                .get(<span class=\"string\">\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"</span>));</span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">16</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">        current = Thread.currentThread();</span><br><span class=\"line\">        afc.read(byteBuffer, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Bytes Read = \"</span> + result);</span><br><span class=\"line\">                <span class=\"comment\">//中断主线程挂起 </span></span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(exc.getCause());</span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Waiting for completion...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            current.join();<span class=\"comment\">//挂起现成 等待 消息读取完成 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        afc.close();</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(byteBuffer.hasRemaining())&#123; </span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>) byteBuffer.get()); <span class=\"comment\">// read 1 byte at a time </span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h2><p>阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；<br>非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；</p>\n<h1 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h1><p>在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ServerSocket socket = <span class=\"keyword\">new</span> ServerSocket(port); <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until new client connection is accepted</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Socket clientSocket = socket.accept();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + clientSocket);</span><br><span class=\"line\">        <span class=\"comment\">//Create new thread to handle client connection</span></span><br><span class=\"line\">        <span class=\"comment\">//KeepAlive 设置为true表示保持长连接Socket 底层会定期发送心跳包检查连接是否中断。</span></span><br><span class=\"line\">        clientSocket.setKeepAlive(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置超过指定时间没有数据可读的时候read立即返回并抛出异常SocketTimeoutException</span></span><br><span class=\"line\">        socket.setSoTimeout(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class=\"line\">                    PrintWriter writer = <span class=\"keyword\">new</span> PrintWriter(clientSocket.getOutputStream(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//Read data from client and write it back</span></span><br><span class=\"line\">                    <span class=\"comment\">//如果此时没有数据可读将一直阻塞在read函数上除非设置socket.setSoTimeout()，</span></span><br><span class=\"line\">                    <span class=\"comment\">//超过过期时间抛出异常SocketTimeoutException</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                      writer.println(reader.readLine());</span><br><span class=\"line\">                      writer.flush();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                clientSocket.close();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore on close</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">//Start thread</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。</p>\n<p>NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNioEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class=\"line\">    ServerSocket ss = serverChannel.socket();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    ss.bind(address);</span><br><span class=\"line\">    serverChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    Selector selector = Selector.open();</span><br><span class=\"line\">    <span class=\"comment\">//Register the channel with the selector to be interested in new Client connections that get accepted</span></span><br><span class=\"line\">    serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until something is selected</span></span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"comment\">//handle in a proper way</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//Get all SelectedKey instances</span></span><br><span class=\"line\">      Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">      Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        SelectionKey key = (SelectionKey) iterator.next();</span><br><span class=\"line\">        <span class=\"comment\">//Remove the SelectedKey from the iterator</span></span><br><span class=\"line\">        iterator.remove();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">            ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//Accept the client connection</span></span><br><span class=\"line\">            SocketChannel client = server.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + client);</span><br><span class=\"line\">            client.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Register connection to selector and set ByteBuffer</span></span><br><span class=\"line\">            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(<span class=\"number\">100</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for read</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            <span class=\"comment\">//Read data to ByteBuffer</span></span><br><span class=\"line\">            client.read(output);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for write</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isWritable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            output.flip();</span><br><span class=\"line\">            <span class=\"comment\">//Write data from ByteBuffer to channel</span></span><br><span class=\"line\">            client.write(output);</span><br><span class=\"line\">            output.compact();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">          key.cancel();</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            key.channel().close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException cex) &#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h1><p>当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。</p>\n<p>即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。</p>\n<p>在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：<br>•AsynchronousSocketChannel<br>•AsynchronousServerSocketChannel<br>•AsynchronousFileChannel<br>•AsynchronousDatagramChannel</p>\n<p>其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNio2EchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">// Bind Server to port</span></span><br><span class=\"line\">    serverChannel.bind(address);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.</span></span><br><span class=\"line\">    serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(<span class=\"keyword\">final</span> AsynchronousSocketChannel channel, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Again accept new Client connections</span></span><br><span class=\"line\">        serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">        channel.read(buffer, buffer, <span class=\"keyword\">new</span> EchoCompletionHandler(channel));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable throwable, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Close the socket on error</span></span><br><span class=\"line\">          serverChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          latch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      latch.await();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchoCompletionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompletionHandler</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">ByteBuffer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AsynchronousSocketChannel channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    EchoCompletionHandler(AsynchronousSocketChannel channel) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.channel = channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">      buffer.flip();</span><br><span class=\"line\">      <span class=\"comment\">// Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written</span></span><br><span class=\"line\">      channel.write(buffer, buffer, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Trigger again a write operation if something is left in the ByteBuffer</span></span><br><span class=\"line\">            channel.write(buffer, buffer, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buffer.compact();</span><br><span class=\"line\">            <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">            channel.read(buffer, buffer, EchoCompletionHandler.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            channel.close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h1><p>说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。</p>\n<p>说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。</p>\n<h1 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h1><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。<br>另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。</p>"},{"title":"Java并发编程-线程饥饿死锁","date":"2017-10-16T13:43:27.000Z","comments":1,"toc":false,"_content":"\n  最近公司项目上遇到一个问题，同事反映服务一直没有收到回调（异步接口），查看日志没看到任何的异常信息，重启服务后偶尔又出现，通过分析可能存在三种情况：第一种是数据库发生死锁了，第二种情况线程死锁。第三种情况redis连接池为空一直在等待空闲的资源\n  使用查看数据库锁查询语句查询没有任何锁，那就只可能存在第二、第三种情况了。\n  \n<!--more-->\n  其实第一、二、三种情况都可以通过线程的堆栈信息分析得出。\n  输出线程堆栈信息\n```java\njstack -l pid > thread.stack\n```\n发现线程池中所有的线程状态都是waiting。是什么原因导致了线程的状态都是waiting呢，原来是任务依赖于其他的任务，任务提交到了同一个Executor中，并且等待这个被提交任务的结果，引发死锁。第二个任务停留在工作队列中，并等待第一个任务的完成，而第一个任务又无法完成，因为他在等待第二个任务的完成。在更大的线程池中，如果所有正在执行任务的线程都由于等待其他仍处于工作队列中的任务二阻塞，那么会发生同样的问题。这种现象被称为线程饥饿死锁。\n\n```java\npublic class ThreadDeadlock{\n\n    ExecutorService exec = Executors.newSingleThreadExecutor();\n\t\n    private AtomicInteger index = new AtomicInteger();\n\t\n    public class Task implements Callable<String>{\n\n        public String call() throws Exception{\n            return getName();\n        }\n    }\n\t\n    public String service(){\n        Future<String> future=exec.submit(new Task());\n        return future.get();\n    }\n\t\n    public String getName(){\n        if(index.getAndIncrement()==0){\n            return service();\n        }\n        return \"hello world\";\n    }\n\t\n}\n```\n\n**引发思考-任务与执行策略之间的隐性耦合**\n\n我们已经知道，Executor框架可以将任务的提交与任务的执行策略解耦开来。就像许多对复杂过程的解耦操作那样，这种论断多少有些言过其实。虽然Executor框架为制定和修改执行策略都提供了相当大的灵活性，但并非所有的任务都能适用所有的执行策略。有些类型的任务需要明确地执行策略\n\n**依赖性任务**\n大多数行为正确的任务都是独立的：它们不依赖与其他任务的执行时序。执行结果或其他效果。当在线程池中执行独立的认为是，可以随意地改变线程池的大小和配置，这些修改只会对执行性能产生影响。然而，如果提交给线程池的任务需要依赖其他的任务，那么就隐含地给执行策略带来了约束，此时必须小心地维持这些执行策略以避免产生活跃性的问题。除非线程池无限大，否则将可能造成死锁。\n\n\n\n \n ","source":"_posts/Java并发编程-线程饥饿死锁.md","raw":"---\ntitle: Java并发编程-线程饥饿死锁\ndate: 2017-10-16 21:43:27 \ncomments: true \ncategories: Java\ntoc: false\n---\n\n  最近公司项目上遇到一个问题，同事反映服务一直没有收到回调（异步接口），查看日志没看到任何的异常信息，重启服务后偶尔又出现，通过分析可能存在三种情况：第一种是数据库发生死锁了，第二种情况线程死锁。第三种情况redis连接池为空一直在等待空闲的资源\n  使用查看数据库锁查询语句查询没有任何锁，那就只可能存在第二、第三种情况了。\n  \n<!--more-->\n  其实第一、二、三种情况都可以通过线程的堆栈信息分析得出。\n  输出线程堆栈信息\n```java\njstack -l pid > thread.stack\n```\n发现线程池中所有的线程状态都是waiting。是什么原因导致了线程的状态都是waiting呢，原来是任务依赖于其他的任务，任务提交到了同一个Executor中，并且等待这个被提交任务的结果，引发死锁。第二个任务停留在工作队列中，并等待第一个任务的完成，而第一个任务又无法完成，因为他在等待第二个任务的完成。在更大的线程池中，如果所有正在执行任务的线程都由于等待其他仍处于工作队列中的任务二阻塞，那么会发生同样的问题。这种现象被称为线程饥饿死锁。\n\n```java\npublic class ThreadDeadlock{\n\n    ExecutorService exec = Executors.newSingleThreadExecutor();\n\t\n    private AtomicInteger index = new AtomicInteger();\n\t\n    public class Task implements Callable<String>{\n\n        public String call() throws Exception{\n            return getName();\n        }\n    }\n\t\n    public String service(){\n        Future<String> future=exec.submit(new Task());\n        return future.get();\n    }\n\t\n    public String getName(){\n        if(index.getAndIncrement()==0){\n            return service();\n        }\n        return \"hello world\";\n    }\n\t\n}\n```\n\n**引发思考-任务与执行策略之间的隐性耦合**\n\n我们已经知道，Executor框架可以将任务的提交与任务的执行策略解耦开来。就像许多对复杂过程的解耦操作那样，这种论断多少有些言过其实。虽然Executor框架为制定和修改执行策略都提供了相当大的灵活性，但并非所有的任务都能适用所有的执行策略。有些类型的任务需要明确地执行策略\n\n**依赖性任务**\n大多数行为正确的任务都是独立的：它们不依赖与其他任务的执行时序。执行结果或其他效果。当在线程池中执行独立的认为是，可以随意地改变线程池的大小和配置，这些修改只会对执行性能产生影响。然而，如果提交给线程池的任务需要依赖其他的任务，那么就隐含地给执行策略带来了约束，此时必须小心地维持这些执行策略以避免产生活跃性的问题。除非线程池无限大，否则将可能造成死锁。\n\n\n\n \n ","slug":"Java并发编程-线程饥饿死锁","published":1,"updated":"2021-06-25T02:00:17.975Z","layout":"post","photos":[],"link":"","_id":"ckqjatol3000uqkl5hr3uln8g","content":"<p>  最近公司项目上遇到一个问题，同事反映服务一直没有收到回调（异步接口），查看日志没看到任何的异常信息，重启服务后偶尔又出现，通过分析可能存在三种情况：第一种是数据库发生死锁了，第二种情况线程死锁。第三种情况redis连接池为空一直在等待空闲的资源<br>  使用查看数据库锁查询语句查询没有任何锁，那就只可能存在第二、第三种情况了。</p>\n<a id=\"more\"></a>\n<p>  其实第一、二、三种情况都可以通过线程的堆栈信息分析得出。<br>  输出线程堆栈信息<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack -l pid &gt; thread.stack</span><br></pre></td></tr></table></figure></p>\n<p>发现线程池中所有的线程状态都是waiting。是什么原因导致了线程的状态都是waiting呢，原来是任务依赖于其他的任务，任务提交到了同一个Executor中，并且等待这个被提交任务的结果，引发死锁。第二个任务停留在工作队列中，并等待第一个任务的完成，而第一个任务又无法完成，因为他在等待第二个任务的完成。在更大的线程池中，如果所有正在执行任务的线程都由于等待其他仍处于工作队列中的任务二阻塞，那么会发生同样的问题。这种现象被称为线程饥饿死锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDeadlock</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExecutorService exec = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger index = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">service</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Future&lt;String&gt; future=exec.submit(<span class=\"keyword\">new</span> Task());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index.getAndIncrement()==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> service();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>引发思考-任务与执行策略之间的隐性耦合</strong></p>\n<p>我们已经知道，Executor框架可以将任务的提交与任务的执行策略解耦开来。就像许多对复杂过程的解耦操作那样，这种论断多少有些言过其实。虽然Executor框架为制定和修改执行策略都提供了相当大的灵活性，但并非所有的任务都能适用所有的执行策略。有些类型的任务需要明确地执行策略</p>\n<p><strong>依赖性任务</strong><br>大多数行为正确的任务都是独立的：它们不依赖与其他任务的执行时序。执行结果或其他效果。当在线程池中执行独立的认为是，可以随意地改变线程池的大小和配置，这些修改只会对执行性能产生影响。然而，如果提交给线程池的任务需要依赖其他的任务，那么就隐含地给执行策略带来了约束，此时必须小心地维持这些执行策略以避免产生活跃性的问题。除非线程池无限大，否则将可能造成死锁。</p>\n","site":{"data":{}},"excerpt":"<p>  最近公司项目上遇到一个问题，同事反映服务一直没有收到回调（异步接口），查看日志没看到任何的异常信息，重启服务后偶尔又出现，通过分析可能存在三种情况：第一种是数据库发生死锁了，第二种情况线程死锁。第三种情况redis连接池为空一直在等待空闲的资源<br>  使用查看数据库锁查询语句查询没有任何锁，那就只可能存在第二、第三种情况了。</p>","more":"<p>  其实第一、二、三种情况都可以通过线程的堆栈信息分析得出。<br>  输出线程堆栈信息<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack -l pid &gt; thread.stack</span><br></pre></td></tr></table></figure></p>\n<p>发现线程池中所有的线程状态都是waiting。是什么原因导致了线程的状态都是waiting呢，原来是任务依赖于其他的任务，任务提交到了同一个Executor中，并且等待这个被提交任务的结果，引发死锁。第二个任务停留在工作队列中，并等待第一个任务的完成，而第一个任务又无法完成，因为他在等待第二个任务的完成。在更大的线程池中，如果所有正在执行任务的线程都由于等待其他仍处于工作队列中的任务二阻塞，那么会发生同样的问题。这种现象被称为线程饥饿死锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDeadlock</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExecutorService exec = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger index = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">service</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Future&lt;String&gt; future=exec.submit(<span class=\"keyword\">new</span> Task());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> future.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index.getAndIncrement()==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> service();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>引发思考-任务与执行策略之间的隐性耦合</strong></p>\n<p>我们已经知道，Executor框架可以将任务的提交与任务的执行策略解耦开来。就像许多对复杂过程的解耦操作那样，这种论断多少有些言过其实。虽然Executor框架为制定和修改执行策略都提供了相当大的灵活性，但并非所有的任务都能适用所有的执行策略。有些类型的任务需要明确地执行策略</p>\n<p><strong>依赖性任务</strong><br>大多数行为正确的任务都是独立的：它们不依赖与其他任务的执行时序。执行结果或其他效果。当在线程池中执行独立的认为是，可以随意地改变线程池的大小和配置，这些修改只会对执行性能产生影响。然而，如果提交给线程池的任务需要依赖其他的任务，那么就隐含地给执行策略带来了约束，此时必须小心地维持这些执行策略以避免产生活跃性的问题。除非线程池无限大，否则将可能造成死锁。</p>"},{"title":"Java开发过程中异常汇总及解决办法","date":"2014-09-04T13:28:01.000Z","comments":1,"toc":false,"_content":"\n***org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null***\n\n异常详细描叙<!--more-->\n![JasperException](cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg)\n\n***环境： ***操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***org.apache.jasper.JasperException:Unable to compile class for JSP***\n\n异常详细描叙\n![JasperException](b03533fa828ba61e7fad2a384234970a304e5962.jpg)\n***环境：***  操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘***\n\n问题详细描述\n![无法读取文件或磁盘](5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg)\n***解决办法***：在下载的方法中添加\n```java\t\nif(filetype.indexOf(\".docx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\");\n}elseif(filetype.indexOf(\".xlsx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n}elseif(filetype.indexOf(\".pptx\") ==0) {    \n    response.setContentType(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\");\n}\n```\n在web.xml中添加\n ```xml\n <mime-mapping>\n  <extension>docx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>xlsx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>pptx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.presentationml.presentation</mime-type>\n </mime-mapping> \n ```\n \n ------------------------\n \n***java.lang.IllegalArgumentException: Illegal group reference***\n \n异常详细描叙\n ```\n2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference\n2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)\n```\n***异常产生原因： *** 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致\n***解决办法： ***将字符“$”转义 “\\\\$” 或使用StringUtils的.replaceAll方法\n \n------------------------\n***org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had\"[.....]\"***\n \n详细描述\n![BSFException](7aec54e736d12f2e1dbd40774cc2d56285356869.jpg)\n***解决办法：*** 将jdk1.5换成1.6\n\n------------------------\n\n***java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000***\n\n详细描述\n![SQLException](58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg)\n***异常分析：***oracle 查询 in（）查询列表树最大支持1000\n***解决办法：*** 使用where col in (1...1000) or col in (1001....)\n\n------------------------\n\n***点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令***\n\n***环境：***windows2008\n***解决办法：*** 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;\n\n------------------------\n\n***通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题***\n\n***解决办法：*** \n1、linux\n/etc/hosts 注释掉文件中的 # ::1 localhost 这一行\n2、windows\nC:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行","source":"_posts/Java开发过程中异常汇总及解决办法.md","raw":"---\ntitle: Java开发过程中异常汇总及解决办法\ndate: 2014-09-04 21:28:01\ncomments: true\ncategories: Java\ntoc: false \n---\n\n***org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null***\n\n异常详细描叙<!--more-->\n![JasperException](cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg)\n\n***环境： ***操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***org.apache.jasper.JasperException:Unable to compile class for JSP***\n\n异常详细描叙\n![JasperException](b03533fa828ba61e7fad2a384234970a304e5962.jpg)\n***环境：***  操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘***\n\n问题详细描述\n![无法读取文件或磁盘](5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg)\n***解决办法***：在下载的方法中添加\n```java\t\nif(filetype.indexOf(\".docx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\");\n}elseif(filetype.indexOf(\".xlsx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n}elseif(filetype.indexOf(\".pptx\") ==0) {    \n    response.setContentType(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\");\n}\n```\n在web.xml中添加\n ```xml\n <mime-mapping>\n  <extension>docx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>xlsx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>pptx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.presentationml.presentation</mime-type>\n </mime-mapping> \n ```\n \n ------------------------\n \n***java.lang.IllegalArgumentException: Illegal group reference***\n \n异常详细描叙\n ```\n2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference\n2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)\n```\n***异常产生原因： *** 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致\n***解决办法： ***将字符“$”转义 “\\\\$” 或使用StringUtils的.replaceAll方法\n \n------------------------\n***org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had\"[.....]\"***\n \n详细描述\n![BSFException](7aec54e736d12f2e1dbd40774cc2d56285356869.jpg)\n***解决办法：*** 将jdk1.5换成1.6\n\n------------------------\n\n***java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000***\n\n详细描述\n![SQLException](58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg)\n***异常分析：***oracle 查询 in（）查询列表树最大支持1000\n***解决办法：*** 使用where col in (1...1000) or col in (1001....)\n\n------------------------\n\n***点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令***\n\n***环境：***windows2008\n***解决办法：*** 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;\n\n------------------------\n\n***通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题***\n\n***解决办法：*** \n1、linux\n/etc/hosts 注释掉文件中的 # ::1 localhost 这一行\n2、windows\nC:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行","slug":"Java开发过程中异常汇总及解决办法","published":1,"updated":"2021-06-25T02:00:17.982Z","layout":"post","photos":[],"link":"","_id":"ckqjatol5000wqkl5nen2qdpp","content":"<p><strong><em>org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null</em></strong></p>\n<p>异常详细描叙<a id=\"more\"></a><br><img src=\"cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg\" alt=\"JasperException\"></p>\n<p><strong><em>环境： </em></strong>操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>org.apache.jasper.JasperException:Unable to compile class for JSP</em></strong></p>\n<p>异常详细描叙<br><img src=\"b03533fa828ba61e7fad2a384234970a304e5962.jpg\" alt=\"JasperException\"><br><strong><em>环境：</em></strong>  操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘</em></strong></p>\n<p>问题详细描述<br><img src=\"5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg\" alt=\"无法读取文件或磁盘\"><br><strong><em>解决办法</em></strong>：在下载的方法中添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(filetype.indexOf(<span class=\"string\">\".docx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".xlsx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".pptx\"</span>) ==<span class=\"number\">0</span>) &#123;    </span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web.xml中添加<br> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>docx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.wordprocessingml.document<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>xlsx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>pptx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.presentationml.presentation<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>java.lang.IllegalArgumentException: Illegal group reference</em></strong></p>\n<p>异常详细描叙<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference</span><br><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>异常产生原因： </em></strong> 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致<br><strong><em>解决办法： </em></strong>将字符“$”转义 “\\$” 或使用StringUtils的.replaceAll方法</p>\n<hr>\n<p><strong><em>org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had”[…..]”</em></strong></p>\n<p>详细描述<br><img src=\"7aec54e736d12f2e1dbd40774cc2d56285356869.jpg\" alt=\"BSFException\"><br><strong><em>解决办法：</em></strong> 将jdk1.5换成1.6</p>\n<hr>\n<p><strong><em>java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000</em></strong></p>\n<p>详细描述<br><img src=\"58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg\" alt=\"SQLException\"><br><strong><em>异常分析：</em></strong>oracle 查询 in（）查询列表树最大支持1000<br><strong><em>解决办法：</em></strong> 使用where col in (1…1000) or col in (1001….)</p>\n<hr>\n<p><strong><em>点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令</em></strong></p>\n<p><strong><em>环境：</em></strong>windows2008<br><strong><em>解决办法：</em></strong> 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;</p>\n<hr>\n<p><strong><em>通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题</em></strong></p>\n<p><strong><em>解决办法：</em></strong><br>1、linux<br>/etc/hosts 注释掉文件中的 # ::1 localhost 这一行<br>2、windows<br>C:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行</p>\n","site":{"data":{}},"excerpt":"<p><strong><em>org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null</em></strong></p>\n<p>异常详细描叙","more":"<br><img src=\"cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg\" alt=\"JasperException\"></p>\n<p><strong><em>环境： </em></strong>操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>org.apache.jasper.JasperException:Unable to compile class for JSP</em></strong></p>\n<p>异常详细描叙<br><img src=\"b03533fa828ba61e7fad2a384234970a304e5962.jpg\" alt=\"JasperException\"><br><strong><em>环境：</em></strong>  操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘</em></strong></p>\n<p>问题详细描述<br><img src=\"5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg\" alt=\"无法读取文件或磁盘\"><br><strong><em>解决办法</em></strong>：在下载的方法中添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(filetype.indexOf(<span class=\"string\">\".docx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".xlsx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".pptx\"</span>) ==<span class=\"number\">0</span>) &#123;    </span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web.xml中添加<br> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>docx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.wordprocessingml.document<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>xlsx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>pptx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.presentationml.presentation<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>java.lang.IllegalArgumentException: Illegal group reference</em></strong></p>\n<p>异常详细描叙<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference</span><br><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>异常产生原因： </em></strong> 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致<br><strong><em>解决办法： </em></strong>将字符“$”转义 “\\$” 或使用StringUtils的.replaceAll方法</p>\n<hr>\n<p><strong><em>org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had”[…..]”</em></strong></p>\n<p>详细描述<br><img src=\"7aec54e736d12f2e1dbd40774cc2d56285356869.jpg\" alt=\"BSFException\"><br><strong><em>解决办法：</em></strong> 将jdk1.5换成1.6</p>\n<hr>\n<p><strong><em>java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000</em></strong></p>\n<p>详细描述<br><img src=\"58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg\" alt=\"SQLException\"><br><strong><em>异常分析：</em></strong>oracle 查询 in（）查询列表树最大支持1000<br><strong><em>解决办法：</em></strong> 使用where col in (1…1000) or col in (1001….)</p>\n<hr>\n<p><strong><em>点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令</em></strong></p>\n<p><strong><em>环境：</em></strong>windows2008<br><strong><em>解决办法：</em></strong> 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;</p>\n<hr>\n<p><strong><em>通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题</em></strong></p>\n<p><strong><em>解决办法：</em></strong><br>1、linux<br>/etc/hosts 注释掉文件中的 # ::1 localhost 这一行<br>2、windows<br>C:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行</p>"},{"title":"Java设计模式之观察者模式","date":"2015-01-05T06:43:27.000Z","comments":1,"toc":true,"_content":"\n观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。\n观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。\n\t  \n<!-- more --> \n### 类图结构\n![类图结构](class.jpg)\n\n### 抽象主题\n主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。\n\n![抽象主题](003vMReezy6OWsKgs3pa3&690.jpg)\n\n### 抽象观察者\n为所有具体的观察者定义一个接口，再得到通知更新自己。\n\n![抽象观察者](003vMReezy6OWsC8Oogc8&690.jpg)\n\n### 具体主题\n保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；\n\n### 具体观察者\n保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。\n\n\n下面就使用java.util.Observable 和java.util.Observer 实现观察者模式\n\n***代码清单一：具体主题***\n```java\npackage com.design.mode;\n\nimport java.util.Observable;\npublic class Subject extends Observable{\n  private String str;\n  public void add(String str){\n\tthis.str = str;\n\t//设置change=true\n\tsetChanged();\n\t//通知所有观察者主题有改变\n\tnotifyObservers(str);\n\t//notifyObservers();\n  }\n}\n```\n\n***代码清单二：具体观察者***\n```java\npackage com.design.mode;\nimport java.util.Observable;\nimport java.util.Observer;\npublic class SubjectObserver extends Observer{\n  public SubjectObserver(Observable 0){\n\to.addObserver(this);\n  }\n\t\n  public void update(Observable o,Object arg){\n\tSystem.out.println(arg);\n  }\n}\n```\n\n***代码清单三：测试***\n```java\npackage com.design.mode;\n\npublic class Test{\n  public static void main(String[] args){\n\t//实例化主题\n\tSubject sb = new Subject();\n\t//实例化观察者\n\tSubjectObserver so = new SubjectObserver(sb);\n\tsb.add(\"hello world\");\n  }\n}\n```\n***控制台输出***\n```\nhello world\n```\n\n### 总结\n观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。\n由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。\n\n\n\n","source":"_posts/Java设计模式之观察者模式.md","raw":"---\ntitle: Java设计模式之观察者模式\ndate: 2015-01-05 14:43:27 \ncomments: true \ncategories: Java\ntoc: true\n---\n\n观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。\n观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。\n\t  \n<!-- more --> \n### 类图结构\n![类图结构](class.jpg)\n\n### 抽象主题\n主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。\n\n![抽象主题](003vMReezy6OWsKgs3pa3&690.jpg)\n\n### 抽象观察者\n为所有具体的观察者定义一个接口，再得到通知更新自己。\n\n![抽象观察者](003vMReezy6OWsC8Oogc8&690.jpg)\n\n### 具体主题\n保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；\n\n### 具体观察者\n保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。\n\n\n下面就使用java.util.Observable 和java.util.Observer 实现观察者模式\n\n***代码清单一：具体主题***\n```java\npackage com.design.mode;\n\nimport java.util.Observable;\npublic class Subject extends Observable{\n  private String str;\n  public void add(String str){\n\tthis.str = str;\n\t//设置change=true\n\tsetChanged();\n\t//通知所有观察者主题有改变\n\tnotifyObservers(str);\n\t//notifyObservers();\n  }\n}\n```\n\n***代码清单二：具体观察者***\n```java\npackage com.design.mode;\nimport java.util.Observable;\nimport java.util.Observer;\npublic class SubjectObserver extends Observer{\n  public SubjectObserver(Observable 0){\n\to.addObserver(this);\n  }\n\t\n  public void update(Observable o,Object arg){\n\tSystem.out.println(arg);\n  }\n}\n```\n\n***代码清单三：测试***\n```java\npackage com.design.mode;\n\npublic class Test{\n  public static void main(String[] args){\n\t//实例化主题\n\tSubject sb = new Subject();\n\t//实例化观察者\n\tSubjectObserver so = new SubjectObserver(sb);\n\tsb.add(\"hello world\");\n  }\n}\n```\n***控制台输出***\n```\nhello world\n```\n\n### 总结\n观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。\n由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。\n\n\n\n","slug":"Java设计模式之观察者模式","published":1,"updated":"2021-06-25T02:00:17.998Z","layout":"post","photos":[],"link":"","_id":"ckqjatol6000xqkl5nlsjfn1z","content":"<p>观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。<br>观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。</p>\n<a id=\"more\"></a> \n<h3 id=\"类图结构\"><a href=\"#类图结构\" class=\"headerlink\" title=\"类图结构\"></a>类图结构</h3><p><img src=\"class.jpg\" alt=\"类图结构\"></p>\n<h3 id=\"抽象主题\"><a href=\"#抽象主题\" class=\"headerlink\" title=\"抽象主题\"></a>抽象主题</h3><p>主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。</p>\n<p><img src=\"003vMReezy6OWsKgs3pa3&amp;690.jpg\" alt=\"抽象主题\"></p>\n<h3 id=\"抽象观察者\"><a href=\"#抽象观察者\" class=\"headerlink\" title=\"抽象观察者\"></a>抽象观察者</h3><p>为所有具体的观察者定义一个接口，再得到通知更新自己。</p>\n<p><img src=\"003vMReezy6OWsC8Oogc8&amp;690.jpg\" alt=\"抽象观察者\"></p>\n<h3 id=\"具体主题\"><a href=\"#具体主题\" class=\"headerlink\" title=\"具体主题\"></a>具体主题</h3><p>保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；</p>\n<h3 id=\"具体观察者\"><a href=\"#具体观察者\" class=\"headerlink\" title=\"具体观察者\"></a>具体观察者</h3><p>保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。</p>\n<p>下面就使用java.util.Observable 和java.util.Observer 实现观察者模式</p>\n<p><strong><em>代码清单一：具体主题</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">\t<span class=\"comment\">//设置change=true</span></span><br><span class=\"line\">\tsetChanged();</span><br><span class=\"line\">\t<span class=\"comment\">//通知所有观察者主题有改变</span></span><br><span class=\"line\">\tnotifyObservers(str);</span><br><span class=\"line\">\t<span class=\"comment\">//notifyObservers();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单二：具体观察者</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectObserver</span><span class=\"params\">(Observable <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">\to.addObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o,Object arg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单三：测试</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//实例化主题</span></span><br><span class=\"line\">\tSubject sb = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">\t<span class=\"comment\">//实例化观察者</span></span><br><span class=\"line\">\tSubjectObserver so = <span class=\"keyword\">new</span> SubjectObserver(sb);</span><br><span class=\"line\">\tsb.add(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>控制台输出</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。<br>由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。</p>\n","site":{"data":{}},"excerpt":"<p>观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。<br>观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。</p>","more":"<h3 id=\"类图结构\"><a href=\"#类图结构\" class=\"headerlink\" title=\"类图结构\"></a>类图结构</h3><p><img src=\"class.jpg\" alt=\"类图结构\"></p>\n<h3 id=\"抽象主题\"><a href=\"#抽象主题\" class=\"headerlink\" title=\"抽象主题\"></a>抽象主题</h3><p>主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。</p>\n<p><img src=\"003vMReezy6OWsKgs3pa3&amp;690.jpg\" alt=\"抽象主题\"></p>\n<h3 id=\"抽象观察者\"><a href=\"#抽象观察者\" class=\"headerlink\" title=\"抽象观察者\"></a>抽象观察者</h3><p>为所有具体的观察者定义一个接口，再得到通知更新自己。</p>\n<p><img src=\"003vMReezy6OWsC8Oogc8&amp;690.jpg\" alt=\"抽象观察者\"></p>\n<h3 id=\"具体主题\"><a href=\"#具体主题\" class=\"headerlink\" title=\"具体主题\"></a>具体主题</h3><p>保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；</p>\n<h3 id=\"具体观察者\"><a href=\"#具体观察者\" class=\"headerlink\" title=\"具体观察者\"></a>具体观察者</h3><p>保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。</p>\n<p>下面就使用java.util.Observable 和java.util.Observer 实现观察者模式</p>\n<p><strong><em>代码清单一：具体主题</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">\t<span class=\"comment\">//设置change=true</span></span><br><span class=\"line\">\tsetChanged();</span><br><span class=\"line\">\t<span class=\"comment\">//通知所有观察者主题有改变</span></span><br><span class=\"line\">\tnotifyObservers(str);</span><br><span class=\"line\">\t<span class=\"comment\">//notifyObservers();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单二：具体观察者</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectObserver</span><span class=\"params\">(Observable <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">\to.addObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o,Object arg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单三：测试</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//实例化主题</span></span><br><span class=\"line\">\tSubject sb = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">\t<span class=\"comment\">//实例化观察者</span></span><br><span class=\"line\">\tSubjectObserver so = <span class=\"keyword\">new</span> SubjectObserver(sb);</span><br><span class=\"line\">\tsb.add(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>控制台输出</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。<br>由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。</p>"},{"title":"Java线程中断interrupt","date":"2016-09-12T08:55:01.000Z","comments":1,"toc":false,"_content":"\n首先一个线程的终止不应该由其他线程来强制中断或停止。而是应该由线程自己自行停止。所以线程的stop,suspend,resume 都已经被抛弃了。而线程interrupt的作用也不是\n中断线程，而是通知线程应该中断了。具体到底中断还是继续运行，应该有被通知的线程自己处理。\n<!--more-->\n在以前通过一个线程去stop停止一个线程，这种方式太过暴力而且是很不安全的。怎么说呢，线程A调用线程B的stop方法来停止线程B,调用这个方法的时候线程A并不知道线程\n线程B的执行情况，这种突然间的停止会导致线程B的一些清理工作无法完成还有一个情况是执行stop方法后线程B会马上释放锁，这有可能会引发数据不同步问题。基于以上这些问题，\nstop()方法被抛弃了。\n\n如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，\n则其中断状态将被清除，它还将收到一个 InterruptedException。 \n如果该线程在可中断的通道上的 I/O 操作中受阻，则该通道将被关闭，该线程的中断状态将被设置并且该线程将收到一个 ClosedByInterruptException。 \n如果该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。 \n\n至于为什么如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，\n会清除中断状态，还会收到一个InterruptedException异常。调用线程interrupt方法表示线程应该终止，其他的阻塞中断也没有意义。如果继续阻塞线程也没办法收到中断信号。\n所以对象的阻塞状态都会终止。并且通过异常的方式告诉对象，你的阻塞是被interrupt清除的。不是通过正常的notify(), notifyAll() 释放等待。由此可见java的设计是很合理的。\n\n\n\n\n\n","source":"_posts/Java线程中断interrupt.md","raw":"---\ntitle: Java线程中断interrupt\ndate: 2016-09-12 16:55:01\ncomments: true\ncategories: Java\ntoc: false \n---\n\n首先一个线程的终止不应该由其他线程来强制中断或停止。而是应该由线程自己自行停止。所以线程的stop,suspend,resume 都已经被抛弃了。而线程interrupt的作用也不是\n中断线程，而是通知线程应该中断了。具体到底中断还是继续运行，应该有被通知的线程自己处理。\n<!--more-->\n在以前通过一个线程去stop停止一个线程，这种方式太过暴力而且是很不安全的。怎么说呢，线程A调用线程B的stop方法来停止线程B,调用这个方法的时候线程A并不知道线程\n线程B的执行情况，这种突然间的停止会导致线程B的一些清理工作无法完成还有一个情况是执行stop方法后线程B会马上释放锁，这有可能会引发数据不同步问题。基于以上这些问题，\nstop()方法被抛弃了。\n\n如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，\n则其中断状态将被清除，它还将收到一个 InterruptedException。 \n如果该线程在可中断的通道上的 I/O 操作中受阻，则该通道将被关闭，该线程的中断状态将被设置并且该线程将收到一个 ClosedByInterruptException。 \n如果该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。 \n\n至于为什么如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，\n会清除中断状态，还会收到一个InterruptedException异常。调用线程interrupt方法表示线程应该终止，其他的阻塞中断也没有意义。如果继续阻塞线程也没办法收到中断信号。\n所以对象的阻塞状态都会终止。并且通过异常的方式告诉对象，你的阻塞是被interrupt清除的。不是通过正常的notify(), notifyAll() 释放等待。由此可见java的设计是很合理的。\n\n\n\n\n\n","slug":"Java线程中断interrupt","published":1,"updated":"2021-06-25T02:00:17.997Z","layout":"post","photos":[],"link":"","_id":"ckqjatol80010qkl5g4xjjwyy","content":"<p>首先一个线程的终止不应该由其他线程来强制中断或停止。而是应该由线程自己自行停止。所以线程的stop,suspend,resume 都已经被抛弃了。而线程interrupt的作用也不是<br>中断线程，而是通知线程应该中断了。具体到底中断还是继续运行，应该有被通知的线程自己处理。<br><a id=\"more\"></a><br>在以前通过一个线程去stop停止一个线程，这种方式太过暴力而且是很不安全的。怎么说呢，线程A调用线程B的stop方法来停止线程B,调用这个方法的时候线程A并不知道线程<br>线程B的执行情况，这种突然间的停止会导致线程B的一些清理工作无法完成还有一个情况是执行stop方法后线程B会马上释放锁，这有可能会引发数据不同步问题。基于以上这些问题，<br>stop()方法被抛弃了。</p>\n<p>如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，<br>则其中断状态将被清除，它还将收到一个 InterruptedException。<br>如果该线程在可中断的通道上的 I/O 操作中受阻，则该通道将被关闭，该线程的中断状态将被设置并且该线程将收到一个 ClosedByInterruptException。<br>如果该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。 </p>\n<p>至于为什么如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，<br>会清除中断状态，还会收到一个InterruptedException异常。调用线程interrupt方法表示线程应该终止，其他的阻塞中断也没有意义。如果继续阻塞线程也没办法收到中断信号。<br>所以对象的阻塞状态都会终止。并且通过异常的方式告诉对象，你的阻塞是被interrupt清除的。不是通过正常的notify(), notifyAll() 释放等待。由此可见java的设计是很合理的。</p>\n","site":{"data":{}},"excerpt":"<p>首先一个线程的终止不应该由其他线程来强制中断或停止。而是应该由线程自己自行停止。所以线程的stop,suspend,resume 都已经被抛弃了。而线程interrupt的作用也不是<br>中断线程，而是通知线程应该中断了。具体到底中断还是继续运行，应该有被通知的线程自己处理。<br>","more":"<br>在以前通过一个线程去stop停止一个线程，这种方式太过暴力而且是很不安全的。怎么说呢，线程A调用线程B的stop方法来停止线程B,调用这个方法的时候线程A并不知道线程<br>线程B的执行情况，这种突然间的停止会导致线程B的一些清理工作无法完成还有一个情况是执行stop方法后线程B会马上释放锁，这有可能会引发数据不同步问题。基于以上这些问题，<br>stop()方法被抛弃了。</p>\n<p>如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，<br>则其中断状态将被清除，它还将收到一个 InterruptedException。<br>如果该线程在可中断的通道上的 I/O 操作中受阻，则该通道将被关闭，该线程的中断状态将被设置并且该线程将收到一个 ClosedByInterruptException。<br>如果该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。 </p>\n<p>至于为什么如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，<br>会清除中断状态，还会收到一个InterruptedException异常。调用线程interrupt方法表示线程应该终止，其他的阻塞中断也没有意义。如果继续阻塞线程也没办法收到中断信号。<br>所以对象的阻塞状态都会终止。并且通过异常的方式告诉对象，你的阻塞是被interrupt清除的。不是通过正常的notify(), notifyAll() 释放等待。由此可见java的设计是很合理的。</p>"},{"title":"KVM初尝","date":"2020-07-12T14:48:20.000Z","comments":1,"toc":false,"_content":"\n虚拟化技术的含义很广泛。将任何一种形式的资源抽象成另一种形式的技术都是虚拟化。在常用的操作系统中就存在某种意义上的“虚拟化技术”，例如虚拟内存空间和进程。如果把内存看作是一个设备，虚拟内存就是将物理内存虚拟成多个内存空间。虚拟内存的容量可以少于或多于物理内存。进程的概念实际是对于物理硬件执行环境的一个抽象，每个进程都享有一个完整的硬件执行环境，并且与其他进程相隔离。\n相对于进程级的虚拟化，虚拟机是另外一个层面的虚拟化，即系统级虚拟化。与虚拟单个进程的执行环境所不同，系统级虚拟化所抽象的环境是整个计算机，其抽象出的环境称为虚拟机，包括CPU、内存和I/O。在每个虚拟机中都可以运行一个操作系统，在一台计算机上可以虚拟出多个虚拟机。\n\n[KVM内核模块源码分析](https://www.bookstack.cn/read/learn-kvm/docs-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md)\n<!--more-->\n\n\n\n```c\n\n#include <err.h>\n#include <fcntl.h>\n#include <linux/kvm.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/ioctl.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nint main(void)\n{\n    int kvm, vmfd, vcpufd, ret;\n    const uint8_t code[] = {\n        0xba, 0xf8, 0x03, /* mov $0x3f8, %dx */\n        0x00, 0xd8,       /* add %bl, %al */\n        0x04, '0',        /* add $'0', %al */\n        0xee,             /* out %al, (%dx) */\n        0xb0, '\\n',       /* mov $'\\n', %al */\n        0xee,             /* out %al, (%dx) */\n        0xf4,             /* hlt */\n    };\n    uint8_t *mem;\n    struct kvm_sregs sregs;\n    size_t mmap_size;\n    struct kvm_run *run;\n    \n    // 获取 kvm 句柄\n    kvm = open(\"/dev/kvm\", O_RDWR | O_CLOEXEC);\n    if (kvm == -1)\n        err(1, \"/dev/kvm\");\n\n    // 确保是正确的 API 版本\n    ret = ioctl(kvm, KVM_GET_API_VERSION, NULL);\n    if (ret == -1)\n        err(1, \"KVM_GET_API_VERSION\");\n    if (ret != 12)\n        errx(1, \"KVM_GET_API_VERSION %d, expected 12\", ret);\n    \n    // 创建一虚拟机\n    vmfd = ioctl(kvm, KVM_CREATE_VM, (unsigned long)0);\n    if (vmfd == -1)\n        err(1, \"KVM_CREATE_VM\");\n    \n    // 为这个虚拟机申请内存，并将代码（镜像）加载到虚拟机内存中\n    mem = mmap(NULL, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n    if (!mem)\n        err(1, \"allocating guest memory\");\n    memcpy(mem, code, sizeof(code));\n\n    // 为什么从 0x1000 开始呢，因为页表空间的前4K是留给页表目录\n    struct kvm_userspace_memory_region region = {\n        .slot = 0,\n        .guest_phys_addr = 0x1000,\n        .memory_size = 0x1000,\n        .userspace_addr = (uint64_t)mem,\n    };\n    // 设置 KVM 的内存区域\n    ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, &region);\n    if (ret == -1)\n        err(1, \"KVM_SET_USER_MEMORY_REGION\");\n    \n    // 创建虚拟CPU\n    vcpufd = ioctl(vmfd, KVM_CREATE_VCPU, (unsigned long)0);\n    if (vcpufd == -1)\n        err(1, \"KVM_CREATE_VCPU\");\n\n    // 获取 KVM 运行时结构的大小\n    ret = ioctl(kvm, KVM_GET_VCPU_MMAP_SIZE, NULL);\n    if (ret == -1)\n        err(1, \"KVM_GET_VCPU_MMAP_SIZE\");\n    mmap_size = ret;\n    if (mmap_size < sizeof(*run))\n        errx(1, \"KVM_GET_VCPU_MMAP_SIZE unexpectedly small\");\n    // 将 kvm run 与 vcpu 做关联，这样能够获取到kvm的运行时信息\n    run = mmap(NULL, mmap_size, PROT_READ | PROT_WRITE, MAP_SHARED, vcpufd, 0);\n    if (!run)\n        err(1, \"mmap vcpu\");\n\n    // 获取特殊寄存器\n    ret = ioctl(vcpufd, KVM_GET_SREGS, &sregs);\n    if (ret == -1)\n        err(1, \"KVM_GET_SREGS\");\n    // 设置代码段为从地址0处开始，我们的代码被加载到了0x0000的起始位置\n    sregs.cs.base = 0;\n    sregs.cs.selector = 0;\n    // KVM_SET_SREGS 设置特殊寄存器\n    ret = ioctl(vcpufd, KVM_SET_SREGS, &sregs);\n    if (ret == -1)\n        err(1, \"KVM_SET_SREGS\");\n\n    \n    // 设置代码的入口地址，相当于32位main函数的地址，这里16位汇编都是由0x1000处开始。\n    // 如果是正式的镜像，那么rip的值应该是类似引导扇区加载进来的指令\n    struct kvm_regs regs = {\n        .rip = 0x1000,\n        .rax = 2,    // 设置 ax 寄存器初始值为 2\n        .rbx = 2,    // 同理\n        .rflags = 0x2,   // 初始化flags寄存器，x86架构下需要设置，否则会粗错\n    };\n    ret = ioctl(vcpufd, KVM_SET_REGS, &regs);\n    if (ret == -1)\n        err(1, \"KVM_SET_REGS\");\n\n    // 开始运行虚拟机，如果是qemu-kvm，会用一个线程来执行这个vCPU，并加载指令\n    while (1) {\n        // 开始运行虚拟机\n        ret = ioctl(vcpufd, KVM_RUN, NULL);\n        if (ret == -1)\n            err(1, \"KVM_RUN\");\n        // 获取虚拟机退出原因\n        switch (run->exit_reason) {\n        case KVM_EXIT_HLT:\n            puts(\"KVM_EXIT_HLT\");\n            return 0;\n        // 汇编调用了 out 指令，vmx 模式下不允许执行这个操作，所以\n        // 将操作权切换到了宿主机，切换的时候会将上下文保存到VMCS寄存器\n        // 后面CPU虚拟化会讲到这部分\n        // 因为虚拟机的内存宿主机能够直接读取到，所以直接在宿主机上获取到\n        // 虚拟机的输出（out指令），这也是后面PCI设备虚拟化的一个基础，DMA模式的PCI设备\n        case KVM_EXIT_IO:\n            if (run->io.direction == KVM_EXIT_IO_OUT && run->io.size == 1 && run->io.port == 0x3f8 && run->io.count == 1)\n                putchar(*(((char *)run) + run->io.data_offset));\n            else\n                errx(1, \"unhandled KVM_EXIT_IO\");\n            break;\n        case KVM_EXIT_FAIL_ENTRY:\n            errx(1, \"KVM_EXIT_FAIL_ENTRY: hardware_entry_failure_reason = 0x%llx\",\n                 (unsigned long long)run->fail_entry.hardware_entry_failure_reason);\n        case KVM_EXIT_INTERNAL_ERROR:\n            errx(1, \"KVM_EXIT_INTERNAL_ERROR: suberror = 0x%x\", run->internal.suberror);\n        default:\n            errx(1, \"exit_reason = 0x%x\", run->exit_reason);\n        }\n    }\n}\n```","source":"_posts/KVM初尝.md","raw":"---\ntitle: KVM初尝\ndate: 2020-07-12 22:48:20\ncomments: true \ncategories: 虚拟化\ntoc: false\n---\n\n虚拟化技术的含义很广泛。将任何一种形式的资源抽象成另一种形式的技术都是虚拟化。在常用的操作系统中就存在某种意义上的“虚拟化技术”，例如虚拟内存空间和进程。如果把内存看作是一个设备，虚拟内存就是将物理内存虚拟成多个内存空间。虚拟内存的容量可以少于或多于物理内存。进程的概念实际是对于物理硬件执行环境的一个抽象，每个进程都享有一个完整的硬件执行环境，并且与其他进程相隔离。\n相对于进程级的虚拟化，虚拟机是另外一个层面的虚拟化，即系统级虚拟化。与虚拟单个进程的执行环境所不同，系统级虚拟化所抽象的环境是整个计算机，其抽象出的环境称为虚拟机，包括CPU、内存和I/O。在每个虚拟机中都可以运行一个操作系统，在一台计算机上可以虚拟出多个虚拟机。\n\n[KVM内核模块源码分析](https://www.bookstack.cn/read/learn-kvm/docs-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md)\n<!--more-->\n\n\n\n```c\n\n#include <err.h>\n#include <fcntl.h>\n#include <linux/kvm.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/ioctl.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nint main(void)\n{\n    int kvm, vmfd, vcpufd, ret;\n    const uint8_t code[] = {\n        0xba, 0xf8, 0x03, /* mov $0x3f8, %dx */\n        0x00, 0xd8,       /* add %bl, %al */\n        0x04, '0',        /* add $'0', %al */\n        0xee,             /* out %al, (%dx) */\n        0xb0, '\\n',       /* mov $'\\n', %al */\n        0xee,             /* out %al, (%dx) */\n        0xf4,             /* hlt */\n    };\n    uint8_t *mem;\n    struct kvm_sregs sregs;\n    size_t mmap_size;\n    struct kvm_run *run;\n    \n    // 获取 kvm 句柄\n    kvm = open(\"/dev/kvm\", O_RDWR | O_CLOEXEC);\n    if (kvm == -1)\n        err(1, \"/dev/kvm\");\n\n    // 确保是正确的 API 版本\n    ret = ioctl(kvm, KVM_GET_API_VERSION, NULL);\n    if (ret == -1)\n        err(1, \"KVM_GET_API_VERSION\");\n    if (ret != 12)\n        errx(1, \"KVM_GET_API_VERSION %d, expected 12\", ret);\n    \n    // 创建一虚拟机\n    vmfd = ioctl(kvm, KVM_CREATE_VM, (unsigned long)0);\n    if (vmfd == -1)\n        err(1, \"KVM_CREATE_VM\");\n    \n    // 为这个虚拟机申请内存，并将代码（镜像）加载到虚拟机内存中\n    mem = mmap(NULL, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);\n    if (!mem)\n        err(1, \"allocating guest memory\");\n    memcpy(mem, code, sizeof(code));\n\n    // 为什么从 0x1000 开始呢，因为页表空间的前4K是留给页表目录\n    struct kvm_userspace_memory_region region = {\n        .slot = 0,\n        .guest_phys_addr = 0x1000,\n        .memory_size = 0x1000,\n        .userspace_addr = (uint64_t)mem,\n    };\n    // 设置 KVM 的内存区域\n    ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, &region);\n    if (ret == -1)\n        err(1, \"KVM_SET_USER_MEMORY_REGION\");\n    \n    // 创建虚拟CPU\n    vcpufd = ioctl(vmfd, KVM_CREATE_VCPU, (unsigned long)0);\n    if (vcpufd == -1)\n        err(1, \"KVM_CREATE_VCPU\");\n\n    // 获取 KVM 运行时结构的大小\n    ret = ioctl(kvm, KVM_GET_VCPU_MMAP_SIZE, NULL);\n    if (ret == -1)\n        err(1, \"KVM_GET_VCPU_MMAP_SIZE\");\n    mmap_size = ret;\n    if (mmap_size < sizeof(*run))\n        errx(1, \"KVM_GET_VCPU_MMAP_SIZE unexpectedly small\");\n    // 将 kvm run 与 vcpu 做关联，这样能够获取到kvm的运行时信息\n    run = mmap(NULL, mmap_size, PROT_READ | PROT_WRITE, MAP_SHARED, vcpufd, 0);\n    if (!run)\n        err(1, \"mmap vcpu\");\n\n    // 获取特殊寄存器\n    ret = ioctl(vcpufd, KVM_GET_SREGS, &sregs);\n    if (ret == -1)\n        err(1, \"KVM_GET_SREGS\");\n    // 设置代码段为从地址0处开始，我们的代码被加载到了0x0000的起始位置\n    sregs.cs.base = 0;\n    sregs.cs.selector = 0;\n    // KVM_SET_SREGS 设置特殊寄存器\n    ret = ioctl(vcpufd, KVM_SET_SREGS, &sregs);\n    if (ret == -1)\n        err(1, \"KVM_SET_SREGS\");\n\n    \n    // 设置代码的入口地址，相当于32位main函数的地址，这里16位汇编都是由0x1000处开始。\n    // 如果是正式的镜像，那么rip的值应该是类似引导扇区加载进来的指令\n    struct kvm_regs regs = {\n        .rip = 0x1000,\n        .rax = 2,    // 设置 ax 寄存器初始值为 2\n        .rbx = 2,    // 同理\n        .rflags = 0x2,   // 初始化flags寄存器，x86架构下需要设置，否则会粗错\n    };\n    ret = ioctl(vcpufd, KVM_SET_REGS, &regs);\n    if (ret == -1)\n        err(1, \"KVM_SET_REGS\");\n\n    // 开始运行虚拟机，如果是qemu-kvm，会用一个线程来执行这个vCPU，并加载指令\n    while (1) {\n        // 开始运行虚拟机\n        ret = ioctl(vcpufd, KVM_RUN, NULL);\n        if (ret == -1)\n            err(1, \"KVM_RUN\");\n        // 获取虚拟机退出原因\n        switch (run->exit_reason) {\n        case KVM_EXIT_HLT:\n            puts(\"KVM_EXIT_HLT\");\n            return 0;\n        // 汇编调用了 out 指令，vmx 模式下不允许执行这个操作，所以\n        // 将操作权切换到了宿主机，切换的时候会将上下文保存到VMCS寄存器\n        // 后面CPU虚拟化会讲到这部分\n        // 因为虚拟机的内存宿主机能够直接读取到，所以直接在宿主机上获取到\n        // 虚拟机的输出（out指令），这也是后面PCI设备虚拟化的一个基础，DMA模式的PCI设备\n        case KVM_EXIT_IO:\n            if (run->io.direction == KVM_EXIT_IO_OUT && run->io.size == 1 && run->io.port == 0x3f8 && run->io.count == 1)\n                putchar(*(((char *)run) + run->io.data_offset));\n            else\n                errx(1, \"unhandled KVM_EXIT_IO\");\n            break;\n        case KVM_EXIT_FAIL_ENTRY:\n            errx(1, \"KVM_EXIT_FAIL_ENTRY: hardware_entry_failure_reason = 0x%llx\",\n                 (unsigned long long)run->fail_entry.hardware_entry_failure_reason);\n        case KVM_EXIT_INTERNAL_ERROR:\n            errx(1, \"KVM_EXIT_INTERNAL_ERROR: suberror = 0x%x\", run->internal.suberror);\n        default:\n            errx(1, \"exit_reason = 0x%x\", run->exit_reason);\n        }\n    }\n}\n```","slug":"KVM初尝","published":1,"updated":"2021-06-30T08:14:16.013Z","layout":"post","photos":[],"link":"","_id":"ckqjatol90012qkl5c3ocz4k4","content":"<p>虚拟化技术的含义很广泛。将任何一种形式的资源抽象成另一种形式的技术都是虚拟化。在常用的操作系统中就存在某种意义上的“虚拟化技术”，例如虚拟内存空间和进程。如果把内存看作是一个设备，虚拟内存就是将物理内存虚拟成多个内存空间。虚拟内存的容量可以少于或多于物理内存。进程的概念实际是对于物理硬件执行环境的一个抽象，每个进程都享有一个完整的硬件执行环境，并且与其他进程相隔离。<br>相对于进程级的虚拟化，虚拟机是另外一个层面的虚拟化，即系统级虚拟化。与虚拟单个进程的执行环境所不同，系统级虚拟化所抽象的环境是整个计算机，其抽象出的环境称为虚拟机，包括CPU、内存和I/O。在每个虚拟机中都可以运行一个操作系统，在一台计算机上可以虚拟出多个虚拟机。</p>\n<p><a href=\"https://www.bookstack.cn/read/learn-kvm/docs-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md\" target=\"_blank\" rel=\"noopener\">KVM内核模块源码分析</a><br><a id=\"more\"></a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;err.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kvm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> kvm, vmfd, vcpufd, ret;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> code[] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0xba</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0x03</span>, <span class=\"comment\">/* mov $0x3f8, %dx */</span></span><br><span class=\"line\">        <span class=\"number\">0x00</span>, <span class=\"number\">0xd8</span>,       <span class=\"comment\">/* add %bl, %al */</span></span><br><span class=\"line\">        <span class=\"number\">0x04</span>, <span class=\"string\">'0'</span>,        <span class=\"comment\">/* add $'0', %al */</span></span><br><span class=\"line\">        <span class=\"number\">0xee</span>,             <span class=\"comment\">/* out %al, (%dx) */</span></span><br><span class=\"line\">        <span class=\"number\">0xb0</span>, <span class=\"string\">'\\n'</span>,       <span class=\"comment\">/* mov $'\\n', %al */</span></span><br><span class=\"line\">        <span class=\"number\">0xee</span>,             <span class=\"comment\">/* out %al, (%dx) */</span></span><br><span class=\"line\">        <span class=\"number\">0xf4</span>,             <span class=\"comment\">/* hlt */</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> *mem;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_sregs</span> <span class=\"title\">sregs</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> mmap_size;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_run</span> *<span class=\"title\">run</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取 kvm 句柄</span></span><br><span class=\"line\">    kvm = open(<span class=\"string\">\"/dev/kvm\"</span>, O_RDWR | O_CLOEXEC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kvm == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"/dev/kvm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确保是正确的 API 版本</span></span><br><span class=\"line\">    ret = ioctl(kvm, KVM_GET_API_VERSION, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_API_VERSION\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != <span class=\"number\">12</span>)</span><br><span class=\"line\">        errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_API_VERSION %d, expected 12\"</span>, ret);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建一虚拟机</span></span><br><span class=\"line\">    vmfd = ioctl(kvm, KVM_CREATE_VM, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vmfd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_CREATE_VM\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 为这个虚拟机申请内存，并将代码（镜像）加载到虚拟机内存中</span></span><br><span class=\"line\">    mem = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mem)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"allocating guest memory\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(mem, code, <span class=\"keyword\">sizeof</span>(code));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为什么从 0x1000 开始呢，因为页表空间的前4K是留给页表目录</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_userspace_memory_region</span> <span class=\"title\">region</span> = &#123;</span></span><br><span class=\"line\">        .slot = <span class=\"number\">0</span>,</span><br><span class=\"line\">        .guest_phys_addr = <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        .memory_size = <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        .userspace_addr = (<span class=\"keyword\">uint64_t</span>)mem,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 KVM 的内存区域</span></span><br><span class=\"line\">    ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, &amp;region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_SET_USER_MEMORY_REGION\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建虚拟CPU</span></span><br><span class=\"line\">    vcpufd = ioctl(vmfd, KVM_CREATE_VCPU, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vcpufd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_CREATE_VCPU\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 KVM 运行时结构的大小</span></span><br><span class=\"line\">    ret = ioctl(kvm, KVM_GET_VCPU_MMAP_SIZE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_VCPU_MMAP_SIZE\"</span>);</span><br><span class=\"line\">    mmap_size = ret;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mmap_size &lt; <span class=\"keyword\">sizeof</span>(*run))</span><br><span class=\"line\">        errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_VCPU_MMAP_SIZE unexpectedly small\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将 kvm run 与 vcpu 做关联，这样能够获取到kvm的运行时信息</span></span><br><span class=\"line\">    run = mmap(<span class=\"literal\">NULL</span>, mmap_size, PROT_READ | PROT_WRITE, MAP_SHARED, vcpufd, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!run)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"mmap vcpu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取特殊寄存器</span></span><br><span class=\"line\">    ret = ioctl(vcpufd, KVM_GET_SREGS, &amp;sregs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_SREGS\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置代码段为从地址0处开始，我们的代码被加载到了0x0000的起始位置</span></span><br><span class=\"line\">    sregs.cs.base = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sregs.cs.selector = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// KVM_SET_SREGS 设置特殊寄存器</span></span><br><span class=\"line\">    ret = ioctl(vcpufd, KVM_SET_SREGS, &amp;sregs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_SET_SREGS\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置代码的入口地址，相当于32位main函数的地址，这里16位汇编都是由0x1000处开始。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是正式的镜像，那么rip的值应该是类似引导扇区加载进来的指令</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_regs</span> <span class=\"title\">regs</span> = &#123;</span></span><br><span class=\"line\">        .rip = <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        .rax = <span class=\"number\">2</span>,    <span class=\"comment\">// 设置 ax 寄存器初始值为 2</span></span><br><span class=\"line\">        .rbx = <span class=\"number\">2</span>,    <span class=\"comment\">// 同理</span></span><br><span class=\"line\">        .rflags = <span class=\"number\">0x2</span>,   <span class=\"comment\">// 初始化flags寄存器，x86架构下需要设置，否则会粗错</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ret = ioctl(vcpufd, KVM_SET_REGS, &amp;regs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_SET_REGS\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始运行虚拟机，如果是qemu-kvm，会用一个线程来执行这个vCPU，并加载指令</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始运行虚拟机</span></span><br><span class=\"line\">        ret = ioctl(vcpufd, KVM_RUN, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_RUN\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取虚拟机退出原因</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (run-&gt;exit_reason) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_HLT:</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"KVM_EXIT_HLT\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 汇编调用了 out 指令，vmx 模式下不允许执行这个操作，所以</span></span><br><span class=\"line\">        <span class=\"comment\">// 将操作权切换到了宿主机，切换的时候会将上下文保存到VMCS寄存器</span></span><br><span class=\"line\">        <span class=\"comment\">// 后面CPU虚拟化会讲到这部分</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为虚拟机的内存宿主机能够直接读取到，所以直接在宿主机上获取到</span></span><br><span class=\"line\">        <span class=\"comment\">// 虚拟机的输出（out指令），这也是后面PCI设备虚拟化的一个基础，DMA模式的PCI设备</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_IO:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (run-&gt;io.direction == KVM_EXIT_IO_OUT &amp;&amp; run-&gt;io.size == <span class=\"number\">1</span> &amp;&amp; run-&gt;io.port == <span class=\"number\">0x3f8</span> &amp;&amp; run-&gt;io.count == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(*(((<span class=\"keyword\">char</span> *)run) + run-&gt;io.data_offset));</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                errx(<span class=\"number\">1</span>, <span class=\"string\">\"unhandled KVM_EXIT_IO\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_FAIL_ENTRY:</span><br><span class=\"line\">            errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_EXIT_FAIL_ENTRY: hardware_entry_failure_reason = 0x%llx\"</span>,</span><br><span class=\"line\">                 (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)run-&gt;fail_entry.hardware_entry_failure_reason);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_INTERNAL_ERROR:</span><br><span class=\"line\">            errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_EXIT_INTERNAL_ERROR: suberror = 0x%x\"</span>, run-&gt;internal.suberror);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            errx(<span class=\"number\">1</span>, <span class=\"string\">\"exit_reason = 0x%x\"</span>, run-&gt;exit_reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>虚拟化技术的含义很广泛。将任何一种形式的资源抽象成另一种形式的技术都是虚拟化。在常用的操作系统中就存在某种意义上的“虚拟化技术”，例如虚拟内存空间和进程。如果把内存看作是一个设备，虚拟内存就是将物理内存虚拟成多个内存空间。虚拟内存的容量可以少于或多于物理内存。进程的概念实际是对于物理硬件执行环境的一个抽象，每个进程都享有一个完整的硬件执行环境，并且与其他进程相隔离。<br>相对于进程级的虚拟化，虚拟机是另外一个层面的虚拟化，即系统级虚拟化。与虚拟单个进程的执行环境所不同，系统级虚拟化所抽象的环境是整个计算机，其抽象出的环境称为虚拟机，包括CPU、内存和I/O。在每个虚拟机中都可以运行一个操作系统，在一台计算机上可以虚拟出多个虚拟机。</p>\n<p><a href=\"https://www.bookstack.cn/read/learn-kvm/docs-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-KVM%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md\" target=\"_blank\" rel=\"noopener\">KVM内核模块源码分析</a><br>","more":"</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;err.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kvm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> kvm, vmfd, vcpufd, ret;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">uint8_t</span> code[] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0xba</span>, <span class=\"number\">0xf8</span>, <span class=\"number\">0x03</span>, <span class=\"comment\">/* mov $0x3f8, %dx */</span></span><br><span class=\"line\">        <span class=\"number\">0x00</span>, <span class=\"number\">0xd8</span>,       <span class=\"comment\">/* add %bl, %al */</span></span><br><span class=\"line\">        <span class=\"number\">0x04</span>, <span class=\"string\">'0'</span>,        <span class=\"comment\">/* add $'0', %al */</span></span><br><span class=\"line\">        <span class=\"number\">0xee</span>,             <span class=\"comment\">/* out %al, (%dx) */</span></span><br><span class=\"line\">        <span class=\"number\">0xb0</span>, <span class=\"string\">'\\n'</span>,       <span class=\"comment\">/* mov $'\\n', %al */</span></span><br><span class=\"line\">        <span class=\"number\">0xee</span>,             <span class=\"comment\">/* out %al, (%dx) */</span></span><br><span class=\"line\">        <span class=\"number\">0xf4</span>,             <span class=\"comment\">/* hlt */</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> *mem;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_sregs</span> <span class=\"title\">sregs</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> mmap_size;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_run</span> *<span class=\"title\">run</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取 kvm 句柄</span></span><br><span class=\"line\">    kvm = open(<span class=\"string\">\"/dev/kvm\"</span>, O_RDWR | O_CLOEXEC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kvm == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"/dev/kvm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确保是正确的 API 版本</span></span><br><span class=\"line\">    ret = ioctl(kvm, KVM_GET_API_VERSION, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_API_VERSION\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != <span class=\"number\">12</span>)</span><br><span class=\"line\">        errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_API_VERSION %d, expected 12\"</span>, ret);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建一虚拟机</span></span><br><span class=\"line\">    vmfd = ioctl(kvm, KVM_CREATE_VM, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vmfd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_CREATE_VM\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 为这个虚拟机申请内存，并将代码（镜像）加载到虚拟机内存中</span></span><br><span class=\"line\">    mem = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mem)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"allocating guest memory\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(mem, code, <span class=\"keyword\">sizeof</span>(code));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为什么从 0x1000 开始呢，因为页表空间的前4K是留给页表目录</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_userspace_memory_region</span> <span class=\"title\">region</span> = &#123;</span></span><br><span class=\"line\">        .slot = <span class=\"number\">0</span>,</span><br><span class=\"line\">        .guest_phys_addr = <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        .memory_size = <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        .userspace_addr = (<span class=\"keyword\">uint64_t</span>)mem,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 KVM 的内存区域</span></span><br><span class=\"line\">    ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, &amp;region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_SET_USER_MEMORY_REGION\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建虚拟CPU</span></span><br><span class=\"line\">    vcpufd = ioctl(vmfd, KVM_CREATE_VCPU, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vcpufd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_CREATE_VCPU\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 KVM 运行时结构的大小</span></span><br><span class=\"line\">    ret = ioctl(kvm, KVM_GET_VCPU_MMAP_SIZE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_VCPU_MMAP_SIZE\"</span>);</span><br><span class=\"line\">    mmap_size = ret;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mmap_size &lt; <span class=\"keyword\">sizeof</span>(*run))</span><br><span class=\"line\">        errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_VCPU_MMAP_SIZE unexpectedly small\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将 kvm run 与 vcpu 做关联，这样能够获取到kvm的运行时信息</span></span><br><span class=\"line\">    run = mmap(<span class=\"literal\">NULL</span>, mmap_size, PROT_READ | PROT_WRITE, MAP_SHARED, vcpufd, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!run)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"mmap vcpu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取特殊寄存器</span></span><br><span class=\"line\">    ret = ioctl(vcpufd, KVM_GET_SREGS, &amp;sregs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_GET_SREGS\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置代码段为从地址0处开始，我们的代码被加载到了0x0000的起始位置</span></span><br><span class=\"line\">    sregs.cs.base = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sregs.cs.selector = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// KVM_SET_SREGS 设置特殊寄存器</span></span><br><span class=\"line\">    ret = ioctl(vcpufd, KVM_SET_SREGS, &amp;sregs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_SET_SREGS\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置代码的入口地址，相当于32位main函数的地址，这里16位汇编都是由0x1000处开始。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是正式的镜像，那么rip的值应该是类似引导扇区加载进来的指令</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kvm_regs</span> <span class=\"title\">regs</span> = &#123;</span></span><br><span class=\"line\">        .rip = <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        .rax = <span class=\"number\">2</span>,    <span class=\"comment\">// 设置 ax 寄存器初始值为 2</span></span><br><span class=\"line\">        .rbx = <span class=\"number\">2</span>,    <span class=\"comment\">// 同理</span></span><br><span class=\"line\">        .rflags = <span class=\"number\">0x2</span>,   <span class=\"comment\">// 初始化flags寄存器，x86架构下需要设置，否则会粗错</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ret = ioctl(vcpufd, KVM_SET_REGS, &amp;regs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_SET_REGS\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始运行虚拟机，如果是qemu-kvm，会用一个线程来执行这个vCPU，并加载指令</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始运行虚拟机</span></span><br><span class=\"line\">        ret = ioctl(vcpufd, KVM_RUN, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            err(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_RUN\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取虚拟机退出原因</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (run-&gt;exit_reason) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_HLT:</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">\"KVM_EXIT_HLT\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 汇编调用了 out 指令，vmx 模式下不允许执行这个操作，所以</span></span><br><span class=\"line\">        <span class=\"comment\">// 将操作权切换到了宿主机，切换的时候会将上下文保存到VMCS寄存器</span></span><br><span class=\"line\">        <span class=\"comment\">// 后面CPU虚拟化会讲到这部分</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为虚拟机的内存宿主机能够直接读取到，所以直接在宿主机上获取到</span></span><br><span class=\"line\">        <span class=\"comment\">// 虚拟机的输出（out指令），这也是后面PCI设备虚拟化的一个基础，DMA模式的PCI设备</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_IO:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (run-&gt;io.direction == KVM_EXIT_IO_OUT &amp;&amp; run-&gt;io.size == <span class=\"number\">1</span> &amp;&amp; run-&gt;io.port == <span class=\"number\">0x3f8</span> &amp;&amp; run-&gt;io.count == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(*(((<span class=\"keyword\">char</span> *)run) + run-&gt;io.data_offset));</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                errx(<span class=\"number\">1</span>, <span class=\"string\">\"unhandled KVM_EXIT_IO\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_FAIL_ENTRY:</span><br><span class=\"line\">            errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_EXIT_FAIL_ENTRY: hardware_entry_failure_reason = 0x%llx\"</span>,</span><br><span class=\"line\">                 (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)run-&gt;fail_entry.hardware_entry_failure_reason);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> KVM_EXIT_INTERNAL_ERROR:</span><br><span class=\"line\">            errx(<span class=\"number\">1</span>, <span class=\"string\">\"KVM_EXIT_INTERNAL_ERROR: suberror = 0x%x\"</span>, run-&gt;internal.suberror);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            errx(<span class=\"number\">1</span>, <span class=\"string\">\"exit_reason = 0x%x\"</span>, run-&gt;exit_reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"MySQL+Keepalived实现双机热备","date":"2015-07-26T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 前言\n\nMySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档[MySQL5.6在CentOS6.6安装步骤](/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/)和[MySQL5.6.25节点复制](/2015/07/26/MySQL5.6.25主从复制/)\n\n<!--more-->\n\n### 环境\n\nMySQL-VIP：192.168.11.200\nMySQL-Master：192.168.11.128\nMySQL-Slave：192.168.11.129\n\nOS版本：CentOS 6.6\nMySQL版本：5.6.25\nKeepalived版本：1.2.19\n\n### keepalived的安装\n首先在安装keepalived之前检查下是否安装了openssl\nshell> rpm -qa|grep openssl\n查的结果表示已经安装了或者需要安装\n```\nshell>yum –y install openssl-devel\n```\n下载解压安装keepalived\n```\nshell>wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz\nshell>tar -zxvf keepalived-1.2.19.tar.gz\nshell>cd keepalived-1.2.19\nshell>./configure --prefix=/usr/local/keepalived\nshell>make\nshell>make install\n```\n\n### keepalived相关文件复制到系统对应的目录下\n```\nshell>cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d\nshell>cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/\nshell>mkdir /etc/keepalived\nshell>cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/\nshell>cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/\n```\n\n### keepalived 配置\n```\nshell>vi /etc/keepalived/keepalived.cnf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.11.128\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL\n}\n\nvrrp_instance VI_1 {\n    state MASTER \t#MASTER|SLAVE\n    interface eth0\t#虚拟IP绑定网卡\n    virtual_router_id 51 #节点中必须相同\n    priority 100\t\t#优先级\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.11.200 #虚拟IP\n        192.168.11.201\n    }\n}\n\nvirtual_server 192.168.11.200 3306 {\n    delay_loop 2\t#每个6秒检查一次real_server状态\n    lb_algo rr\n    lb_kind DR\n    nat_mask 255.255.255.0\n    persistence_timeout 50 #会话保持时间\n    protocol TCP\n\t\n    real_server 192.168.11.128 3306 {\n       weight 1\n\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本\n        TCP_CHECK { \n\t\t\tconnect_timeout 10 #连接超时时间\n\t\t\tnb_get_retry 3 #重连次数\n\t\t\tdelay_before_retry 3 #重连间隔时间\n\t\t\tconnect_port 3306 #健康检查端口\n        } \n    }\n}\n```\n\n编写检测服务down后所执行的脚本\n```\nshell>vi /usr/local/mysql/bin/mysql.sh\n#杀掉keepalived 的进程\npkill keepalived\nshell> chmod 744 /usr/local/mysql/bin/mysql.sh\n```\n\n***注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP***\n在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority\n\n### 测试\n启动MySQL ,keepalived\n```\nsheel>service mysqld start\nsheel>service keepalived start\nsheel>service iptables stop\n```\n查看vip 是否已经帮到到了网卡eth0\n```\nshell>ip a\n```\n![](1.png)\n关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功","source":"_posts/MySQL+Keepalived实现双机热备.md","raw":"---\ntitle: MySQL+Keepalived实现双机热备\ndate: 2015-07-27\ncomments: true\ncategories: MySQL\ntoc: true \n---\n\n### 前言\n\nMySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档[MySQL5.6在CentOS6.6安装步骤](/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/)和[MySQL5.6.25节点复制](/2015/07/26/MySQL5.6.25主从复制/)\n\n<!--more-->\n\n### 环境\n\nMySQL-VIP：192.168.11.200\nMySQL-Master：192.168.11.128\nMySQL-Slave：192.168.11.129\n\nOS版本：CentOS 6.6\nMySQL版本：5.6.25\nKeepalived版本：1.2.19\n\n### keepalived的安装\n首先在安装keepalived之前检查下是否安装了openssl\nshell> rpm -qa|grep openssl\n查的结果表示已经安装了或者需要安装\n```\nshell>yum –y install openssl-devel\n```\n下载解压安装keepalived\n```\nshell>wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz\nshell>tar -zxvf keepalived-1.2.19.tar.gz\nshell>cd keepalived-1.2.19\nshell>./configure --prefix=/usr/local/keepalived\nshell>make\nshell>make install\n```\n\n### keepalived相关文件复制到系统对应的目录下\n```\nshell>cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d\nshell>cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/\nshell>mkdir /etc/keepalived\nshell>cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/\nshell>cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/\n```\n\n### keepalived 配置\n```\nshell>vi /etc/keepalived/keepalived.cnf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.11.128\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL\n}\n\nvrrp_instance VI_1 {\n    state MASTER \t#MASTER|SLAVE\n    interface eth0\t#虚拟IP绑定网卡\n    virtual_router_id 51 #节点中必须相同\n    priority 100\t\t#优先级\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.11.200 #虚拟IP\n        192.168.11.201\n    }\n}\n\nvirtual_server 192.168.11.200 3306 {\n    delay_loop 2\t#每个6秒检查一次real_server状态\n    lb_algo rr\n    lb_kind DR\n    nat_mask 255.255.255.0\n    persistence_timeout 50 #会话保持时间\n    protocol TCP\n\t\n    real_server 192.168.11.128 3306 {\n       weight 1\n\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本\n        TCP_CHECK { \n\t\t\tconnect_timeout 10 #连接超时时间\n\t\t\tnb_get_retry 3 #重连次数\n\t\t\tdelay_before_retry 3 #重连间隔时间\n\t\t\tconnect_port 3306 #健康检查端口\n        } \n    }\n}\n```\n\n编写检测服务down后所执行的脚本\n```\nshell>vi /usr/local/mysql/bin/mysql.sh\n#杀掉keepalived 的进程\npkill keepalived\nshell> chmod 744 /usr/local/mysql/bin/mysql.sh\n```\n\n***注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP***\n在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority\n\n### 测试\n启动MySQL ,keepalived\n```\nsheel>service mysqld start\nsheel>service keepalived start\nsheel>service iptables stop\n```\n查看vip 是否已经帮到到了网卡eth0\n```\nshell>ip a\n```\n![](1.png)\n关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功","slug":"MySQL+Keepalived实现双机热备","published":1,"updated":"2021-06-25T02:00:18.038Z","layout":"post","photos":[],"link":"","_id":"ckqjatolb0015qkl582jcexle","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>MySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档<a href=\"/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/\">MySQL5.6在CentOS6.6安装步骤</a>和<a href=\"/2015/07/26/MySQL5.6.25主从复制/\">MySQL5.6.25节点复制</a></p>\n<a id=\"more\"></a>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>MySQL-VIP：192.168.11.200<br>MySQL-Master：192.168.11.128<br>MySQL-Slave：192.168.11.129</p>\n<p>OS版本：CentOS 6.6<br>MySQL版本：5.6.25<br>Keepalived版本：1.2.19</p>\n<h3 id=\"keepalived的安装\"><a href=\"#keepalived的安装\" class=\"headerlink\" title=\"keepalived的安装\"></a>keepalived的安装</h3><p>首先在安装keepalived之前检查下是否安装了openssl<br>shell&gt; rpm -qa|grep openssl<br>查的结果表示已经安装了或者需要安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;yum –y install openssl-devel</span><br></pre></td></tr></table></figure></p>\n<p>下载解压安装keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;tar -zxvf keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;cd keepalived-1.2.19</span><br><span class=\"line\">shell&gt;./configure --prefix=/usr/local/keepalived</span><br><span class=\"line\">shell&gt;make</span><br><span class=\"line\">shell&gt;make install</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"keepalived相关文件复制到系统对应的目录下\"><a href=\"#keepalived相关文件复制到系统对应的目录下\" class=\"headerlink\" title=\"keepalived相关文件复制到系统对应的目录下\"></a>keepalived相关文件复制到系统对应的目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/</span><br><span class=\"line\">shell&gt;mkdir /etc/keepalived</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/</span><br></pre></td></tr></table></figure>\n<h3 id=\"keepalived-配置\"><a href=\"#keepalived-配置\" class=\"headerlink\" title=\"keepalived 配置\"></a>keepalived 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /etc/keepalived/keepalived.cnf</span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     acassen@firewall.loc</span><br><span class=\"line\">     failover@firewall.loc</span><br><span class=\"line\">     sysadmin@firewall.loc</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 192.168.11.128</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER \t#MASTER|SLAVE</span><br><span class=\"line\">    interface eth0\t#虚拟IP绑定网卡</span><br><span class=\"line\">    virtual_router_id 51 #节点中必须相同</span><br><span class=\"line\">    priority 100\t\t#优先级</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.11.200 #虚拟IP</span><br><span class=\"line\">        192.168.11.201</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.11.200 3306 &#123;</span><br><span class=\"line\">    delay_loop 2\t#每个6秒检查一次real_server状态</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50 #会话保持时间</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\">\t</span><br><span class=\"line\">    real_server 192.168.11.128 3306 &#123;</span><br><span class=\"line\">       weight 1</span><br><span class=\"line\">\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本</span><br><span class=\"line\">        TCP_CHECK &#123; </span><br><span class=\"line\">\t\t\tconnect_timeout 10 #连接超时时间</span><br><span class=\"line\">\t\t\tnb_get_retry 3 #重连次数</span><br><span class=\"line\">\t\t\tdelay_before_retry 3 #重连间隔时间</span><br><span class=\"line\">\t\t\tconnect_port 3306 #健康检查端口</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写检测服务down后所执行的脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /usr/local/mysql/bin/mysql.sh</span><br><span class=\"line\">#杀掉keepalived 的进程</span><br><span class=\"line\">pkill keepalived</span><br><span class=\"line\">shell&gt; chmod 744 /usr/local/mysql/bin/mysql.sh</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP</em></strong><br>在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动MySQL ,keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheel&gt;service mysqld start</span><br><span class=\"line\">sheel&gt;service keepalived start</span><br><span class=\"line\">sheel&gt;service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>查看vip 是否已经帮到到了网卡eth0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;ip a</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt><br>关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>MySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档<a href=\"/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/\">MySQL5.6在CentOS6.6安装步骤</a>和<a href=\"/2015/07/26/MySQL5.6.25主从复制/\">MySQL5.6.25节点复制</a></p>","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>MySQL-VIP：192.168.11.200<br>MySQL-Master：192.168.11.128<br>MySQL-Slave：192.168.11.129</p>\n<p>OS版本：CentOS 6.6<br>MySQL版本：5.6.25<br>Keepalived版本：1.2.19</p>\n<h3 id=\"keepalived的安装\"><a href=\"#keepalived的安装\" class=\"headerlink\" title=\"keepalived的安装\"></a>keepalived的安装</h3><p>首先在安装keepalived之前检查下是否安装了openssl<br>shell&gt; rpm -qa|grep openssl<br>查的结果表示已经安装了或者需要安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;yum –y install openssl-devel</span><br></pre></td></tr></table></figure></p>\n<p>下载解压安装keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;tar -zxvf keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;cd keepalived-1.2.19</span><br><span class=\"line\">shell&gt;./configure --prefix=/usr/local/keepalived</span><br><span class=\"line\">shell&gt;make</span><br><span class=\"line\">shell&gt;make install</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"keepalived相关文件复制到系统对应的目录下\"><a href=\"#keepalived相关文件复制到系统对应的目录下\" class=\"headerlink\" title=\"keepalived相关文件复制到系统对应的目录下\"></a>keepalived相关文件复制到系统对应的目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/</span><br><span class=\"line\">shell&gt;mkdir /etc/keepalived</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/</span><br></pre></td></tr></table></figure>\n<h3 id=\"keepalived-配置\"><a href=\"#keepalived-配置\" class=\"headerlink\" title=\"keepalived 配置\"></a>keepalived 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /etc/keepalived/keepalived.cnf</span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     acassen@firewall.loc</span><br><span class=\"line\">     failover@firewall.loc</span><br><span class=\"line\">     sysadmin@firewall.loc</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 192.168.11.128</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER \t#MASTER|SLAVE</span><br><span class=\"line\">    interface eth0\t#虚拟IP绑定网卡</span><br><span class=\"line\">    virtual_router_id 51 #节点中必须相同</span><br><span class=\"line\">    priority 100\t\t#优先级</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.11.200 #虚拟IP</span><br><span class=\"line\">        192.168.11.201</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.11.200 3306 &#123;</span><br><span class=\"line\">    delay_loop 2\t#每个6秒检查一次real_server状态</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50 #会话保持时间</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\">\t</span><br><span class=\"line\">    real_server 192.168.11.128 3306 &#123;</span><br><span class=\"line\">       weight 1</span><br><span class=\"line\">\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本</span><br><span class=\"line\">        TCP_CHECK &#123; </span><br><span class=\"line\">\t\t\tconnect_timeout 10 #连接超时时间</span><br><span class=\"line\">\t\t\tnb_get_retry 3 #重连次数</span><br><span class=\"line\">\t\t\tdelay_before_retry 3 #重连间隔时间</span><br><span class=\"line\">\t\t\tconnect_port 3306 #健康检查端口</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写检测服务down后所执行的脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /usr/local/mysql/bin/mysql.sh</span><br><span class=\"line\">#杀掉keepalived 的进程</span><br><span class=\"line\">pkill keepalived</span><br><span class=\"line\">shell&gt; chmod 744 /usr/local/mysql/bin/mysql.sh</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP</em></strong><br>在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动MySQL ,keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheel&gt;service mysqld start</span><br><span class=\"line\">sheel&gt;service keepalived start</span><br><span class=\"line\">sheel&gt;service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>查看vip 是否已经帮到到了网卡eth0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;ip a</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt><br>关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功</p>"},{"title":"MySQL5.6.25主从复制","date":"2015-07-25T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 配置主节点\n配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下\n\n```\n[mysqld]\nlog-bin=mysql-bin\nserver-id=1\n#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部\n#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置\n```\n<!--more-->\n***备注***\n如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。\n### 配置从节点\n```\n[mysqld]\nserver-id=2\n#relay-log=mysqld-relay-bin 可选\n```\n\n### 为复制创建用户\n```sql\nmysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';\n```\n\n### 获取二进制日志文件路径\n```sql\nmysql> FLUSH TABLES WITH READ LOCK;\n```\n在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：\n```\nmysql > SHOW MASTER STATUS;\n+---------------+----------+--------------+------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+---------------+----------+--------------+------------------+\n| mysql-bin.000003 | 73       | test         | manual,mysql     |\n+------------------+----------+--------------+---------------+\n```\n该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。\n\n### 使用mysqldump创建数据快照(可选)\n这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：\n```\nshell> mysqldump --all-databases --master-data > dbdump.db\n```\n\n### 使用原数据创建数据快照（可选）\n1.获取二进制日志文件路径参照第四步\n2.关闭主服务\n```\nshell> mysqladmin shutdown\n```\n3.复制数据库文件下面的命令只需要选择一个\n```\nshell> tar cf /tmp/db.tar ./data\nshell> zip -r /tmp/db.zip ./data\nshell> rsync --recursive ./data /tmp/dbdata\n```\n4.重启主节点服务\n如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤\n\n### 在从节点中设置主配置\n要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：\n```sql\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master_host_name',\n    ->     MASTER_USER='replication_user_name',\n    ->     MASTER_PASSWORD='replication_password',\n    ->     MASTER_LOG_FILE='recorded_log_file_name',\n    ->     MASTER_LOG_POS=recorded_log_position;\n```\n其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003\t\n查看从节点运行状态\n```sql\nmysql> show slave status\\G;\n```\n![](1.png)\n![](2.png)\n\nMySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。\n看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息\nFatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work\n从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因\n第一：/etc/my.cnf文件中的server_id 相同我们可以通过\n```sql\nmysql> show variables like ‘server_id';\n```\n如果相同修改重启mysql服务。\n第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。\n找出这样的原因主要是因为直接copy mysql文件造成\n```sql\nshell> cat /var/lib/mysql/auto.cnf;\n```\n![](3.png)\n![](4.png)\n现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功\n启动slave开始复制\n```sql\nmysql> start slave;\n```","source":"_posts/MySQL5.6.25主从复制.md","raw":"---\ntitle: MySQL5.6.25主从复制\ndate: 2015-07-26\ncomments: true\ncategories: MySQL\ntoc: true \n---\n\n### 配置主节点\n配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下\n\n```\n[mysqld]\nlog-bin=mysql-bin\nserver-id=1\n#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部\n#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置\n```\n<!--more-->\n***备注***\n如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。\n### 配置从节点\n```\n[mysqld]\nserver-id=2\n#relay-log=mysqld-relay-bin 可选\n```\n\n### 为复制创建用户\n```sql\nmysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';\n```\n\n### 获取二进制日志文件路径\n```sql\nmysql> FLUSH TABLES WITH READ LOCK;\n```\n在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：\n```\nmysql > SHOW MASTER STATUS;\n+---------------+----------+--------------+------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+---------------+----------+--------------+------------------+\n| mysql-bin.000003 | 73       | test         | manual,mysql     |\n+------------------+----------+--------------+---------------+\n```\n该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。\n\n### 使用mysqldump创建数据快照(可选)\n这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：\n```\nshell> mysqldump --all-databases --master-data > dbdump.db\n```\n\n### 使用原数据创建数据快照（可选）\n1.获取二进制日志文件路径参照第四步\n2.关闭主服务\n```\nshell> mysqladmin shutdown\n```\n3.复制数据库文件下面的命令只需要选择一个\n```\nshell> tar cf /tmp/db.tar ./data\nshell> zip -r /tmp/db.zip ./data\nshell> rsync --recursive ./data /tmp/dbdata\n```\n4.重启主节点服务\n如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤\n\n### 在从节点中设置主配置\n要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：\n```sql\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master_host_name',\n    ->     MASTER_USER='replication_user_name',\n    ->     MASTER_PASSWORD='replication_password',\n    ->     MASTER_LOG_FILE='recorded_log_file_name',\n    ->     MASTER_LOG_POS=recorded_log_position;\n```\n其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003\t\n查看从节点运行状态\n```sql\nmysql> show slave status\\G;\n```\n![](1.png)\n![](2.png)\n\nMySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。\n看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息\nFatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work\n从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因\n第一：/etc/my.cnf文件中的server_id 相同我们可以通过\n```sql\nmysql> show variables like ‘server_id';\n```\n如果相同修改重启mysql服务。\n第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。\n找出这样的原因主要是因为直接copy mysql文件造成\n```sql\nshell> cat /var/lib/mysql/auto.cnf;\n```\n![](3.png)\n![](4.png)\n现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功\n启动slave开始复制\n```sql\nmysql> start slave;\n```","slug":"MySQL5.6.25主从复制","published":1,"updated":"2021-06-25T02:00:18.042Z","layout":"post","photos":[],"link":"","_id":"ckqjatolc0017qkl582x8erdp","content":"<h3 id=\"配置主节点\"><a href=\"#配置主节点\" class=\"headerlink\" title=\"配置主节点\"></a>配置主节点</h3><p>配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部</span><br><span class=\"line\">#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong><em>备注</em></strong><br>如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。</p>\n<h3 id=\"配置从节点\"><a href=\"#配置从节点\" class=\"headerlink\" title=\"配置从节点\"></a>配置从节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=2</span><br><span class=\"line\">#relay-log=mysqld-relay-bin 可选</span><br></pre></td></tr></table></figure>\n<h3 id=\"为复制创建用户\"><a href=\"#为复制创建用户\" class=\"headerlink\" title=\"为复制创建用户\"></a>为复制创建用户</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';</span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取二进制日志文件路径\"><a href=\"#获取二进制日志文件路径\" class=\"headerlink\" title=\"获取二进制日志文件路径\"></a>获取二进制日志文件路径</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>\n<p>在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; SHOW MASTER STATUS;</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| mysql-bin.000003 | 73       | test         | manual,mysql     |</span><br><span class=\"line\">+------------------+----------+--------------+---------------+</span><br></pre></td></tr></table></figure></p>\n<p>该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。</p>\n<h3 id=\"使用mysqldump创建数据快照-可选\"><a href=\"#使用mysqldump创建数据快照-可选\" class=\"headerlink\" title=\"使用mysqldump创建数据快照(可选)\"></a>使用mysqldump创建数据快照(可选)</h3><p>这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqldump --all-databases --master-data &gt; dbdump.db</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用原数据创建数据快照（可选）\"><a href=\"#使用原数据创建数据快照（可选）\" class=\"headerlink\" title=\"使用原数据创建数据快照（可选）\"></a>使用原数据创建数据快照（可选）</h3><p>1.获取二进制日志文件路径参照第四步<br>2.关闭主服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqladmin shutdown</span><br></pre></td></tr></table></figure></p>\n<p>3.复制数据库文件下面的命令只需要选择一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; tar cf /tmp/db.tar ./data</span><br><span class=\"line\">shell&gt; zip -r /tmp/db.zip ./data</span><br><span class=\"line\">shell&gt; rsync --recursive ./data /tmp/dbdata</span><br></pre></td></tr></table></figure></p>\n<p>4.重启主节点服务<br>如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤</p>\n<h3 id=\"在从节点中设置主配置\"><a href=\"#在从节点中设置主配置\" class=\"headerlink\" title=\"在从节点中设置主配置\"></a>在从节点中设置主配置</h3><p>要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CHANGE MASTER TO</span><br><span class=\"line\">    -&gt;     MASTER_HOST='master_host_name',</span><br><span class=\"line\">    -&gt;     MASTER_USER='replication_user_name',</span><br><span class=\"line\">    -&gt;     MASTER_PASSWORD='replication_password',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_FILE='recorded_log_file_name',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_POS=recorded_log_position;</span><br></pre></td></tr></table></figure></p>\n<p>其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003<br>查看从节点运行状态<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt><br><img src=\"2.png\" alt></p>\n<p>MySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。<br>看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息<br>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work<br>从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因<br>第一：/etc/my.cnf文件中的server_id 相同我们可以通过<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like ‘server_id';</span><br></pre></td></tr></table></figure></p>\n<p>如果相同修改重启mysql服务。<br>第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。<br>找出这样的原因主要是因为直接copy mysql文件造成<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; cat /var/lib/mysql/auto.cnf;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"3.png\" alt><br><img src=\"4.png\" alt><br>现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功<br>启动slave开始复制<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"配置主节点\"><a href=\"#配置主节点\" class=\"headerlink\" title=\"配置主节点\"></a>配置主节点</h3><p>配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部</span><br><span class=\"line\">#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置</span><br></pre></td></tr></table></figure>","more":"<p><strong><em>备注</em></strong><br>如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。</p>\n<h3 id=\"配置从节点\"><a href=\"#配置从节点\" class=\"headerlink\" title=\"配置从节点\"></a>配置从节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=2</span><br><span class=\"line\">#relay-log=mysqld-relay-bin 可选</span><br></pre></td></tr></table></figure>\n<h3 id=\"为复制创建用户\"><a href=\"#为复制创建用户\" class=\"headerlink\" title=\"为复制创建用户\"></a>为复制创建用户</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';</span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取二进制日志文件路径\"><a href=\"#获取二进制日志文件路径\" class=\"headerlink\" title=\"获取二进制日志文件路径\"></a>获取二进制日志文件路径</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>\n<p>在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; SHOW MASTER STATUS;</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| mysql-bin.000003 | 73       | test         | manual,mysql     |</span><br><span class=\"line\">+------------------+----------+--------------+---------------+</span><br></pre></td></tr></table></figure></p>\n<p>该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。</p>\n<h3 id=\"使用mysqldump创建数据快照-可选\"><a href=\"#使用mysqldump创建数据快照-可选\" class=\"headerlink\" title=\"使用mysqldump创建数据快照(可选)\"></a>使用mysqldump创建数据快照(可选)</h3><p>这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqldump --all-databases --master-data &gt; dbdump.db</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用原数据创建数据快照（可选）\"><a href=\"#使用原数据创建数据快照（可选）\" class=\"headerlink\" title=\"使用原数据创建数据快照（可选）\"></a>使用原数据创建数据快照（可选）</h3><p>1.获取二进制日志文件路径参照第四步<br>2.关闭主服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqladmin shutdown</span><br></pre></td></tr></table></figure></p>\n<p>3.复制数据库文件下面的命令只需要选择一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; tar cf /tmp/db.tar ./data</span><br><span class=\"line\">shell&gt; zip -r /tmp/db.zip ./data</span><br><span class=\"line\">shell&gt; rsync --recursive ./data /tmp/dbdata</span><br></pre></td></tr></table></figure></p>\n<p>4.重启主节点服务<br>如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤</p>\n<h3 id=\"在从节点中设置主配置\"><a href=\"#在从节点中设置主配置\" class=\"headerlink\" title=\"在从节点中设置主配置\"></a>在从节点中设置主配置</h3><p>要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CHANGE MASTER TO</span><br><span class=\"line\">    -&gt;     MASTER_HOST='master_host_name',</span><br><span class=\"line\">    -&gt;     MASTER_USER='replication_user_name',</span><br><span class=\"line\">    -&gt;     MASTER_PASSWORD='replication_password',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_FILE='recorded_log_file_name',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_POS=recorded_log_position;</span><br></pre></td></tr></table></figure></p>\n<p>其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003<br>查看从节点运行状态<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt><br><img src=\"2.png\" alt></p>\n<p>MySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。<br>看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息<br>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work<br>从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因<br>第一：/etc/my.cnf文件中的server_id 相同我们可以通过<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like ‘server_id';</span><br></pre></td></tr></table></figure></p>\n<p>如果相同修改重启mysql服务。<br>第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。<br>找出这样的原因主要是因为直接copy mysql文件造成<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; cat /var/lib/mysql/auto.cnf;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"3.png\" alt><br><img src=\"4.png\" alt><br>现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功<br>启动slave开始复制<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br></pre></td></tr></table></figure></p>"},{"title":"Linux常见问题解决方法","date":"2016-05-10T12:05:33.000Z","comments":1,"_content":"\n### 使用SSH登陆Linux的时候提示\n 1. 问题描述\n```shell\nThe host '192.168.1.240' is unreachable.\nthe host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall\n```\n**解决办法**\n<!-- more -->\n 1. 关闭防火墙\n```shell\nservice iptables stop(重启生效)\niptables -F(立即生效)\n```\n***如果通过上面的方法还是无法连接那就是sshd服务没有启动***\n\n 2. 启动服务就可以正常访问。\n```shell\n service sshd start\n```\n\n\n----------\n### connect network is unreachable\n原因是没有正确设置IP地址\n**解决办法**\n 1. 修改ifcfg-eth0\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n\nservice network restart\nroute add default  gw 192.168.1.1(设置网关)\nservice network restart\n```\n----------\n\n### linux从一台主机复杂文件目录到另一台\n\n 1. 复制文件\n```shell\nscp conf.xml root@192.168.1.240:/usr/conf\n\n说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n 2. 复制目录\n```shell\nscp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat\n\n说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n\n----------\n### make：cc：命令未找到\n**解决办法**\n 1. 安装gcc\n```shell\nyum -y install gcc automake autoconf libtool make\n```\n\n\n----------\n\n### /bin/sh:ctags:command not found\n**解决办法**\n 1. 安装ctags\n```shell\nyum install ctags\n```\n\n\n\n\n","source":"_posts/Linux常见问题解决方法.md","raw":"---\ntitle: Linux常见问题解决方法\ndate: 2016-05-10 20:05:33 \ncomments: true \ncategories: Linux\n---\n\n### 使用SSH登陆Linux的时候提示\n 1. 问题描述\n```shell\nThe host '192.168.1.240' is unreachable.\nthe host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall\n```\n**解决办法**\n<!-- more -->\n 1. 关闭防火墙\n```shell\nservice iptables stop(重启生效)\niptables -F(立即生效)\n```\n***如果通过上面的方法还是无法连接那就是sshd服务没有启动***\n\n 2. 启动服务就可以正常访问。\n```shell\n service sshd start\n```\n\n\n----------\n### connect network is unreachable\n原因是没有正确设置IP地址\n**解决办法**\n 1. 修改ifcfg-eth0\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n\nservice network restart\nroute add default  gw 192.168.1.1(设置网关)\nservice network restart\n```\n----------\n\n### linux从一台主机复杂文件目录到另一台\n\n 1. 复制文件\n```shell\nscp conf.xml root@192.168.1.240:/usr/conf\n\n说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n 2. 复制目录\n```shell\nscp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat\n\n说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n\n----------\n### make：cc：命令未找到\n**解决办法**\n 1. 安装gcc\n```shell\nyum -y install gcc automake autoconf libtool make\n```\n\n\n----------\n\n### /bin/sh:ctags:command not found\n**解决办法**\n 1. 安装ctags\n```shell\nyum install ctags\n```\n\n\n\n\n","slug":"Linux常见问题解决方法","published":1,"updated":"2021-06-25T02:00:18.037Z","layout":"post","photos":[],"link":"","_id":"ckqjatole001aqkl5cwgzxlwm","content":"<h3 id=\"使用SSH登陆Linux的时候提示\"><a href=\"#使用SSH登陆Linux的时候提示\" class=\"headerlink\" title=\"使用SSH登陆Linux的时候提示\"></a>使用SSH登陆Linux的时候提示</h3><ol>\n<li>问题描述<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The host '192.168.1.240' is unreachable.</span><br><span class=\"line\">the host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>解决办法</strong><br><a id=\"more\"></a></p>\n<ol>\n<li>关闭防火墙<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop(重启生效)</span><br><span class=\"line\">iptables -F(立即生效)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>如果通过上面的方法还是无法连接那就是sshd服务没有启动</em></strong></p>\n<ol start=\"2\">\n<li>启动服务就可以正常访问。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"connect-network-is-unreachable\"><a href=\"#connect-network-is-unreachable\" class=\"headerlink\" title=\"connect network is unreachable\"></a>connect network is unreachable</h3><p>原因是没有正确设置IP地址<br><strong>解决办法</strong></p>\n<ol>\n<li>修改ifcfg-eth0<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\"></span><br><span class=\"line\">service network restart</span><br><span class=\"line\">route add default  gw 192.168.1.1(设置网关)</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"linux从一台主机复杂文件目录到另一台\"><a href=\"#linux从一台主机复杂文件目录到另一台\" class=\"headerlink\" title=\"linux从一台主机复杂文件目录到另一台\"></a>linux从一台主机复杂文件目录到另一台</h3><ol>\n<li><p>复制文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp conf.xml root@192.168.1.240:/usr/conf</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"make：cc：命令未找到\"><a href=\"#make：cc：命令未找到\" class=\"headerlink\" title=\"make：cc：命令未找到\"></a>make：cc：命令未找到</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装gcc<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"bin-sh-ctags-command-not-found\"><a href=\"#bin-sh-ctags-command-not-found\" class=\"headerlink\" title=\"/bin/sh:ctags:command not found\"></a>/bin/sh:ctags:command not found</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装ctags<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ctags</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用SSH登陆Linux的时候提示\"><a href=\"#使用SSH登陆Linux的时候提示\" class=\"headerlink\" title=\"使用SSH登陆Linux的时候提示\"></a>使用SSH登陆Linux的时候提示</h3><ol>\n<li>问题描述<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The host '192.168.1.240' is unreachable.</span><br><span class=\"line\">the host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>解决办法</strong><br>","more":"</p>\n<ol>\n<li>关闭防火墙<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop(重启生效)</span><br><span class=\"line\">iptables -F(立即生效)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>如果通过上面的方法还是无法连接那就是sshd服务没有启动</em></strong></p>\n<ol start=\"2\">\n<li>启动服务就可以正常访问。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"connect-network-is-unreachable\"><a href=\"#connect-network-is-unreachable\" class=\"headerlink\" title=\"connect network is unreachable\"></a>connect network is unreachable</h3><p>原因是没有正确设置IP地址<br><strong>解决办法</strong></p>\n<ol>\n<li>修改ifcfg-eth0<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\"></span><br><span class=\"line\">service network restart</span><br><span class=\"line\">route add default  gw 192.168.1.1(设置网关)</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"linux从一台主机复杂文件目录到另一台\"><a href=\"#linux从一台主机复杂文件目录到另一台\" class=\"headerlink\" title=\"linux从一台主机复杂文件目录到另一台\"></a>linux从一台主机复杂文件目录到另一台</h3><ol>\n<li><p>复制文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp conf.xml root@192.168.1.240:/usr/conf</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"make：cc：命令未找到\"><a href=\"#make：cc：命令未找到\" class=\"headerlink\" title=\"make：cc：命令未找到\"></a>make：cc：命令未找到</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装gcc<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"bin-sh-ctags-command-not-found\"><a href=\"#bin-sh-ctags-command-not-found\" class=\"headerlink\" title=\"/bin/sh:ctags:command not found\"></a>/bin/sh:ctags:command not found</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装ctags<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ctags</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"MySQL5.6在CentOS6.6安装步骤","date":"2015-07-24T16:00:00.000Z","comments":1,"toc":true,"_content":"\n\n### 前言\n此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。\n\n### 下载MySQL Yum Repository\n为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。\n针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。\n```\nshell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n其他版本对照下载\nRed Hat Enterprise Linux 7 / Oracle Linux 7\nshell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nRed Hat Enterprise Linux 5 / Oracle Linux 5\nshell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm\n```\n<!--more-->\n\n### 安装MySQL Yum Repository\n```\nshell rpm -Uvh mysql-community-release-el6-5.noarch.rpm\n```\n也可以通过yum安装\n```\nshell yum localinstall platform-and-version-specific-package-name.rpm\n```\n### 验证是否安装成\n\n```\n查找启用的MySQL Yum Repository\nshell yum repolist enabled | grep \"mysql.*-community.*\"\n查找所有的MySQL Yum Repository\nshell yum repolist all | grep mysql\n```\n![mysql](1.png)\n禁用mysql57-community-dmr\n```\nshell yum-config-manager – disable mysql57-community-dmr\n```\n启用mysql56-community\n```\nshell yum-config-manager -- enable mysql56-community\n```\n***备注：***\nYum Repository 的配置文件在linux的目录是/etc/yum.repos.d/\n\n### 安装MySQL\n```\nshell yum install mysql-server\n```\n### 启动MySQL 服务\n```\nshell service mysqld start\n```\n注意针对低版本的使用service mysql start\n查看运行状态\n```\nshell service mysqld status\nmysqld (pid 23192) is runing...\n```\n表示启动成功\n\n如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下\n```\nshell cp /usr/share/mysql/my-default.cnf /etc/my.cnf\n```\n当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。\n\n### 目录介绍\n数据库目录：/var/lib/mysql\n配置文件目录：/usr/share/mysql\n命令目录：/usr/bin mysql*\t\n\n### 修改MySQL root用户密码\n```\nshell mysql admin –u root password ‘newpassword’\n```\n### 登录MySQL\n![MYSQL](2.png)\n设置root用户远程访问\n```\nshell GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.16.%' IDENTIFIED BY 'password' WITH GRANT OPTION;\nshell flush privileges;//刷新立即生效\n```\n开启防火墙的3306端口\n在/etc/sysconfig/iptables文件中添加如下内容\n![MYSQL](3.png)\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：\n```\nshell service iptables restart\n```\n如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙\n```\nservice iptables stop\n```\nCentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。\n\nFirewalld中添加端口方法如下：\n```\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n```","source":"_posts/MySQL5.6.25在CentOS6.6的安装步骤.md","raw":"---\ntitle: MySQL5.6在CentOS6.6安装步骤\ndate: 2015-07-25\ncomments: true\ncategories: MySQL\ntoc: true \n---\n\n\n### 前言\n此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。\n\n### 下载MySQL Yum Repository\n为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。\n针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。\n```\nshell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n其他版本对照下载\nRed Hat Enterprise Linux 7 / Oracle Linux 7\nshell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nRed Hat Enterprise Linux 5 / Oracle Linux 5\nshell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm\n```\n<!--more-->\n\n### 安装MySQL Yum Repository\n```\nshell rpm -Uvh mysql-community-release-el6-5.noarch.rpm\n```\n也可以通过yum安装\n```\nshell yum localinstall platform-and-version-specific-package-name.rpm\n```\n### 验证是否安装成\n\n```\n查找启用的MySQL Yum Repository\nshell yum repolist enabled | grep \"mysql.*-community.*\"\n查找所有的MySQL Yum Repository\nshell yum repolist all | grep mysql\n```\n![mysql](1.png)\n禁用mysql57-community-dmr\n```\nshell yum-config-manager – disable mysql57-community-dmr\n```\n启用mysql56-community\n```\nshell yum-config-manager -- enable mysql56-community\n```\n***备注：***\nYum Repository 的配置文件在linux的目录是/etc/yum.repos.d/\n\n### 安装MySQL\n```\nshell yum install mysql-server\n```\n### 启动MySQL 服务\n```\nshell service mysqld start\n```\n注意针对低版本的使用service mysql start\n查看运行状态\n```\nshell service mysqld status\nmysqld (pid 23192) is runing...\n```\n表示启动成功\n\n如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下\n```\nshell cp /usr/share/mysql/my-default.cnf /etc/my.cnf\n```\n当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。\n\n### 目录介绍\n数据库目录：/var/lib/mysql\n配置文件目录：/usr/share/mysql\n命令目录：/usr/bin mysql*\t\n\n### 修改MySQL root用户密码\n```\nshell mysql admin –u root password ‘newpassword’\n```\n### 登录MySQL\n![MYSQL](2.png)\n设置root用户远程访问\n```\nshell GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.16.%' IDENTIFIED BY 'password' WITH GRANT OPTION;\nshell flush privileges;//刷新立即生效\n```\n开启防火墙的3306端口\n在/etc/sysconfig/iptables文件中添加如下内容\n![MYSQL](3.png)\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：\n```\nshell service iptables restart\n```\n如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙\n```\nservice iptables stop\n```\nCentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。\n\nFirewalld中添加端口方法如下：\n```\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n```","slug":"MySQL5.6.25在CentOS6.6的安装步骤","published":1,"updated":"2021-06-25T02:00:18.050Z","layout":"post","photos":[],"link":"","_id":"ckqjatolg001cqkl5k5n4k9w0","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。</p>\n<h3 id=\"下载MySQL-Yum-Repository\"><a href=\"#下载MySQL-Yum-Repository\" class=\"headerlink\" title=\"下载MySQL Yum Repository\"></a>下载MySQL Yum Repository</h3><p>为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。<br>针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span><br><span class=\"line\">其他版本对照下载</span><br><span class=\"line\">Red Hat Enterprise Linux 7 / Oracle Linux 7</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">Red Hat Enterprise Linux 5 / Oracle Linux 5</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"安装MySQL-Yum-Repository\"><a href=\"#安装MySQL-Yum-Repository\" class=\"headerlink\" title=\"安装MySQL Yum Repository\"></a>安装MySQL Yum Repository</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -Uvh mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>也可以通过yum安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum localinstall platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证是否安装成\"><a href=\"#验证是否安装成\" class=\"headerlink\" title=\"验证是否安装成\"></a>验证是否安装成</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找启用的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class=\"line\">查找所有的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"mysql\"><br>禁用mysql57-community-dmr<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager – disable mysql57-community-dmr</span><br></pre></td></tr></table></figure></p>\n<p>启用mysql56-community<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager -- enable mysql56-community</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>备注：</em></strong><br>Yum Repository 的配置文件在linux的目录是/etc/yum.repos.d/</p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install mysql-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动MySQL-服务\"><a href=\"#启动MySQL-服务\" class=\"headerlink\" title=\"启动MySQL 服务\"></a>启动MySQL 服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld start</span><br></pre></td></tr></table></figure>\n<p>注意针对低版本的使用service mysql start<br>查看运行状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld status</span><br><span class=\"line\">mysqld (pid 23192) is runing...</span><br></pre></td></tr></table></figure></p>\n<p>表示启动成功</p>\n<p>如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cp /usr/share/mysql/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。</p>\n<h3 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h3><p>数据库目录：/var/lib/mysql<br>配置文件目录：/usr/share/mysql<br>命令目录：/usr/bin mysql*    </p>\n<h3 id=\"修改MySQL-root用户密码\"><a href=\"#修改MySQL-root用户密码\" class=\"headerlink\" title=\"修改MySQL root用户密码\"></a>修改MySQL root用户密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell mysql admin –u root password ‘newpassword’</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p><img src=\"2.png\" alt=\"MYSQL\"><br>设置root用户远程访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;172.16.%&apos; IDENTIFIED BY &apos;password&apos; WITH GRANT OPTION;</span><br><span class=\"line\">shell flush privileges;//刷新立即生效</span><br></pre></td></tr></table></figure></p>\n<p>开启防火墙的3306端口<br>在/etc/sysconfig/iptables文件中添加如下内容<br><img src=\"3.png\" alt=\"MYSQL\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service iptables restart</span><br></pre></td></tr></table></figure></p>\n<p>如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>CentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。</p>\n<p>Firewalld中添加端口方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。</p>\n<h3 id=\"下载MySQL-Yum-Repository\"><a href=\"#下载MySQL-Yum-Repository\" class=\"headerlink\" title=\"下载MySQL Yum Repository\"></a>下载MySQL Yum Repository</h3><p>为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。<br>针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span><br><span class=\"line\">其他版本对照下载</span><br><span class=\"line\">Red Hat Enterprise Linux 7 / Oracle Linux 7</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">Red Hat Enterprise Linux 5 / Oracle Linux 5</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"安装MySQL-Yum-Repository\"><a href=\"#安装MySQL-Yum-Repository\" class=\"headerlink\" title=\"安装MySQL Yum Repository\"></a>安装MySQL Yum Repository</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -Uvh mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>也可以通过yum安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum localinstall platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证是否安装成\"><a href=\"#验证是否安装成\" class=\"headerlink\" title=\"验证是否安装成\"></a>验证是否安装成</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找启用的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class=\"line\">查找所有的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"mysql\"><br>禁用mysql57-community-dmr<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager – disable mysql57-community-dmr</span><br></pre></td></tr></table></figure></p>\n<p>启用mysql56-community<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager -- enable mysql56-community</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>备注：</em></strong><br>Yum Repository 的配置文件在linux的目录是/etc/yum.repos.d/</p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install mysql-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动MySQL-服务\"><a href=\"#启动MySQL-服务\" class=\"headerlink\" title=\"启动MySQL 服务\"></a>启动MySQL 服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld start</span><br></pre></td></tr></table></figure>\n<p>注意针对低版本的使用service mysql start<br>查看运行状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld status</span><br><span class=\"line\">mysqld (pid 23192) is runing...</span><br></pre></td></tr></table></figure></p>\n<p>表示启动成功</p>\n<p>如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cp /usr/share/mysql/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。</p>\n<h3 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h3><p>数据库目录：/var/lib/mysql<br>配置文件目录：/usr/share/mysql<br>命令目录：/usr/bin mysql*    </p>\n<h3 id=\"修改MySQL-root用户密码\"><a href=\"#修改MySQL-root用户密码\" class=\"headerlink\" title=\"修改MySQL root用户密码\"></a>修改MySQL root用户密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell mysql admin –u root password ‘newpassword’</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p><img src=\"2.png\" alt=\"MYSQL\"><br>设置root用户远程访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;172.16.%&apos; IDENTIFIED BY &apos;password&apos; WITH GRANT OPTION;</span><br><span class=\"line\">shell flush privileges;//刷新立即生效</span><br></pre></td></tr></table></figure></p>\n<p>开启防火墙的3306端口<br>在/etc/sysconfig/iptables文件中添加如下内容<br><img src=\"3.png\" alt=\"MYSQL\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service iptables restart</span><br></pre></td></tr></table></figure></p>\n<p>如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>CentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。</p>\n<p>Firewalld中添加端口方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>"},{"title":"Netty-4.1.4源码分析二之管道设计模式","date":"2016-12-25T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 管道模式的好处\n- 在Netty中对数据的处理编码解码读取都是通过管道模式串连起来，这些handler都是管道中的一个阀门。对于管道模式的好处在这里简单的说下。在一个比较复杂的大型系统中，假如存在某个对象或数据流需要被进行繁杂的逻辑处理的话，我们可以选择在一个大的组件中进行这些繁杂的逻辑处理，这种方式确实达到了目的，但却是简单粗暴的。或许在某些情况这种简单粗暴的方式将带来一些麻烦，例如我要改动其中某部分处理逻辑、我要添加一些处理逻辑到流程、我要在流程中减少一些处理逻辑时，这里有些看似简单的改动都让我们无从下手，除了对整个组件进行改动。整个系统看起来没有任何可扩展性和可重用性。\n是否有一种模式可以将整个处理流程进行详细划分，划分出的每个小模块互相独立且各自负责一段逻辑处理，这些逻辑处理小模块根据顺序连起来，前以模块的输出作为后一模块的输入，最后一个模块的输出为最终的处理结果。如此一来修改逻辑时只针对某个模块修改，添加或减少处理逻辑也可细化到某个模块颗粒度，并且每个模块可重复利用，可重用性大大增强。\n<!--more-->\n![](20150502184145168.png)\n\n### 管道模式在Netty中的应用\n- 在Netty中的管道对象就是DefaultChannelPipeline，他是Channel中的一个属性。下面我们具体来看看他的应用与实现\n\n```java\n//初始化管道对管道对管道中的通道添加处理器\n@Override\nprotected void initChannel(SocketChannel ch) throws Exception {\n    ChannelPipeline p = ch.pipeline();\n    p.addLast(\"frameDecoder\",new ProtobufVarint32FrameDecoder());//用于半包处理\n    p.addLast(\"protobufDecoder\",  new ProtobufDecoder(MessageProto.Message.getDefaultInstance()));\n    p.addLast(\"frameEncoder\", new ProtobufVarint32LengthFieldPrepender());\n    p.addLast(\"protobufEncoder\",  new ProtobufEncoder());\n    p.addLast(\"idleState\", new IdleStateHandler(connector.getIdleTime(), 0, 0));//此两项为添加心跳机制 10秒查看一次在线的客户端channel是否空闲\n    p.addLast(\"handler\", serverHandler);\n}\n```\nDefaultChannelPipeline源码分析\n```java\npublic class DefaultChannelPipeline implements ChannelPipeline {\n    //定义了一个设置头部处理器属性\n    final AbstractChannelHandlerContext head;\n\t//定义了一个设置尾部处理器属性\n    final AbstractChannelHandlerContext tail;\n\t\n    //向管道中添加处理器\n    @Override\n    public final ChannelPipeline addFirst(String name, ChannelHandler handler) {\n        return addFirst(null, name, handler);\n    }\n\t\n\t@Override\n    public final ChannelPipeline addFirst(EventExecutorGroup group, String name, ChannelHandler handler) {\n        final AbstractChannelHandlerContext newCtx;\n        synchronized (this) {\n            checkMultiplicity(handler);\n            name = filterName(name, handler);\n            newCtx = newContext(group, name, handler);\n            addFirst0(newCtx);\n            ...\n        }\n    }\n    //交换处理器位置将整个处理器串连在了Pipeline上\n    private void addFirst0(AbstractChannelHandlerContext newCtx) {\n        AbstractChannelHandlerContext nextCtx = head.next;\n        newCtx.prev = head;\n        newCtx.next = nextCtx;\n        head.next = newCtx;\n        nextCtx.prev = newCtx;\n    }\n\t\n    @Override\n    public final ChannelPipeline addLast(String name, ChannelHandler handler) {\n        return addLast(null, name, handler);\n    }\n    @Override\n    public final ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler) {\n        final AbstractChannelHandlerContext newCtx;\n        synchronized (this) {\n            checkMultiplicity(handler);\n            newCtx = newContext(group, filterName(name, handler), handler);\n            addLast0(newCtx);\n        }\n    }\n    private void addLast0(AbstractChannelHandlerContext newCtx) {\n        AbstractChannelHandlerContext prev = tail.prev;\n        newCtx.prev = prev;\n        newCtx.next = tail;\n        prev.next = newCtx;\n        tail.prev = newCtx;\n    }\n\t\n    @Override\n    public final ChannelPipeline fireChannelActive() {\n        AbstractChannelHandlerContext.invokeChannelActive(head);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelInactive() {\n        AbstractChannelHandlerContext.invokeChannelInactive(head);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireExceptionCaught(Throwable cause) {\n        AbstractChannelHandlerContext.invokeExceptionCaught(head, cause);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireUserEventTriggered(Object event) {\n        AbstractChannelHandlerContext.invokeUserEventTriggered(head, event);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelRead(Object msg) {\n        AbstractChannelHandlerContext.invokeChannelRead(head, msg);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelReadComplete() {\n        AbstractChannelHandlerContext.invokeChannelReadComplete(head);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelWritabilityChanged() {\n        AbstractChannelHandlerContext.invokeChannelWritabilityChanged(head);\n        return this;\n    }\n}\n```\n当有新的数据可读的时候channel将调用管道中的fireChannelRead() ,fireChannelReadComplete()发起了对管道中处理器的调用\n```java\nabstract class AbstractChannelHandlerContext extends DefaultAttributeMap implements ChannelHandlerContext, ResourceLeakHint {\n    static void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {\n        final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \"msg\"), next);\n        EventExecutor executor = next.executor();\n        if (executor.inEventLoop()) {\n            next.invokeChannelRead(m);\n        } else {\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    next.invokeChannelRead(m);\n                }\n            });\n        }\n    }\n    private void invokeChannelRead(Object msg) {\n        if (invokeHandler()) {\n            try {\n                ((ChannelInboundHandler) handler()).channelRead(this, msg);\n            } catch (Throwable t) {\n                notifyHandlerException(t);\n            }\n        } else {\n            fireChannelRead(msg);\n        }\n    }\t\n}\n```\n","source":"_posts/Netty-4.1.4源码分析二之管道设计模式.md","raw":"---\ntitle: Netty-4.1.4源码分析二之管道设计模式\ndate: 2016-12-26\ncomments: true\ncategories: Java\ntoc: true \n---\n\n### 管道模式的好处\n- 在Netty中对数据的处理编码解码读取都是通过管道模式串连起来，这些handler都是管道中的一个阀门。对于管道模式的好处在这里简单的说下。在一个比较复杂的大型系统中，假如存在某个对象或数据流需要被进行繁杂的逻辑处理的话，我们可以选择在一个大的组件中进行这些繁杂的逻辑处理，这种方式确实达到了目的，但却是简单粗暴的。或许在某些情况这种简单粗暴的方式将带来一些麻烦，例如我要改动其中某部分处理逻辑、我要添加一些处理逻辑到流程、我要在流程中减少一些处理逻辑时，这里有些看似简单的改动都让我们无从下手，除了对整个组件进行改动。整个系统看起来没有任何可扩展性和可重用性。\n是否有一种模式可以将整个处理流程进行详细划分，划分出的每个小模块互相独立且各自负责一段逻辑处理，这些逻辑处理小模块根据顺序连起来，前以模块的输出作为后一模块的输入，最后一个模块的输出为最终的处理结果。如此一来修改逻辑时只针对某个模块修改，添加或减少处理逻辑也可细化到某个模块颗粒度，并且每个模块可重复利用，可重用性大大增强。\n<!--more-->\n![](20150502184145168.png)\n\n### 管道模式在Netty中的应用\n- 在Netty中的管道对象就是DefaultChannelPipeline，他是Channel中的一个属性。下面我们具体来看看他的应用与实现\n\n```java\n//初始化管道对管道对管道中的通道添加处理器\n@Override\nprotected void initChannel(SocketChannel ch) throws Exception {\n    ChannelPipeline p = ch.pipeline();\n    p.addLast(\"frameDecoder\",new ProtobufVarint32FrameDecoder());//用于半包处理\n    p.addLast(\"protobufDecoder\",  new ProtobufDecoder(MessageProto.Message.getDefaultInstance()));\n    p.addLast(\"frameEncoder\", new ProtobufVarint32LengthFieldPrepender());\n    p.addLast(\"protobufEncoder\",  new ProtobufEncoder());\n    p.addLast(\"idleState\", new IdleStateHandler(connector.getIdleTime(), 0, 0));//此两项为添加心跳机制 10秒查看一次在线的客户端channel是否空闲\n    p.addLast(\"handler\", serverHandler);\n}\n```\nDefaultChannelPipeline源码分析\n```java\npublic class DefaultChannelPipeline implements ChannelPipeline {\n    //定义了一个设置头部处理器属性\n    final AbstractChannelHandlerContext head;\n\t//定义了一个设置尾部处理器属性\n    final AbstractChannelHandlerContext tail;\n\t\n    //向管道中添加处理器\n    @Override\n    public final ChannelPipeline addFirst(String name, ChannelHandler handler) {\n        return addFirst(null, name, handler);\n    }\n\t\n\t@Override\n    public final ChannelPipeline addFirst(EventExecutorGroup group, String name, ChannelHandler handler) {\n        final AbstractChannelHandlerContext newCtx;\n        synchronized (this) {\n            checkMultiplicity(handler);\n            name = filterName(name, handler);\n            newCtx = newContext(group, name, handler);\n            addFirst0(newCtx);\n            ...\n        }\n    }\n    //交换处理器位置将整个处理器串连在了Pipeline上\n    private void addFirst0(AbstractChannelHandlerContext newCtx) {\n        AbstractChannelHandlerContext nextCtx = head.next;\n        newCtx.prev = head;\n        newCtx.next = nextCtx;\n        head.next = newCtx;\n        nextCtx.prev = newCtx;\n    }\n\t\n    @Override\n    public final ChannelPipeline addLast(String name, ChannelHandler handler) {\n        return addLast(null, name, handler);\n    }\n    @Override\n    public final ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler) {\n        final AbstractChannelHandlerContext newCtx;\n        synchronized (this) {\n            checkMultiplicity(handler);\n            newCtx = newContext(group, filterName(name, handler), handler);\n            addLast0(newCtx);\n        }\n    }\n    private void addLast0(AbstractChannelHandlerContext newCtx) {\n        AbstractChannelHandlerContext prev = tail.prev;\n        newCtx.prev = prev;\n        newCtx.next = tail;\n        prev.next = newCtx;\n        tail.prev = newCtx;\n    }\n\t\n    @Override\n    public final ChannelPipeline fireChannelActive() {\n        AbstractChannelHandlerContext.invokeChannelActive(head);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelInactive() {\n        AbstractChannelHandlerContext.invokeChannelInactive(head);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireExceptionCaught(Throwable cause) {\n        AbstractChannelHandlerContext.invokeExceptionCaught(head, cause);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireUserEventTriggered(Object event) {\n        AbstractChannelHandlerContext.invokeUserEventTriggered(head, event);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelRead(Object msg) {\n        AbstractChannelHandlerContext.invokeChannelRead(head, msg);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelReadComplete() {\n        AbstractChannelHandlerContext.invokeChannelReadComplete(head);\n        return this;\n    }\n\n    @Override\n    public final ChannelPipeline fireChannelWritabilityChanged() {\n        AbstractChannelHandlerContext.invokeChannelWritabilityChanged(head);\n        return this;\n    }\n}\n```\n当有新的数据可读的时候channel将调用管道中的fireChannelRead() ,fireChannelReadComplete()发起了对管道中处理器的调用\n```java\nabstract class AbstractChannelHandlerContext extends DefaultAttributeMap implements ChannelHandlerContext, ResourceLeakHint {\n    static void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {\n        final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \"msg\"), next);\n        EventExecutor executor = next.executor();\n        if (executor.inEventLoop()) {\n            next.invokeChannelRead(m);\n        } else {\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    next.invokeChannelRead(m);\n                }\n            });\n        }\n    }\n    private void invokeChannelRead(Object msg) {\n        if (invokeHandler()) {\n            try {\n                ((ChannelInboundHandler) handler()).channelRead(this, msg);\n            } catch (Throwable t) {\n                notifyHandlerException(t);\n            }\n        } else {\n            fireChannelRead(msg);\n        }\n    }\t\n}\n```\n","slug":"Netty-4.1.4源码分析二之管道设计模式","published":1,"updated":"2021-06-25T02:00:18.086Z","layout":"post","photos":[],"link":"","_id":"ckqjatoli001fqkl5taf4bm7o","content":"<h3 id=\"管道模式的好处\"><a href=\"#管道模式的好处\" class=\"headerlink\" title=\"管道模式的好处\"></a>管道模式的好处</h3><ul>\n<li>在Netty中对数据的处理编码解码读取都是通过管道模式串连起来，这些handler都是管道中的一个阀门。对于管道模式的好处在这里简单的说下。在一个比较复杂的大型系统中，假如存在某个对象或数据流需要被进行繁杂的逻辑处理的话，我们可以选择在一个大的组件中进行这些繁杂的逻辑处理，这种方式确实达到了目的，但却是简单粗暴的。或许在某些情况这种简单粗暴的方式将带来一些麻烦，例如我要改动其中某部分处理逻辑、我要添加一些处理逻辑到流程、我要在流程中减少一些处理逻辑时，这里有些看似简单的改动都让我们无从下手，除了对整个组件进行改动。整个系统看起来没有任何可扩展性和可重用性。<br>是否有一种模式可以将整个处理流程进行详细划分，划分出的每个小模块互相独立且各自负责一段逻辑处理，这些逻辑处理小模块根据顺序连起来，前以模块的输出作为后一模块的输入，最后一个模块的输出为最终的处理结果。如此一来修改逻辑时只针对某个模块修改，添加或减少处理逻辑也可细化到某个模块颗粒度，并且每个模块可重复利用，可重用性大大增强。<a id=\"more\"></a>\n<img src=\"20150502184145168.png\" alt></li>\n</ul>\n<h3 id=\"管道模式在Netty中的应用\"><a href=\"#管道模式在Netty中的应用\" class=\"headerlink\" title=\"管道模式在Netty中的应用\"></a>管道模式在Netty中的应用</h3><ul>\n<li>在Netty中的管道对象就是DefaultChannelPipeline，他是Channel中的一个属性。下面我们具体来看看他的应用与实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化管道对管道对管道中的通道添加处理器</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    ChannelPipeline p = ch.pipeline();</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"frameDecoder\"</span>,<span class=\"keyword\">new</span> ProtobufVarint32FrameDecoder());<span class=\"comment\">//用于半包处理</span></span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"protobufDecoder\"</span>,  <span class=\"keyword\">new</span> ProtobufDecoder(MessageProto.Message.getDefaultInstance()));</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"frameEncoder\"</span>, <span class=\"keyword\">new</span> ProtobufVarint32LengthFieldPrepender());</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"protobufEncoder\"</span>,  <span class=\"keyword\">new</span> ProtobufEncoder());</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"idleState\"</span>, <span class=\"keyword\">new</span> IdleStateHandler(connector.getIdleTime(), <span class=\"number\">0</span>, <span class=\"number\">0</span>));<span class=\"comment\">//此两项为添加心跳机制 10秒查看一次在线的客户端channel是否空闲</span></span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"handler\"</span>, serverHandler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DefaultChannelPipeline源码分析<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultChannelPipeline</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelPipeline</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义了一个设置头部处理器属性</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> AbstractChannelHandlerContext head;</span><br><span class=\"line\">\t<span class=\"comment\">//定义了一个设置尾部处理器属性</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> AbstractChannelHandlerContext tail;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//向管道中添加处理器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addFirst</span><span class=\"params\">(String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addFirst(<span class=\"keyword\">null</span>, name, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addFirst</span><span class=\"params\">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AbstractChannelHandlerContext newCtx;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            checkMultiplicity(handler);</span><br><span class=\"line\">            name = filterName(name, handler);</span><br><span class=\"line\">            newCtx = newContext(group, name, handler);</span><br><span class=\"line\">            addFirst0(newCtx);</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换处理器位置将整个处理器串连在了Pipeline上</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst0</span><span class=\"params\">(AbstractChannelHandlerContext newCtx)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext nextCtx = head.next;</span><br><span class=\"line\">        newCtx.prev = head;</span><br><span class=\"line\">        newCtx.next = nextCtx;</span><br><span class=\"line\">        head.next = newCtx;</span><br><span class=\"line\">        nextCtx.prev = newCtx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addLast</span><span class=\"params\">(String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addLast(<span class=\"keyword\">null</span>, name, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addLast</span><span class=\"params\">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AbstractChannelHandlerContext newCtx;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            checkMultiplicity(handler);</span><br><span class=\"line\">            newCtx = newContext(group, filterName(name, handler), handler);</span><br><span class=\"line\">            addLast0(newCtx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast0</span><span class=\"params\">(AbstractChannelHandlerContext newCtx)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext prev = tail.prev;</span><br><span class=\"line\">        newCtx.prev = prev;</span><br><span class=\"line\">        newCtx.next = tail;</span><br><span class=\"line\">        prev.next = newCtx;</span><br><span class=\"line\">        tail.prev = newCtx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelActive(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelInactive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelInactive(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireExceptionCaught</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeExceptionCaught(head, cause);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireUserEventTriggered</span><span class=\"params\">(Object event)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeUserEventTriggered(head, event);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelRead</span><span class=\"params\">(Object msg)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelRead(head, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelReadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelReadComplete(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelWritabilityChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelWritabilityChanged(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当有新的数据可读的时候channel将调用管道中的fireChannelRead() ,fireChannelReadComplete()发起了对管道中处理器的调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractChannelHandlerContext</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultAttributeMap</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelHandlerContext</span>, <span class=\"title\">ResourceLeakHint</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeChannelRead</span><span class=\"params\">(<span class=\"keyword\">final</span> AbstractChannelHandlerContext next, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class=\"string\">\"msg\"</span>), next);</span><br><span class=\"line\">        EventExecutor executor = next.executor();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor.inEventLoop()) &#123;</span><br><span class=\"line\">            next.invokeChannelRead(m);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    next.invokeChannelRead(m);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeChannelRead</span><span class=\"params\">(Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (invokeHandler()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ((ChannelInboundHandler) handler()).channelRead(<span class=\"keyword\">this</span>, msg);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                notifyHandlerException(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fireChannelRead(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"管道模式的好处\"><a href=\"#管道模式的好处\" class=\"headerlink\" title=\"管道模式的好处\"></a>管道模式的好处</h3><ul>\n<li>在Netty中对数据的处理编码解码读取都是通过管道模式串连起来，这些handler都是管道中的一个阀门。对于管道模式的好处在这里简单的说下。在一个比较复杂的大型系统中，假如存在某个对象或数据流需要被进行繁杂的逻辑处理的话，我们可以选择在一个大的组件中进行这些繁杂的逻辑处理，这种方式确实达到了目的，但却是简单粗暴的。或许在某些情况这种简单粗暴的方式将带来一些麻烦，例如我要改动其中某部分处理逻辑、我要添加一些处理逻辑到流程、我要在流程中减少一些处理逻辑时，这里有些看似简单的改动都让我们无从下手，除了对整个组件进行改动。整个系统看起来没有任何可扩展性和可重用性。<br>是否有一种模式可以将整个处理流程进行详细划分，划分出的每个小模块互相独立且各自负责一段逻辑处理，这些逻辑处理小模块根据顺序连起来，前以模块的输出作为后一模块的输入，最后一个模块的输出为最终的处理结果。如此一来修改逻辑时只针对某个模块修改，添加或减少处理逻辑也可细化到某个模块颗粒度，并且每个模块可重复利用，可重用性大大增强。","more":"<img src=\"20150502184145168.png\" alt></li>\n</ul>\n<h3 id=\"管道模式在Netty中的应用\"><a href=\"#管道模式在Netty中的应用\" class=\"headerlink\" title=\"管道模式在Netty中的应用\"></a>管道模式在Netty中的应用</h3><ul>\n<li>在Netty中的管道对象就是DefaultChannelPipeline，他是Channel中的一个属性。下面我们具体来看看他的应用与实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化管道对管道对管道中的通道添加处理器</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    ChannelPipeline p = ch.pipeline();</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"frameDecoder\"</span>,<span class=\"keyword\">new</span> ProtobufVarint32FrameDecoder());<span class=\"comment\">//用于半包处理</span></span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"protobufDecoder\"</span>,  <span class=\"keyword\">new</span> ProtobufDecoder(MessageProto.Message.getDefaultInstance()));</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"frameEncoder\"</span>, <span class=\"keyword\">new</span> ProtobufVarint32LengthFieldPrepender());</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"protobufEncoder\"</span>,  <span class=\"keyword\">new</span> ProtobufEncoder());</span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"idleState\"</span>, <span class=\"keyword\">new</span> IdleStateHandler(connector.getIdleTime(), <span class=\"number\">0</span>, <span class=\"number\">0</span>));<span class=\"comment\">//此两项为添加心跳机制 10秒查看一次在线的客户端channel是否空闲</span></span><br><span class=\"line\">    p.addLast(<span class=\"string\">\"handler\"</span>, serverHandler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DefaultChannelPipeline源码分析<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultChannelPipeline</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelPipeline</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义了一个设置头部处理器属性</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> AbstractChannelHandlerContext head;</span><br><span class=\"line\">\t<span class=\"comment\">//定义了一个设置尾部处理器属性</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> AbstractChannelHandlerContext tail;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//向管道中添加处理器</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addFirst</span><span class=\"params\">(String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addFirst(<span class=\"keyword\">null</span>, name, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addFirst</span><span class=\"params\">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AbstractChannelHandlerContext newCtx;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            checkMultiplicity(handler);</span><br><span class=\"line\">            name = filterName(name, handler);</span><br><span class=\"line\">            newCtx = newContext(group, name, handler);</span><br><span class=\"line\">            addFirst0(newCtx);</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换处理器位置将整个处理器串连在了Pipeline上</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst0</span><span class=\"params\">(AbstractChannelHandlerContext newCtx)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext nextCtx = head.next;</span><br><span class=\"line\">        newCtx.prev = head;</span><br><span class=\"line\">        newCtx.next = nextCtx;</span><br><span class=\"line\">        head.next = newCtx;</span><br><span class=\"line\">        nextCtx.prev = newCtx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addLast</span><span class=\"params\">(String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addLast(<span class=\"keyword\">null</span>, name, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">addLast</span><span class=\"params\">(EventExecutorGroup group, String name, ChannelHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AbstractChannelHandlerContext newCtx;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            checkMultiplicity(handler);</span><br><span class=\"line\">            newCtx = newContext(group, filterName(name, handler), handler);</span><br><span class=\"line\">            addLast0(newCtx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast0</span><span class=\"params\">(AbstractChannelHandlerContext newCtx)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext prev = tail.prev;</span><br><span class=\"line\">        newCtx.prev = prev;</span><br><span class=\"line\">        newCtx.next = tail;</span><br><span class=\"line\">        prev.next = newCtx;</span><br><span class=\"line\">        tail.prev = newCtx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelActive(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelInactive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelInactive(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireExceptionCaught</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeExceptionCaught(head, cause);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireUserEventTriggered</span><span class=\"params\">(Object event)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeUserEventTriggered(head, event);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelRead</span><span class=\"params\">(Object msg)</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelRead(head, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelReadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelReadComplete(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ChannelPipeline <span class=\"title\">fireChannelWritabilityChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AbstractChannelHandlerContext.invokeChannelWritabilityChanged(head);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当有新的数据可读的时候channel将调用管道中的fireChannelRead() ,fireChannelReadComplete()发起了对管道中处理器的调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractChannelHandlerContext</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultAttributeMap</span> <span class=\"keyword\">implements</span> <span class=\"title\">ChannelHandlerContext</span>, <span class=\"title\">ResourceLeakHint</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeChannelRead</span><span class=\"params\">(<span class=\"keyword\">final</span> AbstractChannelHandlerContext next, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class=\"string\">\"msg\"</span>), next);</span><br><span class=\"line\">        EventExecutor executor = next.executor();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor.inEventLoop()) &#123;</span><br><span class=\"line\">            next.invokeChannelRead(m);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    next.invokeChannelRead(m);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeChannelRead</span><span class=\"params\">(Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (invokeHandler()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ((ChannelInboundHandler) handler()).channelRead(<span class=\"keyword\">this</span>, msg);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                notifyHandlerException(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fireChannelRead(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Netty-4.1.4源码分析一","date":"2016-12-22T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## Netty是什么\n- Netty是一个异步的事件驱动的网络应用程序框架用于快速开发可维护的高性能协议服务器和客户端。基于NIO客户端服务器框架，可以快速，轻松地开发网络应用程序，如协议服务器和客户端。 它大大简化和简化了网络编程，如TCP和UDP套接字服务器。\n<!--more-->\n![](components.png)\n### 特点\n- 1、设计\n - 1、针对各种传输类型的统一API - 阻止和非阻塞套接字\n - 2、基于灵活和可扩展的事件模型，允许清楚地分离关注点\n - 3、高度可定制的线程模型 - 单线程，一个或多个线程池，如SEDA\n - 4、真正的无连接数据报插座支持（自3.1版本）\n- 2、使用简单\n - 1、完善的文档\n - 2、独立不依赖其他环境包JDK1.5以上就足够了\n- 3、性能\n - 1、更好的吞吐量，更低的延迟\n - 2、减少资源消耗\n - 3、最小化不必要的内存复制\n- 4、安全\n - 1、支持SSL / TLS和StartTLS\n- 5、社区\n - 1、社区活跃。\n \n上面已经对Netty有了个大概的了解了下面我们就将具体分析Netty的一个内部运行机制、以及线程模型和内存零拷贝。今天主要是分析Netty的源码对于还不会使用Netty的同学请点击查看[Netty官方文档](http://netty.io/wiki/user-guide-for-4.x.html)。\n\n### 线程模型\n![](threadmodel.png)\n## 实例分析\n- \n```java\npublic class NettyServer{\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(); // (1)\n        EventLoopGroup workerGroup = new NioEventLoopGroup();// (2)\n\t\t\n        try {\n            ServerBootstrap b = new ServerBootstrap(); // (3)\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class) // (4)\n             .childHandler(new ChannelInitializer<SocketChannel>() { // (5)\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new DiscardServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)          // (6)\n             .childOption(ChannelOption.SO_KEEPALIVE, true); // (7)\n\n            // 绑定并开始接受传入连接。\n            ChannelFuture f = b.bind(port).sync(); // (8)\n\n            // 等待服务器套接字关闭。\n            // 关闭您的服务器。\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n\n```\n第一步：实例化bossGroup NioEventLoopGroup用于接受处理来自客户端的连接请求\n第二步：实例化workerGroup NioEventLoopGroup用于接受来处理自客户端的数据读写请求\n第三步：实例化一个设置服务器的助手类，对netty运行环境一个基础配置,串联起各个组件\n第四步：使用NioServerSocketChannel类，用于实例化新的通道以接受传入连接。\n第五步：指定的处理程序将始终由新接受的通道计算 。ChannelInitializer是一个特殊的处理程序，用于帮助用户配置新的通道。很可能要通过添加一些处理程序（例如DiscardServerHandler）来配置新频道的ChannelPipeline来实现您的网络应用程序\n第六步：设置通道选项参数如tcpNoDelay和keepAlive\n第七步：option（）用于接受传入连接的NioServerSocketChannel， childOption（）用于父NioServerSocketChannel接受的通道的设置\n第八步：绑定端口启动服务器。这里，我们绑定到机器中所有NIC（网络接口卡）的端口8080。 您现在可以根据需要多次调用bind（）方法（使用不同的绑定地址）。\n\n**注意：ServerBootstrap的配置中带有child的如（childHandler、childOption）是针对处理数据读取的NioSocketChanel的配置 ，不带的（如option）是针对NioServerSocketChannel的配置**\n\n## 源码分析\nNioEventLoopGroup是处理I/O操作的多线程事件循环。Netty为不同的类型传输提供了各种EventLoopGroup实现。new NioEventLoopGroup()实例化了一个多线程的事件执行器。线程池大小可以通过参数指定。不指定的情况下默认是cpu核数的2倍\n```java\npublic abstract class MultithreadEventLoopGroup extends MultithreadEventExecutorGroup implements EventLoopGroup {\n    private static final int DEFAULT_EVENT_LOOP_THREADS;\n    static {\n        //计算默认线程池大小\n        DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(\n                \"io.netty.eventLoopThreads\", Runtime.getRuntime().availableProcessors() * 2));\n    }\n\t\n    protected MultithreadEventLoopGroup(int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory,Object... args) {\n        super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, chooserFactory, args);\n    }\n}\npublic abstract class MultithreadEventExecutorGroup extends AbstractEventExecutorGroup {\n    \n    protected MultithreadEventExecutorGroup(int nThreads, Executor executor,EventExecutorChooserFactory chooserFactory, Object... args) {\n        if (executor == null) {\n            executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());\n        }\n        children = new EventExecutor[nThreads];\n        //创建EventLoop\n        for (int i = 0; i < nThreads; i ++) {\n            boolean success = false;\n            try {\n                children[i] = newChild(executor, args);\n                success = true;\n            } catch (Exception e) {\n                // TODO: Think about if this is a good exception type\n                throw new IllegalStateException(\"failed to create a child event loop\", e);\n            } finally {\n\t\t\t     ...\n            }   \n        }\n        //将事件执行器数组放入到选择器中\n        chooser = chooserFactory.newChooser(children);\n        ...\n    }\n\n}\n\npublic class NioEventLoopGroup extends MultithreadEventLoopGroup {\n    //创建EventLoop\n    @Override\n    protected EventLoop newChild(Executor executor, Object... args) throws Exception {\n        return new NioEventLoop(this, executor, (SelectorProvider) args[0],\n            ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2]);\n    }\n\n}\n\n```\nNioEventLoop是具体的事件循环类。通过SelectorProvider.openSelector()获得一个Selector。在run函数中循环的等待事件的发生\n```java\npublic final class NioEventLoop extends SingleThreadEventLoop {\n    private Selector openSelector() {\n        final Selector selector;\n        try {\n            selector = provider.openSelector();\n        }\n        ...\n    }\n\t\n\t@Override\n    protected void run() {\n        for (;;) {\n            try {\n                switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) {\n\t\t\t\t\n            }\n            ...\n            processSelectedKeys();\n        }\n    }\n    private void processSelectedKeys() {\n        if (selectedKeys != null) {\n            processSelectedKeysOptimized(selectedKeys.flip());\n        } else {\n            processSelectedKeysPlain(selector.selectedKeys());\n        }\n    }\n    private void processSelectedKeysOptimized(SelectionKey[] selectedKeys) {\n        for (int i = 0;; i ++) {\n            final SelectionKey k = selectedKeys[i];\n            final Object a = k.attachment();\n\t\t\tk.attachment 获取在Channel register的时候设置的att附件对象\n            if (a instanceof AbstractNioChannel) {\n                processSelectedKey(k, (AbstractNioChannel) a);\n            }\n        }\n    }\n    private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n        final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n        ...\n        if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n            unsafe.read();\n        }\n        ...\n    }\n}\n\n```\n\nServer端bind（绑定端口）从bossGroup NioEventLoopGroup线程池中按顺序从0开始获取一个NioEventLoop，如果已经超过了线程大小将又从0开始。\n```java\npublic class ServerBootstrap extends AbstractBootstrap{\n    Channel的管道配置当有OP_ACCEPT事件发生将调用管道的initChannel方法对新的Channel进行初始化并分别I/O线程\n    void init(Channel channel){\n        ChannelPipeline p = channel.pipeline();\n        p.addLast(new ChannelInitializer<Channel>() {\n            @Override\n            public void initChannel(Channel ch) throws Exception {\n                final ChannelPipeline pipeline = ch.pipeline();\n                ChannelHandler handler = config.handler();\n                if (handler != null) {\n                    pipeline.addLast(handler);\n                }\n                ch.eventLoop().execute(new Runnable() {\n                    @Override\n                    public void run() {\n                        pipeline.addLast(new ServerBootstrapAcceptor(\n                        currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n                    }\n                });\n            }\n        });\n    }\n}\n\npublic abstract class AbstractBootstrap{\n    private ChannelFuture doBind(final SocketAddress localAddress) {\n        //初始并注册\n        final ChannelFuture regFuture = initAndRegister();\n    }\n\n    final ChannelFuture initAndRegister() {\n        Channel channel = channelFactory.newChannel();\n        //初始化通道NioServerSocketChannel\n        init(channel);\n        //在Select中注册channel并添加OP_ACCEPT事件\n        ChannelFuture regFuture = config().group().register(channel);\n    }\n}\n\npublic abstract class MultithreadEventLoopGroup{\n    @Override\n    public ChannelFuture register(Channel channel) {\n        return next().register(channel);\n    }\n\n    @Override\n    public EventLoop next() {\n        return (EventLoop) super.next();\n    }\n\t//调用选择管理器的next方法返回一个EventExecutor\n    @Override\n    public EventExecutor next() {\n        return chooser.next();\n    }\n}\n\nprivate static final class GenericEventExecutorChooser{\n    //选择管理器next方法中通过idx.getAndIncrement()原子函数记录已经获取的次数通过%（摩）计算下标并返回EventExecutor\n    @Override\n    public EventExecutor next() {\n        return executors[Math.abs(idx.getAndIncrement() % executors.length)];\n    }\n}\n\npublic abstract class AbstractNioChannel extends AbstractChannel {\n    //在selector注册了Channel并且添加了OP_ACCEPT事件将this（NioMessageUnsafe的实例）作为附件att设置到selector上可通过selector.attachment()获取\n    protected void doRegister() throws Exception {\n        selectionKey = javaChannel().register(eventLoop().selector, 0, this);\n    }\n}\n\n```\nNioEventLoop是一个单线程的事件循环器（Selector），用户接受客服端的所有请求，当有新的客户端来连接Netty服务端接受到连接请求调用\nNioServerSocketChannel内部类NioMessageUnsafe的read方法读取消息，\n```java\nprivate final class NioMessageUnsafe extends AbstractNioUnsafe {\n    @Override\n    public void read() {\n        assert eventLoop().inEventLoop();\n        final ChannelConfig config = config();\n        final ChannelPipeline pipeline = pipeline();\n        final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();\n        allocHandle.reset(config);\n        boolean closed = false;\n        Throwable exception = null;\n        try {\n            try {\n                do {\n                    int localRead = doReadMessages(readBuf);\n                    if (localRead == 0) {\n                        break;\n                    }\n                    if (localRead < 0) {\n                        closed = true;\n                        break;\n                    }\n                    allocHandle.incMessagesRead(localRead);\n                } while (allocHandle.continueReading());\n            } catch (Throwable t) {\n                exception = t;\n            }\n            int size = readBuf.size();\n            for (int i = 0; i < size; i ++) {\n                readPending = false;\n                pipeline.fireChannelRead(readBuf.get(i));\n            }\n            readBuf.clear();\n            allocHandle.readComplete();\n            pipeline.fireChannelReadComplete();\n            ...\n        } finally {\n            ...\n        }\n    }\n}\n```\n在doReadMessages方法中通过SocketChannel ch = javaChannel().accept();接受到新的连接SocketChannel，并实例化NioSocketChannel(this, ch)。\n```java\nprotected int doReadMessages(List<Object> buf) throws Exception {\n    SocketChannel ch = javaChannel().accept();\n    try {\n        if (ch != null) {\n            buf.add(new NioSocketChannel(this, ch));\n            return 1;\n        }\n    } catch (Throwable t) {\n        logger.warn(\"Failed to create a new channel from an accepted socket.\", t);\n        try {\n            ch.close();\n        } catch (Throwable t2) {\n            logger.warn(\"Failed to close a socket.\", t2);\n        }\n    }\n    return 0;\n}\n```\n准备好上下文数据。通过pipeline.fireChannelReadComplete();发起了对NioServerSocketChannel管道ChannelInitializer initChannel方法的调用。注意Netty不管是针对handler 还是childHandler都是采用了管道设计模式。创建ServerBootstrapAcceptor用于处理新的连接并分配workGroup线程。\nchildGroup就是NioEventLoopGroup的实例对象workGroup\n```java\nprivate static class ServerBootstrapAcceptor extends ChannelInboundHandlerAdapter {\n    //读取数据为新的连接分配线程并且注册OP_READ事件\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        final Channel child = (Channel) msg;\n        child.pipeline().addLast(childHandler);\n        childGroup.register(child).addListener(new ChannelFutureListener() {\n            ... \n        }\n    }\n}\n```\nchildChannel对应的数据读取类为NioByteUnsafe，\n```java\nprotected class NioByteUnsafe extends AbstractNioUnsafe {\n    public final void read() {\n        final ChannelConfig config = config();\n        final ChannelPipeline pipeline = pipeline();\n        final ByteBufAllocator allocator = config.getAllocator();\n        final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();\n        allocHandle.reset(config);\n        ....\n        do {\n            byteBuf = allocHandle.allocate(allocator);\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            if (allocHandle.lastBytesRead() <= 0) {\n                // nothing was read. release the buffer.\n                byteBuf.release();\n                byteBuf = null;\n                close = allocHandle.lastBytesRead() < 0;\n                break;\n            }\n\n            allocHandle.incMessagesRead(1);\n            readPending = false;\n            pipeline.fireChannelRead(byteBuf);\n            byteBuf = null;\n        } while (allocHandle.continueReading());\n\n        allocHandle.readComplete();\n        pipeline.fireChannelReadComplete();\n        ...\n    }\t\t\n}\n```\n\n\n","source":"_posts/Netty-4.1.4源码分析一.md","raw":"---\ntitle: Netty-4.1.4源码分析一\ndate: 2016-12-23\ncomments: true\ncategories: Java\ntoc: true \n---\n\n## Netty是什么\n- Netty是一个异步的事件驱动的网络应用程序框架用于快速开发可维护的高性能协议服务器和客户端。基于NIO客户端服务器框架，可以快速，轻松地开发网络应用程序，如协议服务器和客户端。 它大大简化和简化了网络编程，如TCP和UDP套接字服务器。\n<!--more-->\n![](components.png)\n### 特点\n- 1、设计\n - 1、针对各种传输类型的统一API - 阻止和非阻塞套接字\n - 2、基于灵活和可扩展的事件模型，允许清楚地分离关注点\n - 3、高度可定制的线程模型 - 单线程，一个或多个线程池，如SEDA\n - 4、真正的无连接数据报插座支持（自3.1版本）\n- 2、使用简单\n - 1、完善的文档\n - 2、独立不依赖其他环境包JDK1.5以上就足够了\n- 3、性能\n - 1、更好的吞吐量，更低的延迟\n - 2、减少资源消耗\n - 3、最小化不必要的内存复制\n- 4、安全\n - 1、支持SSL / TLS和StartTLS\n- 5、社区\n - 1、社区活跃。\n \n上面已经对Netty有了个大概的了解了下面我们就将具体分析Netty的一个内部运行机制、以及线程模型和内存零拷贝。今天主要是分析Netty的源码对于还不会使用Netty的同学请点击查看[Netty官方文档](http://netty.io/wiki/user-guide-for-4.x.html)。\n\n### 线程模型\n![](threadmodel.png)\n## 实例分析\n- \n```java\npublic class NettyServer{\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(); // (1)\n        EventLoopGroup workerGroup = new NioEventLoopGroup();// (2)\n\t\t\n        try {\n            ServerBootstrap b = new ServerBootstrap(); // (3)\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class) // (4)\n             .childHandler(new ChannelInitializer<SocketChannel>() { // (5)\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new DiscardServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)          // (6)\n             .childOption(ChannelOption.SO_KEEPALIVE, true); // (7)\n\n            // 绑定并开始接受传入连接。\n            ChannelFuture f = b.bind(port).sync(); // (8)\n\n            // 等待服务器套接字关闭。\n            // 关闭您的服务器。\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n\n```\n第一步：实例化bossGroup NioEventLoopGroup用于接受处理来自客户端的连接请求\n第二步：实例化workerGroup NioEventLoopGroup用于接受来处理自客户端的数据读写请求\n第三步：实例化一个设置服务器的助手类，对netty运行环境一个基础配置,串联起各个组件\n第四步：使用NioServerSocketChannel类，用于实例化新的通道以接受传入连接。\n第五步：指定的处理程序将始终由新接受的通道计算 。ChannelInitializer是一个特殊的处理程序，用于帮助用户配置新的通道。很可能要通过添加一些处理程序（例如DiscardServerHandler）来配置新频道的ChannelPipeline来实现您的网络应用程序\n第六步：设置通道选项参数如tcpNoDelay和keepAlive\n第七步：option（）用于接受传入连接的NioServerSocketChannel， childOption（）用于父NioServerSocketChannel接受的通道的设置\n第八步：绑定端口启动服务器。这里，我们绑定到机器中所有NIC（网络接口卡）的端口8080。 您现在可以根据需要多次调用bind（）方法（使用不同的绑定地址）。\n\n**注意：ServerBootstrap的配置中带有child的如（childHandler、childOption）是针对处理数据读取的NioSocketChanel的配置 ，不带的（如option）是针对NioServerSocketChannel的配置**\n\n## 源码分析\nNioEventLoopGroup是处理I/O操作的多线程事件循环。Netty为不同的类型传输提供了各种EventLoopGroup实现。new NioEventLoopGroup()实例化了一个多线程的事件执行器。线程池大小可以通过参数指定。不指定的情况下默认是cpu核数的2倍\n```java\npublic abstract class MultithreadEventLoopGroup extends MultithreadEventExecutorGroup implements EventLoopGroup {\n    private static final int DEFAULT_EVENT_LOOP_THREADS;\n    static {\n        //计算默认线程池大小\n        DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(\n                \"io.netty.eventLoopThreads\", Runtime.getRuntime().availableProcessors() * 2));\n    }\n\t\n    protected MultithreadEventLoopGroup(int nThreads, Executor executor, EventExecutorChooserFactory chooserFactory,Object... args) {\n        super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, chooserFactory, args);\n    }\n}\npublic abstract class MultithreadEventExecutorGroup extends AbstractEventExecutorGroup {\n    \n    protected MultithreadEventExecutorGroup(int nThreads, Executor executor,EventExecutorChooserFactory chooserFactory, Object... args) {\n        if (executor == null) {\n            executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());\n        }\n        children = new EventExecutor[nThreads];\n        //创建EventLoop\n        for (int i = 0; i < nThreads; i ++) {\n            boolean success = false;\n            try {\n                children[i] = newChild(executor, args);\n                success = true;\n            } catch (Exception e) {\n                // TODO: Think about if this is a good exception type\n                throw new IllegalStateException(\"failed to create a child event loop\", e);\n            } finally {\n\t\t\t     ...\n            }   \n        }\n        //将事件执行器数组放入到选择器中\n        chooser = chooserFactory.newChooser(children);\n        ...\n    }\n\n}\n\npublic class NioEventLoopGroup extends MultithreadEventLoopGroup {\n    //创建EventLoop\n    @Override\n    protected EventLoop newChild(Executor executor, Object... args) throws Exception {\n        return new NioEventLoop(this, executor, (SelectorProvider) args[0],\n            ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2]);\n    }\n\n}\n\n```\nNioEventLoop是具体的事件循环类。通过SelectorProvider.openSelector()获得一个Selector。在run函数中循环的等待事件的发生\n```java\npublic final class NioEventLoop extends SingleThreadEventLoop {\n    private Selector openSelector() {\n        final Selector selector;\n        try {\n            selector = provider.openSelector();\n        }\n        ...\n    }\n\t\n\t@Override\n    protected void run() {\n        for (;;) {\n            try {\n                switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) {\n\t\t\t\t\n            }\n            ...\n            processSelectedKeys();\n        }\n    }\n    private void processSelectedKeys() {\n        if (selectedKeys != null) {\n            processSelectedKeysOptimized(selectedKeys.flip());\n        } else {\n            processSelectedKeysPlain(selector.selectedKeys());\n        }\n    }\n    private void processSelectedKeysOptimized(SelectionKey[] selectedKeys) {\n        for (int i = 0;; i ++) {\n            final SelectionKey k = selectedKeys[i];\n            final Object a = k.attachment();\n\t\t\tk.attachment 获取在Channel register的时候设置的att附件对象\n            if (a instanceof AbstractNioChannel) {\n                processSelectedKey(k, (AbstractNioChannel) a);\n            }\n        }\n    }\n    private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n        final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n        ...\n        if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n            unsafe.read();\n        }\n        ...\n    }\n}\n\n```\n\nServer端bind（绑定端口）从bossGroup NioEventLoopGroup线程池中按顺序从0开始获取一个NioEventLoop，如果已经超过了线程大小将又从0开始。\n```java\npublic class ServerBootstrap extends AbstractBootstrap{\n    Channel的管道配置当有OP_ACCEPT事件发生将调用管道的initChannel方法对新的Channel进行初始化并分别I/O线程\n    void init(Channel channel){\n        ChannelPipeline p = channel.pipeline();\n        p.addLast(new ChannelInitializer<Channel>() {\n            @Override\n            public void initChannel(Channel ch) throws Exception {\n                final ChannelPipeline pipeline = ch.pipeline();\n                ChannelHandler handler = config.handler();\n                if (handler != null) {\n                    pipeline.addLast(handler);\n                }\n                ch.eventLoop().execute(new Runnable() {\n                    @Override\n                    public void run() {\n                        pipeline.addLast(new ServerBootstrapAcceptor(\n                        currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n                    }\n                });\n            }\n        });\n    }\n}\n\npublic abstract class AbstractBootstrap{\n    private ChannelFuture doBind(final SocketAddress localAddress) {\n        //初始并注册\n        final ChannelFuture regFuture = initAndRegister();\n    }\n\n    final ChannelFuture initAndRegister() {\n        Channel channel = channelFactory.newChannel();\n        //初始化通道NioServerSocketChannel\n        init(channel);\n        //在Select中注册channel并添加OP_ACCEPT事件\n        ChannelFuture regFuture = config().group().register(channel);\n    }\n}\n\npublic abstract class MultithreadEventLoopGroup{\n    @Override\n    public ChannelFuture register(Channel channel) {\n        return next().register(channel);\n    }\n\n    @Override\n    public EventLoop next() {\n        return (EventLoop) super.next();\n    }\n\t//调用选择管理器的next方法返回一个EventExecutor\n    @Override\n    public EventExecutor next() {\n        return chooser.next();\n    }\n}\n\nprivate static final class GenericEventExecutorChooser{\n    //选择管理器next方法中通过idx.getAndIncrement()原子函数记录已经获取的次数通过%（摩）计算下标并返回EventExecutor\n    @Override\n    public EventExecutor next() {\n        return executors[Math.abs(idx.getAndIncrement() % executors.length)];\n    }\n}\n\npublic abstract class AbstractNioChannel extends AbstractChannel {\n    //在selector注册了Channel并且添加了OP_ACCEPT事件将this（NioMessageUnsafe的实例）作为附件att设置到selector上可通过selector.attachment()获取\n    protected void doRegister() throws Exception {\n        selectionKey = javaChannel().register(eventLoop().selector, 0, this);\n    }\n}\n\n```\nNioEventLoop是一个单线程的事件循环器（Selector），用户接受客服端的所有请求，当有新的客户端来连接Netty服务端接受到连接请求调用\nNioServerSocketChannel内部类NioMessageUnsafe的read方法读取消息，\n```java\nprivate final class NioMessageUnsafe extends AbstractNioUnsafe {\n    @Override\n    public void read() {\n        assert eventLoop().inEventLoop();\n        final ChannelConfig config = config();\n        final ChannelPipeline pipeline = pipeline();\n        final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();\n        allocHandle.reset(config);\n        boolean closed = false;\n        Throwable exception = null;\n        try {\n            try {\n                do {\n                    int localRead = doReadMessages(readBuf);\n                    if (localRead == 0) {\n                        break;\n                    }\n                    if (localRead < 0) {\n                        closed = true;\n                        break;\n                    }\n                    allocHandle.incMessagesRead(localRead);\n                } while (allocHandle.continueReading());\n            } catch (Throwable t) {\n                exception = t;\n            }\n            int size = readBuf.size();\n            for (int i = 0; i < size; i ++) {\n                readPending = false;\n                pipeline.fireChannelRead(readBuf.get(i));\n            }\n            readBuf.clear();\n            allocHandle.readComplete();\n            pipeline.fireChannelReadComplete();\n            ...\n        } finally {\n            ...\n        }\n    }\n}\n```\n在doReadMessages方法中通过SocketChannel ch = javaChannel().accept();接受到新的连接SocketChannel，并实例化NioSocketChannel(this, ch)。\n```java\nprotected int doReadMessages(List<Object> buf) throws Exception {\n    SocketChannel ch = javaChannel().accept();\n    try {\n        if (ch != null) {\n            buf.add(new NioSocketChannel(this, ch));\n            return 1;\n        }\n    } catch (Throwable t) {\n        logger.warn(\"Failed to create a new channel from an accepted socket.\", t);\n        try {\n            ch.close();\n        } catch (Throwable t2) {\n            logger.warn(\"Failed to close a socket.\", t2);\n        }\n    }\n    return 0;\n}\n```\n准备好上下文数据。通过pipeline.fireChannelReadComplete();发起了对NioServerSocketChannel管道ChannelInitializer initChannel方法的调用。注意Netty不管是针对handler 还是childHandler都是采用了管道设计模式。创建ServerBootstrapAcceptor用于处理新的连接并分配workGroup线程。\nchildGroup就是NioEventLoopGroup的实例对象workGroup\n```java\nprivate static class ServerBootstrapAcceptor extends ChannelInboundHandlerAdapter {\n    //读取数据为新的连接分配线程并且注册OP_READ事件\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        final Channel child = (Channel) msg;\n        child.pipeline().addLast(childHandler);\n        childGroup.register(child).addListener(new ChannelFutureListener() {\n            ... \n        }\n    }\n}\n```\nchildChannel对应的数据读取类为NioByteUnsafe，\n```java\nprotected class NioByteUnsafe extends AbstractNioUnsafe {\n    public final void read() {\n        final ChannelConfig config = config();\n        final ChannelPipeline pipeline = pipeline();\n        final ByteBufAllocator allocator = config.getAllocator();\n        final RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();\n        allocHandle.reset(config);\n        ....\n        do {\n            byteBuf = allocHandle.allocate(allocator);\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            if (allocHandle.lastBytesRead() <= 0) {\n                // nothing was read. release the buffer.\n                byteBuf.release();\n                byteBuf = null;\n                close = allocHandle.lastBytesRead() < 0;\n                break;\n            }\n\n            allocHandle.incMessagesRead(1);\n            readPending = false;\n            pipeline.fireChannelRead(byteBuf);\n            byteBuf = null;\n        } while (allocHandle.continueReading());\n\n        allocHandle.readComplete();\n        pipeline.fireChannelReadComplete();\n        ...\n    }\t\t\n}\n```\n\n\n","slug":"Netty-4.1.4源码分析一","published":1,"updated":"2021-06-25T02:00:18.079Z","layout":"post","photos":[],"link":"","_id":"ckqjatolk001hqkl5n01bt9lo","content":"<h2 id=\"Netty是什么\"><a href=\"#Netty是什么\" class=\"headerlink\" title=\"Netty是什么\"></a>Netty是什么</h2><ul>\n<li>Netty是一个异步的事件驱动的网络应用程序框架用于快速开发可维护的高性能协议服务器和客户端。基于NIO客户端服务器框架，可以快速，轻松地开发网络应用程序，如协议服务器和客户端。 它大大简化和简化了网络编程，如TCP和UDP套接字服务器。<a id=\"more\"></a>\n<img src=\"components.png\" alt><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3></li>\n<li>1、设计<ul>\n<li>1、针对各种传输类型的统一API - 阻止和非阻塞套接字</li>\n<li>2、基于灵活和可扩展的事件模型，允许清楚地分离关注点</li>\n<li>3、高度可定制的线程模型 - 单线程，一个或多个线程池，如SEDA</li>\n<li>4、真正的无连接数据报插座支持（自3.1版本）</li>\n</ul>\n</li>\n<li>2、使用简单<ul>\n<li>1、完善的文档</li>\n<li>2、独立不依赖其他环境包JDK1.5以上就足够了</li>\n</ul>\n</li>\n<li>3、性能<ul>\n<li>1、更好的吞吐量，更低的延迟</li>\n<li>2、减少资源消耗</li>\n<li>3、最小化不必要的内存复制</li>\n</ul>\n</li>\n<li>4、安全<ul>\n<li>1、支持SSL / TLS和StartTLS</li>\n</ul>\n</li>\n<li>5、社区<ul>\n<li>1、社区活跃。</li>\n</ul>\n</li>\n</ul>\n<p>上面已经对Netty有了个大概的了解了下面我们就将具体分析Netty的一个内部运行机制、以及线程模型和内存零拷贝。今天主要是分析Netty的源码对于还不会使用Netty的同学请点击查看<a href=\"http://netty.io/wiki/user-guide-for-4.x.html\" target=\"_blank\" rel=\"noopener\">Netty官方文档</a>。</p>\n<h3 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h3><p><img src=\"threadmodel.png\" alt></p>\n<h2 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h2><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">// (1)</span></span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();<span class=\"comment\">// (2)</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap b = <span class=\"keyword\">new</span> ServerBootstrap(); <span class=\"comment\">// (3)</span></span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">             .channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>) // (4)</span></span><br><span class=\"line\"><span class=\"class\">             .<span class=\"title\">childHandler</span>(<span class=\"title\">new</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt;() </span>&#123; <span class=\"comment\">// (5)</span></span><br><span class=\"line\">                 <span class=\"meta\">@Override</span></span><br><span class=\"line\">                 <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                     ch.pipeline().addLast(<span class=\"keyword\">new</span> DiscardServerHandler());</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">             .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>)          <span class=\"comment\">// (6)</span></span><br><span class=\"line\">             .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>); <span class=\"comment\">// (7)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 绑定并开始接受传入连接。</span></span><br><span class=\"line\">            ChannelFuture f = b.bind(port).sync(); <span class=\"comment\">// (8)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待服务器套接字关闭。</span></span><br><span class=\"line\">            <span class=\"comment\">// 关闭您的服务器。</span></span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第一步：实例化bossGroup NioEventLoopGroup用于接受处理来自客户端的连接请求<br>第二步：实例化workerGroup NioEventLoopGroup用于接受来处理自客户端的数据读写请求<br>第三步：实例化一个设置服务器的助手类，对netty运行环境一个基础配置,串联起各个组件<br>第四步：使用NioServerSocketChannel类，用于实例化新的通道以接受传入连接。<br>第五步：指定的处理程序将始终由新接受的通道计算 。ChannelInitializer是一个特殊的处理程序，用于帮助用户配置新的通道。很可能要通过添加一些处理程序（例如DiscardServerHandler）来配置新频道的ChannelPipeline来实现您的网络应用程序<br>第六步：设置通道选项参数如tcpNoDelay和keepAlive<br>第七步：option（）用于接受传入连接的NioServerSocketChannel， childOption（）用于父NioServerSocketChannel接受的通道的设置<br>第八步：绑定端口启动服务器。这里，我们绑定到机器中所有NIC（网络接口卡）的端口8080。 您现在可以根据需要多次调用bind（）方法（使用不同的绑定地址）。</p>\n<p><strong>注意：ServerBootstrap的配置中带有child的如（childHandler、childOption）是针对处理数据读取的NioSocketChanel的配置 ，不带的（如option）是针对NioServerSocketChannel的配置</strong></p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p>NioEventLoopGroup是处理I/O操作的多线程事件循环。Netty为不同的类型传输提供了各种EventLoopGroup实现。new NioEventLoopGroup()实例化了一个多线程的事件执行器。线程池大小可以通过参数指定。不指定的情况下默认是cpu核数的2倍<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultithreadEventLoopGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">MultithreadEventExecutorGroup</span> <span class=\"keyword\">implements</span> <span class=\"title\">EventLoopGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_EVENT_LOOP_THREADS;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算默认线程池大小</span></span><br><span class=\"line\">        DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class=\"number\">1</span>, SystemPropertyUtil.getInt(</span><br><span class=\"line\">                <span class=\"string\">\"io.netty.eventLoopThreads\"</span>, Runtime.getRuntime().availableProcessors() * <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MultithreadEventLoopGroup</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, Executor executor, EventExecutorChooserFactory chooserFactory,Object... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(nThreads == <span class=\"number\">0</span> ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, chooserFactory, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultithreadEventExecutorGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractEventExecutorGroup</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MultithreadEventExecutorGroup</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, Executor executor,EventExecutorChooserFactory chooserFactory, Object... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            executor = <span class=\"keyword\">new</span> ThreadPerTaskExecutor(newDefaultThreadFactory());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        children = <span class=\"keyword\">new</span> EventExecutor[nThreads];</span><br><span class=\"line\">        <span class=\"comment\">//创建EventLoop</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nThreads; i ++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                children[i] = newChild(executor, args);</span><br><span class=\"line\">                success = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Think about if this is a good exception type</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"failed to create a child event loop\"</span>, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t     ...</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将事件执行器数组放入到选择器中</span></span><br><span class=\"line\">        chooser = chooserFactory.newChooser(children);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioEventLoopGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">MultithreadEventLoopGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建EventLoop</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> EventLoop <span class=\"title\">newChild</span><span class=\"params\">(Executor executor, Object... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NioEventLoop(<span class=\"keyword\">this</span>, executor, (SelectorProvider) args[<span class=\"number\">0</span>],</span><br><span class=\"line\">            ((SelectStrategyFactory) args[<span class=\"number\">1</span>]).newSelectStrategy(), (RejectedExecutionHandler) args[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>NioEventLoop是具体的事件循环类。通过SelectorProvider.openSelector()获得一个Selector。在run函数中循环的等待事件的发生<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioEventLoop</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingleThreadEventLoop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Selector <span class=\"title\">openSelector</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Selector selector;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            selector = provider.openSelector();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            processSelectedKeys();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processSelectedKeys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selectedKeys != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            processSelectedKeysOptimized(selectedKeys.flip());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            processSelectedKeysPlain(selector.selectedKeys());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processSelectedKeysOptimized</span><span class=\"params\">(SelectionKey[] selectedKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;; i ++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> SelectionKey k = selectedKeys[i];</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object a = k.attachment();</span><br><span class=\"line\">\t\t\tk.attachment 获取在Channel register的时候设置的att附件对象</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> AbstractNioChannel) &#123;</span><br><span class=\"line\">                processSelectedKey(k, (AbstractNioChannel) a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processSelectedKey</span><span class=\"params\">(SelectionKey k, AbstractNioChannel ch)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"number\">0</span> || readyOps == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            unsafe.read();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Server端bind（绑定端口）从bossGroup NioEventLoopGroup线程池中按顺序从0开始获取一个NioEventLoop，如果已经超过了线程大小将又从0开始。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerBootstrap</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBootstrap</span></span>&#123;</span><br><span class=\"line\">    Channel的管道配置当有OP_ACCEPT事件发生将调用管道的initChannel方法对新的Channel进行初始化并分别I/O线程</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Channel channel)</span></span>&#123;</span><br><span class=\"line\">        ChannelPipeline p = channel.pipeline();</span><br><span class=\"line\">        p.addLast(<span class=\"keyword\">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(Channel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                ChannelHandler handler = config.handler();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    pipeline.addLast(handler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ch.eventLoop().execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        pipeline.addLast(<span class=\"keyword\">new</span> ServerBootstrapAcceptor(</span><br><span class=\"line\">                        currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBootstrap</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ChannelFuture <span class=\"title\">doBind</span><span class=\"params\">(<span class=\"keyword\">final</span> SocketAddress localAddress)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始并注册</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelFuture regFuture = initAndRegister();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ChannelFuture <span class=\"title\">initAndRegister</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Channel channel = channelFactory.newChannel();</span><br><span class=\"line\">        <span class=\"comment\">//初始化通道NioServerSocketChannel</span></span><br><span class=\"line\">        init(channel);</span><br><span class=\"line\">        <span class=\"comment\">//在Select中注册channel并添加OP_ACCEPT事件</span></span><br><span class=\"line\">        ChannelFuture regFuture = config().group().register(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultithreadEventLoopGroup</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ChannelFuture <span class=\"title\">register</span><span class=\"params\">(Channel channel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next().register(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EventLoop <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (EventLoop) <span class=\"keyword\">super</span>.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//调用选择管理器的next方法返回一个EventExecutor</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EventExecutor <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chooser.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericEventExecutorChooser</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//选择管理器next方法中通过idx.getAndIncrement()原子函数记录已经获取的次数通过%（摩）计算下标并返回EventExecutor</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EventExecutor <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executors[Math.abs(idx.getAndIncrement() % executors.length)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractNioChannel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在selector注册了Channel并且添加了OP_ACCEPT事件将this（NioMessageUnsafe的实例）作为附件att设置到selector上可通过selector.attachment()获取</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRegister</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        selectionKey = javaChannel().register(eventLoop().selector, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>NioEventLoop是一个单线程的事件循环器（Selector），用户接受客服端的所有请求，当有新的客户端来连接Netty服务端接受到连接请求调用<br>NioServerSocketChannel内部类NioMessageUnsafe的read方法读取消息，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioMessageUnsafe</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractNioUnsafe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">eventLoop</span><span class=\"params\">()</span>.<span class=\"title\">inEventLoop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelConfig config = config();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelPipeline pipeline = pipeline();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();</span><br><span class=\"line\">        allocHandle.reset(config);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> closed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Throwable exception = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> localRead = doReadMessages(readBuf);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (localRead == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (localRead &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        closed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    allocHandle.incMessagesRead(localRead);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (allocHandle.continueReading());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                exception = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = readBuf.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i ++) &#123;</span><br><span class=\"line\">                readPending = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                pipeline.fireChannelRead(readBuf.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            readBuf.clear();</span><br><span class=\"line\">            allocHandle.readComplete();</span><br><span class=\"line\">            pipeline.fireChannelReadComplete();</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在doReadMessages方法中通过SocketChannel ch = javaChannel().accept();接受到新的连接SocketChannel，并实例化NioSocketChannel(this, ch)。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">doReadMessages</span><span class=\"params\">(List&lt;Object&gt; buf)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    SocketChannel ch = javaChannel().accept();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            buf.add(<span class=\"keyword\">new</span> NioSocketChannel(<span class=\"keyword\">this</span>, ch));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">\"Failed to create a new channel from an accepted socket.\"</span>, t);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ch.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t2) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Failed to close a socket.\"</span>, t2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>准备好上下文数据。通过pipeline.fireChannelReadComplete();发起了对NioServerSocketChannel管道ChannelInitializer initChannel方法的调用。注意Netty不管是针对handler 还是childHandler都是采用了管道设计模式。创建ServerBootstrapAcceptor用于处理新的连接并分配workGroup线程。<br>childGroup就是NioEventLoopGroup的实例对象workGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerBootstrapAcceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//读取数据为新的连接分配线程并且注册OP_READ事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Channel child = (Channel) msg;</span><br><span class=\"line\">        child.pipeline().addLast(childHandler);</span><br><span class=\"line\">        childGroup.register(child).addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">            ... </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>childChannel对应的数据读取类为NioByteUnsafe，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioByteUnsafe</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractNioUnsafe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelConfig config = config();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelPipeline pipeline = pipeline();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ByteBufAllocator allocator = config.getAllocator();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();</span><br><span class=\"line\">        allocHandle.reset(config);</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            byteBuf = allocHandle.allocate(allocator);</span><br><span class=\"line\">            allocHandle.lastBytesRead(doReadBytes(byteBuf));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allocHandle.lastBytesRead() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// nothing was read. release the buffer.</span></span><br><span class=\"line\">                byteBuf.release();</span><br><span class=\"line\">                byteBuf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                close = allocHandle.lastBytesRead() &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            allocHandle.incMessagesRead(<span class=\"number\">1</span>);</span><br><span class=\"line\">            readPending = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            pipeline.fireChannelRead(byteBuf);</span><br><span class=\"line\">            byteBuf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (allocHandle.continueReading());</span><br><span class=\"line\"></span><br><span class=\"line\">        allocHandle.readComplete();</span><br><span class=\"line\">        pipeline.fireChannelReadComplete();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Netty是什么\"><a href=\"#Netty是什么\" class=\"headerlink\" title=\"Netty是什么\"></a>Netty是什么</h2><ul>\n<li>Netty是一个异步的事件驱动的网络应用程序框架用于快速开发可维护的高性能协议服务器和客户端。基于NIO客户端服务器框架，可以快速，轻松地开发网络应用程序，如协议服务器和客户端。 它大大简化和简化了网络编程，如TCP和UDP套接字服务器。","more":"<img src=\"components.png\" alt><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3></li>\n<li>1、设计<ul>\n<li>1、针对各种传输类型的统一API - 阻止和非阻塞套接字</li>\n<li>2、基于灵活和可扩展的事件模型，允许清楚地分离关注点</li>\n<li>3、高度可定制的线程模型 - 单线程，一个或多个线程池，如SEDA</li>\n<li>4、真正的无连接数据报插座支持（自3.1版本）</li>\n</ul>\n</li>\n<li>2、使用简单<ul>\n<li>1、完善的文档</li>\n<li>2、独立不依赖其他环境包JDK1.5以上就足够了</li>\n</ul>\n</li>\n<li>3、性能<ul>\n<li>1、更好的吞吐量，更低的延迟</li>\n<li>2、减少资源消耗</li>\n<li>3、最小化不必要的内存复制</li>\n</ul>\n</li>\n<li>4、安全<ul>\n<li>1、支持SSL / TLS和StartTLS</li>\n</ul>\n</li>\n<li>5、社区<ul>\n<li>1、社区活跃。</li>\n</ul>\n</li>\n</ul>\n<p>上面已经对Netty有了个大概的了解了下面我们就将具体分析Netty的一个内部运行机制、以及线程模型和内存零拷贝。今天主要是分析Netty的源码对于还不会使用Netty的同学请点击查看<a href=\"http://netty.io/wiki/user-guide-for-4.x.html\" target=\"_blank\" rel=\"noopener\">Netty官方文档</a>。</p>\n<h3 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h3><p><img src=\"threadmodel.png\" alt></p>\n<h2 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h2><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">// (1)</span></span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();<span class=\"comment\">// (2)</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap b = <span class=\"keyword\">new</span> ServerBootstrap(); <span class=\"comment\">// (3)</span></span><br><span class=\"line\">            b.group(bossGroup, workerGroup)</span><br><span class=\"line\">             .channel(NioServerSocketChannel<span class=\"class\">.<span class=\"keyword\">class</span>) // (4)</span></span><br><span class=\"line\"><span class=\"class\">             .<span class=\"title\">childHandler</span>(<span class=\"title\">new</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt;() </span>&#123; <span class=\"comment\">// (5)</span></span><br><span class=\"line\">                 <span class=\"meta\">@Override</span></span><br><span class=\"line\">                 <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                     ch.pipeline().addLast(<span class=\"keyword\">new</span> DiscardServerHandler());</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">             .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>)          <span class=\"comment\">// (6)</span></span><br><span class=\"line\">             .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>); <span class=\"comment\">// (7)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 绑定并开始接受传入连接。</span></span><br><span class=\"line\">            ChannelFuture f = b.bind(port).sync(); <span class=\"comment\">// (8)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待服务器套接字关闭。</span></span><br><span class=\"line\">            <span class=\"comment\">// 关闭您的服务器。</span></span><br><span class=\"line\">            f.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第一步：实例化bossGroup NioEventLoopGroup用于接受处理来自客户端的连接请求<br>第二步：实例化workerGroup NioEventLoopGroup用于接受来处理自客户端的数据读写请求<br>第三步：实例化一个设置服务器的助手类，对netty运行环境一个基础配置,串联起各个组件<br>第四步：使用NioServerSocketChannel类，用于实例化新的通道以接受传入连接。<br>第五步：指定的处理程序将始终由新接受的通道计算 。ChannelInitializer是一个特殊的处理程序，用于帮助用户配置新的通道。很可能要通过添加一些处理程序（例如DiscardServerHandler）来配置新频道的ChannelPipeline来实现您的网络应用程序<br>第六步：设置通道选项参数如tcpNoDelay和keepAlive<br>第七步：option（）用于接受传入连接的NioServerSocketChannel， childOption（）用于父NioServerSocketChannel接受的通道的设置<br>第八步：绑定端口启动服务器。这里，我们绑定到机器中所有NIC（网络接口卡）的端口8080。 您现在可以根据需要多次调用bind（）方法（使用不同的绑定地址）。</p>\n<p><strong>注意：ServerBootstrap的配置中带有child的如（childHandler、childOption）是针对处理数据读取的NioSocketChanel的配置 ，不带的（如option）是针对NioServerSocketChannel的配置</strong></p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><p>NioEventLoopGroup是处理I/O操作的多线程事件循环。Netty为不同的类型传输提供了各种EventLoopGroup实现。new NioEventLoopGroup()实例化了一个多线程的事件执行器。线程池大小可以通过参数指定。不指定的情况下默认是cpu核数的2倍<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultithreadEventLoopGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">MultithreadEventExecutorGroup</span> <span class=\"keyword\">implements</span> <span class=\"title\">EventLoopGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_EVENT_LOOP_THREADS;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算默认线程池大小</span></span><br><span class=\"line\">        DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class=\"number\">1</span>, SystemPropertyUtil.getInt(</span><br><span class=\"line\">                <span class=\"string\">\"io.netty.eventLoopThreads\"</span>, Runtime.getRuntime().availableProcessors() * <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MultithreadEventLoopGroup</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, Executor executor, EventExecutorChooserFactory chooserFactory,Object... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(nThreads == <span class=\"number\">0</span> ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, chooserFactory, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultithreadEventExecutorGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractEventExecutorGroup</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MultithreadEventExecutorGroup</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads, Executor executor,EventExecutorChooserFactory chooserFactory, Object... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            executor = <span class=\"keyword\">new</span> ThreadPerTaskExecutor(newDefaultThreadFactory());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        children = <span class=\"keyword\">new</span> EventExecutor[nThreads];</span><br><span class=\"line\">        <span class=\"comment\">//创建EventLoop</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nThreads; i ++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                children[i] = newChild(executor, args);</span><br><span class=\"line\">                success = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Think about if this is a good exception type</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"failed to create a child event loop\"</span>, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t     ...</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将事件执行器数组放入到选择器中</span></span><br><span class=\"line\">        chooser = chooserFactory.newChooser(children);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioEventLoopGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">MultithreadEventLoopGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建EventLoop</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> EventLoop <span class=\"title\">newChild</span><span class=\"params\">(Executor executor, Object... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NioEventLoop(<span class=\"keyword\">this</span>, executor, (SelectorProvider) args[<span class=\"number\">0</span>],</span><br><span class=\"line\">            ((SelectStrategyFactory) args[<span class=\"number\">1</span>]).newSelectStrategy(), (RejectedExecutionHandler) args[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>NioEventLoop是具体的事件循环类。通过SelectorProvider.openSelector()获得一个Selector。在run函数中循环的等待事件的发生<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioEventLoop</span> <span class=\"keyword\">extends</span> <span class=\"title\">SingleThreadEventLoop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Selector <span class=\"title\">openSelector</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Selector selector;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            selector = provider.openSelector();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            processSelectedKeys();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processSelectedKeys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selectedKeys != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            processSelectedKeysOptimized(selectedKeys.flip());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            processSelectedKeysPlain(selector.selectedKeys());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processSelectedKeysOptimized</span><span class=\"params\">(SelectionKey[] selectedKeys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;; i ++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> SelectionKey k = selectedKeys[i];</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object a = k.attachment();</span><br><span class=\"line\">\t\t\tk.attachment 获取在Channel register的时候设置的att附件对象</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> AbstractNioChannel) &#123;</span><br><span class=\"line\">                processSelectedKey(k, (AbstractNioChannel) a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processSelectedKey</span><span class=\"params\">(SelectionKey k, AbstractNioChannel ch)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class=\"number\">0</span> || readyOps == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            unsafe.read();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Server端bind（绑定端口）从bossGroup NioEventLoopGroup线程池中按顺序从0开始获取一个NioEventLoop，如果已经超过了线程大小将又从0开始。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerBootstrap</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBootstrap</span></span>&#123;</span><br><span class=\"line\">    Channel的管道配置当有OP_ACCEPT事件发生将调用管道的initChannel方法对新的Channel进行初始化并分别I/O线程</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Channel channel)</span></span>&#123;</span><br><span class=\"line\">        ChannelPipeline p = channel.pipeline();</span><br><span class=\"line\">        p.addLast(<span class=\"keyword\">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(Channel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                ChannelHandler handler = config.handler();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    pipeline.addLast(handler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ch.eventLoop().execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        pipeline.addLast(<span class=\"keyword\">new</span> ServerBootstrapAcceptor(</span><br><span class=\"line\">                        currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBootstrap</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ChannelFuture <span class=\"title\">doBind</span><span class=\"params\">(<span class=\"keyword\">final</span> SocketAddress localAddress)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始并注册</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelFuture regFuture = initAndRegister();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ChannelFuture <span class=\"title\">initAndRegister</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Channel channel = channelFactory.newChannel();</span><br><span class=\"line\">        <span class=\"comment\">//初始化通道NioServerSocketChannel</span></span><br><span class=\"line\">        init(channel);</span><br><span class=\"line\">        <span class=\"comment\">//在Select中注册channel并添加OP_ACCEPT事件</span></span><br><span class=\"line\">        ChannelFuture regFuture = config().group().register(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultithreadEventLoopGroup</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ChannelFuture <span class=\"title\">register</span><span class=\"params\">(Channel channel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next().register(channel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EventLoop <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (EventLoop) <span class=\"keyword\">super</span>.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//调用选择管理器的next方法返回一个EventExecutor</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EventExecutor <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chooser.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericEventExecutorChooser</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//选择管理器next方法中通过idx.getAndIncrement()原子函数记录已经获取的次数通过%（摩）计算下标并返回EventExecutor</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EventExecutor <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executors[Math.abs(idx.getAndIncrement() % executors.length)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractNioChannel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractChannel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在selector注册了Channel并且添加了OP_ACCEPT事件将this（NioMessageUnsafe的实例）作为附件att设置到selector上可通过selector.attachment()获取</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRegister</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        selectionKey = javaChannel().register(eventLoop().selector, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>NioEventLoop是一个单线程的事件循环器（Selector），用户接受客服端的所有请求，当有新的客户端来连接Netty服务端接受到连接请求调用<br>NioServerSocketChannel内部类NioMessageUnsafe的read方法读取消息，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioMessageUnsafe</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractNioUnsafe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">assert</span> <span class=\"title\">eventLoop</span><span class=\"params\">()</span>.<span class=\"title\">inEventLoop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelConfig config = config();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelPipeline pipeline = pipeline();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();</span><br><span class=\"line\">        allocHandle.reset(config);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> closed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Throwable exception = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> localRead = doReadMessages(readBuf);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (localRead == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (localRead &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        closed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    allocHandle.incMessagesRead(localRead);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (allocHandle.continueReading());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                exception = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = readBuf.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i ++) &#123;</span><br><span class=\"line\">                readPending = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                pipeline.fireChannelRead(readBuf.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            readBuf.clear();</span><br><span class=\"line\">            allocHandle.readComplete();</span><br><span class=\"line\">            pipeline.fireChannelReadComplete();</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在doReadMessages方法中通过SocketChannel ch = javaChannel().accept();接受到新的连接SocketChannel，并实例化NioSocketChannel(this, ch)。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">doReadMessages</span><span class=\"params\">(List&lt;Object&gt; buf)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    SocketChannel ch = javaChannel().accept();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            buf.add(<span class=\"keyword\">new</span> NioSocketChannel(<span class=\"keyword\">this</span>, ch));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">\"Failed to create a new channel from an accepted socket.\"</span>, t);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ch.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable t2) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Failed to close a socket.\"</span>, t2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>准备好上下文数据。通过pipeline.fireChannelReadComplete();发起了对NioServerSocketChannel管道ChannelInitializer initChannel方法的调用。注意Netty不管是针对handler 还是childHandler都是采用了管道设计模式。创建ServerBootstrapAcceptor用于处理新的连接并分配workGroup线程。<br>childGroup就是NioEventLoopGroup的实例对象workGroup<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerBootstrapAcceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//读取数据为新的连接分配线程并且注册OP_READ事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Channel child = (Channel) msg;</span><br><span class=\"line\">        child.pipeline().addLast(childHandler);</span><br><span class=\"line\">        childGroup.register(child).addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">            ... </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>childChannel对应的数据读取类为NioByteUnsafe，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NioByteUnsafe</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractNioUnsafe</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelConfig config = config();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ChannelPipeline pipeline = pipeline();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ByteBufAllocator allocator = config.getAllocator();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> RecvByteBufAllocator.Handle allocHandle = recvBufAllocHandle();</span><br><span class=\"line\">        allocHandle.reset(config);</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            byteBuf = allocHandle.allocate(allocator);</span><br><span class=\"line\">            allocHandle.lastBytesRead(doReadBytes(byteBuf));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allocHandle.lastBytesRead() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// nothing was read. release the buffer.</span></span><br><span class=\"line\">                byteBuf.release();</span><br><span class=\"line\">                byteBuf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                close = allocHandle.lastBytesRead() &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            allocHandle.incMessagesRead(<span class=\"number\">1</span>);</span><br><span class=\"line\">            readPending = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            pipeline.fireChannelRead(byteBuf);</span><br><span class=\"line\">            byteBuf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (allocHandle.continueReading());</span><br><span class=\"line\"></span><br><span class=\"line\">        allocHandle.readComplete();</span><br><span class=\"line\">        pipeline.fireChannelReadComplete();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Nginx+Tomcat+Memcached集群","date":"2015-01-14T08:18:41.000Z","comments":1,"toc":true,"_content":"\n\nNginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)。这篇文章是以前面[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。\n安置Memcached之前需要安装他依赖的软件libevent-devel。\n<!--more-->\n\n## 软件安装\n\n### 安装libevent-devel\n```\nsehll yum install libevent-devel\n```\n\n### 安装memcached\n```\nsehll wget http://memcached.org/files/memcached-1.4.22.tar.gz\nsehll tar -zxvf memcached-1.4.22.tar.gz\nsehll cd memcached-1.4.22\nsehll ./configure && make && make test && make install\n```\n\n### 启动memcached\n```\nshell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233\n```\n启动memcached的参数不明白的地方可以查看网上的说明\n\n### 下载依赖Jar\n***下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略***\n\nmemcached-session-manager-1.8.2.jar\nspymemcached-2.7.3.jar\nmsm-xstream-serializer-1.8.2.jar\nmsm-javolution-serializer-1.8.2.jar\nmsm-flexjson-serializer-1.8.2.jar\nmemcached-session-manager-tc6-1.8.2.jar\njavolution-5.5.1.jar\n\n将以上包复制到%TOMCAT_HOME%\\lib\\下\n## 配置\n修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置\n```xml\n<Manager className=\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"\n\tmemcacheNodes=\"n1:192.168.1.233:11211\"\n\trequestUriIgnorePattern=\".*\\.(png|gif|jpg|css|js)$\"\n\tsessionBackupAsync=\"false\"\n\tsessionBackupTimeout=\"1800000\"\n\tcopyCollectionsForSerialization=\"false\"\n\ttranscoderFactoryClass=\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"/>\n```\n要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=\"n1:192.168.1.233:11211\"\n192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：\nmemcachedNodes=\"n1:192.168.1.233:11211,n2:192.168.1.234:11211\"\n\n***注意***\n每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。","source":"_posts/Nginx+Tomcat+Memcached集群.md","raw":"---\ntitle: Nginx+Tomcat+Memcached集群\ndate: 2015-01-14 16:18:41\ncomments: true\ncategories: Tomcat\ntoc: true \n---\n\n\nNginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)。这篇文章是以前面[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。\n安置Memcached之前需要安装他依赖的软件libevent-devel。\n<!--more-->\n\n## 软件安装\n\n### 安装libevent-devel\n```\nsehll yum install libevent-devel\n```\n\n### 安装memcached\n```\nsehll wget http://memcached.org/files/memcached-1.4.22.tar.gz\nsehll tar -zxvf memcached-1.4.22.tar.gz\nsehll cd memcached-1.4.22\nsehll ./configure && make && make test && make install\n```\n\n### 启动memcached\n```\nshell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233\n```\n启动memcached的参数不明白的地方可以查看网上的说明\n\n### 下载依赖Jar\n***下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略***\n\nmemcached-session-manager-1.8.2.jar\nspymemcached-2.7.3.jar\nmsm-xstream-serializer-1.8.2.jar\nmsm-javolution-serializer-1.8.2.jar\nmsm-flexjson-serializer-1.8.2.jar\nmemcached-session-manager-tc6-1.8.2.jar\njavolution-5.5.1.jar\n\n将以上包复制到%TOMCAT_HOME%\\lib\\下\n## 配置\n修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置\n```xml\n<Manager className=\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"\n\tmemcacheNodes=\"n1:192.168.1.233:11211\"\n\trequestUriIgnorePattern=\".*\\.(png|gif|jpg|css|js)$\"\n\tsessionBackupAsync=\"false\"\n\tsessionBackupTimeout=\"1800000\"\n\tcopyCollectionsForSerialization=\"false\"\n\ttranscoderFactoryClass=\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"/>\n```\n要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=\"n1:192.168.1.233:11211\"\n192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：\nmemcachedNodes=\"n1:192.168.1.233:11211,n2:192.168.1.234:11211\"\n\n***注意***\n每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。","slug":"Nginx+Tomcat+Memcached集群","published":1,"updated":"2021-06-25T02:00:18.091Z","layout":"post","photos":[],"link":"","_id":"ckqjatolm001kqkl5bujwz9q6","content":"<p>Nginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>。这篇文章是以前面<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。<br>安置Memcached之前需要安装他依赖的软件libevent-devel。<br><a id=\"more\"></a></p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"安装libevent-devel\"><a href=\"#安装libevent-devel\" class=\"headerlink\" title=\"安装libevent-devel\"></a>安装libevent-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll yum install libevent-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装memcached\"><a href=\"#安装memcached\" class=\"headerlink\" title=\"安装memcached\"></a>安装memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll wget http://memcached.org/files/memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll tar -zxvf memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll cd memcached-1.4.22</span><br><span class=\"line\">sehll ./configure &amp;&amp; make &amp;&amp; make test &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动memcached\"><a href=\"#启动memcached\" class=\"headerlink\" title=\"启动memcached\"></a>启动memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233</span><br></pre></td></tr></table></figure>\n<p>启动memcached的参数不明白的地方可以查看网上的说明</p>\n<h3 id=\"下载依赖Jar\"><a href=\"#下载依赖Jar\" class=\"headerlink\" title=\"下载依赖Jar\"></a>下载依赖Jar</h3><p><strong><em>下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略</em></strong></p>\n<p>memcached-session-manager-1.8.2.jar<br>spymemcached-2.7.3.jar<br>msm-xstream-serializer-1.8.2.jar<br>msm-javolution-serializer-1.8.2.jar<br>msm-flexjson-serializer-1.8.2.jar<br>memcached-session-manager-tc6-1.8.2.jar<br>javolution-5.5.1.jar</p>\n<p>将以上包复制到%TOMCAT_HOME%\\lib\\下</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">memcacheNodes</span>=<span class=\"string\">\"n1:192.168.1.233:11211\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">requestUriIgnorePattern</span>=<span class=\"string\">\".*\\.(png|gif|jpg|css|js)$\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">sessionBackupAsync</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">sessionBackupTimeout</span>=<span class=\"string\">\"1800000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">copyCollectionsForSerialization</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">transcoderFactoryClass</span>=<span class=\"string\">\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=”n1:192.168.1.233:11211”<br>192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：<br>memcachedNodes=”n1:192.168.1.233:11211,n2:192.168.1.234:11211”</p>\n<p><strong><em>注意</em></strong><br>每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。</p>\n","site":{"data":{}},"excerpt":"<p>Nginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>。这篇文章是以前面<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。<br>安置Memcached之前需要安装他依赖的软件libevent-devel。<br>","more":"</p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"安装libevent-devel\"><a href=\"#安装libevent-devel\" class=\"headerlink\" title=\"安装libevent-devel\"></a>安装libevent-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll yum install libevent-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装memcached\"><a href=\"#安装memcached\" class=\"headerlink\" title=\"安装memcached\"></a>安装memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll wget http://memcached.org/files/memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll tar -zxvf memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll cd memcached-1.4.22</span><br><span class=\"line\">sehll ./configure &amp;&amp; make &amp;&amp; make test &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动memcached\"><a href=\"#启动memcached\" class=\"headerlink\" title=\"启动memcached\"></a>启动memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233</span><br></pre></td></tr></table></figure>\n<p>启动memcached的参数不明白的地方可以查看网上的说明</p>\n<h3 id=\"下载依赖Jar\"><a href=\"#下载依赖Jar\" class=\"headerlink\" title=\"下载依赖Jar\"></a>下载依赖Jar</h3><p><strong><em>下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略</em></strong></p>\n<p>memcached-session-manager-1.8.2.jar<br>spymemcached-2.7.3.jar<br>msm-xstream-serializer-1.8.2.jar<br>msm-javolution-serializer-1.8.2.jar<br>msm-flexjson-serializer-1.8.2.jar<br>memcached-session-manager-tc6-1.8.2.jar<br>javolution-5.5.1.jar</p>\n<p>将以上包复制到%TOMCAT_HOME%\\lib\\下</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">memcacheNodes</span>=<span class=\"string\">\"n1:192.168.1.233:11211\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">requestUriIgnorePattern</span>=<span class=\"string\">\".*\\.(png|gif|jpg|css|js)$\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">sessionBackupAsync</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">sessionBackupTimeout</span>=<span class=\"string\">\"1800000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">copyCollectionsForSerialization</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">transcoderFactoryClass</span>=<span class=\"string\">\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=”n1:192.168.1.233:11211”<br>192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：<br>memcachedNodes=”n1:192.168.1.233:11211,n2:192.168.1.234:11211”</p>\n<p><strong><em>注意</em></strong><br>每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。</p>"},{"title":"Nginx+Tomcat集群","date":"2014-12-10T06:35:40.000Z","comments":1,"toc":true,"_content":"## 环境\n|系统\t  |  JDK    |Tomcat    |Nginx                                      |\n|:-------:|:-------:|:--------:|:-----------------------------------------:|\n|CentOS6 192.168.1.231 CentOS6 192.168.1.232  |JDK1.6   |Tomcat6   |nginx-release-centos-6-0.el6.ngx.noarch.rpm|\n## 安装JDK\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n<!--more-->\n```\nshell rpm -qa | grep java*\n```\n第二步：查看yum库是否有java安装包\n```\nshell  yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n显示如上信息表示安装成功\n```\n\n## 安装Nginx\n***通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异***\n\n### 下载安装包\n```\nshell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n```\n\n### 查看nginx信息\n```\nshell yum info nginx\n\nLoaded plugins: fastestmirror, refresh-packagekit, security\nLoading mirror speeds from cached hostfile\n * base: mirrors.yun-idc.com\n * extras: mirrors.yun-idc.com\n * updates: mirrors.yun-idc.com\nnginx                                                                    | 2.9 kB     00:00    \nnginx/primary_db                                                         |  33 kB     00:00    \nAvailable Packages\nName        : nginx\nArch        : i386\nVersion     : 1.6.2\nRelease     : 1.el6.ngx\nSize        : 343 k\nRepo        : nginx\nSummary     : High performance web server\nURL         : http://nginx.org/\nLicense     : 2-clause BSD-like license\nDescription : nginx [engine x] is an HTTP and reverse proxy server, as well as\n            : a mail proxy server.\n```\n\n### 安装\n```\nshell yum install nginx\n```\n### 启动\n```\nshell service nginx start\n```\n### 访问\n\nhttp://ip\n\n查找nginx安装目录\n```\nshell ps -ef |grep nginx\nroot      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf\nnginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  \nroot      2268  1922  0 22:50 pts/1    00:00:00 grep nginx\n```\n***如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开***\n\n## 安装Tomcat\n```\nshell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps\n```\n\n### 启动\n\n```\nshell service tomcat6 start\n```\n\n### 启动\n\n```\nshell service tomcat6 stop\n```\n\n### 重启\n\n```\nshell service tomcat6 restart\n```\n\n按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下\n配置文件默认目录在/etc/tomcat6/下\n\n## 集群配置\n\n### 配置nginx.conf\n***在http{}中添加***\n```\nupstream cluster{\n server 192.168.1.231:8080 weight=2;\n server 192.168.1.232:8080 weight=1;\n}\n```\ncluster这个名称可以随便起\nweight参数表示权值，权值越高被分配到的几率越大\nserver 192.168.1.231:8080; 就是一个tomcat节点\n***在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中***\n```\nlocation ~ \\.jsp$ {\n   proxy_pass   http://cluster;\n}\n```\n\n如果想对根进行设置只需要对\n\n```\nlocation / {\n root   /usr/share/nginx/html;\n index  index.html index.html;\n}\n修改为\nlocation / {\n proxy_set_header Host $host;\n proxy_pass  http://cluster;\n}\n即可\n```\n\n复杂点的设置如下\n\n```\nlocation / {\n proxy_pass  http://cluster;\n proxy_redirect          off;\n proxy_set_header        Host $host;\n proxy_set_header        X-Real-IP $remote_addr;\n proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n client_max_body_size    10m;\n client_body_buffer_size 128k;\n proxy_connect_timeout   90;\n proxy_send_timeout      90;\n proxy_read_timeout      90;\n proxy_buffer_size       4k;\n proxy_buffers           4 32k;\n proxy_busy_buffers_size 64k;\n proxy_temp_file_write_size 64k;\n}\n```\n\n### nginx.conf文件说明\n```\n#nginx用户\nuser  nginx;\n#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx\nworker_processes  1;\n#错误文件日志路径\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n#对应每个processes允许最大的连接数\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多\n\tupstream cluster{\n\t  server 192.168.1.231:8080 weight=1;\n\t  server 192.168.1.240:8080 weight=2;\n\t}\n\t#nginx服务器配置\n    server {\n\t\t#监听端口\n\t\tlisten       80;\n\t\t#服务器名称\n\t    server_name  localhost;\n\n\t\t#charset koi8-r;\n\t\t#access_log  /var/log/nginx/log/host.access.log  main;\n\t    #对于请求跟路径时候的处理\n\t\tlocation / {\n\t\t   root   /usr/share/nginx/html;\n\t\t   index  index.html index.htm;\n\t\t   proxy_set_header Host $host;\n\t\t   proxy_pass  http://cluster;\n\t\t}\n\n\t    #error_page  404              /404.html;\n\n\t    # redirect server error pages to the static page /50x.html\n\n\t    error_page   500 502 503 504  /50x.html;\n\t    location = /50x.html {\n\t\t\troot   /usr/share/nginx/html;\n\t\t\t#proxy_pass   http://cluster;\n\t\t}\n\t    #设置对于请求jsp时候的处理\n\t    location ~ \\.jsp$ {\n\t\t\tproxy_pass   http://cluster;\n\t\t}\n\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    proxy_pass   http://127.0.0.1;\n\t    #}\n\n\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    root           html;\n\t    #    fastcgi_pass   127.0.0.1:9000;\n\t    #    fastcgi_index  index.php;\n\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\t    #    include        fastcgi_params;\n\t    #}\n\n\t    # deny access to .htaccess files, if Apache's document root\n\t    # concurs with nginx's one\n\t    #\n\t    #location ~ /\\.ht {\n\t    #    deny  all;\n\t    #}\n\t}\n}\n```\n\n### Tomcat配置\n打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置[具体说明查看官方文档](https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html)\n```xml\n <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"\n\t\t\t channelSendOptions=\"8\">\n\n  <Manager className=\"org.apache.catalina.ha.session.DeltaManager\"\n\t\t   expireSessionsOnShutdown=\"false\"\n\t\t   notifyListenersOnReplication=\"true\"/>\n\n  <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n\t<Membership className=\"org.apache.catalina.tribes.membership.McastService\"\n\t\t\t\taddress=\"228.0.0.4\"\n\t\t\t\tport=\"45564\"\n\t\t\t\tfrequency=\"500\"\n\t\t\t\tdropTime=\"3000\"/>\n\t<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t\t  address=\"auto\"\n\t\t\t  port=\"4000\"\n\t\t\t  autoBind=\"100\"\n\t\t\t  selectorTimeout=\"5000\"\n\t\t\t  maxThreads=\"6\"/>\n\n\t<Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n\t  <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n\t</Sender>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"/>\n  </Channel>\n\n  <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\"\n\t\t filter=\"\"/>\n  <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n\n  <Deployer className=\"org.apache.catalina.ha.deploy.FarmWarDeployer\"\n\t\t\ttempDir=\"/tmp/war-temp/\"\n\t\t\tdeployDir=\"/tmp/war-deploy/\"\n\t\t\twatchDir=\"/tmp/war-listen/\"\n\t\t\twatchEnabled=\"false\"/>\n\n  <ClusterListener className=\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"/>\n  <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n</Cluster>   \n```\n\n```xml\n将\n<Engine name=\"Catalina\" defaultHost=\"localhost\"> \n添加jvmRoute属性\n<Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"node01\" > \n注意其他节点JvmRoute要分别不一样\n```\n在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app>\n   <distributable/>\n</web-app>\n```\n然后启动服务器发现控制台打印\n![控制台打印](003vMReezy6OUXDo7kt61&690.jpg)\n```\n信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.\n一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind\n信息: Receiver Server Socket bound to:/127.0.0.1:4000\n一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\n警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00\n```\n\n表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP\n将节点Receiver 属性address=\"auto\"改为服务器局域网IP如下；其他节点也要做相应的改动\n```xml\n<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t  address=\"192.168.1.231\"\n\t\t  port=\"4000\"\n\t\t  autoBind=\"100\"\n\t\t  selectorTimeout=\"5000\"\n\t\t  maxThreads=\"6\"/>\n```\n再次启动服务器发现可以找到了其他的节点了\n\n然后启动nginx 访问nginx http://192.168.1.228/demo/分别打印\n```\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1\n```\n\n可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。\n\n***注意：***\n不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。","source":"_posts/Nginx+Tomcat集群.md","raw":"---\ntitle: Nginx+Tomcat集群\ndate: 2014-12-10 14:35:40\ncomments: true\ncategories: Tomcat\ntoc: true \n---\n## 环境\n|系统\t  |  JDK    |Tomcat    |Nginx                                      |\n|:-------:|:-------:|:--------:|:-----------------------------------------:|\n|CentOS6 192.168.1.231 CentOS6 192.168.1.232  |JDK1.6   |Tomcat6   |nginx-release-centos-6-0.el6.ngx.noarch.rpm|\n## 安装JDK\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n<!--more-->\n```\nshell rpm -qa | grep java*\n```\n第二步：查看yum库是否有java安装包\n```\nshell  yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n显示如上信息表示安装成功\n```\n\n## 安装Nginx\n***通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异***\n\n### 下载安装包\n```\nshell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n```\n\n### 查看nginx信息\n```\nshell yum info nginx\n\nLoaded plugins: fastestmirror, refresh-packagekit, security\nLoading mirror speeds from cached hostfile\n * base: mirrors.yun-idc.com\n * extras: mirrors.yun-idc.com\n * updates: mirrors.yun-idc.com\nnginx                                                                    | 2.9 kB     00:00    \nnginx/primary_db                                                         |  33 kB     00:00    \nAvailable Packages\nName        : nginx\nArch        : i386\nVersion     : 1.6.2\nRelease     : 1.el6.ngx\nSize        : 343 k\nRepo        : nginx\nSummary     : High performance web server\nURL         : http://nginx.org/\nLicense     : 2-clause BSD-like license\nDescription : nginx [engine x] is an HTTP and reverse proxy server, as well as\n            : a mail proxy server.\n```\n\n### 安装\n```\nshell yum install nginx\n```\n### 启动\n```\nshell service nginx start\n```\n### 访问\n\nhttp://ip\n\n查找nginx安装目录\n```\nshell ps -ef |grep nginx\nroot      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf\nnginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  \nroot      2268  1922  0 22:50 pts/1    00:00:00 grep nginx\n```\n***如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开***\n\n## 安装Tomcat\n```\nshell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps\n```\n\n### 启动\n\n```\nshell service tomcat6 start\n```\n\n### 启动\n\n```\nshell service tomcat6 stop\n```\n\n### 重启\n\n```\nshell service tomcat6 restart\n```\n\n按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下\n配置文件默认目录在/etc/tomcat6/下\n\n## 集群配置\n\n### 配置nginx.conf\n***在http{}中添加***\n```\nupstream cluster{\n server 192.168.1.231:8080 weight=2;\n server 192.168.1.232:8080 weight=1;\n}\n```\ncluster这个名称可以随便起\nweight参数表示权值，权值越高被分配到的几率越大\nserver 192.168.1.231:8080; 就是一个tomcat节点\n***在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中***\n```\nlocation ~ \\.jsp$ {\n   proxy_pass   http://cluster;\n}\n```\n\n如果想对根进行设置只需要对\n\n```\nlocation / {\n root   /usr/share/nginx/html;\n index  index.html index.html;\n}\n修改为\nlocation / {\n proxy_set_header Host $host;\n proxy_pass  http://cluster;\n}\n即可\n```\n\n复杂点的设置如下\n\n```\nlocation / {\n proxy_pass  http://cluster;\n proxy_redirect          off;\n proxy_set_header        Host $host;\n proxy_set_header        X-Real-IP $remote_addr;\n proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n client_max_body_size    10m;\n client_body_buffer_size 128k;\n proxy_connect_timeout   90;\n proxy_send_timeout      90;\n proxy_read_timeout      90;\n proxy_buffer_size       4k;\n proxy_buffers           4 32k;\n proxy_busy_buffers_size 64k;\n proxy_temp_file_write_size 64k;\n}\n```\n\n### nginx.conf文件说明\n```\n#nginx用户\nuser  nginx;\n#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx\nworker_processes  1;\n#错误文件日志路径\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n#对应每个processes允许最大的连接数\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多\n\tupstream cluster{\n\t  server 192.168.1.231:8080 weight=1;\n\t  server 192.168.1.240:8080 weight=2;\n\t}\n\t#nginx服务器配置\n    server {\n\t\t#监听端口\n\t\tlisten       80;\n\t\t#服务器名称\n\t    server_name  localhost;\n\n\t\t#charset koi8-r;\n\t\t#access_log  /var/log/nginx/log/host.access.log  main;\n\t    #对于请求跟路径时候的处理\n\t\tlocation / {\n\t\t   root   /usr/share/nginx/html;\n\t\t   index  index.html index.htm;\n\t\t   proxy_set_header Host $host;\n\t\t   proxy_pass  http://cluster;\n\t\t}\n\n\t    #error_page  404              /404.html;\n\n\t    # redirect server error pages to the static page /50x.html\n\n\t    error_page   500 502 503 504  /50x.html;\n\t    location = /50x.html {\n\t\t\troot   /usr/share/nginx/html;\n\t\t\t#proxy_pass   http://cluster;\n\t\t}\n\t    #设置对于请求jsp时候的处理\n\t    location ~ \\.jsp$ {\n\t\t\tproxy_pass   http://cluster;\n\t\t}\n\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    proxy_pass   http://127.0.0.1;\n\t    #}\n\n\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    root           html;\n\t    #    fastcgi_pass   127.0.0.1:9000;\n\t    #    fastcgi_index  index.php;\n\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\t    #    include        fastcgi_params;\n\t    #}\n\n\t    # deny access to .htaccess files, if Apache's document root\n\t    # concurs with nginx's one\n\t    #\n\t    #location ~ /\\.ht {\n\t    #    deny  all;\n\t    #}\n\t}\n}\n```\n\n### Tomcat配置\n打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置[具体说明查看官方文档](https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html)\n```xml\n <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"\n\t\t\t channelSendOptions=\"8\">\n\n  <Manager className=\"org.apache.catalina.ha.session.DeltaManager\"\n\t\t   expireSessionsOnShutdown=\"false\"\n\t\t   notifyListenersOnReplication=\"true\"/>\n\n  <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n\t<Membership className=\"org.apache.catalina.tribes.membership.McastService\"\n\t\t\t\taddress=\"228.0.0.4\"\n\t\t\t\tport=\"45564\"\n\t\t\t\tfrequency=\"500\"\n\t\t\t\tdropTime=\"3000\"/>\n\t<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t\t  address=\"auto\"\n\t\t\t  port=\"4000\"\n\t\t\t  autoBind=\"100\"\n\t\t\t  selectorTimeout=\"5000\"\n\t\t\t  maxThreads=\"6\"/>\n\n\t<Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n\t  <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n\t</Sender>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"/>\n  </Channel>\n\n  <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\"\n\t\t filter=\"\"/>\n  <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n\n  <Deployer className=\"org.apache.catalina.ha.deploy.FarmWarDeployer\"\n\t\t\ttempDir=\"/tmp/war-temp/\"\n\t\t\tdeployDir=\"/tmp/war-deploy/\"\n\t\t\twatchDir=\"/tmp/war-listen/\"\n\t\t\twatchEnabled=\"false\"/>\n\n  <ClusterListener className=\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"/>\n  <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n</Cluster>   \n```\n\n```xml\n将\n<Engine name=\"Catalina\" defaultHost=\"localhost\"> \n添加jvmRoute属性\n<Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"node01\" > \n注意其他节点JvmRoute要分别不一样\n```\n在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app>\n   <distributable/>\n</web-app>\n```\n然后启动服务器发现控制台打印\n![控制台打印](003vMReezy6OUXDo7kt61&690.jpg)\n```\n信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.\n一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind\n信息: Receiver Server Socket bound to:/127.0.0.1:4000\n一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\n警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00\n```\n\n表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP\n将节点Receiver 属性address=\"auto\"改为服务器局域网IP如下；其他节点也要做相应的改动\n```xml\n<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t  address=\"192.168.1.231\"\n\t\t  port=\"4000\"\n\t\t  autoBind=\"100\"\n\t\t  selectorTimeout=\"5000\"\n\t\t  maxThreads=\"6\"/>\n```\n再次启动服务器发现可以找到了其他的节点了\n\n然后启动nginx 访问nginx http://192.168.1.228/demo/分别打印\n```\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1\n```\n\n可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。\n\n***注意：***\n不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。","slug":"Nginx+Tomcat集群","published":1,"updated":"2021-06-25T02:00:18.092Z","layout":"post","photos":[],"link":"","_id":"ckqjatoln001mqkl55k246tw7","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统</th>\n<th style=\"text-align:center\">JDK</th>\n<th style=\"text-align:center\">Tomcat</th>\n<th style=\"text-align:center\">Nginx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CentOS6 192.168.1.231 CentOS6 192.168.1.232</td>\n<td style=\"text-align:center\">JDK1.6</td>\n<td style=\"text-align:center\">Tomcat6</td>\n<td style=\"text-align:center\">nginx-release-centos-6-0.el6.ngx.noarch.rpm</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa | grep java*</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell  yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br><span class=\"line\">显示如上信息表示安装成功</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p><strong><em>通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异</em></strong></p>\n<h3 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx信息\"><a href=\"#查看nginx信息\" class=\"headerlink\" title=\"查看nginx信息\"></a>查看nginx信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum info nginx</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded plugins: fastestmirror, refresh-packagekit, security</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.yun-idc.com</span><br><span class=\"line\"> * extras: mirrors.yun-idc.com</span><br><span class=\"line\"> * updates: mirrors.yun-idc.com</span><br><span class=\"line\">nginx                                                                    | 2.9 kB     00:00    </span><br><span class=\"line\">nginx/primary_db                                                         |  33 kB     00:00    </span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name        : nginx</span><br><span class=\"line\">Arch        : i386</span><br><span class=\"line\">Version     : 1.6.2</span><br><span class=\"line\">Release     : 1.el6.ngx</span><br><span class=\"line\">Size        : 343 k</span><br><span class=\"line\">Repo        : nginx</span><br><span class=\"line\">Summary     : High performance web server</span><br><span class=\"line\">URL         : http://nginx.org/</span><br><span class=\"line\">License     : 2-clause BSD-like license</span><br><span class=\"line\">Description : nginx [engine x] is an HTTP and reverse proxy server, as well as</span><br><span class=\"line\">            : a mail proxy server.</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p><a href=\"http://ip\" target=\"_blank\" rel=\"noopener\">http://ip</a></p>\n<p>查找nginx安装目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ps -ef |grep nginx</span><br><span class=\"line\">root      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  </span><br><span class=\"line\">root      2268  1922  0 22:50 pts/1    00:00:00 grep nginx</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开</em></strong></p>\n<h2 id=\"安装Tomcat\"><a href=\"#安装Tomcat\" class=\"headerlink\" title=\"安装Tomcat\"></a>安装Tomcat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 start</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-2\"><a href=\"#启动-2\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 restart</span><br></pre></td></tr></table></figure>\n<p>按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下<br>配置文件默认目录在/etc/tomcat6/下</p>\n<h2 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h2><h3 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h3><p><strong><em>在http{}中添加</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream cluster&#123;</span><br><span class=\"line\"> server 192.168.1.231:8080 weight=2;</span><br><span class=\"line\"> server 192.168.1.232:8080 weight=1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>cluster这个名称可以随便起<br>weight参数表示权值，权值越高被分配到的几率越大<br>server 192.168.1.231:8080; 就是一个tomcat节点<br><strong><em>在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.jsp$ &#123;</span><br><span class=\"line\">   proxy_pass   http://cluster;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想对根进行设置只需要对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> root   /usr/share/nginx/html;</span><br><span class=\"line\"> index  index.html index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">修改为</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_set_header Host $host;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">即可</span><br></pre></td></tr></table></figure>\n<p>复杂点的设置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\"> proxy_redirect          off;</span><br><span class=\"line\"> proxy_set_header        Host $host;</span><br><span class=\"line\"> proxy_set_header        X-Real-IP $remote_addr;</span><br><span class=\"line\"> proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"> client_max_body_size    10m;</span><br><span class=\"line\"> client_body_buffer_size 128k;</span><br><span class=\"line\"> proxy_connect_timeout   90;</span><br><span class=\"line\"> proxy_send_timeout      90;</span><br><span class=\"line\"> proxy_read_timeout      90;</span><br><span class=\"line\"> proxy_buffer_size       4k;</span><br><span class=\"line\"> proxy_buffers           4 32k;</span><br><span class=\"line\"> proxy_busy_buffers_size 64k;</span><br><span class=\"line\"> proxy_temp_file_write_size 64k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件说明\"><a href=\"#nginx-conf文件说明\" class=\"headerlink\" title=\"nginx.conf文件说明\"></a>nginx.conf文件说明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nginx用户</span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">#错误文件日志路径</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">#对应每个processes允许最大的连接数</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多</span><br><span class=\"line\">\tupstream cluster&#123;</span><br><span class=\"line\">\t  server 192.168.1.231:8080 weight=1;</span><br><span class=\"line\">\t  server 192.168.1.240:8080 weight=2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#nginx服务器配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">\t\t#监听端口</span><br><span class=\"line\">\t\tlisten       80;</span><br><span class=\"line\">\t\t#服务器名称</span><br><span class=\"line\">\t    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t#charset koi8-r;</span><br><span class=\"line\">\t\t#access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\">\t    #对于请求跟路径时候的处理</span><br><span class=\"line\">\t\tlocation / &#123;</span><br><span class=\"line\">\t\t   root   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t   index  index.html index.htm;</span><br><span class=\"line\">\t\t   proxy_set_header Host $host;</span><br><span class=\"line\">\t\t   proxy_pass  http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\"></span><br><span class=\"line\">\t    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">\t    location = /50x.html &#123;</span><br><span class=\"line\">\t\t\troot   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t\t#proxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    #设置对于请求jsp时候的处理</span><br><span class=\"line\">\t    location ~ \\.jsp$ &#123;</span><br><span class=\"line\">\t\t\tproxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    root           html;</span><br><span class=\"line\">\t    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">\t    #    fastcgi_index  index.php;</span><br><span class=\"line\">\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">\t    #    include        fastcgi_params;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">\t    # concurs with nginx&apos;s one</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ /\\.ht &#123;</span><br><span class=\"line\">\t    #    deny  all;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tomcat配置\"><a href=\"#Tomcat配置\" class=\"headerlink\" title=\"Tomcat配置\"></a>Tomcat配置</h3><p>打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置<a href=\"https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html\" target=\"_blank\" rel=\"noopener\">具体说明查看官方文档</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Cluster</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t <span class=\"attr\">channelSendOptions</span>=<span class=\"string\">\"8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.DeltaManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t   <span class=\"attr\">expireSessionsOnShutdown</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t   <span class=\"attr\">notifyListenersOnReplication</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Channel</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.GroupChannel\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Membership</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.membership.McastService\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">address</span>=<span class=\"string\">\"228.0.0.4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">port</span>=<span class=\"string\">\"45564\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">frequency</span>=<span class=\"string\">\"500\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">dropTime</span>=<span class=\"string\">\"3000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Sender</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.ReplicationTransmitter\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">Transport</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Sender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Channel</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.ReplicationValve\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t <span class=\"attr\">filter</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteBinderValve\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Deployer</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.deploy.FarmWarDeployer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">tempDir</span>=<span class=\"string\">\"/tmp/war-temp/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">deployDir</span>=<span class=\"string\">\"/tmp/war-deploy/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">watchDir</span>=<span class=\"string\">\"/tmp/war-listen/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">watchEnabled</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.ClusterSessionListener\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Cluster</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span> </span><br><span class=\"line\">添加jvmRoute属性</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span> <span class=\"attr\">jvmRoute</span>=<span class=\"string\">\"node01\"</span> &gt;</span> </span><br><span class=\"line\">注意其他节点JvmRoute要分别不一样</span><br></pre></td></tr></table></figure>\n<p>在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">distributable</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后启动服务器发现控制台打印<br><img src=\"003vMReezy6OUXDo7kt61&amp;690.jpg\" alt=\"控制台打印\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.</span><br><span class=\"line\">一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind</span><br><span class=\"line\">信息: Receiver Server Socket bound to:/127.0.0.1:4000</span><br><span class=\"line\">一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions</span><br><span class=\"line\">警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00</span><br></pre></td></tr></table></figure></p>\n<p>表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP<br>将节点Receiver 属性address=”auto”改为服务器局域网IP如下；其他节点也要做相应的改动<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"192.168.1.231\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>再次启动服务器发现可以找到了其他的节点了</p>\n<p>然后启动nginx 访问nginx <a href=\"http://192.168.1.228/demo/分别打印\" target=\"_blank\" rel=\"noopener\">http://192.168.1.228/demo/分别打印</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2</span><br><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1</span><br></pre></td></tr></table></figure></p>\n<p>可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。</p>\n<p><strong><em>注意：</em></strong><br>不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统</th>\n<th style=\"text-align:center\">JDK</th>\n<th style=\"text-align:center\">Tomcat</th>\n<th style=\"text-align:center\">Nginx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CentOS6 192.168.1.231 CentOS6 192.168.1.232</td>\n<td style=\"text-align:center\">JDK1.6</td>\n<td style=\"text-align:center\">Tomcat6</td>\n<td style=\"text-align:center\">nginx-release-centos-6-0.el6.ngx.noarch.rpm</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa | grep java*</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell  yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br><span class=\"line\">显示如上信息表示安装成功</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p><strong><em>通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异</em></strong></p>\n<h3 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx信息\"><a href=\"#查看nginx信息\" class=\"headerlink\" title=\"查看nginx信息\"></a>查看nginx信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum info nginx</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded plugins: fastestmirror, refresh-packagekit, security</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.yun-idc.com</span><br><span class=\"line\"> * extras: mirrors.yun-idc.com</span><br><span class=\"line\"> * updates: mirrors.yun-idc.com</span><br><span class=\"line\">nginx                                                                    | 2.9 kB     00:00    </span><br><span class=\"line\">nginx/primary_db                                                         |  33 kB     00:00    </span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name        : nginx</span><br><span class=\"line\">Arch        : i386</span><br><span class=\"line\">Version     : 1.6.2</span><br><span class=\"line\">Release     : 1.el6.ngx</span><br><span class=\"line\">Size        : 343 k</span><br><span class=\"line\">Repo        : nginx</span><br><span class=\"line\">Summary     : High performance web server</span><br><span class=\"line\">URL         : http://nginx.org/</span><br><span class=\"line\">License     : 2-clause BSD-like license</span><br><span class=\"line\">Description : nginx [engine x] is an HTTP and reverse proxy server, as well as</span><br><span class=\"line\">            : a mail proxy server.</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p><a href=\"http://ip\" target=\"_blank\" rel=\"noopener\">http://ip</a></p>\n<p>查找nginx安装目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ps -ef |grep nginx</span><br><span class=\"line\">root      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  </span><br><span class=\"line\">root      2268  1922  0 22:50 pts/1    00:00:00 grep nginx</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开</em></strong></p>\n<h2 id=\"安装Tomcat\"><a href=\"#安装Tomcat\" class=\"headerlink\" title=\"安装Tomcat\"></a>安装Tomcat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 start</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-2\"><a href=\"#启动-2\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 restart</span><br></pre></td></tr></table></figure>\n<p>按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下<br>配置文件默认目录在/etc/tomcat6/下</p>\n<h2 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h2><h3 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h3><p><strong><em>在http{}中添加</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream cluster&#123;</span><br><span class=\"line\"> server 192.168.1.231:8080 weight=2;</span><br><span class=\"line\"> server 192.168.1.232:8080 weight=1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>cluster这个名称可以随便起<br>weight参数表示权值，权值越高被分配到的几率越大<br>server 192.168.1.231:8080; 就是一个tomcat节点<br><strong><em>在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.jsp$ &#123;</span><br><span class=\"line\">   proxy_pass   http://cluster;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想对根进行设置只需要对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> root   /usr/share/nginx/html;</span><br><span class=\"line\"> index  index.html index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">修改为</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_set_header Host $host;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">即可</span><br></pre></td></tr></table></figure>\n<p>复杂点的设置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\"> proxy_redirect          off;</span><br><span class=\"line\"> proxy_set_header        Host $host;</span><br><span class=\"line\"> proxy_set_header        X-Real-IP $remote_addr;</span><br><span class=\"line\"> proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"> client_max_body_size    10m;</span><br><span class=\"line\"> client_body_buffer_size 128k;</span><br><span class=\"line\"> proxy_connect_timeout   90;</span><br><span class=\"line\"> proxy_send_timeout      90;</span><br><span class=\"line\"> proxy_read_timeout      90;</span><br><span class=\"line\"> proxy_buffer_size       4k;</span><br><span class=\"line\"> proxy_buffers           4 32k;</span><br><span class=\"line\"> proxy_busy_buffers_size 64k;</span><br><span class=\"line\"> proxy_temp_file_write_size 64k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件说明\"><a href=\"#nginx-conf文件说明\" class=\"headerlink\" title=\"nginx.conf文件说明\"></a>nginx.conf文件说明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nginx用户</span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">#错误文件日志路径</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">#对应每个processes允许最大的连接数</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多</span><br><span class=\"line\">\tupstream cluster&#123;</span><br><span class=\"line\">\t  server 192.168.1.231:8080 weight=1;</span><br><span class=\"line\">\t  server 192.168.1.240:8080 weight=2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#nginx服务器配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">\t\t#监听端口</span><br><span class=\"line\">\t\tlisten       80;</span><br><span class=\"line\">\t\t#服务器名称</span><br><span class=\"line\">\t    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t#charset koi8-r;</span><br><span class=\"line\">\t\t#access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\">\t    #对于请求跟路径时候的处理</span><br><span class=\"line\">\t\tlocation / &#123;</span><br><span class=\"line\">\t\t   root   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t   index  index.html index.htm;</span><br><span class=\"line\">\t\t   proxy_set_header Host $host;</span><br><span class=\"line\">\t\t   proxy_pass  http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\"></span><br><span class=\"line\">\t    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">\t    location = /50x.html &#123;</span><br><span class=\"line\">\t\t\troot   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t\t#proxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    #设置对于请求jsp时候的处理</span><br><span class=\"line\">\t    location ~ \\.jsp$ &#123;</span><br><span class=\"line\">\t\t\tproxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    root           html;</span><br><span class=\"line\">\t    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">\t    #    fastcgi_index  index.php;</span><br><span class=\"line\">\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">\t    #    include        fastcgi_params;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">\t    # concurs with nginx&apos;s one</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ /\\.ht &#123;</span><br><span class=\"line\">\t    #    deny  all;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tomcat配置\"><a href=\"#Tomcat配置\" class=\"headerlink\" title=\"Tomcat配置\"></a>Tomcat配置</h3><p>打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置<a href=\"https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html\" target=\"_blank\" rel=\"noopener\">具体说明查看官方文档</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Cluster</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t <span class=\"attr\">channelSendOptions</span>=<span class=\"string\">\"8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.DeltaManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t   <span class=\"attr\">expireSessionsOnShutdown</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t   <span class=\"attr\">notifyListenersOnReplication</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Channel</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.GroupChannel\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Membership</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.membership.McastService\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">address</span>=<span class=\"string\">\"228.0.0.4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">port</span>=<span class=\"string\">\"45564\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">frequency</span>=<span class=\"string\">\"500\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">dropTime</span>=<span class=\"string\">\"3000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Sender</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.ReplicationTransmitter\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">Transport</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Sender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Channel</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.ReplicationValve\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t <span class=\"attr\">filter</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteBinderValve\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Deployer</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.deploy.FarmWarDeployer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">tempDir</span>=<span class=\"string\">\"/tmp/war-temp/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">deployDir</span>=<span class=\"string\">\"/tmp/war-deploy/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">watchDir</span>=<span class=\"string\">\"/tmp/war-listen/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">watchEnabled</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.ClusterSessionListener\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Cluster</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span> </span><br><span class=\"line\">添加jvmRoute属性</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span> <span class=\"attr\">jvmRoute</span>=<span class=\"string\">\"node01\"</span> &gt;</span> </span><br><span class=\"line\">注意其他节点JvmRoute要分别不一样</span><br></pre></td></tr></table></figure>\n<p>在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">distributable</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后启动服务器发现控制台打印<br><img src=\"003vMReezy6OUXDo7kt61&amp;690.jpg\" alt=\"控制台打印\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.</span><br><span class=\"line\">一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind</span><br><span class=\"line\">信息: Receiver Server Socket bound to:/127.0.0.1:4000</span><br><span class=\"line\">一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions</span><br><span class=\"line\">警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00</span><br></pre></td></tr></table></figure></p>\n<p>表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP<br>将节点Receiver 属性address=”auto”改为服务器局域网IP如下；其他节点也要做相应的改动<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"192.168.1.231\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>再次启动服务器发现可以找到了其他的节点了</p>\n<p>然后启动nginx 访问nginx <a href=\"http://192.168.1.228/demo/分别打印\" target=\"_blank\" rel=\"noopener\">http://192.168.1.228/demo/分别打印</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2</span><br><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1</span><br></pre></td></tr></table></figure></p>\n<p>可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。</p>\n<p><strong><em>注意：</em></strong><br>不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。</p>"},{"title":"Oracle常用脚本","date":"2014-04-30T13:28:01.000Z","comments":1,"toc":true,"_content":"\n### 建表空间\n```sql\ncreate temporary tablespace bjjtxx_space_temp \ntempfile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local; \n\ncreate tablespace bjjtxx_space\nlogging\ndatafile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local;\n```\n<!--more-->\n\n### 建用户\n```sql\ncreate user bjjtxx_develop identified by bjjtxx\ndefault tablespace bjjtxx_space\ntemporary tablespace bjjtxx_space_temp;\n```\n### 用户授权\n```sql\ngrant dba,connect,resource,CTXAPP,create view to bjjtxx_develop;\n```\n\n### 锁表查询\n***查看锁住的表***\n```sql\nSELECT b.owner,b.object_name,a.session_id,a.locked_mode  \n    FROM v$locked_object a ,dba_objects b  \n    WHERE b.object_id = a.object_id; \n```\n\n***查看被锁住的会话 ***\n```sql\nSELECT b.username,b.sid,b.serial#,logon_time  \n    FROM v$locked_object a,v$session b  \n    WHERE a.session_id = b.sid order by b.logon_time; \n```\n\n***如果要断开某个会话，执行  ***\n```sql\nalter system kill session ‘sid,serial#’\n```\n\n### 设置表空间大小\n\n***查找出oralce表空间的文件名、路径 ***\n```sql\nselect tablespace_name, file_id, file_name, round(bytes/(1024*1024),0) total_space from dba_data_files; \n```\n\n***修改表空间大小  ***\n```sql\nALTER DATABASE DATAFILE 'E:\\LARGE.DBF' RESIZE 3000M;\n```\n\n\n***设置表空间最大大小  ***\n```sql\nALTER DATABASE DATAFILE ''/oracle/oradata/db/GAME.dbf \nAUTOEXTEND ON NEXT 100M \nMAXSIZE 10000M;\n```\n","source":"_posts/Oracle常用脚本.md","raw":"---\ntitle: Oracle常用脚本\ndate: 2014-04-30 21:28:01\ncomments: true\ncategories: Oracle\ntoc: true \n---\n\n### 建表空间\n```sql\ncreate temporary tablespace bjjtxx_space_temp \ntempfile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local; \n\ncreate tablespace bjjtxx_space\nlogging\ndatafile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local;\n```\n<!--more-->\n\n### 建用户\n```sql\ncreate user bjjtxx_develop identified by bjjtxx\ndefault tablespace bjjtxx_space\ntemporary tablespace bjjtxx_space_temp;\n```\n### 用户授权\n```sql\ngrant dba,connect,resource,CTXAPP,create view to bjjtxx_develop;\n```\n\n### 锁表查询\n***查看锁住的表***\n```sql\nSELECT b.owner,b.object_name,a.session_id,a.locked_mode  \n    FROM v$locked_object a ,dba_objects b  \n    WHERE b.object_id = a.object_id; \n```\n\n***查看被锁住的会话 ***\n```sql\nSELECT b.username,b.sid,b.serial#,logon_time  \n    FROM v$locked_object a,v$session b  \n    WHERE a.session_id = b.sid order by b.logon_time; \n```\n\n***如果要断开某个会话，执行  ***\n```sql\nalter system kill session ‘sid,serial#’\n```\n\n### 设置表空间大小\n\n***查找出oralce表空间的文件名、路径 ***\n```sql\nselect tablespace_name, file_id, file_name, round(bytes/(1024*1024),0) total_space from dba_data_files; \n```\n\n***修改表空间大小  ***\n```sql\nALTER DATABASE DATAFILE 'E:\\LARGE.DBF' RESIZE 3000M;\n```\n\n\n***设置表空间最大大小  ***\n```sql\nALTER DATABASE DATAFILE ''/oracle/oradata/db/GAME.dbf \nAUTOEXTEND ON NEXT 100M \nMAXSIZE 10000M;\n```\n","slug":"Oracle常用脚本","published":1,"updated":"2021-06-25T02:00:18.102Z","layout":"post","photos":[],"link":"","_id":"ckqjatolp001pqkl5s68sme96","content":"<h3 id=\"建表空间\"><a href=\"#建表空间\" class=\"headerlink\" title=\"建表空间\"></a>建表空间</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp </span><br><span class=\"line\">tempfile <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">logging</span></span><br><span class=\"line\"><span class=\"keyword\">datafile</span> <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"建用户\"><a href=\"#建用户\" class=\"headerlink\" title=\"建用户\"></a>建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> bjjtxx_develop <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> bjjtxx</span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> dba,<span class=\"keyword\">connect</span>,<span class=\"keyword\">resource</span>,CTXAPP,<span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">to</span> bjjtxx_develop;</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁表查询\"><a href=\"#锁表查询\" class=\"headerlink\" title=\"锁表查询\"></a>锁表查询</h3><p><strong><em>查看锁住的表</em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.owner,b.object_name,a.session_id,a.locked_mode  </span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a ,dba_objects b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> b.object_id = a.object_id;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>查看被锁住的会话 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.username,b.sid,b.serial<span class=\"comment\">#,logon_time  </span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a,v$<span class=\"keyword\">session</span> b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> a.session_id = b.sid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> b.logon_time;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果要断开某个会话，执行  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> ‘<span class=\"keyword\">sid</span>,<span class=\"built_in\">serial</span><span class=\"comment\">#’</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置表空间大小\"><a href=\"#设置表空间大小\" class=\"headerlink\" title=\"设置表空间大小\"></a>设置表空间大小</h3><p><strong><em>查找出oralce表空间的文件名、路径 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> tablespace_name, file_id, file_name, <span class=\"keyword\">round</span>(<span class=\"keyword\">bytes</span>/(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>),<span class=\"number\">0</span>) total_space <span class=\"keyword\">from</span> dba_data_files;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>修改表空间大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'E:\\LARGE.DBF'</span> <span class=\"keyword\">RESIZE</span> <span class=\"number\">3000</span>M;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>设置表空间最大大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">''</span>/<span class=\"keyword\">oracle</span>/<span class=\"keyword\">oradata</span>/db/GAME.dbf </span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">100</span>M </span><br><span class=\"line\"><span class=\"keyword\">MAXSIZE</span> <span class=\"number\">10000</span>M;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"建表空间\"><a href=\"#建表空间\" class=\"headerlink\" title=\"建表空间\"></a>建表空间</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp </span><br><span class=\"line\">tempfile <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">logging</span></span><br><span class=\"line\"><span class=\"keyword\">datafile</span> <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"建用户\"><a href=\"#建用户\" class=\"headerlink\" title=\"建用户\"></a>建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> bjjtxx_develop <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> bjjtxx</span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> dba,<span class=\"keyword\">connect</span>,<span class=\"keyword\">resource</span>,CTXAPP,<span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">to</span> bjjtxx_develop;</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁表查询\"><a href=\"#锁表查询\" class=\"headerlink\" title=\"锁表查询\"></a>锁表查询</h3><p><strong><em>查看锁住的表</em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.owner,b.object_name,a.session_id,a.locked_mode  </span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a ,dba_objects b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> b.object_id = a.object_id;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>查看被锁住的会话 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.username,b.sid,b.serial<span class=\"comment\">#,logon_time  </span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a,v$<span class=\"keyword\">session</span> b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> a.session_id = b.sid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> b.logon_time;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果要断开某个会话，执行  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> ‘<span class=\"keyword\">sid</span>,<span class=\"built_in\">serial</span><span class=\"comment\">#’</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置表空间大小\"><a href=\"#设置表空间大小\" class=\"headerlink\" title=\"设置表空间大小\"></a>设置表空间大小</h3><p><strong><em>查找出oralce表空间的文件名、路径 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> tablespace_name, file_id, file_name, <span class=\"keyword\">round</span>(<span class=\"keyword\">bytes</span>/(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>),<span class=\"number\">0</span>) total_space <span class=\"keyword\">from</span> dba_data_files;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>修改表空间大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'E:\\LARGE.DBF'</span> <span class=\"keyword\">RESIZE</span> <span class=\"number\">3000</span>M;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>设置表空间最大大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">''</span>/<span class=\"keyword\">oracle</span>/<span class=\"keyword\">oradata</span>/db/GAME.dbf </span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">100</span>M </span><br><span class=\"line\"><span class=\"keyword\">MAXSIZE</span> <span class=\"number\">10000</span>M;</span><br></pre></td></tr></table></figure></p>"},{"title":"React学习总结一","date":"2016-11-28T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## React是什么\n- React是用于构建用户界面的Javascript库 \n- 1、仅仅是UI\n - 许多人使用React作为MVC架构的V层。 尽管React并没有假设过你的其余技术栈， 但它仍可以作为一个小特征轻易地在已有项目中使用 \n- 2、虚拟DOM\n - React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持 \n- 3、数据流\n - React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单\n<!--more-->\n\n## React翻译器经历的几个阶段\n- React有一套自己的语法糖。在浏览器运行时需将React代码翻译成浏览器可识别的代码，因此需要一条React的翻译引擎。说道React的翻译引擎经历了如下几个阶段\n - **第一个阶段：在react 0.14前，浏览器端实现对jsx的编译依赖jsxtransformer.js **\n - **第一个阶段：在react 0.14后，这个依赖的库改为browser.js，页面script标签的type也由text/jsx改为text/babel**\n - **第三个阶段：react-tool更换为babel**\n \n- 以上第一、第二个节点只是用来测试学习react使用，生产环境需要借助编译工具事先将jsx编译成js \n\n\n\n## 定义组件的三种方式\n第一种：使用 React.createClass() 这种方式是传统的，将组件定义为一个类\n- \n```javascript\nvar Welcome = React.createClass({\n  //初始化state 通过getInitialState 方法中实现\n  getInitialState: function() {\n    return {date: []};\n  },\n  render: function() {\n    return (\n      <div className=\"welcomeBox\">\n        Hello, world! I am a WelcomeBox.\n      </div>\n    );\n  }\n});\n```\n第二种：使用继承React.Component，此种方式是采用ES6语法定义将组件定义为一个类\n- \n```javascript\nclass Welcome extends React.Component {\n   //初始化state 只能通过构造函数constructor中进行初始化\n   constructor(props) {\n\tsuper(props);\n\tthis.state = {date: new Date()};\n   }\n   render() {\n\treturn <h1>Hello, {this.props.name}</h1>;\n   }\n}\n```\n\n第三种：就是一个简单的javascript函数将组件定义为一个函数。\n- 当React看到表示用户定义组件的元素时，它将JSX属性作为单个对象传递给此组件。 我们称这个对象为“props”。\n```javascript\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n```\n\n***注意事项：***\n- **1、无论是是将组件定义为一个函数或者类都不能修改自己的属性。**\n- **2、建议从组件自己的角度来命名属性，而不是使用它的上下文。**\n- **3、不能直接修改状态，或者不会重新渲染组件必须得使用setState()。**\n- **4、状态的更新不要依赖this.state或者this.props来计算一下个值 因为this.state和this.props存在异步更新**。\n- **5、this.setState 只会将对象进行合并不会替换之前的state。**\n\n***问题：***\n- **1、函数组件与类组件有什么区别？**\n - 函数组件与类组件直接的唯一区别就是函数组件中没有state，state是类组件特有的功能。\n- **2、组件state更新会不会调用 组件卸载componentWillUnmount方法？**\n - 不会调用因为组件没有被移除Dom 只是进行了更新 此时会调用shouldComponentUpdate(object nextProps, object nextState)\n\n","source":"_posts/React学习总结一.md","raw":"---\ntitle: React学习总结一\ndate: 2016-11-29\ncomments: true\ncategories: JavaScript\ntoc: true \n---\n\n## React是什么\n- React是用于构建用户界面的Javascript库 \n- 1、仅仅是UI\n - 许多人使用React作为MVC架构的V层。 尽管React并没有假设过你的其余技术栈， 但它仍可以作为一个小特征轻易地在已有项目中使用 \n- 2、虚拟DOM\n - React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持 \n- 3、数据流\n - React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单\n<!--more-->\n\n## React翻译器经历的几个阶段\n- React有一套自己的语法糖。在浏览器运行时需将React代码翻译成浏览器可识别的代码，因此需要一条React的翻译引擎。说道React的翻译引擎经历了如下几个阶段\n - **第一个阶段：在react 0.14前，浏览器端实现对jsx的编译依赖jsxtransformer.js **\n - **第一个阶段：在react 0.14后，这个依赖的库改为browser.js，页面script标签的type也由text/jsx改为text/babel**\n - **第三个阶段：react-tool更换为babel**\n \n- 以上第一、第二个节点只是用来测试学习react使用，生产环境需要借助编译工具事先将jsx编译成js \n\n\n\n## 定义组件的三种方式\n第一种：使用 React.createClass() 这种方式是传统的，将组件定义为一个类\n- \n```javascript\nvar Welcome = React.createClass({\n  //初始化state 通过getInitialState 方法中实现\n  getInitialState: function() {\n    return {date: []};\n  },\n  render: function() {\n    return (\n      <div className=\"welcomeBox\">\n        Hello, world! I am a WelcomeBox.\n      </div>\n    );\n  }\n});\n```\n第二种：使用继承React.Component，此种方式是采用ES6语法定义将组件定义为一个类\n- \n```javascript\nclass Welcome extends React.Component {\n   //初始化state 只能通过构造函数constructor中进行初始化\n   constructor(props) {\n\tsuper(props);\n\tthis.state = {date: new Date()};\n   }\n   render() {\n\treturn <h1>Hello, {this.props.name}</h1>;\n   }\n}\n```\n\n第三种：就是一个简单的javascript函数将组件定义为一个函数。\n- 当React看到表示用户定义组件的元素时，它将JSX属性作为单个对象传递给此组件。 我们称这个对象为“props”。\n```javascript\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n```\n\n***注意事项：***\n- **1、无论是是将组件定义为一个函数或者类都不能修改自己的属性。**\n- **2、建议从组件自己的角度来命名属性，而不是使用它的上下文。**\n- **3、不能直接修改状态，或者不会重新渲染组件必须得使用setState()。**\n- **4、状态的更新不要依赖this.state或者this.props来计算一下个值 因为this.state和this.props存在异步更新**。\n- **5、this.setState 只会将对象进行合并不会替换之前的state。**\n\n***问题：***\n- **1、函数组件与类组件有什么区别？**\n - 函数组件与类组件直接的唯一区别就是函数组件中没有state，state是类组件特有的功能。\n- **2、组件state更新会不会调用 组件卸载componentWillUnmount方法？**\n - 不会调用因为组件没有被移除Dom 只是进行了更新 此时会调用shouldComponentUpdate(object nextProps, object nextState)\n\n","slug":"React学习总结一","published":1,"updated":"2021-06-25T02:00:18.103Z","layout":"post","photos":[],"link":"","_id":"ckqjatolr001rqkl556hhh148","content":"<h2 id=\"React是什么\"><a href=\"#React是什么\" class=\"headerlink\" title=\"React是什么\"></a>React是什么</h2><ul>\n<li>React是用于构建用户界面的Javascript库 </li>\n<li>1、仅仅是UI<ul>\n<li>许多人使用React作为MVC架构的V层。 尽管React并没有假设过你的其余技术栈， 但它仍可以作为一个小特征轻易地在已有项目中使用 </li>\n</ul>\n</li>\n<li>2、虚拟DOM<ul>\n<li>React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持 </li>\n</ul>\n</li>\n<li>3、数据流<ul>\n<li>React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"React翻译器经历的几个阶段\"><a href=\"#React翻译器经历的几个阶段\" class=\"headerlink\" title=\"React翻译器经历的几个阶段\"></a>React翻译器经历的几个阶段</h2><ul>\n<li><p>React有一套自己的语法糖。在浏览器运行时需将React代码翻译成浏览器可识别的代码，因此需要一条React的翻译引擎。说道React的翻译引擎经历了如下几个阶段</p>\n<ul>\n<li><strong>第一个阶段：在react 0.14前，浏览器端实现对jsx的编译依赖jsxtransformer.js </strong></li>\n<li><strong>第一个阶段：在react 0.14后，这个依赖的库改为browser.js，页面script标签的type也由text/jsx改为text/babel</strong></li>\n<li><strong>第三个阶段：react-tool更换为babel</strong></li>\n</ul>\n</li>\n<li><p>以上第一、第二个节点只是用来测试学习react使用，生产环境需要借助编译工具事先将jsx编译成js </p>\n</li>\n</ul>\n<h2 id=\"定义组件的三种方式\"><a href=\"#定义组件的三种方式\" class=\"headerlink\" title=\"定义组件的三种方式\"></a>定义组件的三种方式</h2><p>第一种：使用 React.createClass() 这种方式是传统的，将组件定义为一个类</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Welcome = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//初始化state 通过getInitialState 方法中实现</span></span><br><span class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">date</span>: []&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"welcomeBox\"</span>&gt;</span><br><span class=\"line\">        Hello, world! I am a WelcomeBox.</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二种：使用继承React.Component，此种方式是采用ES6语法定义将组件定义为一个类</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//初始化state 只能通过构造函数constructor中进行初始化</span></span><br><span class=\"line\">   <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第三种：就是一个简单的javascript函数将组件定义为一个函数。</p>\n<ul>\n<li>当React看到表示用户定义组件的元素时，它将JSX属性作为单个对象传递给此组件。 我们称这个对象为“props”。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>注意事项：</em></strong></p>\n<ul>\n<li><strong>1、无论是是将组件定义为一个函数或者类都不能修改自己的属性。</strong></li>\n<li><strong>2、建议从组件自己的角度来命名属性，而不是使用它的上下文。</strong></li>\n<li><strong>3、不能直接修改状态，或者不会重新渲染组件必须得使用setState()。</strong></li>\n<li><strong>4、状态的更新不要依赖this.state或者this.props来计算一下个值 因为this.state和this.props存在异步更新</strong>。</li>\n<li><strong>5、this.setState 只会将对象进行合并不会替换之前的state。</strong></li>\n</ul>\n<p><strong><em>问题：</em></strong></p>\n<ul>\n<li><strong>1、函数组件与类组件有什么区别？</strong><ul>\n<li>函数组件与类组件直接的唯一区别就是函数组件中没有state，state是类组件特有的功能。</li>\n</ul>\n</li>\n<li><strong>2、组件state更新会不会调用 组件卸载componentWillUnmount方法？</strong><ul>\n<li>不会调用因为组件没有被移除Dom 只是进行了更新 此时会调用shouldComponentUpdate(object nextProps, object nextState)</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"React是什么\"><a href=\"#React是什么\" class=\"headerlink\" title=\"React是什么\"></a>React是什么</h2><ul>\n<li>React是用于构建用户界面的Javascript库 </li>\n<li>1、仅仅是UI<ul>\n<li>许多人使用React作为MVC架构的V层。 尽管React并没有假设过你的其余技术栈， 但它仍可以作为一个小特征轻易地在已有项目中使用 </li>\n</ul>\n</li>\n<li>2、虚拟DOM<ul>\n<li>React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持 </li>\n</ul>\n</li>\n<li>3、数据流<ul>\n<li>React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单","more":"</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"React翻译器经历的几个阶段\"><a href=\"#React翻译器经历的几个阶段\" class=\"headerlink\" title=\"React翻译器经历的几个阶段\"></a>React翻译器经历的几个阶段</h2><ul>\n<li><p>React有一套自己的语法糖。在浏览器运行时需将React代码翻译成浏览器可识别的代码，因此需要一条React的翻译引擎。说道React的翻译引擎经历了如下几个阶段</p>\n<ul>\n<li><strong>第一个阶段：在react 0.14前，浏览器端实现对jsx的编译依赖jsxtransformer.js </strong></li>\n<li><strong>第一个阶段：在react 0.14后，这个依赖的库改为browser.js，页面script标签的type也由text/jsx改为text/babel</strong></li>\n<li><strong>第三个阶段：react-tool更换为babel</strong></li>\n</ul>\n</li>\n<li><p>以上第一、第二个节点只是用来测试学习react使用，生产环境需要借助编译工具事先将jsx编译成js </p>\n</li>\n</ul>\n<h2 id=\"定义组件的三种方式\"><a href=\"#定义组件的三种方式\" class=\"headerlink\" title=\"定义组件的三种方式\"></a>定义组件的三种方式</h2><p>第一种：使用 React.createClass() 这种方式是传统的，将组件定义为一个类</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Welcome = React.createClass(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//初始化state 通过getInitialState 方法中实现</span></span><br><span class=\"line\">  getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">date</span>: []&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"welcomeBox\"</span>&gt;</span><br><span class=\"line\">        Hello, world! I am a WelcomeBox.</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二种：使用继承React.Component，此种方式是采用ES6语法定义将组件定义为一个类</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//初始化state 只能通过构造函数constructor中进行初始化</span></span><br><span class=\"line\">   <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第三种：就是一个简单的javascript函数将组件定义为一个函数。</p>\n<ul>\n<li>当React看到表示用户定义组件的元素时，它将JSX属性作为单个对象传递给此组件。 我们称这个对象为“props”。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Welcome</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>注意事项：</em></strong></p>\n<ul>\n<li><strong>1、无论是是将组件定义为一个函数或者类都不能修改自己的属性。</strong></li>\n<li><strong>2、建议从组件自己的角度来命名属性，而不是使用它的上下文。</strong></li>\n<li><strong>3、不能直接修改状态，或者不会重新渲染组件必须得使用setState()。</strong></li>\n<li><strong>4、状态的更新不要依赖this.state或者this.props来计算一下个值 因为this.state和this.props存在异步更新</strong>。</li>\n<li><strong>5、this.setState 只会将对象进行合并不会替换之前的state。</strong></li>\n</ul>\n<p><strong><em>问题：</em></strong></p>\n<ul>\n<li><strong>1、函数组件与类组件有什么区别？</strong><ul>\n<li>函数组件与类组件直接的唯一区别就是函数组件中没有state，state是类组件特有的功能。</li>\n</ul>\n</li>\n<li><strong>2、组件state更新会不会调用 组件卸载componentWillUnmount方法？</strong><ul>\n<li>不会调用因为组件没有被移除Dom 只是进行了更新 此时会调用shouldComponentUpdate(object nextProps, object nextState)</li>\n</ul>\n</li>\n</ul>"},{"title":"Redux","date":"2016-12-08T16:00:00.000Z","comments":1,"toc":false,"_content":"\n**Redux是一个通用Javscript App模块，用做App State的管理。**\n1、React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。\n2、一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。\n然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。\n<!--more-->\n3、子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。\n这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。\n4、为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。\n5、为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：\n- a. 需要回调通知state (等同于回调参数) -> action\n- b. 需要根据回调处理 (等同于父级方法) -> reducer\n- c. 需要state (等同于总状态) -> store\n\n对Redux来说只有这三个要素：\n- a. **action**是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。\n- b. **reducer**是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。\n- c. **store**负责存储状态并可以被react api回调，发布action.\n\n下面是redux github中提供的代码样例\n- \n```javascript\nimport { createStore } from 'redux'\n// 这是一个reducer函数\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1\n  case 'DECREMENT':\n    return state - 1\n  default:\n    return state\n  }\n}\n//创建一个包含应用程序状态的Redux存储。\nlet store = createStore(counter)\n\n//订阅state改变事件  更新UI以响应状态更改。\nstore.subscribe(() =>\n  console.log(store.getState())\n)\n\nstore.dispatch({ type: 'INCREMENT' })\n// 1\nstore.dispatch({ type: 'INCREMENT' })\n// 2\nstore.dispatch({ type: 'DECREMENT' })\n// 1\n```\n这种设计模式采用观察者模式，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。","source":"_posts/Redux.md","raw":"---\ntitle: Redux\ndate: 2016-12-09\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\n**Redux是一个通用Javscript App模块，用做App State的管理。**\n1、React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。\n2、一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。\n然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。\n<!--more-->\n3、子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。\n这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。\n4、为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。\n5、为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：\n- a. 需要回调通知state (等同于回调参数) -> action\n- b. 需要根据回调处理 (等同于父级方法) -> reducer\n- c. 需要state (等同于总状态) -> store\n\n对Redux来说只有这三个要素：\n- a. **action**是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。\n- b. **reducer**是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。\n- c. **store**负责存储状态并可以被react api回调，发布action.\n\n下面是redux github中提供的代码样例\n- \n```javascript\nimport { createStore } from 'redux'\n// 这是一个reducer函数\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1\n  case 'DECREMENT':\n    return state - 1\n  default:\n    return state\n  }\n}\n//创建一个包含应用程序状态的Redux存储。\nlet store = createStore(counter)\n\n//订阅state改变事件  更新UI以响应状态更改。\nstore.subscribe(() =>\n  console.log(store.getState())\n)\n\nstore.dispatch({ type: 'INCREMENT' })\n// 1\nstore.dispatch({ type: 'INCREMENT' })\n// 2\nstore.dispatch({ type: 'DECREMENT' })\n// 1\n```\n这种设计模式采用观察者模式，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。","slug":"Redux","published":1,"updated":"2021-06-25T02:00:18.105Z","layout":"post","photos":[],"link":"","_id":"ckqjatolt001uqkl5oojlhmjf","content":"<p><strong>Redux是一个通用Javscript App模块，用做App State的管理。</strong><br>1、React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。<br>2、一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。<br>然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。<br><a id=\"more\"></a><br>3、子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。<br>这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。<br>4、为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。<br>5、为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：</p>\n<ul>\n<li>a. 需要回调通知state (等同于回调参数) -&gt; action</li>\n<li>b. 需要根据回调处理 (等同于父级方法) -&gt; reducer</li>\n<li>c. 需要state (等同于总状态) -&gt; store</li>\n</ul>\n<p>对Redux来说只有这三个要素：</p>\n<ul>\n<li>a. <strong>action</strong>是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。</li>\n<li>b. <strong>reducer</strong>是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。</li>\n<li>c. <strong>store</strong>负责存储状态并可以被react api回调，发布action.</li>\n</ul>\n<p>下面是redux github中提供的代码样例</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"comment\">// 这是一个reducer函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建一个包含应用程序状态的Redux存储。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//订阅state改变事件  更新UI以响应状态更改。</span></span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种设计模式采用观察者模式，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n","site":{"data":{}},"excerpt":"<p><strong>Redux是一个通用Javscript App模块，用做App State的管理。</strong><br>1、React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。<br>2、一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。<br>然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。<br>","more":"<br>3、子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。<br>这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。<br>4、为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。<br>5、为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：</p>\n<ul>\n<li>a. 需要回调通知state (等同于回调参数) -&gt; action</li>\n<li>b. 需要根据回调处理 (等同于父级方法) -&gt; reducer</li>\n<li>c. 需要state (等同于总状态) -&gt; store</li>\n</ul>\n<p>对Redux来说只有这三个要素：</p>\n<ul>\n<li>a. <strong>action</strong>是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。</li>\n<li>b. <strong>reducer</strong>是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。</li>\n<li>c. <strong>store</strong>负责存储状态并可以被react api回调，发布action.</li>\n</ul>\n<p>下面是redux github中提供的代码样例</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"comment\">// 这是一个reducer函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建一个包含应用程序状态的Redux存储。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//订阅state改变事件  更新UI以响应状态更改。</span></span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种设计模式采用观察者模式，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>"},{"title":"System.setOut","date":"2016-05-10T12:10:33.000Z","comments":1,"_content":"   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。\n   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。\n<!-- more --> \n```java\npublic void init() {\n  PrintStream printStream = new PrintStream(System.out) {\n   public void println(boolean x) {\n    log(Boolean.valueOf(x));\n   }\n\n   public void println(char x) {\n    log(Character.valueOf(x));\n   }\n\n   public void println(char[] x) {\n    log(x == null ? null : new String(x));\n   }\n\n   public void println(double x) {\n    log(Double.valueOf(x));\n   }\n\n   public void println(float x) {\n    log(Float.valueOf(x));\n   }\n\n   public void println(int x) {\n    log(Integer.valueOf(x));\n   }\n\n   public void println(long x) {\n    log(x);\n   }\n\n   public void println(Object x) {\n    log(x);\n   }\n\n   public void println(String x) {\n    log(x);\n   }\n  };\n  System.setOut(printStream);\n  System.setErr(printStream);\n\n }\n\n private void log(Object info) {\n  LogFactoryImpl.getLog(getClass()).info(info);\n }\n```\n\n在web的监听器里面初始下这个就可以了\n\n下面是log4j的配置文件\n\n```\nlog4j.rootLogger=INFO,Stdout,R\nlog4j.appender.Stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.Stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\nlog4j.appender.R=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.R.File=F:/stdout.log\nlog4j.appender.R.datePattern='.'yyyy-MM-dd'.txt'\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n```\n\n","source":"_posts/System.setOut.md","raw":"---\ntitle: System.setOut\ndate: 2016-05-10 20:10:33 \ncomments: true \ncategories: Java\n---\n   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。\n   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。\n<!-- more --> \n```java\npublic void init() {\n  PrintStream printStream = new PrintStream(System.out) {\n   public void println(boolean x) {\n    log(Boolean.valueOf(x));\n   }\n\n   public void println(char x) {\n    log(Character.valueOf(x));\n   }\n\n   public void println(char[] x) {\n    log(x == null ? null : new String(x));\n   }\n\n   public void println(double x) {\n    log(Double.valueOf(x));\n   }\n\n   public void println(float x) {\n    log(Float.valueOf(x));\n   }\n\n   public void println(int x) {\n    log(Integer.valueOf(x));\n   }\n\n   public void println(long x) {\n    log(x);\n   }\n\n   public void println(Object x) {\n    log(x);\n   }\n\n   public void println(String x) {\n    log(x);\n   }\n  };\n  System.setOut(printStream);\n  System.setErr(printStream);\n\n }\n\n private void log(Object info) {\n  LogFactoryImpl.getLog(getClass()).info(info);\n }\n```\n\n在web的监听器里面初始下这个就可以了\n\n下面是log4j的配置文件\n\n```\nlog4j.rootLogger=INFO,Stdout,R\nlog4j.appender.Stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.Stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\nlog4j.appender.R=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.R.File=F:/stdout.log\nlog4j.appender.R.datePattern='.'yyyy-MM-dd'.txt'\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n```\n\n","slug":"System.setOut","published":1,"updated":"2021-06-25T02:00:18.106Z","layout":"post","photos":[],"link":"","_id":"ckqjatolv001wqkl5bx7ijyjj","content":"<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  PrintStream printStream = <span class=\"keyword\">new</span> PrintStream(System.out) &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">boolean</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Boolean.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Character.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    log(x == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> String(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Double.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">float</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Float.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Integer.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">long</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  System.setOut(printStream);</span><br><span class=\"line\">  System.setErr(printStream);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object info)</span> </span>&#123;</span><br><span class=\"line\">  LogFactoryImpl.getLog(getClass()).info(info);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web的监听器里面初始下这个就可以了</p>\n<p>下面是log4j的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=INFO,Stdout,R</span><br><span class=\"line\">log4j.appender.Stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br><span class=\"line\">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.R.File=F:/stdout.log</span><br><span class=\"line\">log4j.appender.R.datePattern=&apos;.&apos;yyyy-MM-dd&apos;.txt&apos;</span><br><span class=\"line\">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.R.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  PrintStream printStream = <span class=\"keyword\">new</span> PrintStream(System.out) &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">boolean</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Boolean.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Character.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    log(x == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> String(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Double.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">float</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Float.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Integer.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">long</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  System.setOut(printStream);</span><br><span class=\"line\">  System.setErr(printStream);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object info)</span> </span>&#123;</span><br><span class=\"line\">  LogFactoryImpl.getLog(getClass()).info(info);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web的监听器里面初始下这个就可以了</p>\n<p>下面是log4j的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=INFO,Stdout,R</span><br><span class=\"line\">log4j.appender.Stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br><span class=\"line\">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.R.File=F:/stdout.log</span><br><span class=\"line\">log4j.appender.R.datePattern=&apos;.&apos;yyyy-MM-dd&apos;.txt&apos;</span><br><span class=\"line\">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.R.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br></pre></td></tr></table></figure>"},{"title":"WEB性能优化手段","date":"2016-12-27T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## 前端\n### 静态资源独立域名\n浏览器请求并发数是针对同一域名下的，一般现代浏览器都是6个[了解更多查看](http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/)，这样的设计目的其实是对服务器的一种保护，通常使用多个独立域名作为提供网站响应速度的一种有效手段。可以大大拓展这个并发连接数，也就是令浏览器并行下载更多资源，提高站点性能。 具体的实施方案是将静态资源 图片、css、js 放到一个子域名服务器下。这样带来的好处不仅是提供了浏览器并发请求数量还能减少http 头的数据大小。很明显的就是能减少cookie的传输。\n<!--more-->\n这个浏览器并发请求受限的还有个原因：实则是多个线程创建了socket 与服务器建立了连接。keep-alive技术的存在使得浏览器复用现有连接和服务器通信比创建新连接的性能要更好一些所以，浏览器的并发数其实并不仅仅只是良知的要求，而是双方都需要保护自己的默契，并在可靠的情况下提供更好的性能。\n\n### 缓存\n缓存也是性能优化的重要手段之一，这个可以包括服务器常用数据缓存，和静态资源在浏览器中的缓存。\n\n### 资源压缩文件合并\n资源压缩技术，文件合并，这样带来的好处就是减少http 请求数和降低网络数据传输包的大小。能有效的提供网站响应数度，\n具体的方法有：\n1、资源合并：多个图片合并在一个图片中\n2、减少请求数：小图片直接使用base64编码\n\n### 资源lazy加载\n对于web网页一屏显示不了可以采用lazy加载技术，当请求网页时加载可视区的内容，当拖动滚动条时在动态的加载网页内容。\n\n### 引用资源摆放位置\n公用的做法就是对于CSS资源放置在HTML文档的头部，JS资源的应用一般都放在了尾部。或者在script 标签上添加defer。对于引入的第三方没依赖的资源在标签上添加async属性\n\n### CDN加速\n将资源放到CDN服务器上\n\n## 后端\n### 线程调优\n线程数量不是越多越好，适当的线程能充分利用CPU带来性能的提升，但过多的线程因为线程上下文的切换开销返回是性能下降，所以多线程数量和性能会有个最优的值通常是CPU核数的2倍\n\n### 缓存\n对于常用的数据加入内存中\n\n\n## 总结\n网站提速的手段方法很多但总结下来无非就是3点：减少请求数量压缩资源大小，充分利用缓存和提高请求并发数。","source":"_posts/WEB性能优化手段.md","raw":"---\ntitle: WEB性能优化手段\ndate: 2016-12-28\ncomments: true\ncategories: WEB\ntoc: true \n---\n\n## 前端\n### 静态资源独立域名\n浏览器请求并发数是针对同一域名下的，一般现代浏览器都是6个[了解更多查看](http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/)，这样的设计目的其实是对服务器的一种保护，通常使用多个独立域名作为提供网站响应速度的一种有效手段。可以大大拓展这个并发连接数，也就是令浏览器并行下载更多资源，提高站点性能。 具体的实施方案是将静态资源 图片、css、js 放到一个子域名服务器下。这样带来的好处不仅是提供了浏览器并发请求数量还能减少http 头的数据大小。很明显的就是能减少cookie的传输。\n<!--more-->\n这个浏览器并发请求受限的还有个原因：实则是多个线程创建了socket 与服务器建立了连接。keep-alive技术的存在使得浏览器复用现有连接和服务器通信比创建新连接的性能要更好一些所以，浏览器的并发数其实并不仅仅只是良知的要求，而是双方都需要保护自己的默契，并在可靠的情况下提供更好的性能。\n\n### 缓存\n缓存也是性能优化的重要手段之一，这个可以包括服务器常用数据缓存，和静态资源在浏览器中的缓存。\n\n### 资源压缩文件合并\n资源压缩技术，文件合并，这样带来的好处就是减少http 请求数和降低网络数据传输包的大小。能有效的提供网站响应数度，\n具体的方法有：\n1、资源合并：多个图片合并在一个图片中\n2、减少请求数：小图片直接使用base64编码\n\n### 资源lazy加载\n对于web网页一屏显示不了可以采用lazy加载技术，当请求网页时加载可视区的内容，当拖动滚动条时在动态的加载网页内容。\n\n### 引用资源摆放位置\n公用的做法就是对于CSS资源放置在HTML文档的头部，JS资源的应用一般都放在了尾部。或者在script 标签上添加defer。对于引入的第三方没依赖的资源在标签上添加async属性\n\n### CDN加速\n将资源放到CDN服务器上\n\n## 后端\n### 线程调优\n线程数量不是越多越好，适当的线程能充分利用CPU带来性能的提升，但过多的线程因为线程上下文的切换开销返回是性能下降，所以多线程数量和性能会有个最优的值通常是CPU核数的2倍\n\n### 缓存\n对于常用的数据加入内存中\n\n\n## 总结\n网站提速的手段方法很多但总结下来无非就是3点：减少请求数量压缩资源大小，充分利用缓存和提高请求并发数。","slug":"WEB性能优化手段","published":1,"updated":"2021-06-25T02:00:18.108Z","layout":"post","photos":[],"link":"","_id":"ckqjatolx001zqkl5peogrtq0","content":"<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h3 id=\"静态资源独立域名\"><a href=\"#静态资源独立域名\" class=\"headerlink\" title=\"静态资源独立域名\"></a>静态资源独立域名</h3><p>浏览器请求并发数是针对同一域名下的，一般现代浏览器都是6个<a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\" target=\"_blank\" rel=\"noopener\">了解更多查看</a>，这样的设计目的其实是对服务器的一种保护，通常使用多个独立域名作为提供网站响应速度的一种有效手段。可以大大拓展这个并发连接数，也就是令浏览器并行下载更多资源，提高站点性能。 具体的实施方案是将静态资源 图片、css、js 放到一个子域名服务器下。这样带来的好处不仅是提供了浏览器并发请求数量还能减少http 头的数据大小。很明显的就是能减少cookie的传输。<br><a id=\"more\"></a><br>这个浏览器并发请求受限的还有个原因：实则是多个线程创建了socket 与服务器建立了连接。keep-alive技术的存在使得浏览器复用现有连接和服务器通信比创建新连接的性能要更好一些所以，浏览器的并发数其实并不仅仅只是良知的要求，而是双方都需要保护自己的默契，并在可靠的情况下提供更好的性能。</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>缓存也是性能优化的重要手段之一，这个可以包括服务器常用数据缓存，和静态资源在浏览器中的缓存。</p>\n<h3 id=\"资源压缩文件合并\"><a href=\"#资源压缩文件合并\" class=\"headerlink\" title=\"资源压缩文件合并\"></a>资源压缩文件合并</h3><p>资源压缩技术，文件合并，这样带来的好处就是减少http 请求数和降低网络数据传输包的大小。能有效的提供网站响应数度，<br>具体的方法有：<br>1、资源合并：多个图片合并在一个图片中<br>2、减少请求数：小图片直接使用base64编码</p>\n<h3 id=\"资源lazy加载\"><a href=\"#资源lazy加载\" class=\"headerlink\" title=\"资源lazy加载\"></a>资源lazy加载</h3><p>对于web网页一屏显示不了可以采用lazy加载技术，当请求网页时加载可视区的内容，当拖动滚动条时在动态的加载网页内容。</p>\n<h3 id=\"引用资源摆放位置\"><a href=\"#引用资源摆放位置\" class=\"headerlink\" title=\"引用资源摆放位置\"></a>引用资源摆放位置</h3><p>公用的做法就是对于CSS资源放置在HTML文档的头部，JS资源的应用一般都放在了尾部。或者在script 标签上添加defer。对于引入的第三方没依赖的资源在标签上添加async属性</p>\n<h3 id=\"CDN加速\"><a href=\"#CDN加速\" class=\"headerlink\" title=\"CDN加速\"></a>CDN加速</h3><p>将资源放到CDN服务器上</p>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><h3 id=\"线程调优\"><a href=\"#线程调优\" class=\"headerlink\" title=\"线程调优\"></a>线程调优</h3><p>线程数量不是越多越好，适当的线程能充分利用CPU带来性能的提升，但过多的线程因为线程上下文的切换开销返回是性能下降，所以多线程数量和性能会有个最优的值通常是CPU核数的2倍</p>\n<h3 id=\"缓存-1\"><a href=\"#缓存-1\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>对于常用的数据加入内存中</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>网站提速的手段方法很多但总结下来无非就是3点：减少请求数量压缩资源大小，充分利用缓存和提高请求并发数。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h3 id=\"静态资源独立域名\"><a href=\"#静态资源独立域名\" class=\"headerlink\" title=\"静态资源独立域名\"></a>静态资源独立域名</h3><p>浏览器请求并发数是针对同一域名下的，一般现代浏览器都是6个<a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\" target=\"_blank\" rel=\"noopener\">了解更多查看</a>，这样的设计目的其实是对服务器的一种保护，通常使用多个独立域名作为提供网站响应速度的一种有效手段。可以大大拓展这个并发连接数，也就是令浏览器并行下载更多资源，提高站点性能。 具体的实施方案是将静态资源 图片、css、js 放到一个子域名服务器下。这样带来的好处不仅是提供了浏览器并发请求数量还能减少http 头的数据大小。很明显的就是能减少cookie的传输。<br>","more":"<br>这个浏览器并发请求受限的还有个原因：实则是多个线程创建了socket 与服务器建立了连接。keep-alive技术的存在使得浏览器复用现有连接和服务器通信比创建新连接的性能要更好一些所以，浏览器的并发数其实并不仅仅只是良知的要求，而是双方都需要保护自己的默契，并在可靠的情况下提供更好的性能。</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>缓存也是性能优化的重要手段之一，这个可以包括服务器常用数据缓存，和静态资源在浏览器中的缓存。</p>\n<h3 id=\"资源压缩文件合并\"><a href=\"#资源压缩文件合并\" class=\"headerlink\" title=\"资源压缩文件合并\"></a>资源压缩文件合并</h3><p>资源压缩技术，文件合并，这样带来的好处就是减少http 请求数和降低网络数据传输包的大小。能有效的提供网站响应数度，<br>具体的方法有：<br>1、资源合并：多个图片合并在一个图片中<br>2、减少请求数：小图片直接使用base64编码</p>\n<h3 id=\"资源lazy加载\"><a href=\"#资源lazy加载\" class=\"headerlink\" title=\"资源lazy加载\"></a>资源lazy加载</h3><p>对于web网页一屏显示不了可以采用lazy加载技术，当请求网页时加载可视区的内容，当拖动滚动条时在动态的加载网页内容。</p>\n<h3 id=\"引用资源摆放位置\"><a href=\"#引用资源摆放位置\" class=\"headerlink\" title=\"引用资源摆放位置\"></a>引用资源摆放位置</h3><p>公用的做法就是对于CSS资源放置在HTML文档的头部，JS资源的应用一般都放在了尾部。或者在script 标签上添加defer。对于引入的第三方没依赖的资源在标签上添加async属性</p>\n<h3 id=\"CDN加速\"><a href=\"#CDN加速\" class=\"headerlink\" title=\"CDN加速\"></a>CDN加速</h3><p>将资源放到CDN服务器上</p>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><h3 id=\"线程调优\"><a href=\"#线程调优\" class=\"headerlink\" title=\"线程调优\"></a>线程调优</h3><p>线程数量不是越多越好，适当的线程能充分利用CPU带来性能的提升，但过多的线程因为线程上下文的切换开销返回是性能下降，所以多线程数量和性能会有个最优的值通常是CPU核数的2倍</p>\n<h3 id=\"缓存-1\"><a href=\"#缓存-1\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>对于常用的数据加入内存中</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>网站提速的手段方法很多但总结下来无非就是3点：减少请求数量压缩资源大小，充分利用缓存和提高请求并发数。</p>"},{"title":"Web应用组件化的权衡","date":"2016-05-16T15:11:33.000Z","comments":1,"toc":true,"_content":"\n## 基本概念\n### 什么是Web应用？\n所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。\n主要包括：\n    交互占比较高的页面体系\n    以各种Hybrid技术构建的应用，其中的Web部分\n<!--more-->\n### 组件化开发的优势是什么？\n组件化的最重要作用就是提升开发和维护的效率。\n最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。\n\n### 在Web应用中，组件化一般指什么？\n在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。\n\n### 在Web应用中，组件化的主要目标是什么？\n很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。\n分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。\n但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。\n所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。\n\n## 组件化应当做到什么程度？\n***一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？***\n对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。\n***组件属于资产还是耗材？模板呢？***\n按照上面的分类，组件明显属于资产，而模板一般属于耗材。\n在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。\n***大部分Web应用中，资产多一些，还是耗材多一些？***\n大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。\n***大部分Web应用都适合“全”组件化吗？***\n这个问题要从几个方面回答：\n\n☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。\n\n☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。\n\n☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。\n\n***组件与模板的对比***\n在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。\n但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板\n在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：\nHTML，CSS，JS，这三者里面，谁是整个Web工程的入口？\n展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。\n在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？\n从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。\n因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。\n\n## 组件化框架\n### 目前有哪些流行的组件化框架？\n我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。\n“MV*”：Angular，Vue等\n“反应式”：React，Reactive等\n标准增强：Polymer\n\n### 几个流派各自特点是什么？\nMV*: 分层，绑定\nReact: 组件化，单向数据流\n\n### React中一般的组件相当于MVVM流派中的什么？\n以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。\n但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。\nDirective可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。\nDirective和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。\n\n### 这些流派有共同的未来吗，会是什么？\n无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？\n这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。\n但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。\n而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。\n所以总的来说，各框架是趋同的。\n\n## 组件化的实践\n***一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？***\n当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。\n\n### 如何规划组件树的层级与组件的粒度？\n如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：\n***把什么视为组件，组件的粒度是怎样的。***\n在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。\n### 如何约定组件之间的通讯方式？\n在一个组件化的应用中，会存在组件之间的数据传递。\n以React为例，如果存在两级嵌套的组件：\n```html\n<TodoList>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n</TodoList>\n```\n这里面可能存在：\n直接对TodoList进行整组数据的赋值\n直接对某个TodoItem赋值\nTodoList对下属的TodoItem赋值\nTodoList和TodoItem自己去某个“全局”数据中读取配置项\n这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。\n那么，我们如何权衡两种数据通讯方式呢？\n一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。\n另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。\n从这里我们得出的结论是：\n并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。\n\n### 数据通讯层\n全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：\n数据同步\n请求的浪费\n另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。\n在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。\nFacebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。\n\n## 其他思考\n### 如何看待“可视化继承”？\n在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：\n```java\nclass CheckList extends List {\n}\n```\n我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？\n在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。\n我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。\n### 模板外置的组件实现方式\n在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。\n我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。\n还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：\n```html\n<ul class=\"list\">\n    <li></li>\n    <li class=\"selected\"></li>\n    <li></li>\n    <li></li>\n</ul>\n```\n然后对外的形式这样：\n```html\n<List data=\"arr\"></List>\n```\n或者这样：\n```html\n<List>\n    <ListItem data=\"aaa\"></ListItem>\n    <ListItem data=\"bbb\" selected></ListItem>\n    <ListItem data=\"ccc\"></ListItem>\n    <ListItem data=\"ddd\"></ListItem>\n</List>\n```\n然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。\n那我们就面临着几个选择：\n```html\n<List type=\"Tile\"></List>\n```\n加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。\n\n接着，我们来了对列表项的自定义需求：\n\n每个列表项带一个checkbox。\n列表可以设置有无表头。\n表头可以设置有无checkbox。\n如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。\ncheckbox需要可以设置显示在列表左侧还是右侧\n列表内容可以自定义文本格式化函数\n列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……\n然后，还要可以自定义样式…… ……\n\n所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：\n怎样让我们的组件既强大，又便于使用？\n面对此类场景，我想给出一个解决方案，那就是：\n把组件实现为一种插件平台\n针对组件的各种形态，将其特征分离出来当成一种插件\n\n\nAngular的模板即可起到轻量组件的作用，代码更精炼\nAngular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据\n\n对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。\n今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。\n\n\n### 模板的意义\n除了上面提到的，模板还有另外的意义。\n\n我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。\n但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。\n所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。\n此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。\n\n### HTML体系做组件化的不利因素\nHTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：\n标签没有命名空间\n有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。\n在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。\n另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：\n```html\n<Panel>\n  <Service/>\n</Panel>\n```\n如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：\n```html\n<Panel>\n  <Button></Button>\n</Panel>\n```\n同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。\n如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。\n如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：\nList下面就只能放ListItem类型的东西。\n\n### 再回头看Web Components\n我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。\n我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。\n比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。\n至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……\n\n在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。\n面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。\n\n## 小结\n看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。\n\n各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/22)","source":"_posts/Web应用组件化的权衡.md","raw":"---\ntitle: Web应用组件化的权衡\ndate: 2016-05-16 23:11:33 \ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n## 基本概念\n### 什么是Web应用？\n所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。\n主要包括：\n    交互占比较高的页面体系\n    以各种Hybrid技术构建的应用，其中的Web部分\n<!--more-->\n### 组件化开发的优势是什么？\n组件化的最重要作用就是提升开发和维护的效率。\n最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。\n\n### 在Web应用中，组件化一般指什么？\n在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。\n\n### 在Web应用中，组件化的主要目标是什么？\n很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。\n分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。\n但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。\n所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。\n\n## 组件化应当做到什么程度？\n***一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？***\n对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。\n***组件属于资产还是耗材？模板呢？***\n按照上面的分类，组件明显属于资产，而模板一般属于耗材。\n在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。\n***大部分Web应用中，资产多一些，还是耗材多一些？***\n大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。\n***大部分Web应用都适合“全”组件化吗？***\n这个问题要从几个方面回答：\n\n☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。\n\n☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。\n\n☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。\n\n***组件与模板的对比***\n在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。\n但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板\n在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：\nHTML，CSS，JS，这三者里面，谁是整个Web工程的入口？\n展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。\n在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？\n从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。\n因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。\n\n## 组件化框架\n### 目前有哪些流行的组件化框架？\n我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。\n“MV*”：Angular，Vue等\n“反应式”：React，Reactive等\n标准增强：Polymer\n\n### 几个流派各自特点是什么？\nMV*: 分层，绑定\nReact: 组件化，单向数据流\n\n### React中一般的组件相当于MVVM流派中的什么？\n以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。\n但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。\nDirective可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。\nDirective和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。\n\n### 这些流派有共同的未来吗，会是什么？\n无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？\n这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。\n但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。\n而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。\n所以总的来说，各框架是趋同的。\n\n## 组件化的实践\n***一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？***\n当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。\n\n### 如何规划组件树的层级与组件的粒度？\n如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：\n***把什么视为组件，组件的粒度是怎样的。***\n在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。\n### 如何约定组件之间的通讯方式？\n在一个组件化的应用中，会存在组件之间的数据传递。\n以React为例，如果存在两级嵌套的组件：\n```html\n<TodoList>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n</TodoList>\n```\n这里面可能存在：\n直接对TodoList进行整组数据的赋值\n直接对某个TodoItem赋值\nTodoList对下属的TodoItem赋值\nTodoList和TodoItem自己去某个“全局”数据中读取配置项\n这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。\n那么，我们如何权衡两种数据通讯方式呢？\n一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。\n另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。\n从这里我们得出的结论是：\n并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。\n\n### 数据通讯层\n全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：\n数据同步\n请求的浪费\n另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。\n在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。\nFacebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。\n\n## 其他思考\n### 如何看待“可视化继承”？\n在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：\n```java\nclass CheckList extends List {\n}\n```\n我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？\n在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。\n我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。\n### 模板外置的组件实现方式\n在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。\n我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。\n还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：\n```html\n<ul class=\"list\">\n    <li></li>\n    <li class=\"selected\"></li>\n    <li></li>\n    <li></li>\n</ul>\n```\n然后对外的形式这样：\n```html\n<List data=\"arr\"></List>\n```\n或者这样：\n```html\n<List>\n    <ListItem data=\"aaa\"></ListItem>\n    <ListItem data=\"bbb\" selected></ListItem>\n    <ListItem data=\"ccc\"></ListItem>\n    <ListItem data=\"ddd\"></ListItem>\n</List>\n```\n然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。\n那我们就面临着几个选择：\n```html\n<List type=\"Tile\"></List>\n```\n加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。\n\n接着，我们来了对列表项的自定义需求：\n\n每个列表项带一个checkbox。\n列表可以设置有无表头。\n表头可以设置有无checkbox。\n如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。\ncheckbox需要可以设置显示在列表左侧还是右侧\n列表内容可以自定义文本格式化函数\n列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……\n然后，还要可以自定义样式…… ……\n\n所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：\n怎样让我们的组件既强大，又便于使用？\n面对此类场景，我想给出一个解决方案，那就是：\n把组件实现为一种插件平台\n针对组件的各种形态，将其特征分离出来当成一种插件\n\n\nAngular的模板即可起到轻量组件的作用，代码更精炼\nAngular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据\n\n对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。\n今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。\n\n\n### 模板的意义\n除了上面提到的，模板还有另外的意义。\n\n我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。\n但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。\n所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。\n此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。\n\n### HTML体系做组件化的不利因素\nHTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：\n标签没有命名空间\n有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。\n在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。\n另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：\n```html\n<Panel>\n  <Service/>\n</Panel>\n```\n如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：\n```html\n<Panel>\n  <Button></Button>\n</Panel>\n```\n同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。\n如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。\n如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：\nList下面就只能放ListItem类型的东西。\n\n### 再回头看Web Components\n我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。\n我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。\n比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。\n至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……\n\n在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。\n面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。\n\n## 小结\n看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。\n\n各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/22)","slug":"Web应用组件化的权衡","published":1,"updated":"2021-06-25T02:00:18.109Z","layout":"post","photos":[],"link":"","_id":"ckqjatoly0021qkl5lw4hsvgq","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"什么是Web应用？\"><a href=\"#什么是Web应用？\" class=\"headerlink\" title=\"什么是Web应用？\"></a>什么是Web应用？</h3><p>所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。<br>主要包括：<br>    交互占比较高的页面体系<br>    以各种Hybrid技术构建的应用，其中的Web部分<br><a id=\"more\"></a></p>\n<h3 id=\"组件化开发的优势是什么？\"><a href=\"#组件化开发的优势是什么？\" class=\"headerlink\" title=\"组件化开发的优势是什么？\"></a>组件化开发的优势是什么？</h3><p>组件化的最重要作用就是提升开发和维护的效率。<br>最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。</p>\n<h3 id=\"在Web应用中，组件化一般指什么？\"><a href=\"#在Web应用中，组件化一般指什么？\" class=\"headerlink\" title=\"在Web应用中，组件化一般指什么？\"></a>在Web应用中，组件化一般指什么？</h3><p>在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。</p>\n<h3 id=\"在Web应用中，组件化的主要目标是什么？\"><a href=\"#在Web应用中，组件化的主要目标是什么？\" class=\"headerlink\" title=\"在Web应用中，组件化的主要目标是什么？\"></a>在Web应用中，组件化的主要目标是什么？</h3><p>很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。<br>分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。<br>但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。<br>所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。</p>\n<h2 id=\"组件化应当做到什么程度？\"><a href=\"#组件化应当做到什么程度？\" class=\"headerlink\" title=\"组件化应当做到什么程度？\"></a>组件化应当做到什么程度？</h2><p><strong><em>一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？</em></strong><br>对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。<br><strong><em>组件属于资产还是耗材？模板呢？</em></strong><br>按照上面的分类，组件明显属于资产，而模板一般属于耗材。<br>在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。<br><strong><em>大部分Web应用中，资产多一些，还是耗材多一些？</em></strong><br>大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。<br><strong><em>大部分Web应用都适合“全”组件化吗？</em></strong><br>这个问题要从几个方面回答：</p>\n<p>☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。</p>\n<p>☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。</p>\n<p>☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。</p>\n<p><strong><em>组件与模板的对比</em></strong><br>在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。<br>但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板<br>在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：<br>HTML，CSS，JS，这三者里面，谁是整个Web工程的入口？<br>展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。<br>在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？<br>从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。<br>因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。</p>\n<h2 id=\"组件化框架\"><a href=\"#组件化框架\" class=\"headerlink\" title=\"组件化框架\"></a>组件化框架</h2><h3 id=\"目前有哪些流行的组件化框架？\"><a href=\"#目前有哪些流行的组件化框架？\" class=\"headerlink\" title=\"目前有哪些流行的组件化框架？\"></a>目前有哪些流行的组件化框架？</h3><p>我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。<br>“MV*”：Angular，Vue等<br>“反应式”：React，Reactive等<br>标准增强：Polymer</p>\n<h3 id=\"几个流派各自特点是什么？\"><a href=\"#几个流派各自特点是什么？\" class=\"headerlink\" title=\"几个流派各自特点是什么？\"></a>几个流派各自特点是什么？</h3><p>MV*: 分层，绑定<br>React: 组件化，单向数据流</p>\n<h3 id=\"React中一般的组件相当于MVVM流派中的什么？\"><a href=\"#React中一般的组件相当于MVVM流派中的什么？\" class=\"headerlink\" title=\"React中一般的组件相当于MVVM流派中的什么？\"></a>React中一般的组件相当于MVVM流派中的什么？</h3><p>以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。<br>但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。<br>Directive可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。<br>Directive和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。</p>\n<h3 id=\"这些流派有共同的未来吗，会是什么？\"><a href=\"#这些流派有共同的未来吗，会是什么？\" class=\"headerlink\" title=\"这些流派有共同的未来吗，会是什么？\"></a>这些流派有共同的未来吗，会是什么？</h3><p>无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？<br>这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。<br>但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。<br>而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。<br>所以总的来说，各框架是趋同的。</p>\n<h2 id=\"组件化的实践\"><a href=\"#组件化的实践\" class=\"headerlink\" title=\"组件化的实践\"></a>组件化的实践</h2><p><strong><em>一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？</em></strong><br>当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。</p>\n<h3 id=\"如何规划组件树的层级与组件的粒度？\"><a href=\"#如何规划组件树的层级与组件的粒度？\" class=\"headerlink\" title=\"如何规划组件树的层级与组件的粒度？\"></a>如何规划组件树的层级与组件的粒度？</h3><p>如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：<br><strong><em>把什么视为组件，组件的粒度是怎样的。</em></strong><br>在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。</p>\n<h3 id=\"如何约定组件之间的通讯方式？\"><a href=\"#如何约定组件之间的通讯方式？\" class=\"headerlink\" title=\"如何约定组件之间的通讯方式？\"></a>如何约定组件之间的通讯方式？</h3><p>在一个组件化的应用中，会存在组件之间的数据传递。<br>以React为例，如果存在两级嵌套的组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TodoList</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里面可能存在：<br>直接对TodoList进行整组数据的赋值<br>直接对某个TodoItem赋值<br>TodoList对下属的TodoItem赋值<br>TodoList和TodoItem自己去某个“全局”数据中读取配置项<br>这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。<br>那么，我们如何权衡两种数据通讯方式呢？<br>一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。<br>另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。<br>从这里我们得出的结论是：<br>并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。</p>\n<h3 id=\"数据通讯层\"><a href=\"#数据通讯层\" class=\"headerlink\" title=\"数据通讯层\"></a>数据通讯层</h3><p>全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：<br>数据同步<br>请求的浪费<br>另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。<br>在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。<br>Facebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。</p>\n<h2 id=\"其他思考\"><a href=\"#其他思考\" class=\"headerlink\" title=\"其他思考\"></a>其他思考</h2><h3 id=\"如何看待“可视化继承”？\"><a href=\"#如何看待“可视化继承”？\" class=\"headerlink\" title=\"如何看待“可视化继承”？\"></a>如何看待“可视化继承”？</h3><p>在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckList</span> <span class=\"keyword\">extends</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？<br>在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。<br>我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。</p>\n<h3 id=\"模板外置的组件实现方式\"><a href=\"#模板外置的组件实现方式\" class=\"headerlink\" title=\"模板外置的组件实现方式\"></a>模板外置的组件实现方式</h3><p>在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。<br>我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。<br>还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后对外的形式这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">data</span>=<span class=\"string\">\"arr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"aaa\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"bbb\"</span> <span class=\"attr\">selected</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ccc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ddd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。<br>那我们就面临着几个选择：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Tile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。</p>\n<p>接着，我们来了对列表项的自定义需求：</p>\n<p>每个列表项带一个checkbox。<br>列表可以设置有无表头。<br>表头可以设置有无checkbox。<br>如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。<br>checkbox需要可以设置显示在列表左侧还是右侧<br>列表内容可以自定义文本格式化函数<br>列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……<br>然后，还要可以自定义样式…… ……</p>\n<p>所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：<br>怎样让我们的组件既强大，又便于使用？<br>面对此类场景，我想给出一个解决方案，那就是：<br>把组件实现为一种插件平台<br>针对组件的各种形态，将其特征分离出来当成一种插件</p>\n<p>Angular的模板即可起到轻量组件的作用，代码更精炼<br>Angular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据</p>\n<p>对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。<br>今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。</p>\n<h3 id=\"模板的意义\"><a href=\"#模板的意义\" class=\"headerlink\" title=\"模板的意义\"></a>模板的意义</h3><p>除了上面提到的，模板还有另外的意义。</p>\n<p>我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。<br>但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。<br>所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。<br>此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。</p>\n<h3 id=\"HTML体系做组件化的不利因素\"><a href=\"#HTML体系做组件化的不利因素\" class=\"headerlink\" title=\"HTML体系做组件化的不利因素\"></a>HTML体系做组件化的不利因素</h3><p>HTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：<br>标签没有命名空间<br>有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。<br>在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。<br>另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。<br>如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。<br>如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：<br>List下面就只能放ListItem类型的东西。</p>\n<h3 id=\"再回头看Web-Components\"><a href=\"#再回头看Web-Components\" class=\"headerlink\" title=\"再回头看Web Components\"></a>再回头看Web Components</h3><p>我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。<br>我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。<br>比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。<br>至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……</p>\n<p>在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。<br>面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。</p>\n<p>各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/22\" target=\"_blank\" rel=\"noopener\">来自前端大牛徐飞博客</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"什么是Web应用？\"><a href=\"#什么是Web应用？\" class=\"headerlink\" title=\"什么是Web应用？\"></a>什么是Web应用？</h3><p>所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。<br>主要包括：<br>    交互占比较高的页面体系<br>    以各种Hybrid技术构建的应用，其中的Web部分<br>","more":"</p>\n<h3 id=\"组件化开发的优势是什么？\"><a href=\"#组件化开发的优势是什么？\" class=\"headerlink\" title=\"组件化开发的优势是什么？\"></a>组件化开发的优势是什么？</h3><p>组件化的最重要作用就是提升开发和维护的效率。<br>最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。</p>\n<h3 id=\"在Web应用中，组件化一般指什么？\"><a href=\"#在Web应用中，组件化一般指什么？\" class=\"headerlink\" title=\"在Web应用中，组件化一般指什么？\"></a>在Web应用中，组件化一般指什么？</h3><p>在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。</p>\n<h3 id=\"在Web应用中，组件化的主要目标是什么？\"><a href=\"#在Web应用中，组件化的主要目标是什么？\" class=\"headerlink\" title=\"在Web应用中，组件化的主要目标是什么？\"></a>在Web应用中，组件化的主要目标是什么？</h3><p>很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。<br>分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。<br>但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。<br>所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。</p>\n<h2 id=\"组件化应当做到什么程度？\"><a href=\"#组件化应当做到什么程度？\" class=\"headerlink\" title=\"组件化应当做到什么程度？\"></a>组件化应当做到什么程度？</h2><p><strong><em>一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？</em></strong><br>对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。<br><strong><em>组件属于资产还是耗材？模板呢？</em></strong><br>按照上面的分类，组件明显属于资产，而模板一般属于耗材。<br>在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。<br><strong><em>大部分Web应用中，资产多一些，还是耗材多一些？</em></strong><br>大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。<br><strong><em>大部分Web应用都适合“全”组件化吗？</em></strong><br>这个问题要从几个方面回答：</p>\n<p>☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。</p>\n<p>☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。</p>\n<p>☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。</p>\n<p><strong><em>组件与模板的对比</em></strong><br>在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。<br>但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板<br>在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：<br>HTML，CSS，JS，这三者里面，谁是整个Web工程的入口？<br>展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。<br>在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？<br>从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。<br>因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。</p>\n<h2 id=\"组件化框架\"><a href=\"#组件化框架\" class=\"headerlink\" title=\"组件化框架\"></a>组件化框架</h2><h3 id=\"目前有哪些流行的组件化框架？\"><a href=\"#目前有哪些流行的组件化框架？\" class=\"headerlink\" title=\"目前有哪些流行的组件化框架？\"></a>目前有哪些流行的组件化框架？</h3><p>我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。<br>“MV*”：Angular，Vue等<br>“反应式”：React，Reactive等<br>标准增强：Polymer</p>\n<h3 id=\"几个流派各自特点是什么？\"><a href=\"#几个流派各自特点是什么？\" class=\"headerlink\" title=\"几个流派各自特点是什么？\"></a>几个流派各自特点是什么？</h3><p>MV*: 分层，绑定<br>React: 组件化，单向数据流</p>\n<h3 id=\"React中一般的组件相当于MVVM流派中的什么？\"><a href=\"#React中一般的组件相当于MVVM流派中的什么？\" class=\"headerlink\" title=\"React中一般的组件相当于MVVM流派中的什么？\"></a>React中一般的组件相当于MVVM流派中的什么？</h3><p>以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。<br>但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。<br>Directive可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。<br>Directive和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。</p>\n<h3 id=\"这些流派有共同的未来吗，会是什么？\"><a href=\"#这些流派有共同的未来吗，会是什么？\" class=\"headerlink\" title=\"这些流派有共同的未来吗，会是什么？\"></a>这些流派有共同的未来吗，会是什么？</h3><p>无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？<br>这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。<br>但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。<br>而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。<br>所以总的来说，各框架是趋同的。</p>\n<h2 id=\"组件化的实践\"><a href=\"#组件化的实践\" class=\"headerlink\" title=\"组件化的实践\"></a>组件化的实践</h2><p><strong><em>一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？</em></strong><br>当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。</p>\n<h3 id=\"如何规划组件树的层级与组件的粒度？\"><a href=\"#如何规划组件树的层级与组件的粒度？\" class=\"headerlink\" title=\"如何规划组件树的层级与组件的粒度？\"></a>如何规划组件树的层级与组件的粒度？</h3><p>如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：<br><strong><em>把什么视为组件，组件的粒度是怎样的。</em></strong><br>在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。</p>\n<h3 id=\"如何约定组件之间的通讯方式？\"><a href=\"#如何约定组件之间的通讯方式？\" class=\"headerlink\" title=\"如何约定组件之间的通讯方式？\"></a>如何约定组件之间的通讯方式？</h3><p>在一个组件化的应用中，会存在组件之间的数据传递。<br>以React为例，如果存在两级嵌套的组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TodoList</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里面可能存在：<br>直接对TodoList进行整组数据的赋值<br>直接对某个TodoItem赋值<br>TodoList对下属的TodoItem赋值<br>TodoList和TodoItem自己去某个“全局”数据中读取配置项<br>这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。<br>那么，我们如何权衡两种数据通讯方式呢？<br>一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。<br>另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。<br>从这里我们得出的结论是：<br>并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。</p>\n<h3 id=\"数据通讯层\"><a href=\"#数据通讯层\" class=\"headerlink\" title=\"数据通讯层\"></a>数据通讯层</h3><p>全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：<br>数据同步<br>请求的浪费<br>另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。<br>在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。<br>Facebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。</p>\n<h2 id=\"其他思考\"><a href=\"#其他思考\" class=\"headerlink\" title=\"其他思考\"></a>其他思考</h2><h3 id=\"如何看待“可视化继承”？\"><a href=\"#如何看待“可视化继承”？\" class=\"headerlink\" title=\"如何看待“可视化继承”？\"></a>如何看待“可视化继承”？</h3><p>在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckList</span> <span class=\"keyword\">extends</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？<br>在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。<br>我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。</p>\n<h3 id=\"模板外置的组件实现方式\"><a href=\"#模板外置的组件实现方式\" class=\"headerlink\" title=\"模板外置的组件实现方式\"></a>模板外置的组件实现方式</h3><p>在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。<br>我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。<br>还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后对外的形式这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">data</span>=<span class=\"string\">\"arr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"aaa\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"bbb\"</span> <span class=\"attr\">selected</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ccc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ddd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。<br>那我们就面临着几个选择：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Tile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。</p>\n<p>接着，我们来了对列表项的自定义需求：</p>\n<p>每个列表项带一个checkbox。<br>列表可以设置有无表头。<br>表头可以设置有无checkbox。<br>如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。<br>checkbox需要可以设置显示在列表左侧还是右侧<br>列表内容可以自定义文本格式化函数<br>列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……<br>然后，还要可以自定义样式…… ……</p>\n<p>所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：<br>怎样让我们的组件既强大，又便于使用？<br>面对此类场景，我想给出一个解决方案，那就是：<br>把组件实现为一种插件平台<br>针对组件的各种形态，将其特征分离出来当成一种插件</p>\n<p>Angular的模板即可起到轻量组件的作用，代码更精炼<br>Angular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据</p>\n<p>对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。<br>今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。</p>\n<h3 id=\"模板的意义\"><a href=\"#模板的意义\" class=\"headerlink\" title=\"模板的意义\"></a>模板的意义</h3><p>除了上面提到的，模板还有另外的意义。</p>\n<p>我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。<br>但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。<br>所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。<br>此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。</p>\n<h3 id=\"HTML体系做组件化的不利因素\"><a href=\"#HTML体系做组件化的不利因素\" class=\"headerlink\" title=\"HTML体系做组件化的不利因素\"></a>HTML体系做组件化的不利因素</h3><p>HTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：<br>标签没有命名空间<br>有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。<br>在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。<br>另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。<br>如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。<br>如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：<br>List下面就只能放ListItem类型的东西。</p>\n<h3 id=\"再回头看Web-Components\"><a href=\"#再回头看Web-Components\" class=\"headerlink\" title=\"再回头看Web Components\"></a>再回头看Web Components</h3><p>我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。<br>我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。<br>比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。<br>至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……</p>\n<p>在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。<br>面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。</p>\n<p>各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/22\" target=\"_blank\" rel=\"noopener\">来自前端大牛徐飞博客</a></p>"},{"title":"Epoll","date":"2016-08-09T16:00:00.000Z","comments":1,"toc":false,"_content":"\n\n首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。\n不管是文件，还是套接字，还是管道，我们都可以把他们看作流。\n之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？\n<!--more-->\n阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。\n\n非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”\n很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。\n大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。\n\n为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。\n\n假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。\n假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。\n但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。\n\n假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”\n也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。\n\n这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。\n然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。\n于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：\n``` java\nwhile true {\n    for i in stream[]; {\n        if i has data\n            read until unavailable\n    }\n}\n```\n我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。\n为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:\n```java\nwhile true {\n    select(streams[])\n    for i in streams[] {\n        if i has data\n            read until unavailable\n    }\n}\n```\n于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。\n但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次\n说了这么多，终于能好好解释epoll了\nepoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）\n在讨论epoll的实现细节之前，先把epoll的相关操作列出：\n\nepoll_create(int size) \n创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽\n\nepoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\nepoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：\nEPOLL_CTL_ADD：注册新的fd到epfd中；\nEPOLL_CTL_MOD：修改已经注册的fd的监听事件；\nEPOLL_CTL_DEL：从epfd中删除一个fd；\n第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事\n比如\nepoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入\nepoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入\n\nevents可以是以下几个宏的集合：\nEPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件描述符可以写；\nEPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件描述符发生错误；\nEPOLLHUP：表示对应的文件描述符被挂断；\nEPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里\n\nepoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。\n一个epoll模式的代码大概的样子是：\n```java\nwhile true {\n    active_stream[] = epoll_wait(epollfd)\n    for i in active_stream[] {\n        read or write till\n    }\n}\n```\n***完整实例代码***\n```java\n#include <iostream>\n#include <sys/socket.h>\n#include <sys/epoll.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <errno.h>\n\nusing namespace std;\n\n#define MAXLINE 5\n#define OPEN_MAX 100\n#define LISTENQ 20\n#define SERV_PORT 5000\n#define INFTIM 1000\n\nvoid setnonblocking(int sock){\n    int opts;\n    opts=fcntl(sock,F_GETFL);\n    if(opts<0){\n        perror(\"fcntl(sock,GETFL)\");\n        exit(1);\n    }\n    opts = opts|O_NONBLOCK;\n    if(fcntl(sock,F_SETFL,opts)<0){\n        perror(\"fcntl(sock,SETFL,opts)\");\n        exit(1);\n    }\n}\n\nint main(int argc, char* argv[]){\n    int i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;\n    ssize_t n;\n    char line[MAXLINE];\n    socklen_t clilen;\n\n\n    if ( 2 == argc ){\n        if( (portnumber = atoi(argv[1])) < 0 ){\n            fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n            return 1;\n        }\n    }else{\n        fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n        return 1;\n    }\n\n    //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件\n\n    struct epoll_event ev,events[20];\n    //生成用于处理accept的epoll专用的文件描述符\n\n    epfd=epoll_create(256);\n    struct sockaddr_in clientaddr;\n    struct sockaddr_in serveraddr;\n    listenfd = socket(AF_INET, SOCK_STREAM, 0);\n    //把socket设置为非阻塞方式\n\n    //setnonblocking(listenfd);\n\n    //设置与要处理的事件相关的文件描述符\n\n    ev.data.fd=listenfd;\n    //设置要处理的事件类型\n\n    ev.events=EPOLLIN|EPOLLET;\n    //ev.events=EPOLLIN;\n\n    //注册epoll事件\n    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&ev);\n    bzero(&serveraddr, sizeof(serveraddr));\n    serveraddr.sin_family = AF_INET;\n    char *local_addr=\"127.0.0.1\";\n    inet_aton(local_addr,&(serveraddr.sin_addr));//htons(portnumber);\n\n    serveraddr.sin_port=htons(portnumber);\n    bind(listenfd,(sockaddr *)&serveraddr, sizeof(serveraddr));\n    listen(listenfd, LISTENQ);\n    maxi = 0;\n    for ( ; ; ) {\n        //等待epoll事件的发生\n\n        nfds=epoll_wait(epfd,events,20,500);\n        //处理所发生的所有事件\n\n        for(i=0;i<nfds;++i){\n            if(events[i].data.fd==listenfd){//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。\n                connfd = accept(listenfd,(sockaddr *)&clientaddr, &clilen);\n                if(connfd<0){\n                    perror(\"connfd<0\");\n                    exit(1);\n                }\n                //setnonblocking(connfd);\n\n                char *str = inet_ntoa(clientaddr.sin_addr);\n                cout << \"accapt a connection from \" << str << endl;\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=connfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //ev.events=EPOLLIN;\n\n                //注册ev\n\n                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&ev);\n            }else if(events[i].events&EPOLLIN){//如果是已经连接的用户，并且收到数据，那么进行读入。\n            \n                cout << \"EPOLLIN\" << endl;\n                if ( (sockfd = events[i].data.fd) < 0)\n                    continue;\n                if ( (n = read(sockfd, line, MAXLINE)) < 0) {\n                    if (errno == ECONNRESET) {\n                        close(sockfd);\n                        events[i].data.fd = -1;\n                    } else\n                        std::cout<<\"readline error\"<<std::endl;\n                } else if (n == 0) {\n                    close(sockfd);\n                    events[i].data.fd = -1;\n                }\n                line[n] = '/0';\n                cout << \"read \" << line << endl;\n                //设置用于写操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的写操作事件\n\n                ev.events=EPOLLOUT|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLLOUT\n\n                //epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n\n            } else if(events[i].events&EPOLLOUT) {// 如果有数据发送\n                sockfd = events[i].data.fd;\n                write(sockfd, line, n);\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLIN\n\n                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n            }\n        }\n    }\n    return 0;\n}\n```","source":"_posts/epoll.md","raw":"---\ntitle: Epoll\ndate: 2016-08-10\ncomments: true\ncategories: Linux\ntoc: false\n---\n\n\n首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。\n不管是文件，还是套接字，还是管道，我们都可以把他们看作流。\n之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？\n<!--more-->\n阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。\n\n非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”\n很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。\n大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。\n\n为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。\n\n假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。\n假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。\n但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。\n\n假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”\n也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。\n\n这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。\n然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。\n于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：\n``` java\nwhile true {\n    for i in stream[]; {\n        if i has data\n            read until unavailable\n    }\n}\n```\n我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。\n为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:\n```java\nwhile true {\n    select(streams[])\n    for i in streams[] {\n        if i has data\n            read until unavailable\n    }\n}\n```\n于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。\n但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次\n说了这么多，终于能好好解释epoll了\nepoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）\n在讨论epoll的实现细节之前，先把epoll的相关操作列出：\n\nepoll_create(int size) \n创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽\n\nepoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\nepoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：\nEPOLL_CTL_ADD：注册新的fd到epfd中；\nEPOLL_CTL_MOD：修改已经注册的fd的监听事件；\nEPOLL_CTL_DEL：从epfd中删除一个fd；\n第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事\n比如\nepoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入\nepoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入\n\nevents可以是以下几个宏的集合：\nEPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件描述符可以写；\nEPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件描述符发生错误；\nEPOLLHUP：表示对应的文件描述符被挂断；\nEPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里\n\nepoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。\n一个epoll模式的代码大概的样子是：\n```java\nwhile true {\n    active_stream[] = epoll_wait(epollfd)\n    for i in active_stream[] {\n        read or write till\n    }\n}\n```\n***完整实例代码***\n```java\n#include <iostream>\n#include <sys/socket.h>\n#include <sys/epoll.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <errno.h>\n\nusing namespace std;\n\n#define MAXLINE 5\n#define OPEN_MAX 100\n#define LISTENQ 20\n#define SERV_PORT 5000\n#define INFTIM 1000\n\nvoid setnonblocking(int sock){\n    int opts;\n    opts=fcntl(sock,F_GETFL);\n    if(opts<0){\n        perror(\"fcntl(sock,GETFL)\");\n        exit(1);\n    }\n    opts = opts|O_NONBLOCK;\n    if(fcntl(sock,F_SETFL,opts)<0){\n        perror(\"fcntl(sock,SETFL,opts)\");\n        exit(1);\n    }\n}\n\nint main(int argc, char* argv[]){\n    int i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;\n    ssize_t n;\n    char line[MAXLINE];\n    socklen_t clilen;\n\n\n    if ( 2 == argc ){\n        if( (portnumber = atoi(argv[1])) < 0 ){\n            fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n            return 1;\n        }\n    }else{\n        fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n        return 1;\n    }\n\n    //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件\n\n    struct epoll_event ev,events[20];\n    //生成用于处理accept的epoll专用的文件描述符\n\n    epfd=epoll_create(256);\n    struct sockaddr_in clientaddr;\n    struct sockaddr_in serveraddr;\n    listenfd = socket(AF_INET, SOCK_STREAM, 0);\n    //把socket设置为非阻塞方式\n\n    //setnonblocking(listenfd);\n\n    //设置与要处理的事件相关的文件描述符\n\n    ev.data.fd=listenfd;\n    //设置要处理的事件类型\n\n    ev.events=EPOLLIN|EPOLLET;\n    //ev.events=EPOLLIN;\n\n    //注册epoll事件\n    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&ev);\n    bzero(&serveraddr, sizeof(serveraddr));\n    serveraddr.sin_family = AF_INET;\n    char *local_addr=\"127.0.0.1\";\n    inet_aton(local_addr,&(serveraddr.sin_addr));//htons(portnumber);\n\n    serveraddr.sin_port=htons(portnumber);\n    bind(listenfd,(sockaddr *)&serveraddr, sizeof(serveraddr));\n    listen(listenfd, LISTENQ);\n    maxi = 0;\n    for ( ; ; ) {\n        //等待epoll事件的发生\n\n        nfds=epoll_wait(epfd,events,20,500);\n        //处理所发生的所有事件\n\n        for(i=0;i<nfds;++i){\n            if(events[i].data.fd==listenfd){//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。\n                connfd = accept(listenfd,(sockaddr *)&clientaddr, &clilen);\n                if(connfd<0){\n                    perror(\"connfd<0\");\n                    exit(1);\n                }\n                //setnonblocking(connfd);\n\n                char *str = inet_ntoa(clientaddr.sin_addr);\n                cout << \"accapt a connection from \" << str << endl;\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=connfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //ev.events=EPOLLIN;\n\n                //注册ev\n\n                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&ev);\n            }else if(events[i].events&EPOLLIN){//如果是已经连接的用户，并且收到数据，那么进行读入。\n            \n                cout << \"EPOLLIN\" << endl;\n                if ( (sockfd = events[i].data.fd) < 0)\n                    continue;\n                if ( (n = read(sockfd, line, MAXLINE)) < 0) {\n                    if (errno == ECONNRESET) {\n                        close(sockfd);\n                        events[i].data.fd = -1;\n                    } else\n                        std::cout<<\"readline error\"<<std::endl;\n                } else if (n == 0) {\n                    close(sockfd);\n                    events[i].data.fd = -1;\n                }\n                line[n] = '/0';\n                cout << \"read \" << line << endl;\n                //设置用于写操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的写操作事件\n\n                ev.events=EPOLLOUT|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLLOUT\n\n                //epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n\n            } else if(events[i].events&EPOLLOUT) {// 如果有数据发送\n                sockfd = events[i].data.fd;\n                write(sockfd, line, n);\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLIN\n\n                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n            }\n        }\n    }\n    return 0;\n}\n```","slug":"epoll","published":1,"updated":"2022-04-13T00:35:17.312Z","_id":"ckqjatom00024qkl5jhwfh272","layout":"post","photos":[],"link":"","content":"<p>首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。<br>不管是文件，还是套接字，还是管道，我们都可以把他们看作流。<br>之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？<br><a id=\"more\"></a><br>阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。</p>\n<p>非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”<br>很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。<br>大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。</p>\n<p>为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。</p>\n<p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。<br>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。<br>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。</p>\n<p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”<br>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。</p>\n<p>这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。<br>然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。<br>于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in stream[]; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。<br>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    select(streams[])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in streams[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。<br>但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次<br>说了这么多，终于能好好解释epoll了<br>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）<br>在讨论epoll的实现细节之前，先把epoll的相关操作列出：</p>\n<p>epoll_create(int size)<br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽</p>\n<p>epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)<br>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：<br>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事<br>比如<br>epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入<br>epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入</p>\n<p>events可以是以下几个宏的集合：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</p>\n<p>epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。<br>一个epoll模式的代码大概的样子是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    active_stream[] = epoll_wait(epollfd)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in active_stream[] &#123;</span><br><span class=\"line\">        read or write till</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>完整实例代码</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;sys/epoll.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">#define MAXLINE 5</span><br><span class=\"line\">#define OPEN_MAX 100</span><br><span class=\"line\">#define LISTENQ 20</span><br><span class=\"line\">#define SERV_PORT 5000</span><br><span class=\"line\">#define INFTIM 1000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setnonblocking</span><span class=\"params\">(<span class=\"keyword\">int</span> sock)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opts;</span><br><span class=\"line\">    opts=fcntl(sock,F_GETFL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opts&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"fcntl(sock,GETFL)\"</span>);</span><br><span class=\"line\">        exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opts = opts|O_NONBLOCK;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fcntl(sock,F_SETFL,opts)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"fcntl(sock,SETFL,opts)\"</span>);</span><br><span class=\"line\">        exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;</span><br><span class=\"line\">    ssize_t n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> line[MAXLINE];</span><br><span class=\"line\">    socklen_t clilen;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"number\">2</span> == argc )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( (portnumber = atoi(argv[<span class=\"number\">1</span>])) &lt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"Usage:%s portnumber/a/n\"</span>,argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        fprintf(stderr,<span class=\"string\">\"Usage:%s portnumber/a/n\"</span>,argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    struct epoll_event ev,events[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"comment\">//生成用于处理accept的epoll专用的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">    epfd=epoll_create(<span class=\"number\">256</span>);</span><br><span class=\"line\">    struct sockaddr_in clientaddr;</span><br><span class=\"line\">    struct sockaddr_in serveraddr;</span><br><span class=\"line\">    listenfd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//把socket设置为非阻塞方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setnonblocking(listenfd);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置与要处理的事件相关的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ev.data.fd=listenfd;</span><br><span class=\"line\">    <span class=\"comment\">//设置要处理的事件类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">    <span class=\"comment\">//ev.events=EPOLLIN;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注册epoll事件</span></span><br><span class=\"line\">    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&amp;ev);</span><br><span class=\"line\">    bzero(&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    serveraddr.sin_family = AF_INET;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *local_addr=<span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\">    inet_aton(local_addr,&amp;(serveraddr.sin_addr));<span class=\"comment\">//htons(portnumber);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    serveraddr.sin_port=htons(portnumber);</span><br><span class=\"line\">    bind(listenfd,(sockaddr *)&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    listen(listenfd, LISTENQ);</span><br><span class=\"line\">    maxi = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; ; ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//等待epoll事件的发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">        nfds=epoll_wait(epfd,events,<span class=\"number\">20</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"comment\">//处理所发生的所有事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nfds;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(events[i].data.fd==listenfd)&#123;<span class=\"comment\">//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。</span></span><br><span class=\"line\">                connfd = accept(listenfd,(sockaddr *)&amp;clientaddr, &amp;clilen);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(connfd&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    perror(<span class=\"string\">\"connfd&lt;0\"</span>);</span><br><span class=\"line\">                    exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//setnonblocking(connfd);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">char</span> *str = inet_ntoa(clientaddr.sin_addr);</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">\"accapt a connection from \"</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于读操作的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=connfd;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于注测的读操作事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                <span class=\"comment\">//ev.events=EPOLLIN;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//注册ev</span></span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&amp;ev);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(events[i].events&amp;EPOLLIN)&#123;<span class=\"comment\">//如果是已经连接的用户，并且收到数据，那么进行读入。</span></span><br><span class=\"line\">            </span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">\"EPOLLIN\"</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( (sockfd = events[i].data.fd) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( (n = read(sockfd, line, MAXLINE)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (errno == ECONNRESET) &#123;</span><br><span class=\"line\">                        close(sockfd);</span><br><span class=\"line\">                        events[i].data.fd = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                        std::cout&lt;&lt;<span class=\"string\">\"readline error\"</span>&lt;&lt;std::endl;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    close(sockfd);</span><br><span class=\"line\">                    events[i].data.fd = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                line[n] = <span class=\"string\">'/0'</span>;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">\"read \"</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于写操作的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于注测的写操作事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLOUT|EPOLLET;</span><br><span class=\"line\">                <span class=\"comment\">//修改sockfd上要处理的事件为EPOLLOUT</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(events[i].events&amp;EPOLLOUT) &#123;<span class=\"comment\">// 如果有数据发送</span></span><br><span class=\"line\">                sockfd = events[i].data.fd;</span><br><span class=\"line\">                write(sockfd, line, n);</span><br><span class=\"line\">                <span class=\"comment\">//设置用于读操作的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于注测的读操作事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                <span class=\"comment\">//修改sockfd上要处理的事件为EPOLIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。<br>不管是文件，还是套接字，还是管道，我们都可以把他们看作流。<br>之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？<br>","more":"<br>阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。</p>\n<p>非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”<br>很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。<br>大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。</p>\n<p>为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。</p>\n<p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。<br>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。<br>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。</p>\n<p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”<br>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。</p>\n<p>这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。<br>然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。<br>于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in stream[]; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。<br>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    select(streams[])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in streams[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。<br>但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次<br>说了这么多，终于能好好解释epoll了<br>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）<br>在讨论epoll的实现细节之前，先把epoll的相关操作列出：</p>\n<p>epoll_create(int size)<br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽</p>\n<p>epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)<br>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：<br>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事<br>比如<br>epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入<br>epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入</p>\n<p>events可以是以下几个宏的集合：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</p>\n<p>epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。<br>一个epoll模式的代码大概的样子是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    active_stream[] = epoll_wait(epollfd)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in active_stream[] &#123;</span><br><span class=\"line\">        read or write till</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>完整实例代码</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;sys/epoll.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">#define MAXLINE 5</span><br><span class=\"line\">#define OPEN_MAX 100</span><br><span class=\"line\">#define LISTENQ 20</span><br><span class=\"line\">#define SERV_PORT 5000</span><br><span class=\"line\">#define INFTIM 1000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setnonblocking</span><span class=\"params\">(<span class=\"keyword\">int</span> sock)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opts;</span><br><span class=\"line\">    opts=fcntl(sock,F_GETFL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(opts&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"fcntl(sock,GETFL)\"</span>);</span><br><span class=\"line\">        exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opts = opts|O_NONBLOCK;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fcntl(sock,F_SETFL,opts)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"fcntl(sock,SETFL,opts)\"</span>);</span><br><span class=\"line\">        exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;</span><br><span class=\"line\">    ssize_t n;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> line[MAXLINE];</span><br><span class=\"line\">    socklen_t clilen;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"number\">2</span> == argc )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( (portnumber = atoi(argv[<span class=\"number\">1</span>])) &lt; <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            fprintf(stderr,<span class=\"string\">\"Usage:%s portnumber/a/n\"</span>,argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        fprintf(stderr,<span class=\"string\">\"Usage:%s portnumber/a/n\"</span>,argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    struct epoll_event ev,events[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"comment\">//生成用于处理accept的epoll专用的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">    epfd=epoll_create(<span class=\"number\">256</span>);</span><br><span class=\"line\">    struct sockaddr_in clientaddr;</span><br><span class=\"line\">    struct sockaddr_in serveraddr;</span><br><span class=\"line\">    listenfd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//把socket设置为非阻塞方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//setnonblocking(listenfd);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置与要处理的事件相关的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ev.data.fd=listenfd;</span><br><span class=\"line\">    <span class=\"comment\">//设置要处理的事件类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">    <span class=\"comment\">//ev.events=EPOLLIN;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注册epoll事件</span></span><br><span class=\"line\">    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&amp;ev);</span><br><span class=\"line\">    bzero(&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    serveraddr.sin_family = AF_INET;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *local_addr=<span class=\"string\">\"127.0.0.1\"</span>;</span><br><span class=\"line\">    inet_aton(local_addr,&amp;(serveraddr.sin_addr));<span class=\"comment\">//htons(portnumber);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    serveraddr.sin_port=htons(portnumber);</span><br><span class=\"line\">    bind(listenfd,(sockaddr *)&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    listen(listenfd, LISTENQ);</span><br><span class=\"line\">    maxi = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; ; ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//等待epoll事件的发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">        nfds=epoll_wait(epfd,events,<span class=\"number\">20</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"comment\">//处理所发生的所有事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nfds;++i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(events[i].data.fd==listenfd)&#123;<span class=\"comment\">//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。</span></span><br><span class=\"line\">                connfd = accept(listenfd,(sockaddr *)&amp;clientaddr, &amp;clilen);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(connfd&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    perror(<span class=\"string\">\"connfd&lt;0\"</span>);</span><br><span class=\"line\">                    exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//setnonblocking(connfd);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">char</span> *str = inet_ntoa(clientaddr.sin_addr);</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">\"accapt a connection from \"</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于读操作的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=connfd;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于注测的读操作事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                <span class=\"comment\">//ev.events=EPOLLIN;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//注册ev</span></span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&amp;ev);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(events[i].events&amp;EPOLLIN)&#123;<span class=\"comment\">//如果是已经连接的用户，并且收到数据，那么进行读入。</span></span><br><span class=\"line\">            </span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">\"EPOLLIN\"</span> &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( (sockfd = events[i].data.fd) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( (n = read(sockfd, line, MAXLINE)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (errno == ECONNRESET) &#123;</span><br><span class=\"line\">                        close(sockfd);</span><br><span class=\"line\">                        events[i].data.fd = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                        std::cout&lt;&lt;<span class=\"string\">\"readline error\"</span>&lt;&lt;std::endl;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    close(sockfd);</span><br><span class=\"line\">                    events[i].data.fd = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                line[n] = <span class=\"string\">'/0'</span>;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">\"read \"</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于写操作的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于注测的写操作事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLOUT|EPOLLET;</span><br><span class=\"line\">                <span class=\"comment\">//修改sockfd上要处理的事件为EPOLLOUT</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(events[i].events&amp;EPOLLOUT) &#123;<span class=\"comment\">// 如果有数据发送</span></span><br><span class=\"line\">                sockfd = events[i].data.fd;</span><br><span class=\"line\">                write(sockfd, line, n);</span><br><span class=\"line\">                <span class=\"comment\">//设置用于读操作的文件描述符</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                <span class=\"comment\">//设置用于注测的读操作事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                <span class=\"comment\">//修改sockfd上要处理的事件为EPOLIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"react-redux","date":"2016-12-09T16:00:00.000Z","comments":1,"toc":false,"_content":"\nreact-redux是基于redux javascript轻量级框架，为了更好的和react结合对redux提供了一些封装，一种更科学的代码组织方式，让我们更舒服地在React的代码中使用Redux。\nreact-redux很简单他就提供了两个模块：Provider和connect。\n<!--more-->\n### Provider\n\nProvider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\n这个模块是作为整个App的容器，在你原有的App Container的基础上再包上一层，它的工作很简单，就是接受Redux的store作为props，并将其声明为context的属性之一，子组件可以在声明了contextTypes之后可以方便的通过this.context.store访问到store。不过我们的组件通常不需要这么做，将store放在context里，是为了给下面的connect用的。\n- \n```javascript\nReactDOM.render(\n  <Provider store={store}>\n    <MyRootComponent />\n  </Provider>,\n  rootEl\n)\n```\n\n如下是Provider组件的核心代码：\n- \n```javascript\nexport default class Provider extends Component {\n   //在context设置store，可以被子组件引用\n   getChildContext() {\n       return { store: this.store }\n   }\n\n   constructor(props, context) {\n      super(props, context)\n      this.store = props.store\n   }\n   render() {\n      return Children.only(this.props.children)\n   }\n}\n\n```\n\n### connect\nconnect是真正的重点，它是一个柯里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：\n\n**mapStateToProps：**构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n**mapDispatchToProps：**声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要柯里化的原因。\n\n在connect函数中其实是对我们的组件进行了一层包装，在connect中获取到Provider组件在context属性中设置的store。然后在componentDidMount函数中订阅handleChange事件，在handleChange函数中获取了store.getState()并且重新设置了最新的状态this.setState({ storeState })，这样组件状态发生了修改，组件将重新被渲染。\n\n如下是connect组件的核心代码：\n- \n```javascript\nexport default function connect(mapStateToProps, mapDispatchToProps, mergeProps, options = {}) {\n  return function wrapWithConnect(WrappedComponent) {\n      class Connect extends Component {\n\t    constructor(props, context) {\n\t        super(props, context)\n\t        this.store = props.store || context.store\n\t    }\n\t    trySubscribe() {\n\t        if (shouldSubscribe && !this.unsubscribe) {\n\t            this.unsubscribe = this.store.subscribe(this.handleChange.bind(this))\n\t            this.handleChange()\n\t        }\n\t    }\n\t    componentDidMount() {\n\t        this.trySubscribe()\n\t    }\n\t\t\n\t    handleChange() {\n\t        const storeState = this.store.getState()\n\t        this.setState({ storeState })\n\t    }\n\t\t\n\t    render() {\n\t        if (withRef) {\n                 this.renderedElement = createElement(WrappedComponent, {\n                   ...this.mergedProps,\n                    ref: 'wrappedInstance'\n                 })\n\t        } else {\n\t            this.renderedElement = createElement(WrappedComponent,this.mergedProps)\n\t        }\n\t        return this.renderedElement\n\t    }\n    }\n }\n```\n\n做好以上流程Redux和React就可以工作了。简单地说就是：\n1.顶层分发状态，让React组件被动地渲染。\n2.监听事件，事件有权利回到所有状态顶层影响状态。","source":"_posts/react-redux.md","raw":"---\ntitle: react-redux\ndate: 2016-12-10\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\nreact-redux是基于redux javascript轻量级框架，为了更好的和react结合对redux提供了一些封装，一种更科学的代码组织方式，让我们更舒服地在React的代码中使用Redux。\nreact-redux很简单他就提供了两个模块：Provider和connect。\n<!--more-->\n### Provider\n\nProvider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\n这个模块是作为整个App的容器，在你原有的App Container的基础上再包上一层，它的工作很简单，就是接受Redux的store作为props，并将其声明为context的属性之一，子组件可以在声明了contextTypes之后可以方便的通过this.context.store访问到store。不过我们的组件通常不需要这么做，将store放在context里，是为了给下面的connect用的。\n- \n```javascript\nReactDOM.render(\n  <Provider store={store}>\n    <MyRootComponent />\n  </Provider>,\n  rootEl\n)\n```\n\n如下是Provider组件的核心代码：\n- \n```javascript\nexport default class Provider extends Component {\n   //在context设置store，可以被子组件引用\n   getChildContext() {\n       return { store: this.store }\n   }\n\n   constructor(props, context) {\n      super(props, context)\n      this.store = props.store\n   }\n   render() {\n      return Children.only(this.props.children)\n   }\n}\n\n```\n\n### connect\nconnect是真正的重点，它是一个柯里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：\n\n**mapStateToProps：**构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n**mapDispatchToProps：**声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要柯里化的原因。\n\n在connect函数中其实是对我们的组件进行了一层包装，在connect中获取到Provider组件在context属性中设置的store。然后在componentDidMount函数中订阅handleChange事件，在handleChange函数中获取了store.getState()并且重新设置了最新的状态this.setState({ storeState })，这样组件状态发生了修改，组件将重新被渲染。\n\n如下是connect组件的核心代码：\n- \n```javascript\nexport default function connect(mapStateToProps, mapDispatchToProps, mergeProps, options = {}) {\n  return function wrapWithConnect(WrappedComponent) {\n      class Connect extends Component {\n\t    constructor(props, context) {\n\t        super(props, context)\n\t        this.store = props.store || context.store\n\t    }\n\t    trySubscribe() {\n\t        if (shouldSubscribe && !this.unsubscribe) {\n\t            this.unsubscribe = this.store.subscribe(this.handleChange.bind(this))\n\t            this.handleChange()\n\t        }\n\t    }\n\t    componentDidMount() {\n\t        this.trySubscribe()\n\t    }\n\t\t\n\t    handleChange() {\n\t        const storeState = this.store.getState()\n\t        this.setState({ storeState })\n\t    }\n\t\t\n\t    render() {\n\t        if (withRef) {\n                 this.renderedElement = createElement(WrappedComponent, {\n                   ...this.mergedProps,\n                    ref: 'wrappedInstance'\n                 })\n\t        } else {\n\t            this.renderedElement = createElement(WrappedComponent,this.mergedProps)\n\t        }\n\t        return this.renderedElement\n\t    }\n    }\n }\n```\n\n做好以上流程Redux和React就可以工作了。简单地说就是：\n1.顶层分发状态，让React组件被动地渲染。\n2.监听事件，事件有权利回到所有状态顶层影响状态。","slug":"react-redux","published":1,"updated":"2021-06-25T02:00:18.113Z","layout":"post","photos":[],"link":"","_id":"ckqjatom10026qkl5zqnmosnl","content":"<p>react-redux是基于redux javascript轻量级框架，为了更好的和react结合对redux提供了一些封装，一种更科学的代码组织方式，让我们更舒服地在React的代码中使用Redux。<br>react-redux很简单他就提供了两个模块：Provider和connect。<br><a id=\"more\"></a></p>\n<h3 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h3><p>Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。<br>这个模块是作为整个App的容器，在你原有的App Container的基础上再包上一层，它的工作很简单，就是接受Redux的store作为props，并将其声明为context的属性之一，子组件可以在声明了contextTypes之后可以方便的通过this.context.store访问到store。不过我们的组件通常不需要这么做，将store放在context里，是为了给下面的connect用的。</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;MyRootComponent /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  rootEl</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如下是Provider组件的核心代码：</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Provider</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//在context设置store，可以被子组件引用</span></span><br><span class=\"line\">   getChildContext() &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123; <span class=\"attr\">store</span>: <span class=\"keyword\">this</span>.store &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.store = props.store</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Children.only(<span class=\"keyword\">this</span>.props.children)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h3><p>connect是真正的重点，它是一个柯里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：</p>\n<p><strong>mapStateToProps：</strong>构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。<br><strong>mapDispatchToProps：</strong>声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要柯里化的原因。</p>\n<p>在connect函数中其实是对我们的组件进行了一层包装，在connect中获取到Provider组件在context属性中设置的store。然后在componentDidMount函数中订阅handleChange事件，在handleChange函数中获取了store.getState()并且重新设置了最新的状态this.setState({ storeState })，这样组件状态发生了修改，组件将重新被渲染。</p>\n<p>如下是connect组件的核心代码：</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">mapStateToProps, mapDispatchToProps, mergeProps, options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\">\t        <span class=\"keyword\">this</span>.store = props.store || context.store</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    trySubscribe() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (shouldSubscribe &amp;&amp; !<span class=\"keyword\">this</span>.unsubscribe) &#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">this</span>.unsubscribe = <span class=\"keyword\">this</span>.store.subscribe(<span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">\t            <span class=\"keyword\">this</span>.handleChange()</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    componentDidMount() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">this</span>.trySubscribe()</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    handleChange() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">const</span> storeState = <span class=\"keyword\">this</span>.store.getState()</span><br><span class=\"line\">\t        <span class=\"keyword\">this</span>.setState(&#123; storeState &#125;)</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    render() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (withRef) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">this</span>.renderedElement = createElement(WrappedComponent, &#123;</span><br><span class=\"line\">                   ...this.mergedProps,</span><br><span class=\"line\">                    ref: <span class=\"string\">'wrappedInstance'</span></span><br><span class=\"line\">                 &#125;)</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">this</span>.renderedElement = createElement(WrappedComponent,<span class=\"keyword\">this</span>.mergedProps)</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.renderedElement</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>做好以上流程Redux和React就可以工作了。简单地说就是：<br>1.顶层分发状态，让React组件被动地渲染。<br>2.监听事件，事件有权利回到所有状态顶层影响状态。</p>\n","site":{"data":{}},"excerpt":"<p>react-redux是基于redux javascript轻量级框架，为了更好的和react结合对redux提供了一些封装，一种更科学的代码组织方式，让我们更舒服地在React的代码中使用Redux。<br>react-redux很简单他就提供了两个模块：Provider和connect。<br>","more":"</p>\n<h3 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h3><p>Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。<br>这个模块是作为整个App的容器，在你原有的App Container的基础上再包上一层，它的工作很简单，就是接受Redux的store作为props，并将其声明为context的属性之一，子组件可以在声明了contextTypes之后可以方便的通过this.context.store访问到store。不过我们的组件通常不需要这么做，将store放在context里，是为了给下面的connect用的。</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;MyRootComponent /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  rootEl</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如下是Provider组件的核心代码：</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Provider</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//在context设置store，可以被子组件引用</span></span><br><span class=\"line\">   getChildContext() &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123; <span class=\"attr\">store</span>: <span class=\"keyword\">this</span>.store &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.store = props.store</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Children.only(<span class=\"keyword\">this</span>.props.children)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h3><p>connect是真正的重点，它是一个柯里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：</p>\n<p><strong>mapStateToProps：</strong>构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。<br><strong>mapDispatchToProps：</strong>声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要柯里化的原因。</p>\n<p>在connect函数中其实是对我们的组件进行了一层包装，在connect中获取到Provider组件在context属性中设置的store。然后在componentDidMount函数中订阅handleChange事件，在handleChange函数中获取了store.getState()并且重新设置了最新的状态this.setState({ storeState })，这样组件状态发生了修改，组件将重新被渲染。</p>\n<p>如下是connect组件的核心代码：</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">mapStateToProps, mapDispatchToProps, mergeProps, options = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapWithConnect</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connect</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">super</span>(props, context)</span><br><span class=\"line\">\t        <span class=\"keyword\">this</span>.store = props.store || context.store</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    trySubscribe() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (shouldSubscribe &amp;&amp; !<span class=\"keyword\">this</span>.unsubscribe) &#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">this</span>.unsubscribe = <span class=\"keyword\">this</span>.store.subscribe(<span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">\t            <span class=\"keyword\">this</span>.handleChange()</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    componentDidMount() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">this</span>.trySubscribe()</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    handleChange() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">const</span> storeState = <span class=\"keyword\">this</span>.store.getState()</span><br><span class=\"line\">\t        <span class=\"keyword\">this</span>.setState(&#123; storeState &#125;)</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    render() &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (withRef) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">this</span>.renderedElement = createElement(WrappedComponent, &#123;</span><br><span class=\"line\">                   ...this.mergedProps,</span><br><span class=\"line\">                    ref: <span class=\"string\">'wrappedInstance'</span></span><br><span class=\"line\">                 &#125;)</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            <span class=\"keyword\">this</span>.renderedElement = createElement(WrappedComponent,<span class=\"keyword\">this</span>.mergedProps)</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.renderedElement</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>做好以上流程Redux和React就可以工作了。简单地说就是：<br>1.顶层分发状态，让React组件被动地渲染。<br>2.监听事件，事件有权利回到所有状态顶层影响状态。</p>"},{"title":"中间件远程调试设置","date":"2014-09-04T13:28:01.000Z","comments":1,"toc":true,"_content":"\n## 中间件\n\n### Jboss\n打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到   \n```\nset JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n\n```\n将参数***suspend=n*** 设置为 y\n<!--more-->\n### Weblogic\n打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd\n使用文本编辑打开startWebLogic.cmd 添加如下设置\n```\nset JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y\n```\n在将参数 JAVA_DEBUG加入到下面脚本当中\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy\n```\n最后如下\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%\n```\n\n## Eclipse\n![Eclipse](b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg)","source":"_posts/中间件远程调试设置.md","raw":"---\ntitle: 中间件远程调试设置\ndate: 2014-09-04 21:28:01\ncomments: true\ncategories: Eclipse\ntoc: true \n---\n\n## 中间件\n\n### Jboss\n打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到   \n```\nset JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n\n```\n将参数***suspend=n*** 设置为 y\n<!--more-->\n### Weblogic\n打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd\n使用文本编辑打开startWebLogic.cmd 添加如下设置\n```\nset JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y\n```\n在将参数 JAVA_DEBUG加入到下面脚本当中\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy\n```\n最后如下\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%\n```\n\n## Eclipse\n![Eclipse](b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg)","slug":"中间件远程调试设置","published":1,"updated":"2021-06-25T02:00:18.114Z","layout":"post","photos":[],"link":"","_id":"ckqjatom30028qkl58yj0ikxp","content":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h3><p>打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n</span><br></pre></td></tr></table></figure></p>\n<p>将参数<strong><em>suspend=n</em></strong> 设置为 y<br><a id=\"more\"></a></p>\n<h3 id=\"Weblogic\"><a href=\"#Weblogic\" class=\"headerlink\" title=\"Weblogic\"></a>Weblogic</h3><p>打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd<br>使用文本编辑打开startWebLogic.cmd 添加如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</span><br></pre></td></tr></table></figure></p>\n<p>在将参数 JAVA_DEBUG加入到下面脚本当中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy</span><br></pre></td></tr></table></figure></p>\n<p>最后如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p><img src=\"b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg\" alt=\"Eclipse\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h3><p>打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n</span><br></pre></td></tr></table></figure></p>\n<p>将参数<strong><em>suspend=n</em></strong> 设置为 y<br>","more":"</p>\n<h3 id=\"Weblogic\"><a href=\"#Weblogic\" class=\"headerlink\" title=\"Weblogic\"></a>Weblogic</h3><p>打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd<br>使用文本编辑打开startWebLogic.cmd 添加如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</span><br></pre></td></tr></table></figure></p>\n<p>在将参数 JAVA_DEBUG加入到下面脚本当中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy</span><br></pre></td></tr></table></figure></p>\n<p>最后如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p><img src=\"b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg\" alt=\"Eclipse\"></p>"},{"title":"为什么寄存器比内存快","date":"2013-10-14T16:00:00.000Z","comments":1,"toc":true,"_content":"\n计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。\n同样都是晶体管存储设备，为什么寄存器比内存快呢？\nMike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。\n<!--more-->\n\n## 原因一：距离不同\n距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。\n以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。\n距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。\n\n## 原因二：硬件设计不同\n苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。\n\n事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。\n\n## 原因三：工作方式不同\n寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。\n\n内存的工作方式就要复杂得多：\n（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）\n（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。\n（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。\n（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。\n（5）数据先送回内存控制器，再送回 CPU，然后开始使用。\n内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。\n为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。\n","source":"_posts/为什么寄存器比内存快.md","raw":"---\ntitle: 为什么寄存器比内存快\ndate: 2013-10-15\ncomments: true\ncategories: Other\ntoc: true \n---\n\n计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。\n同样都是晶体管存储设备，为什么寄存器比内存快呢？\nMike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。\n<!--more-->\n\n## 原因一：距离不同\n距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。\n以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。\n距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。\n\n## 原因二：硬件设计不同\n苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。\n\n事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。\n\n## 原因三：工作方式不同\n寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。\n\n内存的工作方式就要复杂得多：\n（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）\n（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。\n（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。\n（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。\n（5）数据先送回内存控制器，再送回 CPU，然后开始使用。\n内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。\n为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。\n","slug":"为什么寄存器比内存快","published":1,"updated":"2021-06-25T02:00:18.119Z","layout":"post","photos":[],"link":"","_id":"ckqjatom5002bqkl52uy8aa4c","content":"<p>计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。<br>同样都是晶体管存储设备，为什么寄存器比内存快呢？<br>Mike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。<br><a id=\"more\"></a></p>\n<h2 id=\"原因一：距离不同\"><a href=\"#原因一：距离不同\" class=\"headerlink\" title=\"原因一：距离不同\"></a>原因一：距离不同</h2><p>距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。<br>以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。<br>距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。</p>\n<h2 id=\"原因二：硬件设计不同\"><a href=\"#原因二：硬件设计不同\" class=\"headerlink\" title=\"原因二：硬件设计不同\"></a>原因二：硬件设计不同</h2><p>苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。</p>\n<p>事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。</p>\n<h2 id=\"原因三：工作方式不同\"><a href=\"#原因三：工作方式不同\" class=\"headerlink\" title=\"原因三：工作方式不同\"></a>原因三：工作方式不同</h2><p>寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。</p>\n<p>内存的工作方式就要复杂得多：<br>（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）<br>（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。<br>（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。<br>（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。<br>（5）数据先送回内存控制器，再送回 CPU，然后开始使用。<br>内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。<br>为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。</p>\n","site":{"data":{}},"excerpt":"<p>计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。<br>同样都是晶体管存储设备，为什么寄存器比内存快呢？<br>Mike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。<br>","more":"</p>\n<h2 id=\"原因一：距离不同\"><a href=\"#原因一：距离不同\" class=\"headerlink\" title=\"原因一：距离不同\"></a>原因一：距离不同</h2><p>距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。<br>以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。<br>距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。</p>\n<h2 id=\"原因二：硬件设计不同\"><a href=\"#原因二：硬件设计不同\" class=\"headerlink\" title=\"原因二：硬件设计不同\"></a>原因二：硬件设计不同</h2><p>苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。</p>\n<p>事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。</p>\n<h2 id=\"原因三：工作方式不同\"><a href=\"#原因三：工作方式不同\" class=\"headerlink\" title=\"原因三：工作方式不同\"></a>原因三：工作方式不同</h2><p>寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。</p>\n<p>内存的工作方式就要复杂得多：<br>（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）<br>（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。<br>（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。<br>（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。<br>（5）数据先送回内存控制器，再送回 CPU，然后开始使用。<br>内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。<br>为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。</p>"},{"title":"分析Java进程中消耗CPU最高的线程","date":"2016-08-22T02:56:33.000Z","comments":1,"_content":"\n第一步：查看JAVA进程（也可以使用top命令查看系统中消耗CPU最高的进程）\n```\n>jps -l\n28070 com.yonyouup.openapi.netty.startup.Bootstrap\n```\n<!--more-->\n第二步：查找进程中消耗CPU最高的线程ID\n```\n>top -p 28070H\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND    \n28173 root      20   0 3673316 314988  11984 S  0.3  1.0   0:11.12 java                                          \n28070 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java                                          \n28071 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.67 java                                          \n28072 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.09 java                                          \n28073 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          \n28074 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.07 java                                          \n28075 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          \n28076 root      20   0 3673316 314988  11984 S  0.0  1.0   0:09.67 java                                          \n28077 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java \n```\n第三步：查看线程栈信息\n我们查看消耗0.3%CPU的线程28173 \n将28173（10进制）转换成16进制（6e0d）\n```\n>jstack 28070|grep -A 12 6e0d\n\"nioEventLoopGroup-3-3\" prio=10 tid=0x00007fb7d800b000 nid=0x6e0d runnable [0x00007fb7b48f4000]\n   java.lang.Thread.State: RUNNABLE\n        at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)\n        at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)\n        at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:79)\n        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87)\n        - locked <0x00000000c08454f8> (a io.netty.channel.nio.SelectedSelectionKeySet)\n        - locked <0x00000000c08455a8> (a java.util.Collections$UnmodifiableSet)\n        - locked <0x00000000c0845400> (a sun.nio.ch.EPollSelectorImpl)\n        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)\n        at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:692)\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:352)\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)\n```\n\nA 12表示查找到所在行的后12行。28173用计算器转换为16进制6e0d，注意字母是小写。\n\n***以上命令针对Linux系统由于Windows系统不支持查看摸个进程中的线程所以只能借助第三方工具查看（JProfiler）***","source":"_posts/分析Java进程中消耗CPU最高的线程.md","raw":"---\ntitle: 分析Java进程中消耗CPU最高的线程\ndate: 2016-08-22 10:56:33 \ncomments: true \ncategories: Java\n---\n\n第一步：查看JAVA进程（也可以使用top命令查看系统中消耗CPU最高的进程）\n```\n>jps -l\n28070 com.yonyouup.openapi.netty.startup.Bootstrap\n```\n<!--more-->\n第二步：查找进程中消耗CPU最高的线程ID\n```\n>top -p 28070H\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND    \n28173 root      20   0 3673316 314988  11984 S  0.3  1.0   0:11.12 java                                          \n28070 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java                                          \n28071 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.67 java                                          \n28072 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.09 java                                          \n28073 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          \n28074 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.07 java                                          \n28075 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          \n28076 root      20   0 3673316 314988  11984 S  0.0  1.0   0:09.67 java                                          \n28077 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java \n```\n第三步：查看线程栈信息\n我们查看消耗0.3%CPU的线程28173 \n将28173（10进制）转换成16进制（6e0d）\n```\n>jstack 28070|grep -A 12 6e0d\n\"nioEventLoopGroup-3-3\" prio=10 tid=0x00007fb7d800b000 nid=0x6e0d runnable [0x00007fb7b48f4000]\n   java.lang.Thread.State: RUNNABLE\n        at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)\n        at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)\n        at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:79)\n        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87)\n        - locked <0x00000000c08454f8> (a io.netty.channel.nio.SelectedSelectionKeySet)\n        - locked <0x00000000c08455a8> (a java.util.Collections$UnmodifiableSet)\n        - locked <0x00000000c0845400> (a sun.nio.ch.EPollSelectorImpl)\n        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)\n        at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:692)\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:352)\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)\n```\n\nA 12表示查找到所在行的后12行。28173用计算器转换为16进制6e0d，注意字母是小写。\n\n***以上命令针对Linux系统由于Windows系统不支持查看摸个进程中的线程所以只能借助第三方工具查看（JProfiler）***","slug":"分析Java进程中消耗CPU最高的线程","published":1,"updated":"2021-06-25T02:00:18.135Z","layout":"post","photos":[],"link":"","_id":"ckqjatom6002cqkl5fyluatvn","content":"<p>第一步：查看JAVA进程（也可以使用top命令查看系统中消耗CPU最高的进程）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;jps -l</span><br><span class=\"line\">28070 com.yonyouup.openapi.netty.startup.Bootstrap</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>第二步：查找进程中消耗CPU最高的线程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;top -p 28070H</span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND    </span><br><span class=\"line\">28173 root      20   0 3673316 314988  11984 S  0.3  1.0   0:11.12 java                                          </span><br><span class=\"line\">28070 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java                                          </span><br><span class=\"line\">28071 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.67 java                                          </span><br><span class=\"line\">28072 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.09 java                                          </span><br><span class=\"line\">28073 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          </span><br><span class=\"line\">28074 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.07 java                                          </span><br><span class=\"line\">28075 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          </span><br><span class=\"line\">28076 root      20   0 3673316 314988  11984 S  0.0  1.0   0:09.67 java                                          </span><br><span class=\"line\">28077 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java</span><br></pre></td></tr></table></figure></p>\n<p>第三步：查看线程栈信息<br>我们查看消耗0.3%CPU的线程28173<br>将28173（10进制）转换成16进制（6e0d）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;jstack 28070|grep -A 12 6e0d</span><br><span class=\"line\">&quot;nioEventLoopGroup-3-3&quot; prio=10 tid=0x00007fb7d800b000 nid=0x6e0d runnable [0x00007fb7b48f4000]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)</span><br><span class=\"line\">        at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)</span><br><span class=\"line\">        at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:79)</span><br><span class=\"line\">        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87)</span><br><span class=\"line\">        - locked &lt;0x00000000c08454f8&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)</span><br><span class=\"line\">        - locked &lt;0x00000000c08455a8&gt; (a java.util.Collections$UnmodifiableSet)</span><br><span class=\"line\">        - locked &lt;0x00000000c0845400&gt; (a sun.nio.ch.EPollSelectorImpl)</span><br><span class=\"line\">        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)</span><br><span class=\"line\">        at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:692)</span><br><span class=\"line\">        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:352)</span><br><span class=\"line\">        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)</span><br></pre></td></tr></table></figure></p>\n<p>A 12表示查找到所在行的后12行。28173用计算器转换为16进制6e0d，注意字母是小写。</p>\n<p><strong><em>以上命令针对Linux系统由于Windows系统不支持查看摸个进程中的线程所以只能借助第三方工具查看（JProfiler）</em></strong></p>\n","site":{"data":{}},"excerpt":"<p>第一步：查看JAVA进程（也可以使用top命令查看系统中消耗CPU最高的进程）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;jps -l</span><br><span class=\"line\">28070 com.yonyouup.openapi.netty.startup.Bootstrap</span><br></pre></td></tr></table></figure></p>","more":"<p>第二步：查找进程中消耗CPU最高的线程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;top -p 28070H</span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND    </span><br><span class=\"line\">28173 root      20   0 3673316 314988  11984 S  0.3  1.0   0:11.12 java                                          </span><br><span class=\"line\">28070 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java                                          </span><br><span class=\"line\">28071 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.67 java                                          </span><br><span class=\"line\">28072 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.09 java                                          </span><br><span class=\"line\">28073 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          </span><br><span class=\"line\">28074 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.07 java                                          </span><br><span class=\"line\">28075 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.08 java                                          </span><br><span class=\"line\">28076 root      20   0 3673316 314988  11984 S  0.0  1.0   0:09.67 java                                          </span><br><span class=\"line\">28077 root      20   0 3673316 314988  11984 S  0.0  1.0   0:00.00 java</span><br></pre></td></tr></table></figure></p>\n<p>第三步：查看线程栈信息<br>我们查看消耗0.3%CPU的线程28173<br>将28173（10进制）转换成16进制（6e0d）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;jstack 28070|grep -A 12 6e0d</span><br><span class=\"line\">&quot;nioEventLoopGroup-3-3&quot; prio=10 tid=0x00007fb7d800b000 nid=0x6e0d runnable [0x00007fb7b48f4000]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)</span><br><span class=\"line\">        at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)</span><br><span class=\"line\">        at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:79)</span><br><span class=\"line\">        at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:87)</span><br><span class=\"line\">        - locked &lt;0x00000000c08454f8&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)</span><br><span class=\"line\">        - locked &lt;0x00000000c08455a8&gt; (a java.util.Collections$UnmodifiableSet)</span><br><span class=\"line\">        - locked &lt;0x00000000c0845400&gt; (a sun.nio.ch.EPollSelectorImpl)</span><br><span class=\"line\">        at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:98)</span><br><span class=\"line\">        at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:692)</span><br><span class=\"line\">        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:352)</span><br><span class=\"line\">        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)</span><br></pre></td></tr></table></figure></p>\n<p>A 12表示查找到所在行的后12行。28173用计算器转换为16进制6e0d，注意字母是小写。</p>\n<p><strong><em>以上命令针对Linux系统由于Windows系统不支持查看摸个进程中的线程所以只能借助第三方工具查看（JProfiler）</em></strong></p>"},{"title":"企业体检开发框架培训","date":"2015-11-02T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## 框架构成介绍\n\n### 系统架构图\n<!--more-->\n![系统架构图](开发框架架构图.png)\n\n### 框架构成\n***MVC框架 [Jfianl](http://www.jfinal.com/)***\n***权限框架 [Shiro](http://shiro.apache.org/)***\n***数据库连接池 [Durid](https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)***\n***模板引擎 [Freemarker](http://freemarker.org/)***\n\n## 什么是Jfianl\njfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！\n***总结一句：短小精悍强大,易于使用.***\n\n### fianl有什么特点?\n1、MVC架构，设计精巧，使用简单\n2、遵循COC原则，零配置，无xml\n3、独创Db + Record模式，灵活便利\n4、ActiveRecord支持，使数据库开发极致快速\n5、自动加载修改后的java文件，开发过程中无需重启web server\n6、AOP支持，拦截器配置灵活，功能强大\n7、Plugin体系结构，扩展性强\n8、多视图支持，支持FreeMarker、JSP、Velocity\n9、强大的Validator后端校验功能\n10、功能齐全，拥有struts2的绝大部分功能\n11、体积小仅248K，且无第三方依赖\n\n### Jfianl性能\nfinal 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目\n的代码量减少 85% 以上\n以上数据来源： http://www.oschina.net/question/167900_232456\n\n这里有一些有关性能测试的数据和讨论： \nhttp://www.oschina.net/question/173052_62228 \nhttp://www.oschina.net/question/1988085_230350 \nhttp://www.oschina.net/question/590700_120423 \nhttp://www.oschina.net/question/197668_221395 \n## 什么是Shiro\n\n是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，\n可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用\nShiro 为安全的四要素 提供了保护应用的API：\n认证 - 用户身份识别，常被称为用户“登录”；\n授权 - 访问控制；\n密码加密 - 保护或隐藏数据防止被偷窥；\n会话管理 - 每用户相关的时间敏感的状态。","source":"_posts/企业体检开发框架培训.md","raw":"---\ntitle: 企业体检开发框架培训\ndate: 2015-11-03\ncomments: true\ncategories: 培训文档\ntoc: true \n---\n\n## 框架构成介绍\n\n### 系统架构图\n<!--more-->\n![系统架构图](开发框架架构图.png)\n\n### 框架构成\n***MVC框架 [Jfianl](http://www.jfinal.com/)***\n***权限框架 [Shiro](http://shiro.apache.org/)***\n***数据库连接池 [Durid](https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)***\n***模板引擎 [Freemarker](http://freemarker.org/)***\n\n## 什么是Jfianl\njfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！\n***总结一句：短小精悍强大,易于使用.***\n\n### fianl有什么特点?\n1、MVC架构，设计精巧，使用简单\n2、遵循COC原则，零配置，无xml\n3、独创Db + Record模式，灵活便利\n4、ActiveRecord支持，使数据库开发极致快速\n5、自动加载修改后的java文件，开发过程中无需重启web server\n6、AOP支持，拦截器配置灵活，功能强大\n7、Plugin体系结构，扩展性强\n8、多视图支持，支持FreeMarker、JSP、Velocity\n9、强大的Validator后端校验功能\n10、功能齐全，拥有struts2的绝大部分功能\n11、体积小仅248K，且无第三方依赖\n\n### Jfianl性能\nfinal 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目\n的代码量减少 85% 以上\n以上数据来源： http://www.oschina.net/question/167900_232456\n\n这里有一些有关性能测试的数据和讨论： \nhttp://www.oschina.net/question/173052_62228 \nhttp://www.oschina.net/question/1988085_230350 \nhttp://www.oschina.net/question/590700_120423 \nhttp://www.oschina.net/question/197668_221395 \n## 什么是Shiro\n\n是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，\n可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用\nShiro 为安全的四要素 提供了保护应用的API：\n认证 - 用户身份识别，常被称为用户“登录”；\n授权 - 访问控制；\n密码加密 - 保护或隐藏数据防止被偷窥；\n会话管理 - 每用户相关的时间敏感的状态。","slug":"企业体检开发框架培训","published":1,"updated":"2021-06-25T02:00:18.121Z","layout":"post","photos":[],"link":"","_id":"ckqjatom8002fqkl5y10b0wyt","content":"<h2 id=\"框架构成介绍\"><a href=\"#框架构成介绍\" class=\"headerlink\" title=\"框架构成介绍\"></a>框架构成介绍</h2><h3 id=\"系统架构图\"><a href=\"#系统架构图\" class=\"headerlink\" title=\"系统架构图\"></a>系统架构图</h3><a id=\"more\"></a>\n<p><img src=\"开发框架架构图.png\" alt=\"系统架构图\"></p>\n<h3 id=\"框架构成\"><a href=\"#框架构成\" class=\"headerlink\" title=\"框架构成\"></a>框架构成</h3><p><strong><em>MVC框架 <a href=\"http://www.jfinal.com/\" target=\"_blank\" rel=\"noopener\">Jfianl</a></em></strong><br><strong><em>权限框架 <a href=\"http://shiro.apache.org/\" target=\"_blank\" rel=\"noopener\">Shiro</a></em></strong><br><strong><em>数据库连接池 <a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">Durid</a></em></strong><br><strong><em>模板引擎 <a href=\"http://freemarker.org/\" target=\"_blank\" rel=\"noopener\">Freemarker</a></em></strong></p>\n<h2 id=\"什么是Jfianl\"><a href=\"#什么是Jfianl\" class=\"headerlink\" title=\"什么是Jfianl\"></a>什么是Jfianl</h2><p>jfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！<br><strong><em>总结一句：短小精悍强大,易于使用.</em></strong></p>\n<h3 id=\"fianl有什么特点\"><a href=\"#fianl有什么特点\" class=\"headerlink\" title=\"fianl有什么特点?\"></a>fianl有什么特点?</h3><p>1、MVC架构，设计精巧，使用简单<br>2、遵循COC原则，零配置，无xml<br>3、独创Db + Record模式，灵活便利<br>4、ActiveRecord支持，使数据库开发极致快速<br>5、自动加载修改后的java文件，开发过程中无需重启web server<br>6、AOP支持，拦截器配置灵活，功能强大<br>7、Plugin体系结构，扩展性强<br>8、多视图支持，支持FreeMarker、JSP、Velocity<br>9、强大的Validator后端校验功能<br>10、功能齐全，拥有struts2的绝大部分功能<br>11、体积小仅248K，且无第三方依赖</p>\n<h3 id=\"Jfianl性能\"><a href=\"#Jfianl性能\" class=\"headerlink\" title=\"Jfianl性能\"></a>Jfianl性能</h3><p>final 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目<br>的代码量减少 85% 以上<br>以上数据来源： <a href=\"http://www.oschina.net/question/167900_232456\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/167900_232456</a></p>\n<p>这里有一些有关性能测试的数据和讨论：<br><a href=\"http://www.oschina.net/question/173052_62228\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/173052_62228</a><br><a href=\"http://www.oschina.net/question/1988085_230350\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/1988085_230350</a><br><a href=\"http://www.oschina.net/question/590700_120423\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/590700_120423</a><br><a href=\"http://www.oschina.net/question/197668_221395\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/197668_221395</a> </p>\n<h2 id=\"什么是Shiro\"><a href=\"#什么是Shiro\" class=\"headerlink\" title=\"什么是Shiro\"></a>什么是Shiro</h2><p>是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，<br>可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用<br>Shiro 为安全的四要素 提供了保护应用的API：<br>认证 - 用户身份识别，常被称为用户“登录”；<br>授权 - 访问控制；<br>密码加密 - 保护或隐藏数据防止被偷窥；<br>会话管理 - 每用户相关的时间敏感的状态。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"框架构成介绍\"><a href=\"#框架构成介绍\" class=\"headerlink\" title=\"框架构成介绍\"></a>框架构成介绍</h2><h3 id=\"系统架构图\"><a href=\"#系统架构图\" class=\"headerlink\" title=\"系统架构图\"></a>系统架构图</h3>","more":"<p><img src=\"开发框架架构图.png\" alt=\"系统架构图\"></p>\n<h3 id=\"框架构成\"><a href=\"#框架构成\" class=\"headerlink\" title=\"框架构成\"></a>框架构成</h3><p><strong><em>MVC框架 <a href=\"http://www.jfinal.com/\" target=\"_blank\" rel=\"noopener\">Jfianl</a></em></strong><br><strong><em>权限框架 <a href=\"http://shiro.apache.org/\" target=\"_blank\" rel=\"noopener\">Shiro</a></em></strong><br><strong><em>数据库连接池 <a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">Durid</a></em></strong><br><strong><em>模板引擎 <a href=\"http://freemarker.org/\" target=\"_blank\" rel=\"noopener\">Freemarker</a></em></strong></p>\n<h2 id=\"什么是Jfianl\"><a href=\"#什么是Jfianl\" class=\"headerlink\" title=\"什么是Jfianl\"></a>什么是Jfianl</h2><p>jfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！<br><strong><em>总结一句：短小精悍强大,易于使用.</em></strong></p>\n<h3 id=\"fianl有什么特点\"><a href=\"#fianl有什么特点\" class=\"headerlink\" title=\"fianl有什么特点?\"></a>fianl有什么特点?</h3><p>1、MVC架构，设计精巧，使用简单<br>2、遵循COC原则，零配置，无xml<br>3、独创Db + Record模式，灵活便利<br>4、ActiveRecord支持，使数据库开发极致快速<br>5、自动加载修改后的java文件，开发过程中无需重启web server<br>6、AOP支持，拦截器配置灵活，功能强大<br>7、Plugin体系结构，扩展性强<br>8、多视图支持，支持FreeMarker、JSP、Velocity<br>9、强大的Validator后端校验功能<br>10、功能齐全，拥有struts2的绝大部分功能<br>11、体积小仅248K，且无第三方依赖</p>\n<h3 id=\"Jfianl性能\"><a href=\"#Jfianl性能\" class=\"headerlink\" title=\"Jfianl性能\"></a>Jfianl性能</h3><p>final 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目<br>的代码量减少 85% 以上<br>以上数据来源： <a href=\"http://www.oschina.net/question/167900_232456\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/167900_232456</a></p>\n<p>这里有一些有关性能测试的数据和讨论：<br><a href=\"http://www.oschina.net/question/173052_62228\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/173052_62228</a><br><a href=\"http://www.oschina.net/question/1988085_230350\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/1988085_230350</a><br><a href=\"http://www.oschina.net/question/590700_120423\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/590700_120423</a><br><a href=\"http://www.oschina.net/question/197668_221395\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/197668_221395</a> </p>\n<h2 id=\"什么是Shiro\"><a href=\"#什么是Shiro\" class=\"headerlink\" title=\"什么是Shiro\"></a>什么是Shiro</h2><p>是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，<br>可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用<br>Shiro 为安全的四要素 提供了保护应用的API：<br>认证 - 用户身份识别，常被称为用户“登录”；<br>授权 - 访问控制；<br>密码加密 - 保护或隐藏数据防止被偷窥；<br>会话管理 - 每用户相关的时间敏感的状态。</p>"},{"title":"博客搭建","date":"2016-05-10T11:05:33.000Z","comments":0,"_content":"***坚持写作、总结经验、分享心得、原著为上***\n2016年5月10号基于github搭建我的第一个博客\n\n\n个人简历: [关于我](/about/index.html)\n","source":"_posts/博客搭建.md","raw":"---\ntitle: 博客搭建\ndate: 2016-05-10 19:05:33\ncomments: false \n---\n***坚持写作、总结经验、分享心得、原著为上***\n2016年5月10号基于github搭建我的第一个博客\n\n\n个人简历: [关于我](/about/index.html)\n","slug":"博客搭建","published":1,"updated":"2021-06-25T02:00:18.137Z","layout":"post","photos":[],"link":"","_id":"ckqjatom9002hqkl5ug5cc6by","content":"<p><strong><em>坚持写作、总结经验、分享心得、原著为上</em></strong><br>2016年5月10号基于github搭建我的第一个博客</p>\n<p>个人简历: <a href=\"/about/index.html\">关于我</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em>坚持写作、总结经验、分享心得、原著为上</em></strong><br>2016年5月10号基于github搭建我的第一个博客</p>\n<p>个人简历: <a href=\"/about/index.html\">关于我</a></p>\n"},{"title":"开发管理的一些建议","date":"2016-05-30T15:57:33.000Z","comments":1,"toc":true,"_content":"随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。\n如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。\n<!--more-->\n### 编码规范化\n\n一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。\n### 前台组件化\n\n### 后台服务化\n\n### 部署一键化 \n\n### 避免直接修改第三方库\n第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。\n\n\n\n","source":"_posts/开发管理的一些建议.md","raw":"---\ntitle: 开发管理的一些建议\ndate: 2016-05-30 23:57:33 \ncomments: true \ncategories: 心得体会\ntoc: true\n---\n随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。\n如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。\n<!--more-->\n### 编码规范化\n\n一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。\n### 前台组件化\n\n### 后台服务化\n\n### 部署一键化 \n\n### 避免直接修改第三方库\n第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。\n\n\n\n","slug":"开发管理的一些建议","published":1,"updated":"2021-06-25T02:00:18.138Z","layout":"post","photos":[],"link":"","_id":"ckqjatomb002kqkl55hmqv6x8","content":"<p>随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。<br>如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。<br><a id=\"more\"></a></p>\n<h3 id=\"编码规范化\"><a href=\"#编码规范化\" class=\"headerlink\" title=\"编码规范化\"></a>编码规范化</h3><p>一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。</p>\n<h3 id=\"前台组件化\"><a href=\"#前台组件化\" class=\"headerlink\" title=\"前台组件化\"></a>前台组件化</h3><h3 id=\"后台服务化\"><a href=\"#后台服务化\" class=\"headerlink\" title=\"后台服务化\"></a>后台服务化</h3><h3 id=\"部署一键化\"><a href=\"#部署一键化\" class=\"headerlink\" title=\"部署一键化\"></a>部署一键化</h3><h3 id=\"避免直接修改第三方库\"><a href=\"#避免直接修改第三方库\" class=\"headerlink\" title=\"避免直接修改第三方库\"></a>避免直接修改第三方库</h3><p>第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。</p>\n","site":{"data":{}},"excerpt":"<p>随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。<br>如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。<br>","more":"</p>\n<h3 id=\"编码规范化\"><a href=\"#编码规范化\" class=\"headerlink\" title=\"编码规范化\"></a>编码规范化</h3><p>一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。</p>\n<h3 id=\"前台组件化\"><a href=\"#前台组件化\" class=\"headerlink\" title=\"前台组件化\"></a>前台组件化</h3><h3 id=\"后台服务化\"><a href=\"#后台服务化\" class=\"headerlink\" title=\"后台服务化\"></a>后台服务化</h3><h3 id=\"部署一键化\"><a href=\"#部署一键化\" class=\"headerlink\" title=\"部署一键化\"></a>部署一键化</h3><h3 id=\"避免直接修改第三方库\"><a href=\"#避免直接修改第三方库\" class=\"headerlink\" title=\"避免直接修改第三方库\"></a>避免直接修改第三方库</h3><p>第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。</p>"},{"title":"构建单页Web应用","date":"2016-05-16T15:57:33.000Z","comments":1,"toc":true,"_content":"\n## 单页应用是什么？\n\n让我们先来看几个网站：\n[coding](https://coding.net/)\n[teambition](https://www.teambition.com/)\n[cloud9](https://c9.io/)\n<!--more-->\n\n注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。\n所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。\n其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。\n\n## 开发框架\nExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。\njQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。\n但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。\n为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。\n这类框架包括Backbone，Knockout，AngularJS，Avalon等。\n\n## 组件化\n这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。\n分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。\n\n## 代码隔离\n与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。\n从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。\n在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。\n模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。\n\n## 代码合并与加载策略\n人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。\n从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。\n通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。\n当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。\n在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。\n\n## 路由与状态的管理\n我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。\n管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？\n传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。\n具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。\n有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。\n其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。\n当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。\n\n## 缓存与本地存储\n在单页应用的运作机制中，缓存是一个很重要的环节。\n由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。\n甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个[basket.js](https://github.com/addyosmani/basket.js)，就利用了HTML5 localStorage作了js和css文件的缓存。\n在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用[localStorage](https://github.com/mortzdk/localStorage)或者[localStorageDB](https://github.com/knadh/localStorageDB)来简化自己的业务代码。\n\n## 服务端通信\n传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。\nWebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。\n由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。\n\n## 内存管理\n传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。\n\n## 样式的规划\n在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。\n样式规划主要是几个方面：\n### 基准样式的分离\n这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。\n### 组件样式的划分\n这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。\n### 堆叠次序的管理\n传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。\n在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？\n了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。\n\n## 单页应用的产品形态\n我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。\n除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。\n单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。\n单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。\n\n## 部署模式的改变\n在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。\n我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。\n假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。\n\n## 单页应用的缺陷\n单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。\n\n## 产品单页化带来的挑战\n一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。\n开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/5)","source":"_posts/构建单页Web应用.md","raw":"---\ntitle: 构建单页Web应用\ndate: 2016-05-16 23:57:33 \ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n## 单页应用是什么？\n\n让我们先来看几个网站：\n[coding](https://coding.net/)\n[teambition](https://www.teambition.com/)\n[cloud9](https://c9.io/)\n<!--more-->\n\n注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。\n所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。\n其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。\n\n## 开发框架\nExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。\njQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。\n但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。\n为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。\n这类框架包括Backbone，Knockout，AngularJS，Avalon等。\n\n## 组件化\n这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。\n分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。\n\n## 代码隔离\n与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。\n从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。\n在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。\n模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。\n\n## 代码合并与加载策略\n人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。\n从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。\n通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。\n当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。\n在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。\n\n## 路由与状态的管理\n我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。\n管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？\n传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。\n具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。\n有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。\n其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。\n当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。\n\n## 缓存与本地存储\n在单页应用的运作机制中，缓存是一个很重要的环节。\n由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。\n甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个[basket.js](https://github.com/addyosmani/basket.js)，就利用了HTML5 localStorage作了js和css文件的缓存。\n在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用[localStorage](https://github.com/mortzdk/localStorage)或者[localStorageDB](https://github.com/knadh/localStorageDB)来简化自己的业务代码。\n\n## 服务端通信\n传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。\nWebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。\n由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。\n\n## 内存管理\n传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。\n\n## 样式的规划\n在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。\n样式规划主要是几个方面：\n### 基准样式的分离\n这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。\n### 组件样式的划分\n这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。\n### 堆叠次序的管理\n传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。\n在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？\n了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。\n\n## 单页应用的产品形态\n我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。\n除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。\n单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。\n单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。\n\n## 部署模式的改变\n在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。\n我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。\n假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。\n\n## 单页应用的缺陷\n单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。\n\n## 产品单页化带来的挑战\n一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。\n开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/5)","slug":"构建单页Web应用","published":1,"updated":"2021-06-25T02:00:18.140Z","layout":"post","photos":[],"link":"","_id":"ckqjatomd002mqkl5j6to1nk3","content":"<h2 id=\"单页应用是什么？\"><a href=\"#单页应用是什么？\" class=\"headerlink\" title=\"单页应用是什么？\"></a>单页应用是什么？</h2><p>让我们先来看几个网站：<br><a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding</a><br><a href=\"https://www.teambition.com/\" target=\"_blank\" rel=\"noopener\">teambition</a><br><a href=\"https://c9.io/\" target=\"_blank\" rel=\"noopener\">cloud9</a><br><a id=\"more\"></a></p>\n<p>注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。<br>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。<br>其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><p>ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。<br>jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。<br>但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。<br>为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。<br>这类框架包括Backbone，Knockout，AngularJS，Avalon等。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。<br>分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。</p>\n<h2 id=\"代码隔离\"><a href=\"#代码隔离\" class=\"headerlink\" title=\"代码隔离\"></a>代码隔离</h2><p>与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。<br>从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。<br>在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。<br>模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。</p>\n<h2 id=\"代码合并与加载策略\"><a href=\"#代码合并与加载策略\" class=\"headerlink\" title=\"代码合并与加载策略\"></a>代码合并与加载策略</h2><p>人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。<br>从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。<br>通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。<br>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。<br>在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。</p>\n<h2 id=\"路由与状态的管理\"><a href=\"#路由与状态的管理\" class=\"headerlink\" title=\"路由与状态的管理\"></a>路由与状态的管理</h2><p>我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。<br>管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？<br>传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。<br>具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。<br>有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。<br>其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。<br>当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。</p>\n<h2 id=\"缓存与本地存储\"><a href=\"#缓存与本地存储\" class=\"headerlink\" title=\"缓存与本地存储\"></a>缓存与本地存储</h2><p>在单页应用的运作机制中，缓存是一个很重要的环节。<br>由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。<br>甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个<a href=\"https://github.com/addyosmani/basket.js\" target=\"_blank\" rel=\"noopener\">basket.js</a>，就利用了HTML5 localStorage作了js和css文件的缓存。<br>在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用<a href=\"https://github.com/mortzdk/localStorage\" target=\"_blank\" rel=\"noopener\">localStorage</a>或者<a href=\"https://github.com/knadh/localStorageDB\" target=\"_blank\" rel=\"noopener\">localStorageDB</a>来简化自己的业务代码。</p>\n<h2 id=\"服务端通信\"><a href=\"#服务端通信\" class=\"headerlink\" title=\"服务端通信\"></a>服务端通信</h2><p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。<br>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。<br>由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>\n<h2 id=\"样式的规划\"><a href=\"#样式的规划\" class=\"headerlink\" title=\"样式的规划\"></a>样式的规划</h2><p>在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。<br>样式规划主要是几个方面：</p>\n<h3 id=\"基准样式的分离\"><a href=\"#基准样式的分离\" class=\"headerlink\" title=\"基准样式的分离\"></a>基准样式的分离</h3><p>这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。</p>\n<h3 id=\"组件样式的划分\"><a href=\"#组件样式的划分\" class=\"headerlink\" title=\"组件样式的划分\"></a>组件样式的划分</h3><p>这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。</p>\n<h3 id=\"堆叠次序的管理\"><a href=\"#堆叠次序的管理\" class=\"headerlink\" title=\"堆叠次序的管理\"></a>堆叠次序的管理</h3><p>传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。<br>在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？<br>了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。</p>\n<h2 id=\"单页应用的产品形态\"><a href=\"#单页应用的产品形态\" class=\"headerlink\" title=\"单页应用的产品形态\"></a>单页应用的产品形态</h2><p>我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。<br>除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。<br>单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。<br>单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。</p>\n<h2 id=\"部署模式的改变\"><a href=\"#部署模式的改变\" class=\"headerlink\" title=\"部署模式的改变\"></a>部署模式的改变</h2><p>在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。<br>我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。<br>假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。</p>\n<h2 id=\"单页应用的缺陷\"><a href=\"#单页应用的缺陷\" class=\"headerlink\" title=\"单页应用的缺陷\"></a>单页应用的缺陷</h2><p>单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。</p>\n<h2 id=\"产品单页化带来的挑战\"><a href=\"#产品单页化带来的挑战\" class=\"headerlink\" title=\"产品单页化带来的挑战\"></a>产品单页化带来的挑战</h2><p>一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。<br>开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/5\" target=\"_blank\" rel=\"noopener\">来自前端大牛徐飞博客</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"单页应用是什么？\"><a href=\"#单页应用是什么？\" class=\"headerlink\" title=\"单页应用是什么？\"></a>单页应用是什么？</h2><p>让我们先来看几个网站：<br><a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding</a><br><a href=\"https://www.teambition.com/\" target=\"_blank\" rel=\"noopener\">teambition</a><br><a href=\"https://c9.io/\" target=\"_blank\" rel=\"noopener\">cloud9</a><br>","more":"</p>\n<p>注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。<br>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。<br>其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><p>ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。<br>jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。<br>但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。<br>为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。<br>这类框架包括Backbone，Knockout，AngularJS，Avalon等。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。<br>分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。</p>\n<h2 id=\"代码隔离\"><a href=\"#代码隔离\" class=\"headerlink\" title=\"代码隔离\"></a>代码隔离</h2><p>与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。<br>从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。<br>在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。<br>模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。</p>\n<h2 id=\"代码合并与加载策略\"><a href=\"#代码合并与加载策略\" class=\"headerlink\" title=\"代码合并与加载策略\"></a>代码合并与加载策略</h2><p>人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。<br>从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。<br>通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。<br>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。<br>在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。</p>\n<h2 id=\"路由与状态的管理\"><a href=\"#路由与状态的管理\" class=\"headerlink\" title=\"路由与状态的管理\"></a>路由与状态的管理</h2><p>我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。<br>管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？<br>传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。<br>具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。<br>有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。<br>其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。<br>当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。</p>\n<h2 id=\"缓存与本地存储\"><a href=\"#缓存与本地存储\" class=\"headerlink\" title=\"缓存与本地存储\"></a>缓存与本地存储</h2><p>在单页应用的运作机制中，缓存是一个很重要的环节。<br>由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。<br>甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个<a href=\"https://github.com/addyosmani/basket.js\" target=\"_blank\" rel=\"noopener\">basket.js</a>，就利用了HTML5 localStorage作了js和css文件的缓存。<br>在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用<a href=\"https://github.com/mortzdk/localStorage\" target=\"_blank\" rel=\"noopener\">localStorage</a>或者<a href=\"https://github.com/knadh/localStorageDB\" target=\"_blank\" rel=\"noopener\">localStorageDB</a>来简化自己的业务代码。</p>\n<h2 id=\"服务端通信\"><a href=\"#服务端通信\" class=\"headerlink\" title=\"服务端通信\"></a>服务端通信</h2><p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。<br>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。<br>由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>\n<h2 id=\"样式的规划\"><a href=\"#样式的规划\" class=\"headerlink\" title=\"样式的规划\"></a>样式的规划</h2><p>在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。<br>样式规划主要是几个方面：</p>\n<h3 id=\"基准样式的分离\"><a href=\"#基准样式的分离\" class=\"headerlink\" title=\"基准样式的分离\"></a>基准样式的分离</h3><p>这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。</p>\n<h3 id=\"组件样式的划分\"><a href=\"#组件样式的划分\" class=\"headerlink\" title=\"组件样式的划分\"></a>组件样式的划分</h3><p>这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。</p>\n<h3 id=\"堆叠次序的管理\"><a href=\"#堆叠次序的管理\" class=\"headerlink\" title=\"堆叠次序的管理\"></a>堆叠次序的管理</h3><p>传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。<br>在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？<br>了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。</p>\n<h2 id=\"单页应用的产品形态\"><a href=\"#单页应用的产品形态\" class=\"headerlink\" title=\"单页应用的产品形态\"></a>单页应用的产品形态</h2><p>我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。<br>除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。<br>单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。<br>单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。</p>\n<h2 id=\"部署模式的改变\"><a href=\"#部署模式的改变\" class=\"headerlink\" title=\"部署模式的改变\"></a>部署模式的改变</h2><p>在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。<br>我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。<br>假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。</p>\n<h2 id=\"单页应用的缺陷\"><a href=\"#单页应用的缺陷\" class=\"headerlink\" title=\"单页应用的缺陷\"></a>单页应用的缺陷</h2><p>单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。</p>\n<h2 id=\"产品单页化带来的挑战\"><a href=\"#产品单页化带来的挑战\" class=\"headerlink\" title=\"产品单页化带来的挑战\"></a>产品单页化带来的挑战</h2><p>一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。<br>开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/5\" target=\"_blank\" rel=\"noopener\">来自前端大牛徐飞博客</a></p>"},{"title":"模块定义规范","date":"2016-11-28T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## CMD\n- 通用模块定义规范，一般用于后端，采用同步加载的方式。nodejs的npm实现了此标准。\n- 规范中指定一个文件对应一个模块\n- 代表：CommonJS\n<!--more-->\n```javascript\n//demo1.js \nexports.add = function (a,b){\n    return a+b;\n}\n\n//demo2.js\nmodule.exports  = function (){\n    console.log(\"hello world demo2\");\n}\n\n//demo3.js\nvar Demo3 = function(){\n   this.sysHello = function(){\n      console.log(\"hello world Demo3\");\n   }\n}\nmodule.exports.Demo3 = Demo3;\n\n//demo4.js\nvar Demo4 = function(){\n   this.sysHello = function(){\n     console.log(\"hello world Demo4\");\n   }\n}\nexports.Demo4 = Demo4;\n\n//demo5.js\nexports = [1,2];\n\n//demo6.js\nmodule.exports = [1,2];\n\n//mian.js\nvar demo1 = require('./demo1');\nvar demo2 = require('./demo2');\nvar Demo3= require('./demo3').Demo3;\nvar demo3_ = require('./demo3');\nvar demo4 = require('./demo4');\nvar demo5 = require('./demo5');\nvar demo6 = require('./demo6');\n\nconsole.log(demo1.add(1,2));\ndemo2();\nvar demo3 = new Demo3();\ndemo3.sysHello();\nvar demo3_ = new demo3_.Demo3();\ndemo3_.sysHello();\nvar demo4 = new demo4.Demo4();\ndemo4.sysHello();\nconsole.log(demo5)\n\n//输出\n3\nhello world demo2\nhello world Demo3\nhello world Demo3\nhello world Demo4\n{}\n[ 1, 2 ]\n```\n***总结：***\n- **module.exports是真正的模块定义接口，exports只不过是它的辅助工具。推荐使用exports导出，除非你打算从原来的“实例化对象”改变成一个类型**\n- **module.exports 导出的是一个类型或实例对象 而exports返回的是一个实例对象**\n\n参考网站：[commonjs](http://wiki.commonjs.org/wiki/Modules/1.1.1)\n## AMD\n- 异步加载模块定义规范，也是一个文件对应一个模块。一般用于前端浏览器。因为浏览器加载javascript的时候回停止浏览器渲染引擎工作。阻塞页面渲染。页面显示空白对用户体验不好\n- 原理就是在&lt;script async/&gt;标签中添加了async属性。只不过async是属于html5中的属性在浏览器IE9以下不支持\n```javascript\n/*\n对模块的返回值类型并没有强制为一定是个object，任何函数的返回值都是允许的。此处是一个返回了函数的模块定义\n*/\ndefine([\"./cart\", \"./inventory\"], function(cart, inventory) {\n        //return an object to define the \"my/shirt\" module.\n        return {\n            color: \"blue\",\n            size: \"large\",\n            addToCart: function() {\n                inventory.decrement(this);\n                cart.add(this);\n            }\n        }\n    }\n);\n/*\ndefine()中包含了一个模块名称作为首个参数：这些常由优化工具生成。你也可以自己显式指定模块名称，\n但这使模块更不具备移植性——就是说若你将文件移动到其他目录下，你就得重命名。一般最好避免对模块硬编码，\n而是交给优化工具去生成。优化工具需要生成模块名以将多个模块打成一个包，加快到浏览器的载人速度。\n*/\ndefine(\"foo/title\", [\"my/cart\", \"my/inventory\"],function(cart, inventory) {\n\t//Define foo/title object in here.\n});\n\n//简单包装CommonJS来定义模块\ndefine(function(require, exports, module) {\n\tvar a = require('a'),\n\t    b = require('b');\n\n\t//Return the module value\n\treturn function () {};\n});\n\ndefine(function(require) {\n    var mod = require(\"./relative/name\");\n});\n```\n参考网站：[requirejs官网](http://www.requirejs.cn/)\n\n","source":"_posts/模块定义规范.md","raw":"---\ntitle: 模块定义规范\ndate: 2016-11-29\ncomments: true\ncategories: JavaScript\ntoc: true \n---\n\n## CMD\n- 通用模块定义规范，一般用于后端，采用同步加载的方式。nodejs的npm实现了此标准。\n- 规范中指定一个文件对应一个模块\n- 代表：CommonJS\n<!--more-->\n```javascript\n//demo1.js \nexports.add = function (a,b){\n    return a+b;\n}\n\n//demo2.js\nmodule.exports  = function (){\n    console.log(\"hello world demo2\");\n}\n\n//demo3.js\nvar Demo3 = function(){\n   this.sysHello = function(){\n      console.log(\"hello world Demo3\");\n   }\n}\nmodule.exports.Demo3 = Demo3;\n\n//demo4.js\nvar Demo4 = function(){\n   this.sysHello = function(){\n     console.log(\"hello world Demo4\");\n   }\n}\nexports.Demo4 = Demo4;\n\n//demo5.js\nexports = [1,2];\n\n//demo6.js\nmodule.exports = [1,2];\n\n//mian.js\nvar demo1 = require('./demo1');\nvar demo2 = require('./demo2');\nvar Demo3= require('./demo3').Demo3;\nvar demo3_ = require('./demo3');\nvar demo4 = require('./demo4');\nvar demo5 = require('./demo5');\nvar demo6 = require('./demo6');\n\nconsole.log(demo1.add(1,2));\ndemo2();\nvar demo3 = new Demo3();\ndemo3.sysHello();\nvar demo3_ = new demo3_.Demo3();\ndemo3_.sysHello();\nvar demo4 = new demo4.Demo4();\ndemo4.sysHello();\nconsole.log(demo5)\n\n//输出\n3\nhello world demo2\nhello world Demo3\nhello world Demo3\nhello world Demo4\n{}\n[ 1, 2 ]\n```\n***总结：***\n- **module.exports是真正的模块定义接口，exports只不过是它的辅助工具。推荐使用exports导出，除非你打算从原来的“实例化对象”改变成一个类型**\n- **module.exports 导出的是一个类型或实例对象 而exports返回的是一个实例对象**\n\n参考网站：[commonjs](http://wiki.commonjs.org/wiki/Modules/1.1.1)\n## AMD\n- 异步加载模块定义规范，也是一个文件对应一个模块。一般用于前端浏览器。因为浏览器加载javascript的时候回停止浏览器渲染引擎工作。阻塞页面渲染。页面显示空白对用户体验不好\n- 原理就是在&lt;script async/&gt;标签中添加了async属性。只不过async是属于html5中的属性在浏览器IE9以下不支持\n```javascript\n/*\n对模块的返回值类型并没有强制为一定是个object，任何函数的返回值都是允许的。此处是一个返回了函数的模块定义\n*/\ndefine([\"./cart\", \"./inventory\"], function(cart, inventory) {\n        //return an object to define the \"my/shirt\" module.\n        return {\n            color: \"blue\",\n            size: \"large\",\n            addToCart: function() {\n                inventory.decrement(this);\n                cart.add(this);\n            }\n        }\n    }\n);\n/*\ndefine()中包含了一个模块名称作为首个参数：这些常由优化工具生成。你也可以自己显式指定模块名称，\n但这使模块更不具备移植性——就是说若你将文件移动到其他目录下，你就得重命名。一般最好避免对模块硬编码，\n而是交给优化工具去生成。优化工具需要生成模块名以将多个模块打成一个包，加快到浏览器的载人速度。\n*/\ndefine(\"foo/title\", [\"my/cart\", \"my/inventory\"],function(cart, inventory) {\n\t//Define foo/title object in here.\n});\n\n//简单包装CommonJS来定义模块\ndefine(function(require, exports, module) {\n\tvar a = require('a'),\n\t    b = require('b');\n\n\t//Return the module value\n\treturn function () {};\n});\n\ndefine(function(require) {\n    var mod = require(\"./relative/name\");\n});\n```\n参考网站：[requirejs官网](http://www.requirejs.cn/)\n\n","slug":"模块定义规范","published":1,"updated":"2021-06-25T02:00:18.144Z","layout":"post","photos":[],"link":"","_id":"ckqjatomf002pqkl513ody5w4","content":"<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><ul>\n<li>通用模块定义规范，一般用于后端，采用同步加载的方式。nodejs的npm实现了此标准。</li>\n<li>规范中指定一个文件对应一个模块</li>\n<li>代表：CommonJS<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo1.js </span></span><br><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo2.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports  = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world demo2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo3.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Demo3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sysHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world Demo3\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.Demo3 = Demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo4.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Demo4 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sysHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world Demo4\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.Demo4 = Demo4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo5.js</span></span><br><span class=\"line\">exports = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo6.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mian.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> demo1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Demo3= <span class=\"built_in\">require</span>(<span class=\"string\">'./demo3'</span>).Demo3;</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo3_ = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo4'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo5 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo5'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo6 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo6'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo1.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">demo2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo3 = <span class=\"keyword\">new</span> Demo3();</span><br><span class=\"line\">demo3.sysHello();</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo3_ = <span class=\"keyword\">new</span> demo3_.Demo3();</span><br><span class=\"line\">demo3_.sysHello();</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo4 = <span class=\"keyword\">new</span> demo4.Demo4();</span><br><span class=\"line\">demo4.sysHello();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo5)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">hello world demo2</span><br><span class=\"line\">hello world Demo3</span><br><span class=\"line\">hello world Demo3</span><br><span class=\"line\">hello world Demo4</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\">[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>总结：</em></strong></p>\n<ul>\n<li><strong>module.exports是真正的模块定义接口，exports只不过是它的辅助工具。推荐使用exports导出，除非你打算从原来的“实例化对象”改变成一个类型</strong></li>\n<li><strong>module.exports 导出的是一个类型或实例对象 而exports返回的是一个实例对象</strong></li>\n</ul>\n<p>参考网站：<a href=\"http://wiki.commonjs.org/wiki/Modules/1.1.1\" target=\"_blank\" rel=\"noopener\">commonjs</a></p>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><ul>\n<li>异步加载模块定义规范，也是一个文件对应一个模块。一般用于前端浏览器。因为浏览器加载javascript的时候回停止浏览器渲染引擎工作。阻塞页面渲染。页面显示空白对用户体验不好</li>\n<li>原理就是在&lt;script async/&gt;标签中添加了async属性。只不过async是属于html5中的属性在浏览器IE9以下不支持<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">对模块的返回值类型并没有强制为一定是个object，任何函数的返回值都是允许的。此处是一个返回了函数的模块定义</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">define([<span class=\"string\">\"./cart\"</span>, <span class=\"string\">\"./inventory\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cart, inventory</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return an object to define the \"my/shirt\" module.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            color: <span class=\"string\">\"blue\"</span>,</span><br><span class=\"line\">            size: <span class=\"string\">\"large\"</span>,</span><br><span class=\"line\">            addToCart: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                inventory.decrement(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                cart.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">define()中包含了一个模块名称作为首个参数：这些常由优化工具生成。你也可以自己显式指定模块名称，</span></span><br><span class=\"line\"><span class=\"comment\">但这使模块更不具备移植性——就是说若你将文件移动到其他目录下，你就得重命名。一般最好避免对模块硬编码，</span></span><br><span class=\"line\"><span class=\"comment\">而是交给优化工具去生成。优化工具需要生成模块名以将多个模块打成一个包，加快到浏览器的载人速度。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">define(<span class=\"string\">\"foo/title\"</span>, [<span class=\"string\">\"my/cart\"</span>, <span class=\"string\">\"my/inventory\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cart, inventory</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Define foo/title object in here.</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单包装CommonJS来定义模块</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'a'</span>),</span><br><span class=\"line\">\t    b = <span class=\"built_in\">require</span>(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Return the module value</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">\"./relative/name\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考网站：<a href=\"http://www.requirejs.cn/\" target=\"_blank\" rel=\"noopener\">requirejs官网</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h2><ul>\n<li>通用模块定义规范，一般用于后端，采用同步加载的方式。nodejs的npm实现了此标准。</li>\n<li>规范中指定一个文件对应一个模块</li>\n<li>代表：CommonJS","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo1.js </span></span><br><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo2.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports  = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world demo2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo3.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Demo3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sysHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world Demo3\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.Demo3 = Demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo4.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Demo4 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sysHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world Demo4\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.Demo4 = Demo4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo5.js</span></span><br><span class=\"line\">exports = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo6.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mian.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> demo1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Demo3= <span class=\"built_in\">require</span>(<span class=\"string\">'./demo3'</span>).Demo3;</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo3_ = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo4'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo5 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo5'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo6 = <span class=\"built_in\">require</span>(<span class=\"string\">'./demo6'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo1.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">demo2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo3 = <span class=\"keyword\">new</span> Demo3();</span><br><span class=\"line\">demo3.sysHello();</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo3_ = <span class=\"keyword\">new</span> demo3_.Demo3();</span><br><span class=\"line\">demo3_.sysHello();</span><br><span class=\"line\"><span class=\"keyword\">var</span> demo4 = <span class=\"keyword\">new</span> demo4.Demo4();</span><br><span class=\"line\">demo4.sysHello();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo5)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">hello world demo2</span><br><span class=\"line\">hello world Demo3</span><br><span class=\"line\">hello world Demo3</span><br><span class=\"line\">hello world Demo4</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\">[ <span class=\"number\">1</span>, <span class=\"number\">2</span> ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>总结：</em></strong></p>\n<ul>\n<li><strong>module.exports是真正的模块定义接口，exports只不过是它的辅助工具。推荐使用exports导出，除非你打算从原来的“实例化对象”改变成一个类型</strong></li>\n<li><strong>module.exports 导出的是一个类型或实例对象 而exports返回的是一个实例对象</strong></li>\n</ul>\n<p>参考网站：<a href=\"http://wiki.commonjs.org/wiki/Modules/1.1.1\" target=\"_blank\" rel=\"noopener\">commonjs</a></p>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><ul>\n<li>异步加载模块定义规范，也是一个文件对应一个模块。一般用于前端浏览器。因为浏览器加载javascript的时候回停止浏览器渲染引擎工作。阻塞页面渲染。页面显示空白对用户体验不好</li>\n<li>原理就是在&lt;script async/&gt;标签中添加了async属性。只不过async是属于html5中的属性在浏览器IE9以下不支持<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">对模块的返回值类型并没有强制为一定是个object，任何函数的返回值都是允许的。此处是一个返回了函数的模块定义</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">define([<span class=\"string\">\"./cart\"</span>, <span class=\"string\">\"./inventory\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cart, inventory</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return an object to define the \"my/shirt\" module.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            color: <span class=\"string\">\"blue\"</span>,</span><br><span class=\"line\">            size: <span class=\"string\">\"large\"</span>,</span><br><span class=\"line\">            addToCart: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                inventory.decrement(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                cart.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">define()中包含了一个模块名称作为首个参数：这些常由优化工具生成。你也可以自己显式指定模块名称，</span></span><br><span class=\"line\"><span class=\"comment\">但这使模块更不具备移植性——就是说若你将文件移动到其他目录下，你就得重命名。一般最好避免对模块硬编码，</span></span><br><span class=\"line\"><span class=\"comment\">而是交给优化工具去生成。优化工具需要生成模块名以将多个模块打成一个包，加快到浏览器的载人速度。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">define(<span class=\"string\">\"foo/title\"</span>, [<span class=\"string\">\"my/cart\"</span>, <span class=\"string\">\"my/inventory\"</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cart, inventory</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Define foo/title object in here.</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单包装CommonJS来定义模块</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'a'</span>),</span><br><span class=\"line\">\t    b = <span class=\"built_in\">require</span>(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Return the module value</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">\"./relative/name\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考网站：<a href=\"http://www.requirejs.cn/\" target=\"_blank\" rel=\"noopener\">requirejs官网</a></p>"},{"title":"浅谈BSF","date":"2013-01-30T13:28:01.000Z","comments":1,"toc":true,"_content":"\n### BSF是什么\n BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。\n \n<!--more-->\n### 如何使用\n 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。\n \n### Java Bean中\n```java\npackage cn.com.bsf.test; \n         \npublic class BeanDemo{ \n     private String name; \n              \n     public void setName(String name){ \n         this.name=name; \n     } \n     public String getName(){ \n          return name \n     } \n} \n         \npackage cn.com.bsf.test; \nimport java.io.BufferedInputStream; \nimport java.io.BufferedReader; \nimport java.io.IOException; \nimport java.io.InputStream; \nimport java.io.InputStreamReader; \nimport java.util.HashMap; \nimport java.util.Map; \n         \nimport org.apache.bsf.BSFEngine; \nimport org.apache.bsf.BSFException; \nimport org.apache.bsf.BSFManager; \npublic class BSFExample{ \n         \n    public static void main(String[] args){ \n        BSFManager bsfManager= new BSFManager(); \n        BeanDemo demo= new BeanDemo(); \n        //在BSF中注册java bean \n        bsfManager.declareBean(\"demo\", demo, demo.getClass()); \n        bsfManager.declareBean(\"out\", System.out, System.out.getClass()); \n        //得到BSF引擎 \n        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(\"javascript\"); \n        //读取js文件 \n        InputStream stream = BSFDemo.class.getResourceAsStream(\"/bsf_001.js\"); \n        InputStreamReader reader = new InputStreamReader(new BufferedInputStream(stream)); \n        BufferedReader bufR = new BufferedReader(reader); \n        StringBuffer sb = new StringBuffer(); \n        String content = bufR.readLine(); \n        while (content != null) { \n           sb.append(content); \n           content = bufR.readLine(); \n        } \n        bsfEngine.exec(\"javascript\", 0, 0, sb.toString()); \n       //执行脚本中的某个方法 \n        Object o = bsfEngine.eval(\"javascript\", 0, 0, \"test()\");  \n        Map map = (HashMap) o; \n        System.out.println(map.get(\"age\")); \n        System.out.println(demo.getName()); \n    } \n} \n```\n\n输出结果\n```\nhello world \n10\n张三\n```\n### 脚本\n*** bsf_001.js***\n```javascript\nimportPackage(java.util); \nfunction test(){ \n    reflection.setName(\"张三\"); \n    out.println(\"hello world\"); \n    var map = new HashMap(); \n    map.put(\"name\",\"张三\"); \n    map.put(\"age\",\"10\"); \n    return map; \n}\n```\n\n*** bsf_002.js***\n```javascript\nimportClass(Packages.cn.com.bsf.test.AppDemo); \nvar appDemo = new AppDemo(); \nvar str=appDemo.query(\"select * from bsf\"); \nout.println(str);\n```\nbsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同\nObject o = bsfEngine.eval(\"javascript\", 0, 0, \"bsf_002.js的脚本内容\");\n\n不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处\n\n***importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如***\n***importClass(Packages.cn.com.bsf.test.BeanDemo);***\n***importClass(java.util.HashMap);***\n***importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。***\n***importPackage(Packages.cn.com.bsf.test）;***\n***importPackage(java.util);***\n","source":"_posts/浅谈BSF.md","raw":"---\ntitle: 浅谈BSF\ndate: 2013-01-30 21:28:01\ncomments: true\ncategories: BSF\ntoc: true \n---\n\n### BSF是什么\n BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。\n \n<!--more-->\n### 如何使用\n 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。\n \n### Java Bean中\n```java\npackage cn.com.bsf.test; \n         \npublic class BeanDemo{ \n     private String name; \n              \n     public void setName(String name){ \n         this.name=name; \n     } \n     public String getName(){ \n          return name \n     } \n} \n         \npackage cn.com.bsf.test; \nimport java.io.BufferedInputStream; \nimport java.io.BufferedReader; \nimport java.io.IOException; \nimport java.io.InputStream; \nimport java.io.InputStreamReader; \nimport java.util.HashMap; \nimport java.util.Map; \n         \nimport org.apache.bsf.BSFEngine; \nimport org.apache.bsf.BSFException; \nimport org.apache.bsf.BSFManager; \npublic class BSFExample{ \n         \n    public static void main(String[] args){ \n        BSFManager bsfManager= new BSFManager(); \n        BeanDemo demo= new BeanDemo(); \n        //在BSF中注册java bean \n        bsfManager.declareBean(\"demo\", demo, demo.getClass()); \n        bsfManager.declareBean(\"out\", System.out, System.out.getClass()); \n        //得到BSF引擎 \n        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(\"javascript\"); \n        //读取js文件 \n        InputStream stream = BSFDemo.class.getResourceAsStream(\"/bsf_001.js\"); \n        InputStreamReader reader = new InputStreamReader(new BufferedInputStream(stream)); \n        BufferedReader bufR = new BufferedReader(reader); \n        StringBuffer sb = new StringBuffer(); \n        String content = bufR.readLine(); \n        while (content != null) { \n           sb.append(content); \n           content = bufR.readLine(); \n        } \n        bsfEngine.exec(\"javascript\", 0, 0, sb.toString()); \n       //执行脚本中的某个方法 \n        Object o = bsfEngine.eval(\"javascript\", 0, 0, \"test()\");  \n        Map map = (HashMap) o; \n        System.out.println(map.get(\"age\")); \n        System.out.println(demo.getName()); \n    } \n} \n```\n\n输出结果\n```\nhello world \n10\n张三\n```\n### 脚本\n*** bsf_001.js***\n```javascript\nimportPackage(java.util); \nfunction test(){ \n    reflection.setName(\"张三\"); \n    out.println(\"hello world\"); \n    var map = new HashMap(); \n    map.put(\"name\",\"张三\"); \n    map.put(\"age\",\"10\"); \n    return map; \n}\n```\n\n*** bsf_002.js***\n```javascript\nimportClass(Packages.cn.com.bsf.test.AppDemo); \nvar appDemo = new AppDemo(); \nvar str=appDemo.query(\"select * from bsf\"); \nout.println(str);\n```\nbsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同\nObject o = bsfEngine.eval(\"javascript\", 0, 0, \"bsf_002.js的脚本内容\");\n\n不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处\n\n***importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如***\n***importClass(Packages.cn.com.bsf.test.BeanDemo);***\n***importClass(java.util.HashMap);***\n***importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。***\n***importPackage(Packages.cn.com.bsf.test）;***\n***importPackage(java.util);***\n","slug":"浅谈BSF","published":1,"updated":"2021-06-25T02:00:18.145Z","layout":"post","photos":[],"link":"","_id":"ckqjatomg002qqkl5ytbip3c7","content":"<h3 id=\"BSF是什么\"><a href=\"#BSF是什么\" class=\"headerlink\" title=\"BSF是什么\"></a>BSF是什么</h3><p> BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。</p>\n<a id=\"more\"></a>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p> 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。</p>\n<h3 id=\"Java-Bean中\"><a href=\"#Java-Bean中\" class=\"headerlink\" title=\"Java Bean中\"></a>Java Bean中</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanDemo</span></span>&#123; </span><br><span class=\"line\">     <span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">              </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123; </span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name=name; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">          <span class=\"keyword\">return</span> name </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFEngine; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFManager; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSFExample</span></span>&#123; </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </span><br><span class=\"line\">        BSFManager bsfManager= <span class=\"keyword\">new</span> BSFManager(); </span><br><span class=\"line\">        BeanDemo demo= <span class=\"keyword\">new</span> BeanDemo(); </span><br><span class=\"line\">        <span class=\"comment\">//在BSF中注册java bean </span></span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"demo\"</span>, demo, demo.getClass()); </span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"out\"</span>, System.out, System.out.getClass()); </span><br><span class=\"line\">        <span class=\"comment\">//得到BSF引擎 </span></span><br><span class=\"line\">        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(<span class=\"string\">\"javascript\"</span>); </span><br><span class=\"line\">        <span class=\"comment\">//读取js文件 </span></span><br><span class=\"line\">        InputStream stream = BSFDemo.class.getResourceAsStream(\"/bsf_001.js\"); </span><br><span class=\"line\">        InputStreamReader reader = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> BufferedInputStream(stream)); </span><br><span class=\"line\">        BufferedReader bufR = <span class=\"keyword\">new</span> BufferedReader(reader); </span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\">        String content = bufR.readLine(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (content != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">           sb.append(content); </span><br><span class=\"line\">           content = bufR.readLine(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        bsfEngine.exec(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, sb.toString()); </span><br><span class=\"line\">       <span class=\"comment\">//执行脚本中的某个方法 </span></span><br><span class=\"line\">        Object o = bsfEngine.eval(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">\"test()\"</span>);  </span><br><span class=\"line\">        Map map = (HashMap) o; </span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">\"age\"</span>)); </span><br><span class=\"line\">        System.out.println(demo.getName()); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world </span><br><span class=\"line\">10</span><br><span class=\"line\">张三</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p><strong><em> bsf_001.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importPackage(java.util); </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    reflection.setName(<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    out.println(<span class=\"string\">\"hello world\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> HashMap(); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"10\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> map; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em> bsf_002.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importClass(Packages.cn.com.bsf.test.AppDemo); </span><br><span class=\"line\"><span class=\"keyword\">var</span> appDemo = <span class=\"keyword\">new</span> AppDemo(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> str=appDemo.query(<span class=\"string\">\"select * from bsf\"</span>); </span><br><span class=\"line\">out.println(str);</span><br></pre></td></tr></table></figure></p>\n<p>bsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同<br>Object o = bsfEngine.eval(“javascript”, 0, 0, “bsf_002.js的脚本内容”);</p>\n<p>不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处</p>\n<p><strong><em>importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如</em></strong><br><strong><em>importClass(Packages.cn.com.bsf.test.BeanDemo);</em></strong><br><strong><em>importClass(java.util.HashMap);</em></strong><br><strong><em>importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。</em></strong><br><strong><em>importPackage(Packages.cn.com.bsf.test）;</em></strong><br><strong><em>importPackage(java.util);</em></strong></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"BSF是什么\"><a href=\"#BSF是什么\" class=\"headerlink\" title=\"BSF是什么\"></a>BSF是什么</h3><p> BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。</p>","more":"<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p> 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。</p>\n<h3 id=\"Java-Bean中\"><a href=\"#Java-Bean中\" class=\"headerlink\" title=\"Java Bean中\"></a>Java Bean中</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanDemo</span></span>&#123; </span><br><span class=\"line\">     <span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">              </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123; </span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name=name; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">          <span class=\"keyword\">return</span> name </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFEngine; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFManager; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSFExample</span></span>&#123; </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </span><br><span class=\"line\">        BSFManager bsfManager= <span class=\"keyword\">new</span> BSFManager(); </span><br><span class=\"line\">        BeanDemo demo= <span class=\"keyword\">new</span> BeanDemo(); </span><br><span class=\"line\">        <span class=\"comment\">//在BSF中注册java bean </span></span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"demo\"</span>, demo, demo.getClass()); </span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"out\"</span>, System.out, System.out.getClass()); </span><br><span class=\"line\">        <span class=\"comment\">//得到BSF引擎 </span></span><br><span class=\"line\">        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(<span class=\"string\">\"javascript\"</span>); </span><br><span class=\"line\">        <span class=\"comment\">//读取js文件 </span></span><br><span class=\"line\">        InputStream stream = BSFDemo.class.getResourceAsStream(\"/bsf_001.js\"); </span><br><span class=\"line\">        InputStreamReader reader = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> BufferedInputStream(stream)); </span><br><span class=\"line\">        BufferedReader bufR = <span class=\"keyword\">new</span> BufferedReader(reader); </span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\">        String content = bufR.readLine(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (content != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">           sb.append(content); </span><br><span class=\"line\">           content = bufR.readLine(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        bsfEngine.exec(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, sb.toString()); </span><br><span class=\"line\">       <span class=\"comment\">//执行脚本中的某个方法 </span></span><br><span class=\"line\">        Object o = bsfEngine.eval(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">\"test()\"</span>);  </span><br><span class=\"line\">        Map map = (HashMap) o; </span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">\"age\"</span>)); </span><br><span class=\"line\">        System.out.println(demo.getName()); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world </span><br><span class=\"line\">10</span><br><span class=\"line\">张三</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p><strong><em> bsf_001.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importPackage(java.util); </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    reflection.setName(<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    out.println(<span class=\"string\">\"hello world\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> HashMap(); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"10\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> map; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em> bsf_002.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importClass(Packages.cn.com.bsf.test.AppDemo); </span><br><span class=\"line\"><span class=\"keyword\">var</span> appDemo = <span class=\"keyword\">new</span> AppDemo(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> str=appDemo.query(<span class=\"string\">\"select * from bsf\"</span>); </span><br><span class=\"line\">out.println(str);</span><br></pre></td></tr></table></figure></p>\n<p>bsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同<br>Object o = bsfEngine.eval(“javascript”, 0, 0, “bsf_002.js的脚本内容”);</p>\n<p>不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处</p>\n<p><strong><em>importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如</em></strong><br><strong><em>importClass(Packages.cn.com.bsf.test.BeanDemo);</em></strong><br><strong><em>importClass(java.util.HashMap);</em></strong><br><strong><em>importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。</em></strong><br><strong><em>importPackage(Packages.cn.com.bsf.test）;</em></strong><br><strong><em>importPackage(java.util);</em></strong></p>"},{"title":"框架那么多学习那个好","date":"2016-05-16T14:49:33.000Z","comments":1,"_content":"\n***摘自知乎文章，加自己体会***\n\n我们学习一个东西，通常两个目的：\n-为了解决现在的问题\n-为了解决将来可能会有的问题\n\n所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。\n<!--more-->\n在Web应用中，我们需要解决的问题可以归纳为三类\n***-状态***\n***-组织***\n***-效率***\n\n1、状态\n什么是状态？\n在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。\n比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。\nReact走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。\n在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。\n\n2、 组织\n\n刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。\n所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。\n我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚\n那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。\n业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。\n那么，这跟Redux之类又有什么关系呢？\n我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。\n所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。\n另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。\n在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。\n用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。\n在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。\n再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。\n\n\n3、效率\n\n效率也分两种，一种是开发效率，一种是运行效率。\n我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。\n具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。\n其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。\n再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，\n运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。\n\n作者：徐飞\n链接：https://www.zhihu.com/question/39943474/answer/83905933\n来源：知乎","source":"_posts/框架那么多学习那个好.md","raw":"---\ntitle: 框架那么多学习那个好\ndate: 2016-05-16 22:49:33 \ncomments: true \ncategories: 心得体会\n---\n\n***摘自知乎文章，加自己体会***\n\n我们学习一个东西，通常两个目的：\n-为了解决现在的问题\n-为了解决将来可能会有的问题\n\n所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。\n<!--more-->\n在Web应用中，我们需要解决的问题可以归纳为三类\n***-状态***\n***-组织***\n***-效率***\n\n1、状态\n什么是状态？\n在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。\n比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。\nReact走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。\n在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。\n\n2、 组织\n\n刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。\n所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。\n我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚\n那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。\n业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。\n那么，这跟Redux之类又有什么关系呢？\n我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。\n所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。\n另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。\n在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。\n用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。\n在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。\n再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。\n\n\n3、效率\n\n效率也分两种，一种是开发效率，一种是运行效率。\n我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。\n具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。\n其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。\n再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，\n运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。\n\n作者：徐飞\n链接：https://www.zhihu.com/question/39943474/answer/83905933\n来源：知乎","slug":"框架那么多学习那个好","published":1,"updated":"2021-06-25T02:00:18.142Z","layout":"post","photos":[],"link":"","_id":"ckqjatomi002tqkl5hb0rmhw3","content":"<p><strong><em>摘自知乎文章，加自己体会</em></strong></p>\n<p>我们学习一个东西，通常两个目的：<br>-为了解决现在的问题<br>-为了解决将来可能会有的问题</p>\n<p>所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。<br><a id=\"more\"></a><br>在Web应用中，我们需要解决的问题可以归纳为三类<br><strong><em>-状态</em></strong><br><strong><em>-组织</em></strong><br><strong><em>-效率</em></strong></p>\n<p>1、状态<br>什么是状态？<br>在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。<br>比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。<br>React走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。<br>在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。</p>\n<p>2、 组织</p>\n<p>刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。<br>所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。<br>我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚<br>那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。<br>业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。<br>那么，这跟Redux之类又有什么关系呢？<br>我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。<br>所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。<br>另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。<br>在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。<br>用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。<br>在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。<br>再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。</p>\n<p>3、效率</p>\n<p>效率也分两种，一种是开发效率，一种是运行效率。<br>我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。<br>具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。<br>其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。<br>再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，<br>运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。</p>\n<p>作者：徐飞<br>链接：<a href=\"https://www.zhihu.com/question/39943474/answer/83905933\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/39943474/answer/83905933</a><br>来源：知乎</p>\n","site":{"data":{}},"excerpt":"<p><strong><em>摘自知乎文章，加自己体会</em></strong></p>\n<p>我们学习一个东西，通常两个目的：<br>-为了解决现在的问题<br>-为了解决将来可能会有的问题</p>\n<p>所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。<br>","more":"<br>在Web应用中，我们需要解决的问题可以归纳为三类<br><strong><em>-状态</em></strong><br><strong><em>-组织</em></strong><br><strong><em>-效率</em></strong></p>\n<p>1、状态<br>什么是状态？<br>在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。<br>比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。<br>React走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。<br>在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。</p>\n<p>2、 组织</p>\n<p>刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。<br>所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。<br>我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚<br>那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。<br>业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。<br>那么，这跟Redux之类又有什么关系呢？<br>我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。<br>所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。<br>另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。<br>在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。<br>用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。<br>在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。<br>再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。</p>\n<p>3、效率</p>\n<p>效率也分两种，一种是开发效率，一种是运行效率。<br>我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。<br>具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。<br>其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。<br>再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，<br>运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。</p>\n<p>作者：徐飞<br>链接：<a href=\"https://www.zhihu.com/question/39943474/answer/83905933\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/39943474/answer/83905933</a><br>来源：知乎</p>"},{"title":"漫谈工程师的三观","date":"2016-05-17T14:48:20.000Z","comments":1,"toc":true,"_content":"\n***工程师要有技术观，产品观和数据观。***\n### 技术观\n\n什么是正确的技术观？\n\n我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。\n\n兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。\n<!--more-->\n其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：\n\n更好的依赖管理工具（dependency tool）：bower -> browserify\n更好的编译（compile）和打包（packaging）工具：uglify + make / jake -> google closure -> webpack\n更好的任务管理工具：make / jake -> grunt/gulp\n更好的开发工具：? -> webpack live reloading -> time travelling debugger (elm)\n更成熟的语言：es3 -> es5 -> es6 -> es7 -> ??\n更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -> dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)\n更好的性能分析（profile）工具： 手工 profile -> google chrome profiling tool -> ??\n更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -> google chrome profiling tool / heapdump / mdb (solaris)-> ??\n\n后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：\n\n摩尔定律终结：scale up -> scale out（high scalable）；C10K -> C10M（high concurrency）\n计算的单元越来越小：Bare metal -> VM -> container -> ?\n计算的容量越来越大：single machine -> cluster -> computing pool (mesos/yarn)\n需要分析的数据越来越多：hadoop -> spark / flink\n网络的速度越来越快，吞吐量越来越大：10M -> 100M -> 1G -> 10G -> 100G\n人工智能/机器学习的门槛越来越低：Caffle -> TensorFlow；apache mahout -> PredictionIO\n\n后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。\n\n### 产品观\n\n工程师有了技术观还远远不够，产品观是接下来需要着力培养的。\n\n产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。\n\n比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？\n\n用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件\n重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面\n用户设置密码后，可以用新密码登录\n\n这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。\n\n然而，这样一个简单的功能，有人会把它做成这样：\n\n用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码\n用户使用这个随机密码登录\n\n即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。\n\n有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。\n\n如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：\n\n能够从一切可以学习的案例中学习其产品和功能设定的门道；\n对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；\n对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。\n\n限于篇幅，这个话题就不展开谈了。\n\n### 数据观\n数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。\n![build - measure - learn 的循环](604bf4b4226f180ff45fa8bce5874793_b.png)\n当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：\n![](444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg)\n所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：\n![](7e79f43fc4c4cfa8426a2008080842d6_b.jpg)\n这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。\n\n以上是从用户的维度看如何测量。\n\n从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。\n\n测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。\n\n分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。\n\n作者：陈天\n链接：https://zhuanlan.zhihu.com/p/20916291\n来源：知乎","source":"_posts/漫谈工程师的三观.md","raw":"---\ntitle: 漫谈工程师的三观\ndate: 2016-05-17 22:48:20\ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n***工程师要有技术观，产品观和数据观。***\n### 技术观\n\n什么是正确的技术观？\n\n我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。\n\n兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。\n<!--more-->\n其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：\n\n更好的依赖管理工具（dependency tool）：bower -> browserify\n更好的编译（compile）和打包（packaging）工具：uglify + make / jake -> google closure -> webpack\n更好的任务管理工具：make / jake -> grunt/gulp\n更好的开发工具：? -> webpack live reloading -> time travelling debugger (elm)\n更成熟的语言：es3 -> es5 -> es6 -> es7 -> ??\n更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -> dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)\n更好的性能分析（profile）工具： 手工 profile -> google chrome profiling tool -> ??\n更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -> google chrome profiling tool / heapdump / mdb (solaris)-> ??\n\n后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：\n\n摩尔定律终结：scale up -> scale out（high scalable）；C10K -> C10M（high concurrency）\n计算的单元越来越小：Bare metal -> VM -> container -> ?\n计算的容量越来越大：single machine -> cluster -> computing pool (mesos/yarn)\n需要分析的数据越来越多：hadoop -> spark / flink\n网络的速度越来越快，吞吐量越来越大：10M -> 100M -> 1G -> 10G -> 100G\n人工智能/机器学习的门槛越来越低：Caffle -> TensorFlow；apache mahout -> PredictionIO\n\n后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。\n\n### 产品观\n\n工程师有了技术观还远远不够，产品观是接下来需要着力培养的。\n\n产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。\n\n比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？\n\n用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件\n重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面\n用户设置密码后，可以用新密码登录\n\n这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。\n\n然而，这样一个简单的功能，有人会把它做成这样：\n\n用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码\n用户使用这个随机密码登录\n\n即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。\n\n有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。\n\n如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：\n\n能够从一切可以学习的案例中学习其产品和功能设定的门道；\n对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；\n对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。\n\n限于篇幅，这个话题就不展开谈了。\n\n### 数据观\n数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。\n![build - measure - learn 的循环](604bf4b4226f180ff45fa8bce5874793_b.png)\n当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：\n![](444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg)\n所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：\n![](7e79f43fc4c4cfa8426a2008080842d6_b.jpg)\n这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。\n\n以上是从用户的维度看如何测量。\n\n从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。\n\n测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。\n\n分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。\n\n作者：陈天\n链接：https://zhuanlan.zhihu.com/p/20916291\n来源：知乎","slug":"漫谈工程师的三观","published":1,"updated":"2021-06-25T02:00:18.148Z","layout":"post","photos":[],"link":"","_id":"ckqjatomj002uqkl5xdas8jmq","content":"<p><strong><em>工程师要有技术观，产品观和数据观。</em></strong></p>\n<h3 id=\"技术观\"><a href=\"#技术观\" class=\"headerlink\" title=\"技术观\"></a>技术观</h3><p>什么是正确的技术观？</p>\n<p>我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。</p>\n<p>兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。<br><a id=\"more\"></a><br>其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：</p>\n<p>更好的依赖管理工具（dependency tool）：bower -&gt; browserify<br>更好的编译（compile）和打包（packaging）工具：uglify + make / jake -&gt; google closure -&gt; webpack<br>更好的任务管理工具：make / jake -&gt; grunt/gulp<br>更好的开发工具：? -&gt; webpack live reloading -&gt; time travelling debugger (elm)<br>更成熟的语言：es3 -&gt; es5 -&gt; es6 -&gt; es7 -&gt; ??<br>更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -&gt; dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)<br>更好的性能分析（profile）工具： 手工 profile -&gt; google chrome profiling tool -&gt; ??<br>更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -&gt; google chrome profiling tool / heapdump / mdb (solaris)-&gt; ??</p>\n<p>后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：</p>\n<p>摩尔定律终结：scale up -&gt; scale out（high scalable）；C10K -&gt; C10M（high concurrency）<br>计算的单元越来越小：Bare metal -&gt; VM -&gt; container -&gt; ?<br>计算的容量越来越大：single machine -&gt; cluster -&gt; computing pool (mesos/yarn)<br>需要分析的数据越来越多：hadoop -&gt; spark / flink<br>网络的速度越来越快，吞吐量越来越大：10M -&gt; 100M -&gt; 1G -&gt; 10G -&gt; 100G<br>人工智能/机器学习的门槛越来越低：Caffle -&gt; TensorFlow；apache mahout -&gt; PredictionIO</p>\n<p>后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。</p>\n<h3 id=\"产品观\"><a href=\"#产品观\" class=\"headerlink\" title=\"产品观\"></a>产品观</h3><p>工程师有了技术观还远远不够，产品观是接下来需要着力培养的。</p>\n<p>产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。</p>\n<p>比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件<br>重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面<br>用户设置密码后，可以用新密码登录</p>\n<p>这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。</p>\n<p>然而，这样一个简单的功能，有人会把它做成这样：</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码<br>用户使用这个随机密码登录</p>\n<p>即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。</p>\n<p>有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。</p>\n<p>如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：</p>\n<p>能够从一切可以学习的案例中学习其产品和功能设定的门道；<br>对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；<br>对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。</p>\n<p>限于篇幅，这个话题就不展开谈了。</p>\n<h3 id=\"数据观\"><a href=\"#数据观\" class=\"headerlink\" title=\"数据观\"></a>数据观</h3><p>数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。<br><img src=\"604bf4b4226f180ff45fa8bce5874793_b.png\" alt=\"build - measure - learn 的循环\"><br>当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：<br><img src=\"444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg\" alt><br>所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：<br><img src=\"7e79f43fc4c4cfa8426a2008080842d6_b.jpg\" alt><br>这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。</p>\n<p>以上是从用户的维度看如何测量。</p>\n<p>从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。</p>\n<p>测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。</p>\n<p>分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。</p>\n<p>作者：陈天<br>链接：<a href=\"https://zhuanlan.zhihu.com/p/20916291\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/20916291</a><br>来源：知乎</p>\n","site":{"data":{}},"excerpt":"<p><strong><em>工程师要有技术观，产品观和数据观。</em></strong></p>\n<h3 id=\"技术观\"><a href=\"#技术观\" class=\"headerlink\" title=\"技术观\"></a>技术观</h3><p>什么是正确的技术观？</p>\n<p>我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。</p>\n<p>兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。<br>","more":"<br>其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：</p>\n<p>更好的依赖管理工具（dependency tool）：bower -&gt; browserify<br>更好的编译（compile）和打包（packaging）工具：uglify + make / jake -&gt; google closure -&gt; webpack<br>更好的任务管理工具：make / jake -&gt; grunt/gulp<br>更好的开发工具：? -&gt; webpack live reloading -&gt; time travelling debugger (elm)<br>更成熟的语言：es3 -&gt; es5 -&gt; es6 -&gt; es7 -&gt; ??<br>更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -&gt; dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)<br>更好的性能分析（profile）工具： 手工 profile -&gt; google chrome profiling tool -&gt; ??<br>更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -&gt; google chrome profiling tool / heapdump / mdb (solaris)-&gt; ??</p>\n<p>后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：</p>\n<p>摩尔定律终结：scale up -&gt; scale out（high scalable）；C10K -&gt; C10M（high concurrency）<br>计算的单元越来越小：Bare metal -&gt; VM -&gt; container -&gt; ?<br>计算的容量越来越大：single machine -&gt; cluster -&gt; computing pool (mesos/yarn)<br>需要分析的数据越来越多：hadoop -&gt; spark / flink<br>网络的速度越来越快，吞吐量越来越大：10M -&gt; 100M -&gt; 1G -&gt; 10G -&gt; 100G<br>人工智能/机器学习的门槛越来越低：Caffle -&gt; TensorFlow；apache mahout -&gt; PredictionIO</p>\n<p>后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。</p>\n<h3 id=\"产品观\"><a href=\"#产品观\" class=\"headerlink\" title=\"产品观\"></a>产品观</h3><p>工程师有了技术观还远远不够，产品观是接下来需要着力培养的。</p>\n<p>产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。</p>\n<p>比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件<br>重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面<br>用户设置密码后，可以用新密码登录</p>\n<p>这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。</p>\n<p>然而，这样一个简单的功能，有人会把它做成这样：</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码<br>用户使用这个随机密码登录</p>\n<p>即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。</p>\n<p>有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。</p>\n<p>如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：</p>\n<p>能够从一切可以学习的案例中学习其产品和功能设定的门道；<br>对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；<br>对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。</p>\n<p>限于篇幅，这个话题就不展开谈了。</p>\n<h3 id=\"数据观\"><a href=\"#数据观\" class=\"headerlink\" title=\"数据观\"></a>数据观</h3><p>数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。<br><img src=\"604bf4b4226f180ff45fa8bce5874793_b.png\" alt=\"build - measure - learn 的循环\"><br>当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：<br><img src=\"444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg\" alt><br>所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：<br><img src=\"7e79f43fc4c4cfa8426a2008080842d6_b.jpg\" alt><br>这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。</p>\n<p>以上是从用户的维度看如何测量。</p>\n<p>从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。</p>\n<p>测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。</p>\n<p>分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。</p>\n<p>作者：陈天<br>链接：<a href=\"https://zhuanlan.zhihu.com/p/20916291\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/20916291</a><br>来源：知乎</p>"},{"title":"第一章 信息化知识","date":"2016-11-04T15:57:33.000Z","comments":1,"toc":true,"_content":"\n# 信息与信息化\n信息技术不断创新，信息产业持续发展，信息网络广泛普及，信息化成为全球经济社会发展的显著特征。在信息技术的推动下，人类社会已经并正在加速进入全新发展时期，基于智能、网络和大数据的新经济业态正在形成，而“融合”是这个时期的主要特征，表现为信息技术和工业制造深度融合、人和机器的融合、信息资源和材料源的融合。在这个形式下，世界政治、经济、产业、文化和军事发展模式的竞争新格局必将重塑。而教育、医疗、公开服务、社会交往走向全局智能，极大地改变人们生活方式和行为模式。\n<!--more-->\n## 信息\n### 基本概念\n信息是客观事物状态和运动特征的一种普遍形式，客观世界中大量地存在、产生和传递以这些方式表示出来的各种各样的信息；\n***维纳认为：信息就是信息，既不是物质也不是能量***\n***香农认为：信息就是能够用来消除不确定性的东西。***\n***哲学界认为：信息是事物普遍联系的方式***\n***事物本体论信息：事物的运动状态和状态变化方式的自我表述***\n### 信息传输模型\n![](20161104112204.png)\n- 1、信源\n- 2、信宿\n- 3、信道\n- 4、编码器\n- 5、译码器\n- 6、噪声\n\n### 信息质量属性\n- 1、精确性，对事物状态描述的精准程度\n- 2、完整性，对事物状态描述的全面程度，完整信息应包括所有重要事实\n- 3、可靠性，指信息的来源，采集方法，传输过程，是可以信任的，符合预期的\n- 4、及时性，获取信息的时刻与事件发生的时刻的间隔长短。\n- 5、经济性，指信息的获取，传输带来的的成本可以在接受范围内\n- 6、可验证性，指信息的主要质量属性可以被证实或者证伪程度\n- 7、安全性，指信息在生命周期中，信息可以被非授权访问的可能性，可能性越低，安全越高\n\n## 信息系统\n### 基本概念\n系统是指一系列相互影响、相互联系的若干组成部件，在规则的约束下构成有机整体，这个整体具有其各个组成部件所有没有的新的性质和功能，并可以和其他系统或者外部环境发生交互作用。\n### 特点\n- 1、目的性\n - 系统都有目标性，目标性决定功能\n- 2、可嵌套性\n - 系统可以包含若干子系统，系统间也能够耦合成一个更大的系统\n- 3、稳定性\n - 受规则的约束，系统的内部结构和秩序应是可以预见的；系统的状态以及演化路径有限并能被预测；系统功能发生作用导致的后果也是可以预见的。\n- 4、开放性\n - 指系统的可访问性，这个特性决定了系统可以被外部环境识别，外部环境或者其他系统可以按照预定的方法，使用系统的功能或者影响系统的行为。\n- 5、脆弱性\n - 与系统的稳定性相对应，即系统可能存在着丧失结构、功能、秩序的特性，这个特性往往是隐藏的不宜被外界感知。一旦被侵入、整体性会被破坏、甚至面临崩溃、系统瓦解\n- 6、健壮性\n - 具有能够抵御出现非预期状态的特性，高可用系统会采用冗余技术、容错技术、身份识别技术、可靠性技术等来抵御出现非预期的状态，保持系统的稳定性\n\n### 定义\n信息系统是一种以处理信息为目的的专门的系统类型。\n### 生命周期\n- 1、立项（系统规则）\n- 2、开发（系统分析、系统设计、系统实施）\n- 3、运维\n- 4、消亡\n\n## 信息化\n- 1、产品信息化\n - 传统产品融合计算机化（智能化）器件，使产品具有处理信息的能力\n- 2、企业信息化\n - 企业在产品设计、开发、生成、管理、经营等多个环节利用信息技术，辅助生产制造，优化工作流程，管理客户关系，建设企业信息管理系统，培养信息化人才并建设完善信息化管理制度（ERP、CRM、SCM）\n- 3、产业信息化\n - 指农业、工业、交通运输业、生产制造业、服务业等传统产业利用信息技术完成工艺、产品信息化、进一步提高生产力水平\n- 4、国民经济信息话\n - 指在经济大系统内实现统一的信息大流动，使金融、贸易、投资、计划、通关、营销等组成一个信息大系统，使生产、流通、分配、消费等经济的四个环节通过信息进一步炼成要给整体\n- 5、社会生活信息化\n - 商务、教育、政务、公共服务、交通、日常生活等在内的整个社会体系采用先进的信息技术，融合各种信息网络，大力开发有关人们日常生活信息服务，丰富人们的物质、精神生活、拓展人们活动时空\n\n## 国家信息化体系要素\n“十二五”期间，“智慧城市”作为新兴的国家级战略规划。\n- 1、两网\n - 政务内网，政务外网\n- 2、一站\n - 政府门户网站\n- 3、四库\n - 建立人口、法人单位、空间地理和自然资源、宏观经济等四个基础数据库\n- 4、十二金\n - 以“金”字冠名的12个重点业务系统:金宏、金税、金关、金财、金融监管、金审、金盾、金宝、金农、金水、金质\n \n### 信息化体系六要素\n- 1、信息技术应用\n- 2、信息资源\n- 3、信息网络\n- 4、信息技术和产业\n- 5、信息化人才\n- 6、信息化法规政策和标准规范\n***信息技术是龙头，信息资源开发利用是国家信息化核心任务，信息网络、信息技术产业是基础、信息化人才是成功之本，法规规范是国家信息化快速、持续、有序、健康发展的根本保障***\n## 发展趋势\n“十三五”规划纲要中，将培育人工智能、移动智能终端、第五代移动通信（5G）、先进传感器等作为新一代信息技术产业创新重点发展，拓展新兴产业发展空间。\n发展的10个方面：\n- 1、高速度大容量\n- 2、集成化和平台化\n- 3、智能化\n- 4、虚拟计算\n- 5、通信技术\n- 6、遥感和传感技术\n- 7、移动智能终端\n- 8、以人为本\n- 9、信息安全\n- 10、两化融合\n\n# 国家信息化战略和规划\n## 国家信息化战略目标\n2006~2020年期间，综合信息基础设施基本普及，信息技术自主创新能力显著增强，信息产业结构全面优化，国家信息安全保障水平大幅提高，国民经济和社会信息化取得明显成效，新型工业化发展模式初步确立，国家信息化发展的制度环境和政策体系基本完善，国民信息技术应用的能力显著提高，为迈向信息社会奠定坚实基础\n- 1、促进经济增长方式的根本转变\n- 2、实现信息技术自主创新、信息产业发展的跨越\n- 3、提升网络普及水平\n- 4、增强政府公共服务能力、社会主义先进文化传播能力、中国特色的军事变革能力和国民信息技术应用能力\n\n## 信息化的指导思想和基本原则\n- 1、指导思想 \n - 以邓小平理论、“三个代表”重要思想和科学发展观为指导，把加快信息化建设作为促进发展方式转变的重要途径，把扩大信息技术应用作为构建现代化产业体系的重大举措，把提高信息服务能力作为保障和改善民生的有力支撑。加强统筹规划、坚持科学发展、以企业为主体、市场为导向，积极推进下一代信息基础设施建设，推动信息化与工业化深度融合，着力突破技术和产业瓶颈，切实增强信息安全保障能力大幅提升信息化水平，为促进经济社会持续发展作出贡献。\n- 2、基本原则\n - 1、统筹发展，有序推进\n - 2、需求牵引，市场导向\n - 3、完善机制、创新驱动\n - 4、加强管理，保障安全\n \n ## 发展主要任务和发展重点\n- 1、促进工业领域信息化深度应用\n - 1、推进信息技术在工业领域全面普及\n - 2、推动综合集成应用和业务协同创新\n - 3、加快制造业服务化进程\n - 4、推广节能减排信息技术\n - 5、建立两化融合服务支撑体系\n- 2、加快推进服务业信息化\n - 1、引导电子商务健康发展\n - 2、提示物流信息化水平\n - 3、提供服务业重点领域信息化水平\n- 3、积极提高中小企业信息化应用水平\n - 1、深化中小企业信息技术应用\n - 2、继续实施中小企业信息化推进工程\n- 4、协力推进农业农村信息化\n - 1、完善农村综合信息服务体系\n - 2、加强涉农信息资源整合\n- 5、全面深化电子政务应用\n - 1、推进信息技术与政务工作深度融合\n - 2、提示基层电子政务服务能力\n - 3、提高社会管理信息化水平\n- 6、稳步提高社会事业信息化水平\n - 1、大力提高教育信息化水平\n - 2、加快医疗卫生信息化建设\n - 3、构建覆盖城乡居民的就业和社会保障信息服务体系\n- 7、统筹城镇化与信息化互动发展\n - 1、提高城市运行管理的智能化水平\n - 2、推进社区信息化\n - 3、提高公共安全信息化管理水平\n- 8、加强信息资源开发利用\n - 1、提高政务信息资源共享能力\n - 2、加大公益性信息资源利用力度\n - 3、发展先进网络化\n - 4、壮大数字内容产业\n- 9、构建下一代国家综合信息基础设施\n - 1、加快宽带网络化升级和区域协调发展\n - 2、促进下一代互联网规模商用和前沿布局\n - 3、建设安全可靠的信息应用基础设施\n - 4、加快推进三网融合\n - 5、优化国际通信网络布局\n- 10、促进重要领域基础设施智能化改造升级\n - 1、加快建设智能电网\n - 2、提高综合交通运输体系智能化水平\n - 3、提示基层性资源信息化管理水平\n- 11、着力提高国民信息能力\n - 1、积极开展国民信息技术教育和培训\n - 2、培养信息化人才队伍\n- 12、加强网络与信息安全保障体系建设\n - 1、确保基础信息网络和重要信息系统安全\n - 2、强化信息安全基础\n - 3、加强信息内容安全管理\n \n# 电子政务\n## 概念和内容\n### 概念\n电子政务是指政府机构在其管理和服务职能中运用现代信息技术，实现政府组织结构和工作流程的重组优化，超越时间、空间和部门分割的制约，建成一个精简、高效、廉洁、公平的政府运作模式\n### 内容\n- 1、政府间的电子政务（G2G）\n- 2、政府对企业的电子政务（G2B）\n- 3、政府对公众的电子政务（G2C）\n- 4、政府对公务员（G2E）\n\n#  企业信息化和两化深度融合\n## 企业信息化概述\n- 1、概念\n - 在企业作业、管理、决策的各个层面，科学计算、过程控制、事物处理、经营管理的各个领域，引进现代信息技术，全面改革管理体制和机制，从而大幅提高企业工作效率、市场竞争能力和经济效益\n- 2、从两化融合到2025中国制造\n- 3、战略要点\n - 1、以信息化带动工业化\n - 2、信息化与企业业务全过程的融合、渗透\n - 3、信息产业与企业信息良性互动\n - 4、充分发挥政府的引导作用\n - 5、高度重视信息安全\n - 6、企业信息化与企业的改组改造和现成现代企业制度有机结合\n - 7、因地制宜推进企业信息化\n \n## 企业资源计划（ERP）\n- 1、概念\n - 由MRP演变并结合计算机技术快速发展而来，大致经历了4个阶段，基本MRP（物料需求计划）、闭环MRP、MRPII、ERP。\n - 从MRP中引入质量管理、设备管理、财务管理和人力资源管理，形成统一的企业资源计划ERP\n - 一般来说，ERP是一个以财务会记为核心的信息系统，用来识别和规划企业资源，对采购，生产，成本，库存，销售，运输，财务和人力资源等进行规划和优化，从而达到最佳资源组合，是企业利润最大化\n \n## 客户关系管理（CRM）\n- 1、概念\n - CRM是一个集成化的信息管理系统，它存储了企业现有和潜在的客户信息，并且对这些信息自动的处理从而产生更人性市场管理策略\n\n## 供应链管理（SCM）\n- 1、概念\n - 供应链管理是一种集成的管理思想和方法，是在满足服务水平要求的同时，为了使系统成本到达最低而采用的将供应商、制造商、仓库和商店有效的结合成一体来生产商品，有效地控制和管理各种信息流、资金流、和物流，并把正确数量的商品在正确的时间配送到正确的地点的一套管理方法。\n\n## 电子商务\n- 1、概念\n - 以信息网络技术为手段，以商品交换为中心的商务活动；也可以理解为通过网络以电子交易方式进行交易活动和相关服务的活动是传统商业活动各环节的电子化、网络化、信息化。\n- 2、电子商务类型\n - 1、B2B（企业与企业之间的电子商务）\n - 2、B2C（企业与消费者之间的电子商务）\n - 3、C2C（消费者与消费者之间的电子商务）\n - 4、020（线上购买线下的商品和服务）\n\n# 商业智能\n- 1、概念\n - 组织中现有的数据转化为知识，帮助组织做出明智的业务经营决策\n - 为了将数据转化为知识，需要利用数据仓库，联机分析处理（OLAP）工具和数据挖掘等技术，因此，从技术层面上讲，商业智能不是什么新技术，他只是数据仓库，OLAP和数据集挖掘等技术的综合运用\n- 2、主要功能\n - 1、数据仓库：高效的数据存储和访问方式。提供结构化和非机构化的数据存储\n - 2、数据ETL：ETL是数据抽取、清洗、转换、装载\n - 3、数据统计输出\n - 4、分析功能：通过业务规则形成分析内容，帮助做出正确的判断和决策。\n- 3、实现的三个层次\n - 1、数据报表\n - 2、多维数据分析\n - 3、数据挖掘\n\n# 新一代信息技术应用\n## 大数据\n- 1、特点\n - 1、大量\n - 2、高速\n - 3、多样\n - 4、价值\n - 5、真实性\n- 2 关键技术\n - 1、大数据存储管理技术\n   - 谷歌文件系统（GFS）和Hadoop的分布式文件系统HDFS\n - 2、大数据并行分析技术\n   - MapReduce\n - 3、大数据分析技术\n\n## 云计算\n- 1、概念\n - 基于互联网的计算方式，通过这种方式，在网络上配置共享的软件资源、计算资源、存储资源和信息资源可以按需求提供给网上终端设备和终端用户。\n- 2、服务类型\n - 1、LaaS(基础设施即服务)\n - 2、PaaS(平台即服务)\n - 3、SaaS(软件即服务)\n- 3、关键技术\n - 1、基础设施关键技术\n   - 云计算采用X86系列刀片式服务器，通过虚拟化形成统一的服务器资源。\n - 2、操作系统关键技术\n   - 资源池管理技术和向用户提供大规模存储、计算能力的分布式任务和数据管理技术。\n\n## 互联网+\n- 1、“互联网+”是经济发展的新形态\n - 是互联网思维的进一步实践成果，它代表一种先进的生产力，推动经济形态不断的发生演变。\n - “互联网+”是把互联网的创新成果与经济社会各领域深度融合，推动技术进步、效率提升和组织变革、提升实体经济创新力和生产力，现成更广泛的以互联网为基础设施和创新要素的经济社会发展新形态。\n \n## 智慧城市\n- 1、智慧城市的内涵和意义\n - 推动政府智能转变、推进社会管理创新的新方法、目标是使得基础设施更加智能、公共服务更加便捷、社会管理更加精细、生态环境更加宜居、产业体系更加优化\n- 2、智慧城市参考模型\n![智慧城市参考模型](20161105163604.png)\n - 1、功能层\n   - 1、物理感知层\n   - 2、通信网络层\n   - 3、计算与存储层\n   - 4、数据及服务支撑层\n   - 5、智慧应用层\n - 2、支撑体系\n   - 1、完全保障体系\n   - 2、建设和运营管理体系\n   - 3、标准规范体系\n - 3、指导思想、基本原则、和主要目标\n   - 1、指导思想\n     - 按照走集约、智能、绿色、低碳的新型城镇化道路的总体要求，发货市场在资源配置中的决定性作用，加强和完善政府引导，统筹物资，信息和智力资源，推动新一代信息技术创新应用，加强城市管理和服务体系智能化建设，积极发展民生服务智慧应用，强化网络安全保障。\n  - 2、基本原则\n    - 1、以人为本，务实推进\n    - 2、因地制宜，科学有序\n    - 3、市场为主，协同创新\n    - 4、可管可控，确保安全\n  - 3、主要目标\n   - 到2020年，建成一批特色鲜明的智慧城市，聚集和辐射带动作用大幅增强，综合竞争优势明显提高，保障和改善民生服务、创新社会管理、维护网络安全等方面取得显著成效\n   - 1、公共服务便捷化\n   - 2、城市管理精细化\n   - 3、生活环境宜居化\n   - 4、基础设施智能化\n   - 5、网络安全长效化\n  - 4、建设关键\n    - 1、科学制定智慧城市建设顶层设计\n     - 1、加强顶层设计\n\t - 2、推动构建普惠化公共服务体系\n\t - 3、支撑建立精细化社会管理体系\n\t - 4、促进宜居化生活环境建设\n\t - 5、建立现代化产业发展体系\n\t - 6、加快建设智能化基础设施\n    - 2、切实加大信息资源开发共享力度\n\t - 1、加快推进信息资源共享与更新\n     - 2、深化重点领域信息资源开发利用\n    - 3、积极运用新技术新业态\n     - 1、加快重点领域物联网应用   \n\t - 2、促进云计算和大数据健康发展\n\t - 3、推动信息技术集成应用\n    - 4、着力加强网络信息安全管理和能力建设\n     - 1、严格全流程网络安全管理\n\t - 2、加强要害信息设施和信息资源安全防护\n\t - 3、强化安全责任和安全意识\n    - 5、智慧城市典型应用\n     - 1、公共事业智能化\n\t - 2、城市智能交通\n     - 3、城市应急联动","source":"_posts/第一章 信息化知识.md","raw":"---\ntitle: 第一章 信息化知识\ndate: 2016-11-04 23:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 信息与信息化\n信息技术不断创新，信息产业持续发展，信息网络广泛普及，信息化成为全球经济社会发展的显著特征。在信息技术的推动下，人类社会已经并正在加速进入全新发展时期，基于智能、网络和大数据的新经济业态正在形成，而“融合”是这个时期的主要特征，表现为信息技术和工业制造深度融合、人和机器的融合、信息资源和材料源的融合。在这个形式下，世界政治、经济、产业、文化和军事发展模式的竞争新格局必将重塑。而教育、医疗、公开服务、社会交往走向全局智能，极大地改变人们生活方式和行为模式。\n<!--more-->\n## 信息\n### 基本概念\n信息是客观事物状态和运动特征的一种普遍形式，客观世界中大量地存在、产生和传递以这些方式表示出来的各种各样的信息；\n***维纳认为：信息就是信息，既不是物质也不是能量***\n***香农认为：信息就是能够用来消除不确定性的东西。***\n***哲学界认为：信息是事物普遍联系的方式***\n***事物本体论信息：事物的运动状态和状态变化方式的自我表述***\n### 信息传输模型\n![](20161104112204.png)\n- 1、信源\n- 2、信宿\n- 3、信道\n- 4、编码器\n- 5、译码器\n- 6、噪声\n\n### 信息质量属性\n- 1、精确性，对事物状态描述的精准程度\n- 2、完整性，对事物状态描述的全面程度，完整信息应包括所有重要事实\n- 3、可靠性，指信息的来源，采集方法，传输过程，是可以信任的，符合预期的\n- 4、及时性，获取信息的时刻与事件发生的时刻的间隔长短。\n- 5、经济性，指信息的获取，传输带来的的成本可以在接受范围内\n- 6、可验证性，指信息的主要质量属性可以被证实或者证伪程度\n- 7、安全性，指信息在生命周期中，信息可以被非授权访问的可能性，可能性越低，安全越高\n\n## 信息系统\n### 基本概念\n系统是指一系列相互影响、相互联系的若干组成部件，在规则的约束下构成有机整体，这个整体具有其各个组成部件所有没有的新的性质和功能，并可以和其他系统或者外部环境发生交互作用。\n### 特点\n- 1、目的性\n - 系统都有目标性，目标性决定功能\n- 2、可嵌套性\n - 系统可以包含若干子系统，系统间也能够耦合成一个更大的系统\n- 3、稳定性\n - 受规则的约束，系统的内部结构和秩序应是可以预见的；系统的状态以及演化路径有限并能被预测；系统功能发生作用导致的后果也是可以预见的。\n- 4、开放性\n - 指系统的可访问性，这个特性决定了系统可以被外部环境识别，外部环境或者其他系统可以按照预定的方法，使用系统的功能或者影响系统的行为。\n- 5、脆弱性\n - 与系统的稳定性相对应，即系统可能存在着丧失结构、功能、秩序的特性，这个特性往往是隐藏的不宜被外界感知。一旦被侵入、整体性会被破坏、甚至面临崩溃、系统瓦解\n- 6、健壮性\n - 具有能够抵御出现非预期状态的特性，高可用系统会采用冗余技术、容错技术、身份识别技术、可靠性技术等来抵御出现非预期的状态，保持系统的稳定性\n\n### 定义\n信息系统是一种以处理信息为目的的专门的系统类型。\n### 生命周期\n- 1、立项（系统规则）\n- 2、开发（系统分析、系统设计、系统实施）\n- 3、运维\n- 4、消亡\n\n## 信息化\n- 1、产品信息化\n - 传统产品融合计算机化（智能化）器件，使产品具有处理信息的能力\n- 2、企业信息化\n - 企业在产品设计、开发、生成、管理、经营等多个环节利用信息技术，辅助生产制造，优化工作流程，管理客户关系，建设企业信息管理系统，培养信息化人才并建设完善信息化管理制度（ERP、CRM、SCM）\n- 3、产业信息化\n - 指农业、工业、交通运输业、生产制造业、服务业等传统产业利用信息技术完成工艺、产品信息化、进一步提高生产力水平\n- 4、国民经济信息话\n - 指在经济大系统内实现统一的信息大流动，使金融、贸易、投资、计划、通关、营销等组成一个信息大系统，使生产、流通、分配、消费等经济的四个环节通过信息进一步炼成要给整体\n- 5、社会生活信息化\n - 商务、教育、政务、公共服务、交通、日常生活等在内的整个社会体系采用先进的信息技术，融合各种信息网络，大力开发有关人们日常生活信息服务，丰富人们的物质、精神生活、拓展人们活动时空\n\n## 国家信息化体系要素\n“十二五”期间，“智慧城市”作为新兴的国家级战略规划。\n- 1、两网\n - 政务内网，政务外网\n- 2、一站\n - 政府门户网站\n- 3、四库\n - 建立人口、法人单位、空间地理和自然资源、宏观经济等四个基础数据库\n- 4、十二金\n - 以“金”字冠名的12个重点业务系统:金宏、金税、金关、金财、金融监管、金审、金盾、金宝、金农、金水、金质\n \n### 信息化体系六要素\n- 1、信息技术应用\n- 2、信息资源\n- 3、信息网络\n- 4、信息技术和产业\n- 5、信息化人才\n- 6、信息化法规政策和标准规范\n***信息技术是龙头，信息资源开发利用是国家信息化核心任务，信息网络、信息技术产业是基础、信息化人才是成功之本，法规规范是国家信息化快速、持续、有序、健康发展的根本保障***\n## 发展趋势\n“十三五”规划纲要中，将培育人工智能、移动智能终端、第五代移动通信（5G）、先进传感器等作为新一代信息技术产业创新重点发展，拓展新兴产业发展空间。\n发展的10个方面：\n- 1、高速度大容量\n- 2、集成化和平台化\n- 3、智能化\n- 4、虚拟计算\n- 5、通信技术\n- 6、遥感和传感技术\n- 7、移动智能终端\n- 8、以人为本\n- 9、信息安全\n- 10、两化融合\n\n# 国家信息化战略和规划\n## 国家信息化战略目标\n2006~2020年期间，综合信息基础设施基本普及，信息技术自主创新能力显著增强，信息产业结构全面优化，国家信息安全保障水平大幅提高，国民经济和社会信息化取得明显成效，新型工业化发展模式初步确立，国家信息化发展的制度环境和政策体系基本完善，国民信息技术应用的能力显著提高，为迈向信息社会奠定坚实基础\n- 1、促进经济增长方式的根本转变\n- 2、实现信息技术自主创新、信息产业发展的跨越\n- 3、提升网络普及水平\n- 4、增强政府公共服务能力、社会主义先进文化传播能力、中国特色的军事变革能力和国民信息技术应用能力\n\n## 信息化的指导思想和基本原则\n- 1、指导思想 \n - 以邓小平理论、“三个代表”重要思想和科学发展观为指导，把加快信息化建设作为促进发展方式转变的重要途径，把扩大信息技术应用作为构建现代化产业体系的重大举措，把提高信息服务能力作为保障和改善民生的有力支撑。加强统筹规划、坚持科学发展、以企业为主体、市场为导向，积极推进下一代信息基础设施建设，推动信息化与工业化深度融合，着力突破技术和产业瓶颈，切实增强信息安全保障能力大幅提升信息化水平，为促进经济社会持续发展作出贡献。\n- 2、基本原则\n - 1、统筹发展，有序推进\n - 2、需求牵引，市场导向\n - 3、完善机制、创新驱动\n - 4、加强管理，保障安全\n \n ## 发展主要任务和发展重点\n- 1、促进工业领域信息化深度应用\n - 1、推进信息技术在工业领域全面普及\n - 2、推动综合集成应用和业务协同创新\n - 3、加快制造业服务化进程\n - 4、推广节能减排信息技术\n - 5、建立两化融合服务支撑体系\n- 2、加快推进服务业信息化\n - 1、引导电子商务健康发展\n - 2、提示物流信息化水平\n - 3、提供服务业重点领域信息化水平\n- 3、积极提高中小企业信息化应用水平\n - 1、深化中小企业信息技术应用\n - 2、继续实施中小企业信息化推进工程\n- 4、协力推进农业农村信息化\n - 1、完善农村综合信息服务体系\n - 2、加强涉农信息资源整合\n- 5、全面深化电子政务应用\n - 1、推进信息技术与政务工作深度融合\n - 2、提示基层电子政务服务能力\n - 3、提高社会管理信息化水平\n- 6、稳步提高社会事业信息化水平\n - 1、大力提高教育信息化水平\n - 2、加快医疗卫生信息化建设\n - 3、构建覆盖城乡居民的就业和社会保障信息服务体系\n- 7、统筹城镇化与信息化互动发展\n - 1、提高城市运行管理的智能化水平\n - 2、推进社区信息化\n - 3、提高公共安全信息化管理水平\n- 8、加强信息资源开发利用\n - 1、提高政务信息资源共享能力\n - 2、加大公益性信息资源利用力度\n - 3、发展先进网络化\n - 4、壮大数字内容产业\n- 9、构建下一代国家综合信息基础设施\n - 1、加快宽带网络化升级和区域协调发展\n - 2、促进下一代互联网规模商用和前沿布局\n - 3、建设安全可靠的信息应用基础设施\n - 4、加快推进三网融合\n - 5、优化国际通信网络布局\n- 10、促进重要领域基础设施智能化改造升级\n - 1、加快建设智能电网\n - 2、提高综合交通运输体系智能化水平\n - 3、提示基层性资源信息化管理水平\n- 11、着力提高国民信息能力\n - 1、积极开展国民信息技术教育和培训\n - 2、培养信息化人才队伍\n- 12、加强网络与信息安全保障体系建设\n - 1、确保基础信息网络和重要信息系统安全\n - 2、强化信息安全基础\n - 3、加强信息内容安全管理\n \n# 电子政务\n## 概念和内容\n### 概念\n电子政务是指政府机构在其管理和服务职能中运用现代信息技术，实现政府组织结构和工作流程的重组优化，超越时间、空间和部门分割的制约，建成一个精简、高效、廉洁、公平的政府运作模式\n### 内容\n- 1、政府间的电子政务（G2G）\n- 2、政府对企业的电子政务（G2B）\n- 3、政府对公众的电子政务（G2C）\n- 4、政府对公务员（G2E）\n\n#  企业信息化和两化深度融合\n## 企业信息化概述\n- 1、概念\n - 在企业作业、管理、决策的各个层面，科学计算、过程控制、事物处理、经营管理的各个领域，引进现代信息技术，全面改革管理体制和机制，从而大幅提高企业工作效率、市场竞争能力和经济效益\n- 2、从两化融合到2025中国制造\n- 3、战略要点\n - 1、以信息化带动工业化\n - 2、信息化与企业业务全过程的融合、渗透\n - 3、信息产业与企业信息良性互动\n - 4、充分发挥政府的引导作用\n - 5、高度重视信息安全\n - 6、企业信息化与企业的改组改造和现成现代企业制度有机结合\n - 7、因地制宜推进企业信息化\n \n## 企业资源计划（ERP）\n- 1、概念\n - 由MRP演变并结合计算机技术快速发展而来，大致经历了4个阶段，基本MRP（物料需求计划）、闭环MRP、MRPII、ERP。\n - 从MRP中引入质量管理、设备管理、财务管理和人力资源管理，形成统一的企业资源计划ERP\n - 一般来说，ERP是一个以财务会记为核心的信息系统，用来识别和规划企业资源，对采购，生产，成本，库存，销售，运输，财务和人力资源等进行规划和优化，从而达到最佳资源组合，是企业利润最大化\n \n## 客户关系管理（CRM）\n- 1、概念\n - CRM是一个集成化的信息管理系统，它存储了企业现有和潜在的客户信息，并且对这些信息自动的处理从而产生更人性市场管理策略\n\n## 供应链管理（SCM）\n- 1、概念\n - 供应链管理是一种集成的管理思想和方法，是在满足服务水平要求的同时，为了使系统成本到达最低而采用的将供应商、制造商、仓库和商店有效的结合成一体来生产商品，有效地控制和管理各种信息流、资金流、和物流，并把正确数量的商品在正确的时间配送到正确的地点的一套管理方法。\n\n## 电子商务\n- 1、概念\n - 以信息网络技术为手段，以商品交换为中心的商务活动；也可以理解为通过网络以电子交易方式进行交易活动和相关服务的活动是传统商业活动各环节的电子化、网络化、信息化。\n- 2、电子商务类型\n - 1、B2B（企业与企业之间的电子商务）\n - 2、B2C（企业与消费者之间的电子商务）\n - 3、C2C（消费者与消费者之间的电子商务）\n - 4、020（线上购买线下的商品和服务）\n\n# 商业智能\n- 1、概念\n - 组织中现有的数据转化为知识，帮助组织做出明智的业务经营决策\n - 为了将数据转化为知识，需要利用数据仓库，联机分析处理（OLAP）工具和数据挖掘等技术，因此，从技术层面上讲，商业智能不是什么新技术，他只是数据仓库，OLAP和数据集挖掘等技术的综合运用\n- 2、主要功能\n - 1、数据仓库：高效的数据存储和访问方式。提供结构化和非机构化的数据存储\n - 2、数据ETL：ETL是数据抽取、清洗、转换、装载\n - 3、数据统计输出\n - 4、分析功能：通过业务规则形成分析内容，帮助做出正确的判断和决策。\n- 3、实现的三个层次\n - 1、数据报表\n - 2、多维数据分析\n - 3、数据挖掘\n\n# 新一代信息技术应用\n## 大数据\n- 1、特点\n - 1、大量\n - 2、高速\n - 3、多样\n - 4、价值\n - 5、真实性\n- 2 关键技术\n - 1、大数据存储管理技术\n   - 谷歌文件系统（GFS）和Hadoop的分布式文件系统HDFS\n - 2、大数据并行分析技术\n   - MapReduce\n - 3、大数据分析技术\n\n## 云计算\n- 1、概念\n - 基于互联网的计算方式，通过这种方式，在网络上配置共享的软件资源、计算资源、存储资源和信息资源可以按需求提供给网上终端设备和终端用户。\n- 2、服务类型\n - 1、LaaS(基础设施即服务)\n - 2、PaaS(平台即服务)\n - 3、SaaS(软件即服务)\n- 3、关键技术\n - 1、基础设施关键技术\n   - 云计算采用X86系列刀片式服务器，通过虚拟化形成统一的服务器资源。\n - 2、操作系统关键技术\n   - 资源池管理技术和向用户提供大规模存储、计算能力的分布式任务和数据管理技术。\n\n## 互联网+\n- 1、“互联网+”是经济发展的新形态\n - 是互联网思维的进一步实践成果，它代表一种先进的生产力，推动经济形态不断的发生演变。\n - “互联网+”是把互联网的创新成果与经济社会各领域深度融合，推动技术进步、效率提升和组织变革、提升实体经济创新力和生产力，现成更广泛的以互联网为基础设施和创新要素的经济社会发展新形态。\n \n## 智慧城市\n- 1、智慧城市的内涵和意义\n - 推动政府智能转变、推进社会管理创新的新方法、目标是使得基础设施更加智能、公共服务更加便捷、社会管理更加精细、生态环境更加宜居、产业体系更加优化\n- 2、智慧城市参考模型\n![智慧城市参考模型](20161105163604.png)\n - 1、功能层\n   - 1、物理感知层\n   - 2、通信网络层\n   - 3、计算与存储层\n   - 4、数据及服务支撑层\n   - 5、智慧应用层\n - 2、支撑体系\n   - 1、完全保障体系\n   - 2、建设和运营管理体系\n   - 3、标准规范体系\n - 3、指导思想、基本原则、和主要目标\n   - 1、指导思想\n     - 按照走集约、智能、绿色、低碳的新型城镇化道路的总体要求，发货市场在资源配置中的决定性作用，加强和完善政府引导，统筹物资，信息和智力资源，推动新一代信息技术创新应用，加强城市管理和服务体系智能化建设，积极发展民生服务智慧应用，强化网络安全保障。\n  - 2、基本原则\n    - 1、以人为本，务实推进\n    - 2、因地制宜，科学有序\n    - 3、市场为主，协同创新\n    - 4、可管可控，确保安全\n  - 3、主要目标\n   - 到2020年，建成一批特色鲜明的智慧城市，聚集和辐射带动作用大幅增强，综合竞争优势明显提高，保障和改善民生服务、创新社会管理、维护网络安全等方面取得显著成效\n   - 1、公共服务便捷化\n   - 2、城市管理精细化\n   - 3、生活环境宜居化\n   - 4、基础设施智能化\n   - 5、网络安全长效化\n  - 4、建设关键\n    - 1、科学制定智慧城市建设顶层设计\n     - 1、加强顶层设计\n\t - 2、推动构建普惠化公共服务体系\n\t - 3、支撑建立精细化社会管理体系\n\t - 4、促进宜居化生活环境建设\n\t - 5、建立现代化产业发展体系\n\t - 6、加快建设智能化基础设施\n    - 2、切实加大信息资源开发共享力度\n\t - 1、加快推进信息资源共享与更新\n     - 2、深化重点领域信息资源开发利用\n    - 3、积极运用新技术新业态\n     - 1、加快重点领域物联网应用   \n\t - 2、促进云计算和大数据健康发展\n\t - 3、推动信息技术集成应用\n    - 4、着力加强网络信息安全管理和能力建设\n     - 1、严格全流程网络安全管理\n\t - 2、加强要害信息设施和信息资源安全防护\n\t - 3、强化安全责任和安全意识\n    - 5、智慧城市典型应用\n     - 1、公共事业智能化\n\t - 2、城市智能交通\n     - 3、城市应急联动","slug":"第一章 信息化知识","published":1,"updated":"2021-06-25T02:00:18.184Z","layout":"post","photos":[],"link":"","_id":"ckqjatoml002xqkl5drw4pnds","content":"<h1 id=\"信息与信息化\"><a href=\"#信息与信息化\" class=\"headerlink\" title=\"信息与信息化\"></a>信息与信息化</h1><p>信息技术不断创新，信息产业持续发展，信息网络广泛普及，信息化成为全球经济社会发展的显著特征。在信息技术的推动下，人类社会已经并正在加速进入全新发展时期，基于智能、网络和大数据的新经济业态正在形成，而“融合”是这个时期的主要特征，表现为信息技术和工业制造深度融合、人和机器的融合、信息资源和材料源的融合。在这个形式下，世界政治、经济、产业、文化和军事发展模式的竞争新格局必将重塑。而教育、医疗、公开服务、社会交往走向全局智能，极大地改变人们生活方式和行为模式。<br><a id=\"more\"></a></p>\n<h2 id=\"信息\"><a href=\"#信息\" class=\"headerlink\" title=\"信息\"></a>信息</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>信息是客观事物状态和运动特征的一种普遍形式，客观世界中大量地存在、产生和传递以这些方式表示出来的各种各样的信息；<br><strong><em>维纳认为：信息就是信息，既不是物质也不是能量</em></strong><br><strong><em>香农认为：信息就是能够用来消除不确定性的东西。</em></strong><br><strong><em>哲学界认为：信息是事物普遍联系的方式</em></strong><br><strong><em>事物本体论信息：事物的运动状态和状态变化方式的自我表述</em></strong></p>\n<h3 id=\"信息传输模型\"><a href=\"#信息传输模型\" class=\"headerlink\" title=\"信息传输模型\"></a>信息传输模型</h3><p><img src=\"20161104112204.png\" alt></p>\n<ul>\n<li>1、信源</li>\n<li>2、信宿</li>\n<li>3、信道</li>\n<li>4、编码器</li>\n<li>5、译码器</li>\n<li>6、噪声</li>\n</ul>\n<h3 id=\"信息质量属性\"><a href=\"#信息质量属性\" class=\"headerlink\" title=\"信息质量属性\"></a>信息质量属性</h3><ul>\n<li>1、精确性，对事物状态描述的精准程度</li>\n<li>2、完整性，对事物状态描述的全面程度，完整信息应包括所有重要事实</li>\n<li>3、可靠性，指信息的来源，采集方法，传输过程，是可以信任的，符合预期的</li>\n<li>4、及时性，获取信息的时刻与事件发生的时刻的间隔长短。</li>\n<li>5、经济性，指信息的获取，传输带来的的成本可以在接受范围内</li>\n<li>6、可验证性，指信息的主要质量属性可以被证实或者证伪程度</li>\n<li>7、安全性，指信息在生命周期中，信息可以被非授权访问的可能性，可能性越低，安全越高</li>\n</ul>\n<h2 id=\"信息系统\"><a href=\"#信息系统\" class=\"headerlink\" title=\"信息系统\"></a>信息系统</h2><h3 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>系统是指一系列相互影响、相互联系的若干组成部件，在规则的约束下构成有机整体，这个整体具有其各个组成部件所有没有的新的性质和功能，并可以和其他系统或者外部环境发生交互作用。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>1、目的性<ul>\n<li>系统都有目标性，目标性决定功能</li>\n</ul>\n</li>\n<li>2、可嵌套性<ul>\n<li>系统可以包含若干子系统，系统间也能够耦合成一个更大的系统</li>\n</ul>\n</li>\n<li>3、稳定性<ul>\n<li>受规则的约束，系统的内部结构和秩序应是可以预见的；系统的状态以及演化路径有限并能被预测；系统功能发生作用导致的后果也是可以预见的。</li>\n</ul>\n</li>\n<li>4、开放性<ul>\n<li>指系统的可访问性，这个特性决定了系统可以被外部环境识别，外部环境或者其他系统可以按照预定的方法，使用系统的功能或者影响系统的行为。</li>\n</ul>\n</li>\n<li>5、脆弱性<ul>\n<li>与系统的稳定性相对应，即系统可能存在着丧失结构、功能、秩序的特性，这个特性往往是隐藏的不宜被外界感知。一旦被侵入、整体性会被破坏、甚至面临崩溃、系统瓦解</li>\n</ul>\n</li>\n<li>6、健壮性<ul>\n<li>具有能够抵御出现非预期状态的特性，高可用系统会采用冗余技术、容错技术、身份识别技术、可靠性技术等来抵御出现非预期的状态，保持系统的稳定性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>信息系统是一种以处理信息为目的的专门的系统类型。</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><ul>\n<li>1、立项（系统规则）</li>\n<li>2、开发（系统分析、系统设计、系统实施）</li>\n<li>3、运维</li>\n<li>4、消亡</li>\n</ul>\n<h2 id=\"信息化\"><a href=\"#信息化\" class=\"headerlink\" title=\"信息化\"></a>信息化</h2><ul>\n<li>1、产品信息化<ul>\n<li>传统产品融合计算机化（智能化）器件，使产品具有处理信息的能力</li>\n</ul>\n</li>\n<li>2、企业信息化<ul>\n<li>企业在产品设计、开发、生成、管理、经营等多个环节利用信息技术，辅助生产制造，优化工作流程，管理客户关系，建设企业信息管理系统，培养信息化人才并建设完善信息化管理制度（ERP、CRM、SCM）</li>\n</ul>\n</li>\n<li>3、产业信息化<ul>\n<li>指农业、工业、交通运输业、生产制造业、服务业等传统产业利用信息技术完成工艺、产品信息化、进一步提高生产力水平</li>\n</ul>\n</li>\n<li>4、国民经济信息话<ul>\n<li>指在经济大系统内实现统一的信息大流动，使金融、贸易、投资、计划、通关、营销等组成一个信息大系统，使生产、流通、分配、消费等经济的四个环节通过信息进一步炼成要给整体</li>\n</ul>\n</li>\n<li>5、社会生活信息化<ul>\n<li>商务、教育、政务、公共服务、交通、日常生活等在内的整个社会体系采用先进的信息技术，融合各种信息网络，大力开发有关人们日常生活信息服务，丰富人们的物质、精神生活、拓展人们活动时空</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"国家信息化体系要素\"><a href=\"#国家信息化体系要素\" class=\"headerlink\" title=\"国家信息化体系要素\"></a>国家信息化体系要素</h2><p>“十二五”期间，“智慧城市”作为新兴的国家级战略规划。</p>\n<ul>\n<li>1、两网<ul>\n<li>政务内网，政务外网</li>\n</ul>\n</li>\n<li>2、一站<ul>\n<li>政府门户网站</li>\n</ul>\n</li>\n<li>3、四库<ul>\n<li>建立人口、法人单位、空间地理和自然资源、宏观经济等四个基础数据库</li>\n</ul>\n</li>\n<li>4、十二金<ul>\n<li>以“金”字冠名的12个重点业务系统:金宏、金税、金关、金财、金融监管、金审、金盾、金宝、金农、金水、金质</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"信息化体系六要素\"><a href=\"#信息化体系六要素\" class=\"headerlink\" title=\"信息化体系六要素\"></a>信息化体系六要素</h3><ul>\n<li>1、信息技术应用</li>\n<li>2、信息资源</li>\n<li>3、信息网络</li>\n<li>4、信息技术和产业</li>\n<li>5、信息化人才</li>\n<li>6、信息化法规政策和标准规范<br><strong><em>信息技术是龙头，信息资源开发利用是国家信息化核心任务，信息网络、信息技术产业是基础、信息化人才是成功之本，法规规范是国家信息化快速、持续、有序、健康发展的根本保障</em></strong><h2 id=\"发展趋势\"><a href=\"#发展趋势\" class=\"headerlink\" title=\"发展趋势\"></a>发展趋势</h2>“十三五”规划纲要中，将培育人工智能、移动智能终端、第五代移动通信（5G）、先进传感器等作为新一代信息技术产业创新重点发展，拓展新兴产业发展空间。<br>发展的10个方面：</li>\n<li>1、高速度大容量</li>\n<li>2、集成化和平台化</li>\n<li>3、智能化</li>\n<li>4、虚拟计算</li>\n<li>5、通信技术</li>\n<li>6、遥感和传感技术</li>\n<li>7、移动智能终端</li>\n<li>8、以人为本</li>\n<li>9、信息安全</li>\n<li>10、两化融合</li>\n</ul>\n<h1 id=\"国家信息化战略和规划\"><a href=\"#国家信息化战略和规划\" class=\"headerlink\" title=\"国家信息化战略和规划\"></a>国家信息化战略和规划</h1><h2 id=\"国家信息化战略目标\"><a href=\"#国家信息化战略目标\" class=\"headerlink\" title=\"国家信息化战略目标\"></a>国家信息化战略目标</h2><p>2006~2020年期间，综合信息基础设施基本普及，信息技术自主创新能力显著增强，信息产业结构全面优化，国家信息安全保障水平大幅提高，国民经济和社会信息化取得明显成效，新型工业化发展模式初步确立，国家信息化发展的制度环境和政策体系基本完善，国民信息技术应用的能力显著提高，为迈向信息社会奠定坚实基础</p>\n<ul>\n<li>1、促进经济增长方式的根本转变</li>\n<li>2、实现信息技术自主创新、信息产业发展的跨越</li>\n<li>3、提升网络普及水平</li>\n<li>4、增强政府公共服务能力、社会主义先进文化传播能力、中国特色的军事变革能力和国民信息技术应用能力</li>\n</ul>\n<h2 id=\"信息化的指导思想和基本原则\"><a href=\"#信息化的指导思想和基本原则\" class=\"headerlink\" title=\"信息化的指导思想和基本原则\"></a>信息化的指导思想和基本原则</h2><ul>\n<li>1、指导思想 <ul>\n<li>以邓小平理论、“三个代表”重要思想和科学发展观为指导，把加快信息化建设作为促进发展方式转变的重要途径，把扩大信息技术应用作为构建现代化产业体系的重大举措，把提高信息服务能力作为保障和改善民生的有力支撑。加强统筹规划、坚持科学发展、以企业为主体、市场为导向，积极推进下一代信息基础设施建设，推动信息化与工业化深度融合，着力突破技术和产业瓶颈，切实增强信息安全保障能力大幅提升信息化水平，为促进经济社会持续发展作出贡献。</li>\n</ul>\n</li>\n<li><p>2、基本原则</p>\n<ul>\n<li>1、统筹发展，有序推进</li>\n<li>2、需求牵引，市场导向</li>\n<li>3、完善机制、创新驱动</li>\n<li>4、加强管理，保障安全</li>\n</ul>\n<h2 id=\"发展主要任务和发展重点\"><a href=\"#发展主要任务和发展重点\" class=\"headerlink\" title=\"发展主要任务和发展重点\"></a>发展主要任务和发展重点</h2></li>\n<li>1、促进工业领域信息化深度应用<ul>\n<li>1、推进信息技术在工业领域全面普及</li>\n<li>2、推动综合集成应用和业务协同创新</li>\n<li>3、加快制造业服务化进程</li>\n<li>4、推广节能减排信息技术</li>\n<li>5、建立两化融合服务支撑体系</li>\n</ul>\n</li>\n<li>2、加快推进服务业信息化<ul>\n<li>1、引导电子商务健康发展</li>\n<li>2、提示物流信息化水平</li>\n<li>3、提供服务业重点领域信息化水平</li>\n</ul>\n</li>\n<li>3、积极提高中小企业信息化应用水平<ul>\n<li>1、深化中小企业信息技术应用</li>\n<li>2、继续实施中小企业信息化推进工程</li>\n</ul>\n</li>\n<li>4、协力推进农业农村信息化<ul>\n<li>1、完善农村综合信息服务体系</li>\n<li>2、加强涉农信息资源整合</li>\n</ul>\n</li>\n<li>5、全面深化电子政务应用<ul>\n<li>1、推进信息技术与政务工作深度融合</li>\n<li>2、提示基层电子政务服务能力</li>\n<li>3、提高社会管理信息化水平</li>\n</ul>\n</li>\n<li>6、稳步提高社会事业信息化水平<ul>\n<li>1、大力提高教育信息化水平</li>\n<li>2、加快医疗卫生信息化建设</li>\n<li>3、构建覆盖城乡居民的就业和社会保障信息服务体系</li>\n</ul>\n</li>\n<li>7、统筹城镇化与信息化互动发展<ul>\n<li>1、提高城市运行管理的智能化水平</li>\n<li>2、推进社区信息化</li>\n<li>3、提高公共安全信息化管理水平</li>\n</ul>\n</li>\n<li>8、加强信息资源开发利用<ul>\n<li>1、提高政务信息资源共享能力</li>\n<li>2、加大公益性信息资源利用力度</li>\n<li>3、发展先进网络化</li>\n<li>4、壮大数字内容产业</li>\n</ul>\n</li>\n<li>9、构建下一代国家综合信息基础设施<ul>\n<li>1、加快宽带网络化升级和区域协调发展</li>\n<li>2、促进下一代互联网规模商用和前沿布局</li>\n<li>3、建设安全可靠的信息应用基础设施</li>\n<li>4、加快推进三网融合</li>\n<li>5、优化国际通信网络布局</li>\n</ul>\n</li>\n<li>10、促进重要领域基础设施智能化改造升级<ul>\n<li>1、加快建设智能电网</li>\n<li>2、提高综合交通运输体系智能化水平</li>\n<li>3、提示基层性资源信息化管理水平</li>\n</ul>\n</li>\n<li>11、着力提高国民信息能力<ul>\n<li>1、积极开展国民信息技术教育和培训</li>\n<li>2、培养信息化人才队伍</li>\n</ul>\n</li>\n<li>12、加强网络与信息安全保障体系建设<ul>\n<li>1、确保基础信息网络和重要信息系统安全</li>\n<li>2、强化信息安全基础</li>\n<li>3、加强信息内容安全管理</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"电子政务\"><a href=\"#电子政务\" class=\"headerlink\" title=\"电子政务\"></a>电子政务</h1><h2 id=\"概念和内容\"><a href=\"#概念和内容\" class=\"headerlink\" title=\"概念和内容\"></a>概念和内容</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>电子政务是指政府机构在其管理和服务职能中运用现代信息技术，实现政府组织结构和工作流程的重组优化，超越时间、空间和部门分割的制约，建成一个精简、高效、廉洁、公平的政府运作模式</p>\n<h3 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h3><ul>\n<li>1、政府间的电子政务（G2G）</li>\n<li>2、政府对企业的电子政务（G2B）</li>\n<li>3、政府对公众的电子政务（G2C）</li>\n<li>4、政府对公务员（G2E）</li>\n</ul>\n<h1 id=\"企业信息化和两化深度融合\"><a href=\"#企业信息化和两化深度融合\" class=\"headerlink\" title=\"企业信息化和两化深度融合\"></a>企业信息化和两化深度融合</h1><h2 id=\"企业信息化概述\"><a href=\"#企业信息化概述\" class=\"headerlink\" title=\"企业信息化概述\"></a>企业信息化概述</h2><ul>\n<li>1、概念<ul>\n<li>在企业作业、管理、决策的各个层面，科学计算、过程控制、事物处理、经营管理的各个领域，引进现代信息技术，全面改革管理体制和机制，从而大幅提高企业工作效率、市场竞争能力和经济效益</li>\n</ul>\n</li>\n<li>2、从两化融合到2025中国制造</li>\n<li>3、战略要点<ul>\n<li>1、以信息化带动工业化</li>\n<li>2、信息化与企业业务全过程的融合、渗透</li>\n<li>3、信息产业与企业信息良性互动</li>\n<li>4、充分发挥政府的引导作用</li>\n<li>5、高度重视信息安全</li>\n<li>6、企业信息化与企业的改组改造和现成现代企业制度有机结合</li>\n<li>7、因地制宜推进企业信息化</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"企业资源计划（ERP）\"><a href=\"#企业资源计划（ERP）\" class=\"headerlink\" title=\"企业资源计划（ERP）\"></a>企业资源计划（ERP）</h2><ul>\n<li>1、概念<ul>\n<li>由MRP演变并结合计算机技术快速发展而来，大致经历了4个阶段，基本MRP（物料需求计划）、闭环MRP、MRPII、ERP。</li>\n<li>从MRP中引入质量管理、设备管理、财务管理和人力资源管理，形成统一的企业资源计划ERP</li>\n<li>一般来说，ERP是一个以财务会记为核心的信息系统，用来识别和规划企业资源，对采购，生产，成本，库存，销售，运输，财务和人力资源等进行规划和优化，从而达到最佳资源组合，是企业利润最大化</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"客户关系管理（CRM）\"><a href=\"#客户关系管理（CRM）\" class=\"headerlink\" title=\"客户关系管理（CRM）\"></a>客户关系管理（CRM）</h2><ul>\n<li>1、概念<ul>\n<li>CRM是一个集成化的信息管理系统，它存储了企业现有和潜在的客户信息，并且对这些信息自动的处理从而产生更人性市场管理策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"供应链管理（SCM）\"><a href=\"#供应链管理（SCM）\" class=\"headerlink\" title=\"供应链管理（SCM）\"></a>供应链管理（SCM）</h2><ul>\n<li>1、概念<ul>\n<li>供应链管理是一种集成的管理思想和方法，是在满足服务水平要求的同时，为了使系统成本到达最低而采用的将供应商、制造商、仓库和商店有效的结合成一体来生产商品，有效地控制和管理各种信息流、资金流、和物流，并把正确数量的商品在正确的时间配送到正确的地点的一套管理方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"电子商务\"><a href=\"#电子商务\" class=\"headerlink\" title=\"电子商务\"></a>电子商务</h2><ul>\n<li>1、概念<ul>\n<li>以信息网络技术为手段，以商品交换为中心的商务活动；也可以理解为通过网络以电子交易方式进行交易活动和相关服务的活动是传统商业活动各环节的电子化、网络化、信息化。</li>\n</ul>\n</li>\n<li>2、电子商务类型<ul>\n<li>1、B2B（企业与企业之间的电子商务）</li>\n<li>2、B2C（企业与消费者之间的电子商务）</li>\n<li>3、C2C（消费者与消费者之间的电子商务）</li>\n<li>4、020（线上购买线下的商品和服务）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"商业智能\"><a href=\"#商业智能\" class=\"headerlink\" title=\"商业智能\"></a>商业智能</h1><ul>\n<li>1、概念<ul>\n<li>组织中现有的数据转化为知识，帮助组织做出明智的业务经营决策</li>\n<li>为了将数据转化为知识，需要利用数据仓库，联机分析处理（OLAP）工具和数据挖掘等技术，因此，从技术层面上讲，商业智能不是什么新技术，他只是数据仓库，OLAP和数据集挖掘等技术的综合运用</li>\n</ul>\n</li>\n<li>2、主要功能<ul>\n<li>1、数据仓库：高效的数据存储和访问方式。提供结构化和非机构化的数据存储</li>\n<li>2、数据ETL：ETL是数据抽取、清洗、转换、装载</li>\n<li>3、数据统计输出</li>\n<li>4、分析功能：通过业务规则形成分析内容，帮助做出正确的判断和决策。</li>\n</ul>\n</li>\n<li>3、实现的三个层次<ul>\n<li>1、数据报表</li>\n<li>2、多维数据分析</li>\n<li>3、数据挖掘</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"新一代信息技术应用\"><a href=\"#新一代信息技术应用\" class=\"headerlink\" title=\"新一代信息技术应用\"></a>新一代信息技术应用</h1><h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h2><ul>\n<li>1、特点<ul>\n<li>1、大量</li>\n<li>2、高速</li>\n<li>3、多样</li>\n<li>4、价值</li>\n<li>5、真实性</li>\n</ul>\n</li>\n<li>2 关键技术<ul>\n<li>1、大数据存储管理技术<ul>\n<li>谷歌文件系统（GFS）和Hadoop的分布式文件系统HDFS</li>\n</ul>\n</li>\n<li>2、大数据并行分析技术<ul>\n<li>MapReduce</li>\n</ul>\n</li>\n<li>3、大数据分析技术</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"云计算\"><a href=\"#云计算\" class=\"headerlink\" title=\"云计算\"></a>云计算</h2><ul>\n<li>1、概念<ul>\n<li>基于互联网的计算方式，通过这种方式，在网络上配置共享的软件资源、计算资源、存储资源和信息资源可以按需求提供给网上终端设备和终端用户。</li>\n</ul>\n</li>\n<li>2、服务类型<ul>\n<li>1、LaaS(基础设施即服务)</li>\n<li>2、PaaS(平台即服务)</li>\n<li>3、SaaS(软件即服务)</li>\n</ul>\n</li>\n<li>3、关键技术<ul>\n<li>1、基础设施关键技术<ul>\n<li>云计算采用X86系列刀片式服务器，通过虚拟化形成统一的服务器资源。</li>\n</ul>\n</li>\n<li>2、操作系统关键技术<ul>\n<li>资源池管理技术和向用户提供大规模存储、计算能力的分布式任务和数据管理技术。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网+\"></a>互联网+</h2><ul>\n<li>1、“互联网+”是经济发展的新形态<ul>\n<li>是互联网思维的进一步实践成果，它代表一种先进的生产力，推动经济形态不断的发生演变。</li>\n<li>“互联网+”是把互联网的创新成果与经济社会各领域深度融合，推动技术进步、效率提升和组织变革、提升实体经济创新力和生产力，现成更广泛的以互联网为基础设施和创新要素的经济社会发展新形态。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"智慧城市\"><a href=\"#智慧城市\" class=\"headerlink\" title=\"智慧城市\"></a>智慧城市</h2><ul>\n<li>1、智慧城市的内涵和意义<ul>\n<li>推动政府智能转变、推进社会管理创新的新方法、目标是使得基础设施更加智能、公共服务更加便捷、社会管理更加精细、生态环境更加宜居、产业体系更加优化</li>\n</ul>\n</li>\n<li>2、智慧城市参考模型<br><img src=\"20161105163604.png\" alt=\"智慧城市参考模型\"><ul>\n<li>1、功能层<ul>\n<li>1、物理感知层</li>\n<li>2、通信网络层</li>\n<li>3、计算与存储层</li>\n<li>4、数据及服务支撑层</li>\n<li>5、智慧应用层</li>\n</ul>\n</li>\n<li>2、支撑体系<ul>\n<li>1、完全保障体系</li>\n<li>2、建设和运营管理体系</li>\n<li>3、标准规范体系</li>\n</ul>\n</li>\n<li>3、指导思想、基本原则、和主要目标<ul>\n<li>1、指导思想<ul>\n<li>按照走集约、智能、绿色、低碳的新型城镇化道路的总体要求，发货市场在资源配置中的决定性作用，加强和完善政府引导，统筹物资，信息和智力资源，推动新一代信息技术创新应用，加强城市管理和服务体系智能化建设，积极发展民生服务智慧应用，强化网络安全保障。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2、基本原则<ul>\n<li>1、以人为本，务实推进</li>\n<li>2、因地制宜，科学有序</li>\n<li>3、市场为主，协同创新</li>\n<li>4、可管可控，确保安全</li>\n</ul>\n</li>\n<li>3、主要目标<ul>\n<li>到2020年，建成一批特色鲜明的智慧城市，聚集和辐射带动作用大幅增强，综合竞争优势明显提高，保障和改善民生服务、创新社会管理、维护网络安全等方面取得显著成效</li>\n<li>1、公共服务便捷化</li>\n<li>2、城市管理精细化</li>\n<li>3、生活环境宜居化</li>\n<li>4、基础设施智能化</li>\n<li>5、网络安全长效化</li>\n</ul>\n</li>\n<li>4、建设关键<ul>\n<li>1、科学制定智慧城市建设顶层设计<ul>\n<li>1、加强顶层设计</li>\n<li>2、推动构建普惠化公共服务体系</li>\n<li>3、支撑建立精细化社会管理体系</li>\n<li>4、促进宜居化生活环境建设</li>\n<li>5、建立现代化产业发展体系</li>\n<li>6、加快建设智能化基础设施</li>\n</ul>\n</li>\n<li>2、切实加大信息资源开发共享力度<ul>\n<li>1、加快推进信息资源共享与更新</li>\n<li>2、深化重点领域信息资源开发利用</li>\n</ul>\n</li>\n<li>3、积极运用新技术新业态<ul>\n<li>1、加快重点领域物联网应用   </li>\n<li>2、促进云计算和大数据健康发展</li>\n<li>3、推动信息技术集成应用</li>\n</ul>\n</li>\n<li>4、着力加强网络信息安全管理和能力建设<ul>\n<li>1、严格全流程网络安全管理</li>\n<li>2、加强要害信息设施和信息资源安全防护</li>\n<li>3、强化安全责任和安全意识</li>\n</ul>\n</li>\n<li>5、智慧城市典型应用<ul>\n<li>1、公共事业智能化</li>\n<li>2、城市智能交通</li>\n<li>3、城市应急联动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"信息与信息化\"><a href=\"#信息与信息化\" class=\"headerlink\" title=\"信息与信息化\"></a>信息与信息化</h1><p>信息技术不断创新，信息产业持续发展，信息网络广泛普及，信息化成为全球经济社会发展的显著特征。在信息技术的推动下，人类社会已经并正在加速进入全新发展时期，基于智能、网络和大数据的新经济业态正在形成，而“融合”是这个时期的主要特征，表现为信息技术和工业制造深度融合、人和机器的融合、信息资源和材料源的融合。在这个形式下，世界政治、经济、产业、文化和军事发展模式的竞争新格局必将重塑。而教育、医疗、公开服务、社会交往走向全局智能，极大地改变人们生活方式和行为模式。<br>","more":"</p>\n<h2 id=\"信息\"><a href=\"#信息\" class=\"headerlink\" title=\"信息\"></a>信息</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>信息是客观事物状态和运动特征的一种普遍形式，客观世界中大量地存在、产生和传递以这些方式表示出来的各种各样的信息；<br><strong><em>维纳认为：信息就是信息，既不是物质也不是能量</em></strong><br><strong><em>香农认为：信息就是能够用来消除不确定性的东西。</em></strong><br><strong><em>哲学界认为：信息是事物普遍联系的方式</em></strong><br><strong><em>事物本体论信息：事物的运动状态和状态变化方式的自我表述</em></strong></p>\n<h3 id=\"信息传输模型\"><a href=\"#信息传输模型\" class=\"headerlink\" title=\"信息传输模型\"></a>信息传输模型</h3><p><img src=\"20161104112204.png\" alt></p>\n<ul>\n<li>1、信源</li>\n<li>2、信宿</li>\n<li>3、信道</li>\n<li>4、编码器</li>\n<li>5、译码器</li>\n<li>6、噪声</li>\n</ul>\n<h3 id=\"信息质量属性\"><a href=\"#信息质量属性\" class=\"headerlink\" title=\"信息质量属性\"></a>信息质量属性</h3><ul>\n<li>1、精确性，对事物状态描述的精准程度</li>\n<li>2、完整性，对事物状态描述的全面程度，完整信息应包括所有重要事实</li>\n<li>3、可靠性，指信息的来源，采集方法，传输过程，是可以信任的，符合预期的</li>\n<li>4、及时性，获取信息的时刻与事件发生的时刻的间隔长短。</li>\n<li>5、经济性，指信息的获取，传输带来的的成本可以在接受范围内</li>\n<li>6、可验证性，指信息的主要质量属性可以被证实或者证伪程度</li>\n<li>7、安全性，指信息在生命周期中，信息可以被非授权访问的可能性，可能性越低，安全越高</li>\n</ul>\n<h2 id=\"信息系统\"><a href=\"#信息系统\" class=\"headerlink\" title=\"信息系统\"></a>信息系统</h2><h3 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>系统是指一系列相互影响、相互联系的若干组成部件，在规则的约束下构成有机整体，这个整体具有其各个组成部件所有没有的新的性质和功能，并可以和其他系统或者外部环境发生交互作用。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>1、目的性<ul>\n<li>系统都有目标性，目标性决定功能</li>\n</ul>\n</li>\n<li>2、可嵌套性<ul>\n<li>系统可以包含若干子系统，系统间也能够耦合成一个更大的系统</li>\n</ul>\n</li>\n<li>3、稳定性<ul>\n<li>受规则的约束，系统的内部结构和秩序应是可以预见的；系统的状态以及演化路径有限并能被预测；系统功能发生作用导致的后果也是可以预见的。</li>\n</ul>\n</li>\n<li>4、开放性<ul>\n<li>指系统的可访问性，这个特性决定了系统可以被外部环境识别，外部环境或者其他系统可以按照预定的方法，使用系统的功能或者影响系统的行为。</li>\n</ul>\n</li>\n<li>5、脆弱性<ul>\n<li>与系统的稳定性相对应，即系统可能存在着丧失结构、功能、秩序的特性，这个特性往往是隐藏的不宜被外界感知。一旦被侵入、整体性会被破坏、甚至面临崩溃、系统瓦解</li>\n</ul>\n</li>\n<li>6、健壮性<ul>\n<li>具有能够抵御出现非预期状态的特性，高可用系统会采用冗余技术、容错技术、身份识别技术、可靠性技术等来抵御出现非预期的状态，保持系统的稳定性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>信息系统是一种以处理信息为目的的专门的系统类型。</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><ul>\n<li>1、立项（系统规则）</li>\n<li>2、开发（系统分析、系统设计、系统实施）</li>\n<li>3、运维</li>\n<li>4、消亡</li>\n</ul>\n<h2 id=\"信息化\"><a href=\"#信息化\" class=\"headerlink\" title=\"信息化\"></a>信息化</h2><ul>\n<li>1、产品信息化<ul>\n<li>传统产品融合计算机化（智能化）器件，使产品具有处理信息的能力</li>\n</ul>\n</li>\n<li>2、企业信息化<ul>\n<li>企业在产品设计、开发、生成、管理、经营等多个环节利用信息技术，辅助生产制造，优化工作流程，管理客户关系，建设企业信息管理系统，培养信息化人才并建设完善信息化管理制度（ERP、CRM、SCM）</li>\n</ul>\n</li>\n<li>3、产业信息化<ul>\n<li>指农业、工业、交通运输业、生产制造业、服务业等传统产业利用信息技术完成工艺、产品信息化、进一步提高生产力水平</li>\n</ul>\n</li>\n<li>4、国民经济信息话<ul>\n<li>指在经济大系统内实现统一的信息大流动，使金融、贸易、投资、计划、通关、营销等组成一个信息大系统，使生产、流通、分配、消费等经济的四个环节通过信息进一步炼成要给整体</li>\n</ul>\n</li>\n<li>5、社会生活信息化<ul>\n<li>商务、教育、政务、公共服务、交通、日常生活等在内的整个社会体系采用先进的信息技术，融合各种信息网络，大力开发有关人们日常生活信息服务，丰富人们的物质、精神生活、拓展人们活动时空</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"国家信息化体系要素\"><a href=\"#国家信息化体系要素\" class=\"headerlink\" title=\"国家信息化体系要素\"></a>国家信息化体系要素</h2><p>“十二五”期间，“智慧城市”作为新兴的国家级战略规划。</p>\n<ul>\n<li>1、两网<ul>\n<li>政务内网，政务外网</li>\n</ul>\n</li>\n<li>2、一站<ul>\n<li>政府门户网站</li>\n</ul>\n</li>\n<li>3、四库<ul>\n<li>建立人口、法人单位、空间地理和自然资源、宏观经济等四个基础数据库</li>\n</ul>\n</li>\n<li>4、十二金<ul>\n<li>以“金”字冠名的12个重点业务系统:金宏、金税、金关、金财、金融监管、金审、金盾、金宝、金农、金水、金质</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"信息化体系六要素\"><a href=\"#信息化体系六要素\" class=\"headerlink\" title=\"信息化体系六要素\"></a>信息化体系六要素</h3><ul>\n<li>1、信息技术应用</li>\n<li>2、信息资源</li>\n<li>3、信息网络</li>\n<li>4、信息技术和产业</li>\n<li>5、信息化人才</li>\n<li>6、信息化法规政策和标准规范<br><strong><em>信息技术是龙头，信息资源开发利用是国家信息化核心任务，信息网络、信息技术产业是基础、信息化人才是成功之本，法规规范是国家信息化快速、持续、有序、健康发展的根本保障</em></strong><h2 id=\"发展趋势\"><a href=\"#发展趋势\" class=\"headerlink\" title=\"发展趋势\"></a>发展趋势</h2>“十三五”规划纲要中，将培育人工智能、移动智能终端、第五代移动通信（5G）、先进传感器等作为新一代信息技术产业创新重点发展，拓展新兴产业发展空间。<br>发展的10个方面：</li>\n<li>1、高速度大容量</li>\n<li>2、集成化和平台化</li>\n<li>3、智能化</li>\n<li>4、虚拟计算</li>\n<li>5、通信技术</li>\n<li>6、遥感和传感技术</li>\n<li>7、移动智能终端</li>\n<li>8、以人为本</li>\n<li>9、信息安全</li>\n<li>10、两化融合</li>\n</ul>\n<h1 id=\"国家信息化战略和规划\"><a href=\"#国家信息化战略和规划\" class=\"headerlink\" title=\"国家信息化战略和规划\"></a>国家信息化战略和规划</h1><h2 id=\"国家信息化战略目标\"><a href=\"#国家信息化战略目标\" class=\"headerlink\" title=\"国家信息化战略目标\"></a>国家信息化战略目标</h2><p>2006~2020年期间，综合信息基础设施基本普及，信息技术自主创新能力显著增强，信息产业结构全面优化，国家信息安全保障水平大幅提高，国民经济和社会信息化取得明显成效，新型工业化发展模式初步确立，国家信息化发展的制度环境和政策体系基本完善，国民信息技术应用的能力显著提高，为迈向信息社会奠定坚实基础</p>\n<ul>\n<li>1、促进经济增长方式的根本转变</li>\n<li>2、实现信息技术自主创新、信息产业发展的跨越</li>\n<li>3、提升网络普及水平</li>\n<li>4、增强政府公共服务能力、社会主义先进文化传播能力、中国特色的军事变革能力和国民信息技术应用能力</li>\n</ul>\n<h2 id=\"信息化的指导思想和基本原则\"><a href=\"#信息化的指导思想和基本原则\" class=\"headerlink\" title=\"信息化的指导思想和基本原则\"></a>信息化的指导思想和基本原则</h2><ul>\n<li>1、指导思想 <ul>\n<li>以邓小平理论、“三个代表”重要思想和科学发展观为指导，把加快信息化建设作为促进发展方式转变的重要途径，把扩大信息技术应用作为构建现代化产业体系的重大举措，把提高信息服务能力作为保障和改善民生的有力支撑。加强统筹规划、坚持科学发展、以企业为主体、市场为导向，积极推进下一代信息基础设施建设，推动信息化与工业化深度融合，着力突破技术和产业瓶颈，切实增强信息安全保障能力大幅提升信息化水平，为促进经济社会持续发展作出贡献。</li>\n</ul>\n</li>\n<li><p>2、基本原则</p>\n<ul>\n<li>1、统筹发展，有序推进</li>\n<li>2、需求牵引，市场导向</li>\n<li>3、完善机制、创新驱动</li>\n<li>4、加强管理，保障安全</li>\n</ul>\n<h2 id=\"发展主要任务和发展重点\"><a href=\"#发展主要任务和发展重点\" class=\"headerlink\" title=\"发展主要任务和发展重点\"></a>发展主要任务和发展重点</h2></li>\n<li>1、促进工业领域信息化深度应用<ul>\n<li>1、推进信息技术在工业领域全面普及</li>\n<li>2、推动综合集成应用和业务协同创新</li>\n<li>3、加快制造业服务化进程</li>\n<li>4、推广节能减排信息技术</li>\n<li>5、建立两化融合服务支撑体系</li>\n</ul>\n</li>\n<li>2、加快推进服务业信息化<ul>\n<li>1、引导电子商务健康发展</li>\n<li>2、提示物流信息化水平</li>\n<li>3、提供服务业重点领域信息化水平</li>\n</ul>\n</li>\n<li>3、积极提高中小企业信息化应用水平<ul>\n<li>1、深化中小企业信息技术应用</li>\n<li>2、继续实施中小企业信息化推进工程</li>\n</ul>\n</li>\n<li>4、协力推进农业农村信息化<ul>\n<li>1、完善农村综合信息服务体系</li>\n<li>2、加强涉农信息资源整合</li>\n</ul>\n</li>\n<li>5、全面深化电子政务应用<ul>\n<li>1、推进信息技术与政务工作深度融合</li>\n<li>2、提示基层电子政务服务能力</li>\n<li>3、提高社会管理信息化水平</li>\n</ul>\n</li>\n<li>6、稳步提高社会事业信息化水平<ul>\n<li>1、大力提高教育信息化水平</li>\n<li>2、加快医疗卫生信息化建设</li>\n<li>3、构建覆盖城乡居民的就业和社会保障信息服务体系</li>\n</ul>\n</li>\n<li>7、统筹城镇化与信息化互动发展<ul>\n<li>1、提高城市运行管理的智能化水平</li>\n<li>2、推进社区信息化</li>\n<li>3、提高公共安全信息化管理水平</li>\n</ul>\n</li>\n<li>8、加强信息资源开发利用<ul>\n<li>1、提高政务信息资源共享能力</li>\n<li>2、加大公益性信息资源利用力度</li>\n<li>3、发展先进网络化</li>\n<li>4、壮大数字内容产业</li>\n</ul>\n</li>\n<li>9、构建下一代国家综合信息基础设施<ul>\n<li>1、加快宽带网络化升级和区域协调发展</li>\n<li>2、促进下一代互联网规模商用和前沿布局</li>\n<li>3、建设安全可靠的信息应用基础设施</li>\n<li>4、加快推进三网融合</li>\n<li>5、优化国际通信网络布局</li>\n</ul>\n</li>\n<li>10、促进重要领域基础设施智能化改造升级<ul>\n<li>1、加快建设智能电网</li>\n<li>2、提高综合交通运输体系智能化水平</li>\n<li>3、提示基层性资源信息化管理水平</li>\n</ul>\n</li>\n<li>11、着力提高国民信息能力<ul>\n<li>1、积极开展国民信息技术教育和培训</li>\n<li>2、培养信息化人才队伍</li>\n</ul>\n</li>\n<li>12、加强网络与信息安全保障体系建设<ul>\n<li>1、确保基础信息网络和重要信息系统安全</li>\n<li>2、强化信息安全基础</li>\n<li>3、加强信息内容安全管理</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"电子政务\"><a href=\"#电子政务\" class=\"headerlink\" title=\"电子政务\"></a>电子政务</h1><h2 id=\"概念和内容\"><a href=\"#概念和内容\" class=\"headerlink\" title=\"概念和内容\"></a>概念和内容</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>电子政务是指政府机构在其管理和服务职能中运用现代信息技术，实现政府组织结构和工作流程的重组优化，超越时间、空间和部门分割的制约，建成一个精简、高效、廉洁、公平的政府运作模式</p>\n<h3 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h3><ul>\n<li>1、政府间的电子政务（G2G）</li>\n<li>2、政府对企业的电子政务（G2B）</li>\n<li>3、政府对公众的电子政务（G2C）</li>\n<li>4、政府对公务员（G2E）</li>\n</ul>\n<h1 id=\"企业信息化和两化深度融合\"><a href=\"#企业信息化和两化深度融合\" class=\"headerlink\" title=\"企业信息化和两化深度融合\"></a>企业信息化和两化深度融合</h1><h2 id=\"企业信息化概述\"><a href=\"#企业信息化概述\" class=\"headerlink\" title=\"企业信息化概述\"></a>企业信息化概述</h2><ul>\n<li>1、概念<ul>\n<li>在企业作业、管理、决策的各个层面，科学计算、过程控制、事物处理、经营管理的各个领域，引进现代信息技术，全面改革管理体制和机制，从而大幅提高企业工作效率、市场竞争能力和经济效益</li>\n</ul>\n</li>\n<li>2、从两化融合到2025中国制造</li>\n<li>3、战略要点<ul>\n<li>1、以信息化带动工业化</li>\n<li>2、信息化与企业业务全过程的融合、渗透</li>\n<li>3、信息产业与企业信息良性互动</li>\n<li>4、充分发挥政府的引导作用</li>\n<li>5、高度重视信息安全</li>\n<li>6、企业信息化与企业的改组改造和现成现代企业制度有机结合</li>\n<li>7、因地制宜推进企业信息化</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"企业资源计划（ERP）\"><a href=\"#企业资源计划（ERP）\" class=\"headerlink\" title=\"企业资源计划（ERP）\"></a>企业资源计划（ERP）</h2><ul>\n<li>1、概念<ul>\n<li>由MRP演变并结合计算机技术快速发展而来，大致经历了4个阶段，基本MRP（物料需求计划）、闭环MRP、MRPII、ERP。</li>\n<li>从MRP中引入质量管理、设备管理、财务管理和人力资源管理，形成统一的企业资源计划ERP</li>\n<li>一般来说，ERP是一个以财务会记为核心的信息系统，用来识别和规划企业资源，对采购，生产，成本，库存，销售，运输，财务和人力资源等进行规划和优化，从而达到最佳资源组合，是企业利润最大化</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"客户关系管理（CRM）\"><a href=\"#客户关系管理（CRM）\" class=\"headerlink\" title=\"客户关系管理（CRM）\"></a>客户关系管理（CRM）</h2><ul>\n<li>1、概念<ul>\n<li>CRM是一个集成化的信息管理系统，它存储了企业现有和潜在的客户信息，并且对这些信息自动的处理从而产生更人性市场管理策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"供应链管理（SCM）\"><a href=\"#供应链管理（SCM）\" class=\"headerlink\" title=\"供应链管理（SCM）\"></a>供应链管理（SCM）</h2><ul>\n<li>1、概念<ul>\n<li>供应链管理是一种集成的管理思想和方法，是在满足服务水平要求的同时，为了使系统成本到达最低而采用的将供应商、制造商、仓库和商店有效的结合成一体来生产商品，有效地控制和管理各种信息流、资金流、和物流，并把正确数量的商品在正确的时间配送到正确的地点的一套管理方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"电子商务\"><a href=\"#电子商务\" class=\"headerlink\" title=\"电子商务\"></a>电子商务</h2><ul>\n<li>1、概念<ul>\n<li>以信息网络技术为手段，以商品交换为中心的商务活动；也可以理解为通过网络以电子交易方式进行交易活动和相关服务的活动是传统商业活动各环节的电子化、网络化、信息化。</li>\n</ul>\n</li>\n<li>2、电子商务类型<ul>\n<li>1、B2B（企业与企业之间的电子商务）</li>\n<li>2、B2C（企业与消费者之间的电子商务）</li>\n<li>3、C2C（消费者与消费者之间的电子商务）</li>\n<li>4、020（线上购买线下的商品和服务）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"商业智能\"><a href=\"#商业智能\" class=\"headerlink\" title=\"商业智能\"></a>商业智能</h1><ul>\n<li>1、概念<ul>\n<li>组织中现有的数据转化为知识，帮助组织做出明智的业务经营决策</li>\n<li>为了将数据转化为知识，需要利用数据仓库，联机分析处理（OLAP）工具和数据挖掘等技术，因此，从技术层面上讲，商业智能不是什么新技术，他只是数据仓库，OLAP和数据集挖掘等技术的综合运用</li>\n</ul>\n</li>\n<li>2、主要功能<ul>\n<li>1、数据仓库：高效的数据存储和访问方式。提供结构化和非机构化的数据存储</li>\n<li>2、数据ETL：ETL是数据抽取、清洗、转换、装载</li>\n<li>3、数据统计输出</li>\n<li>4、分析功能：通过业务规则形成分析内容，帮助做出正确的判断和决策。</li>\n</ul>\n</li>\n<li>3、实现的三个层次<ul>\n<li>1、数据报表</li>\n<li>2、多维数据分析</li>\n<li>3、数据挖掘</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"新一代信息技术应用\"><a href=\"#新一代信息技术应用\" class=\"headerlink\" title=\"新一代信息技术应用\"></a>新一代信息技术应用</h1><h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h2><ul>\n<li>1、特点<ul>\n<li>1、大量</li>\n<li>2、高速</li>\n<li>3、多样</li>\n<li>4、价值</li>\n<li>5、真实性</li>\n</ul>\n</li>\n<li>2 关键技术<ul>\n<li>1、大数据存储管理技术<ul>\n<li>谷歌文件系统（GFS）和Hadoop的分布式文件系统HDFS</li>\n</ul>\n</li>\n<li>2、大数据并行分析技术<ul>\n<li>MapReduce</li>\n</ul>\n</li>\n<li>3、大数据分析技术</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"云计算\"><a href=\"#云计算\" class=\"headerlink\" title=\"云计算\"></a>云计算</h2><ul>\n<li>1、概念<ul>\n<li>基于互联网的计算方式，通过这种方式，在网络上配置共享的软件资源、计算资源、存储资源和信息资源可以按需求提供给网上终端设备和终端用户。</li>\n</ul>\n</li>\n<li>2、服务类型<ul>\n<li>1、LaaS(基础设施即服务)</li>\n<li>2、PaaS(平台即服务)</li>\n<li>3、SaaS(软件即服务)</li>\n</ul>\n</li>\n<li>3、关键技术<ul>\n<li>1、基础设施关键技术<ul>\n<li>云计算采用X86系列刀片式服务器，通过虚拟化形成统一的服务器资源。</li>\n</ul>\n</li>\n<li>2、操作系统关键技术<ul>\n<li>资源池管理技术和向用户提供大规模存储、计算能力的分布式任务和数据管理技术。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网+\"></a>互联网+</h2><ul>\n<li>1、“互联网+”是经济发展的新形态<ul>\n<li>是互联网思维的进一步实践成果，它代表一种先进的生产力，推动经济形态不断的发生演变。</li>\n<li>“互联网+”是把互联网的创新成果与经济社会各领域深度融合，推动技术进步、效率提升和组织变革、提升实体经济创新力和生产力，现成更广泛的以互联网为基础设施和创新要素的经济社会发展新形态。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"智慧城市\"><a href=\"#智慧城市\" class=\"headerlink\" title=\"智慧城市\"></a>智慧城市</h2><ul>\n<li>1、智慧城市的内涵和意义<ul>\n<li>推动政府智能转变、推进社会管理创新的新方法、目标是使得基础设施更加智能、公共服务更加便捷、社会管理更加精细、生态环境更加宜居、产业体系更加优化</li>\n</ul>\n</li>\n<li>2、智慧城市参考模型<br><img src=\"20161105163604.png\" alt=\"智慧城市参考模型\"><ul>\n<li>1、功能层<ul>\n<li>1、物理感知层</li>\n<li>2、通信网络层</li>\n<li>3、计算与存储层</li>\n<li>4、数据及服务支撑层</li>\n<li>5、智慧应用层</li>\n</ul>\n</li>\n<li>2、支撑体系<ul>\n<li>1、完全保障体系</li>\n<li>2、建设和运营管理体系</li>\n<li>3、标准规范体系</li>\n</ul>\n</li>\n<li>3、指导思想、基本原则、和主要目标<ul>\n<li>1、指导思想<ul>\n<li>按照走集约、智能、绿色、低碳的新型城镇化道路的总体要求，发货市场在资源配置中的决定性作用，加强和完善政府引导，统筹物资，信息和智力资源，推动新一代信息技术创新应用，加强城市管理和服务体系智能化建设，积极发展民生服务智慧应用，强化网络安全保障。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2、基本原则<ul>\n<li>1、以人为本，务实推进</li>\n<li>2、因地制宜，科学有序</li>\n<li>3、市场为主，协同创新</li>\n<li>4、可管可控，确保安全</li>\n</ul>\n</li>\n<li>3、主要目标<ul>\n<li>到2020年，建成一批特色鲜明的智慧城市，聚集和辐射带动作用大幅增强，综合竞争优势明显提高，保障和改善民生服务、创新社会管理、维护网络安全等方面取得显著成效</li>\n<li>1、公共服务便捷化</li>\n<li>2、城市管理精细化</li>\n<li>3、生活环境宜居化</li>\n<li>4、基础设施智能化</li>\n<li>5、网络安全长效化</li>\n</ul>\n</li>\n<li>4、建设关键<ul>\n<li>1、科学制定智慧城市建设顶层设计<ul>\n<li>1、加强顶层设计</li>\n<li>2、推动构建普惠化公共服务体系</li>\n<li>3、支撑建立精细化社会管理体系</li>\n<li>4、促进宜居化生活环境建设</li>\n<li>5、建立现代化产业发展体系</li>\n<li>6、加快建设智能化基础设施</li>\n</ul>\n</li>\n<li>2、切实加大信息资源开发共享力度<ul>\n<li>1、加快推进信息资源共享与更新</li>\n<li>2、深化重点领域信息资源开发利用</li>\n</ul>\n</li>\n<li>3、积极运用新技术新业态<ul>\n<li>1、加快重点领域物联网应用   </li>\n<li>2、促进云计算和大数据健康发展</li>\n<li>3、推动信息技术集成应用</li>\n</ul>\n</li>\n<li>4、着力加强网络信息安全管理和能力建设<ul>\n<li>1、严格全流程网络安全管理</li>\n<li>2、加强要害信息设施和信息资源安全防护</li>\n<li>3、强化安全责任和安全意识</li>\n</ul>\n</li>\n<li>5、智慧城市典型应用<ul>\n<li>1、公共事业智能化</li>\n<li>2、城市智能交通</li>\n<li>3、城市应急联动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"第三章 信息系统集成专业技术知识","date":"2016-11-02T02:57:33.000Z","comments":1,"toc":true,"_content":"\n# 信息系统建设\n## 信息系统生命周期\n- 信息系统建设的内容主要包括设备采购、系统集成、软件开发和运维服务。系统集成是指将计算机软件、硬件、网络通信、信息安全等技术和产品集成为能够满足用户特定需求的信息系统。\n<!--more-->\n- 1、立项阶段\n - 概念阶段或需求阶段，概念形成过程，根据用户单位业务发展和经营管理的需要提出建设信息系统的初步构想，需求分析过程，即对企业信息系统的需求进行深入的调研和分析，形成《需求规格说明书》，经评审、批准和立项\n- 2、开发阶段\n - 1、总体规划阶段：已立项阶段所做的需求分析为基础，明确信息系统在企业经营战略中的作用和地位，指导信息系统开发，优化配置并利用各种资源，包括内部资源和外部资源，通过规划过程规范和完善用户单位的业务流程\n - 2、系统分析阶段：目标是为系统设计阶段提供系统的逻辑模型，内容包括组织结构及功能分析，业务流程分析，数据和数据流程分析及系统初步方案。\n- 3、运维阶段\n - 信息系统通过验收，正式移交给用户以后，就进入了运维阶段，要保障系统正常运行，系统维护是不可缺少的工作，维护可分为四中类型：\n - 1、更正性维护\n - 2、适应性维护\n - 3、完善性维护\n - 4、预防性维护\n- 4、消亡阶段\n - 开发一个信息系统并希望它一劳永逸地运行下去是不现实的。企业的信息系统经常不可避免地会遇到系统更新改造，功能扩展，甚至报废重建等情况，当系统正在适应当前环境，或没有必要再进行维护，系统就进入了消亡阶段\n\n## 系统开发方法\n- 系统开发时，为了更好地控制时间、质量、成本等方面的要求及到达用户满意，除了技术,管理等因素外，系统开发方法也起着很重要的作用。\n- 常用的开发方法有：结构化方法、原型法、面向对象方法。\n\n- 1、结构化方法\n - 结构化方法是早期应用最为广泛的一种开发方法。按照信息系统生命周期，应用结构化系统开发方法，把整个系统的开发过程分为若干阶段，然后一步一步地依次进行，前一阶段是最后一阶段的工作依据;每个阶段又划分为详细的工作步骤，顺序作业。\n - 每个阶段和主要步骤都有明确详尽的文档编制要求，各个阶段和各个步骤的向下转移都是通过建立各自的软件文档和对关键阶段，步骤进行审核和控制实现。\n - 瀑布模型就是结构化方法中的一种\n - 优点：\n   - 理论基础严密，注重开发过程的整体性和全局性\n - 缺点：\n   - 开发周期长；文档、设计说明繁琐、工作效率低；要求在开发之初全面认识系统的信息需求，充分预测各种可能发现的变化，但这并不现实\n- 2、原型法\n - 原型法的基本思想与结构化方法不同，原型法认为在很难一下子全面准确地提出用户需求的情况下，首先不要求一定要对系统做全面、详细的调查，分析、而是本着开发人员对用户需求的初步理解，先快速开发一个原型系统，然后通过反复修改来实现用户的最终系统需求。\n - 抛弃型原型：此类原型在系统真正实现以后就放弃不用了。\n - 进化型原型：此类原型的构造从目标系统的一个或几个基本需求出发，通过修改和追加功能的过程逐渐丰富，演化成最终系统。\n- 3、面向对象方法\n - 随着应用系统日益复杂庞大和面向对象程序设计语言的日益成熟，面向对象的系统开发方法以其直观，方便的优点获得广泛的应用。面向对象开发方法主要分为分析、设计和实现三个阶段。在整个过程中都使用同一套工具完成。\n \n# 计算机网络知识\n## 网络技术标准与协议\n### OSI七层协议\n- **1、物理层：**该层包括物理联网媒介，如电缆连线连接器。该层的协议产生并检测电压以便发送和接收携带数据信号。具体标准有RS232、V.35、RJ-45、FDDI\n- **2、数据链路层：**它控制网络层与物理层直接的通信。它的主要功能是将从网络层接收到的数据分割层特定的可被物理层传输的帧。常见的协议有IEEE802.3/.2、HDLC、PPP、ATM\n- **3、网络层：**其主要功能是将网络地址（例如，IP地址）翻译成对应的物理地址（例如，网卡地址），并决定如何将数据从发送方路由到接收方。在TCP/IP协议中，网络层具体协议有IP、ICMP、IGMP、IPX、ARP等\n- **4、传输层：**主要负责确保数据可靠、顺序、无错地从A点到传输到B点。如提供建立、维护和拆除传送连接的功能；选择网络层提供最适合的服务；在系统之间提供可靠的透明的数据传送，提供端到端的错误恢复和流量控制。具体协议有TCP、UDP、SPX\n- **5、会话层：**负责在网络中的两节点之间建立和维持通信，以及提供交互会话的管理功能，如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式。常见的协议有RPC、SQL、NFS\n- **6、表示层：**如同应用程式和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同，表示层管理数据的解密加密、数据转换、格式化和文本压缩。常见的协议有JPEG、ASCII、GIF、DES、MPEG\n- **7、应用层：**负责对软件提供接口以使程序能使用网络服务、如事物处理程序、文件传送协议和网络管理等。在TCP\\IP协议中，常见的协议有HTTP、Telnet、FTP、SMTP\n\n### 网络协议和标准\n- IEEE 802规范定义了网卡如何访问传输介质（如光缆、双绞线、无线等），以及如何在传输的介质上传输数据的方法，还定义了传输信息的网络设备之间连接建立、维护和拆除的路径。\n- **802.1：**802协议概论\n- **802.2：**逻辑链路控制层LLC协议\n- **802.3：**以太网的CSMA/CD载波监听多路访问/冲突检测协议\n- **802.4：**令牌总线Token Bus协议\n- **802.5：**令牌环Token Ring协议\n- **802.6：**城域网MAN协议\n- **802.7：**FDDI宽带技术协议\n- **802.8：**光纤技术协议\n- **802.9：**局域网上的语音/数据集成规范\n- **802.10：**局域网安全互操作标准\n- **802.11：**无线局域网WLAN标准协议\n- 以太网规范IEEE 802.3是重要的局域网协议，内容包括\n - **IEEE 802.3**        标准以太网       10MB/s          传输介质为细同轴电缆\n - **IEEE 802.3u**       快速以太网       100MB/s         双绞线\n - **IEEE 802.3z**       千兆以太网       1000MB/s        光纤或双绞线","source":"_posts/第三章 信息系统集成专业技术知识.md","raw":"---\ntitle: 第三章 信息系统集成专业技术知识\ndate: 2016-11-02 10:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 信息系统建设\n## 信息系统生命周期\n- 信息系统建设的内容主要包括设备采购、系统集成、软件开发和运维服务。系统集成是指将计算机软件、硬件、网络通信、信息安全等技术和产品集成为能够满足用户特定需求的信息系统。\n<!--more-->\n- 1、立项阶段\n - 概念阶段或需求阶段，概念形成过程，根据用户单位业务发展和经营管理的需要提出建设信息系统的初步构想，需求分析过程，即对企业信息系统的需求进行深入的调研和分析，形成《需求规格说明书》，经评审、批准和立项\n- 2、开发阶段\n - 1、总体规划阶段：已立项阶段所做的需求分析为基础，明确信息系统在企业经营战略中的作用和地位，指导信息系统开发，优化配置并利用各种资源，包括内部资源和外部资源，通过规划过程规范和完善用户单位的业务流程\n - 2、系统分析阶段：目标是为系统设计阶段提供系统的逻辑模型，内容包括组织结构及功能分析，业务流程分析，数据和数据流程分析及系统初步方案。\n- 3、运维阶段\n - 信息系统通过验收，正式移交给用户以后，就进入了运维阶段，要保障系统正常运行，系统维护是不可缺少的工作，维护可分为四中类型：\n - 1、更正性维护\n - 2、适应性维护\n - 3、完善性维护\n - 4、预防性维护\n- 4、消亡阶段\n - 开发一个信息系统并希望它一劳永逸地运行下去是不现实的。企业的信息系统经常不可避免地会遇到系统更新改造，功能扩展，甚至报废重建等情况，当系统正在适应当前环境，或没有必要再进行维护，系统就进入了消亡阶段\n\n## 系统开发方法\n- 系统开发时，为了更好地控制时间、质量、成本等方面的要求及到达用户满意，除了技术,管理等因素外，系统开发方法也起着很重要的作用。\n- 常用的开发方法有：结构化方法、原型法、面向对象方法。\n\n- 1、结构化方法\n - 结构化方法是早期应用最为广泛的一种开发方法。按照信息系统生命周期，应用结构化系统开发方法，把整个系统的开发过程分为若干阶段，然后一步一步地依次进行，前一阶段是最后一阶段的工作依据;每个阶段又划分为详细的工作步骤，顺序作业。\n - 每个阶段和主要步骤都有明确详尽的文档编制要求，各个阶段和各个步骤的向下转移都是通过建立各自的软件文档和对关键阶段，步骤进行审核和控制实现。\n - 瀑布模型就是结构化方法中的一种\n - 优点：\n   - 理论基础严密，注重开发过程的整体性和全局性\n - 缺点：\n   - 开发周期长；文档、设计说明繁琐、工作效率低；要求在开发之初全面认识系统的信息需求，充分预测各种可能发现的变化，但这并不现实\n- 2、原型法\n - 原型法的基本思想与结构化方法不同，原型法认为在很难一下子全面准确地提出用户需求的情况下，首先不要求一定要对系统做全面、详细的调查，分析、而是本着开发人员对用户需求的初步理解，先快速开发一个原型系统，然后通过反复修改来实现用户的最终系统需求。\n - 抛弃型原型：此类原型在系统真正实现以后就放弃不用了。\n - 进化型原型：此类原型的构造从目标系统的一个或几个基本需求出发，通过修改和追加功能的过程逐渐丰富，演化成最终系统。\n- 3、面向对象方法\n - 随着应用系统日益复杂庞大和面向对象程序设计语言的日益成熟，面向对象的系统开发方法以其直观，方便的优点获得广泛的应用。面向对象开发方法主要分为分析、设计和实现三个阶段。在整个过程中都使用同一套工具完成。\n \n# 计算机网络知识\n## 网络技术标准与协议\n### OSI七层协议\n- **1、物理层：**该层包括物理联网媒介，如电缆连线连接器。该层的协议产生并检测电压以便发送和接收携带数据信号。具体标准有RS232、V.35、RJ-45、FDDI\n- **2、数据链路层：**它控制网络层与物理层直接的通信。它的主要功能是将从网络层接收到的数据分割层特定的可被物理层传输的帧。常见的协议有IEEE802.3/.2、HDLC、PPP、ATM\n- **3、网络层：**其主要功能是将网络地址（例如，IP地址）翻译成对应的物理地址（例如，网卡地址），并决定如何将数据从发送方路由到接收方。在TCP/IP协议中，网络层具体协议有IP、ICMP、IGMP、IPX、ARP等\n- **4、传输层：**主要负责确保数据可靠、顺序、无错地从A点到传输到B点。如提供建立、维护和拆除传送连接的功能；选择网络层提供最适合的服务；在系统之间提供可靠的透明的数据传送，提供端到端的错误恢复和流量控制。具体协议有TCP、UDP、SPX\n- **5、会话层：**负责在网络中的两节点之间建立和维持通信，以及提供交互会话的管理功能，如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式。常见的协议有RPC、SQL、NFS\n- **6、表示层：**如同应用程式和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同，表示层管理数据的解密加密、数据转换、格式化和文本压缩。常见的协议有JPEG、ASCII、GIF、DES、MPEG\n- **7、应用层：**负责对软件提供接口以使程序能使用网络服务、如事物处理程序、文件传送协议和网络管理等。在TCP\\IP协议中，常见的协议有HTTP、Telnet、FTP、SMTP\n\n### 网络协议和标准\n- IEEE 802规范定义了网卡如何访问传输介质（如光缆、双绞线、无线等），以及如何在传输的介质上传输数据的方法，还定义了传输信息的网络设备之间连接建立、维护和拆除的路径。\n- **802.1：**802协议概论\n- **802.2：**逻辑链路控制层LLC协议\n- **802.3：**以太网的CSMA/CD载波监听多路访问/冲突检测协议\n- **802.4：**令牌总线Token Bus协议\n- **802.5：**令牌环Token Ring协议\n- **802.6：**城域网MAN协议\n- **802.7：**FDDI宽带技术协议\n- **802.8：**光纤技术协议\n- **802.9：**局域网上的语音/数据集成规范\n- **802.10：**局域网安全互操作标准\n- **802.11：**无线局域网WLAN标准协议\n- 以太网规范IEEE 802.3是重要的局域网协议，内容包括\n - **IEEE 802.3**        标准以太网       10MB/s          传输介质为细同轴电缆\n - **IEEE 802.3u**       快速以太网       100MB/s         双绞线\n - **IEEE 802.3z**       千兆以太网       1000MB/s        光纤或双绞线","slug":"第三章 信息系统集成专业技术知识","published":1,"updated":"2021-06-25T02:00:18.194Z","layout":"post","photos":[],"link":"","_id":"ckqjatomn002zqkl52vs5fpbr","content":"<h1 id=\"信息系统建设\"><a href=\"#信息系统建设\" class=\"headerlink\" title=\"信息系统建设\"></a>信息系统建设</h1><h2 id=\"信息系统生命周期\"><a href=\"#信息系统生命周期\" class=\"headerlink\" title=\"信息系统生命周期\"></a>信息系统生命周期</h2><ul>\n<li>信息系统建设的内容主要包括设备采购、系统集成、软件开发和运维服务。系统集成是指将计算机软件、硬件、网络通信、信息安全等技术和产品集成为能够满足用户特定需求的信息系统。<a id=\"more\"></a></li>\n<li>1、立项阶段<ul>\n<li>概念阶段或需求阶段，概念形成过程，根据用户单位业务发展和经营管理的需要提出建设信息系统的初步构想，需求分析过程，即对企业信息系统的需求进行深入的调研和分析，形成《需求规格说明书》，经评审、批准和立项</li>\n</ul>\n</li>\n<li>2、开发阶段<ul>\n<li>1、总体规划阶段：已立项阶段所做的需求分析为基础，明确信息系统在企业经营战略中的作用和地位，指导信息系统开发，优化配置并利用各种资源，包括内部资源和外部资源，通过规划过程规范和完善用户单位的业务流程</li>\n<li>2、系统分析阶段：目标是为系统设计阶段提供系统的逻辑模型，内容包括组织结构及功能分析，业务流程分析，数据和数据流程分析及系统初步方案。</li>\n</ul>\n</li>\n<li>3、运维阶段<ul>\n<li>信息系统通过验收，正式移交给用户以后，就进入了运维阶段，要保障系统正常运行，系统维护是不可缺少的工作，维护可分为四中类型：</li>\n<li>1、更正性维护</li>\n<li>2、适应性维护</li>\n<li>3、完善性维护</li>\n<li>4、预防性维护</li>\n</ul>\n</li>\n<li>4、消亡阶段<ul>\n<li>开发一个信息系统并希望它一劳永逸地运行下去是不现实的。企业的信息系统经常不可避免地会遇到系统更新改造，功能扩展，甚至报废重建等情况，当系统正在适应当前环境，或没有必要再进行维护，系统就进入了消亡阶段</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统开发方法\"><a href=\"#系统开发方法\" class=\"headerlink\" title=\"系统开发方法\"></a>系统开发方法</h2><ul>\n<li>系统开发时，为了更好地控制时间、质量、成本等方面的要求及到达用户满意，除了技术,管理等因素外，系统开发方法也起着很重要的作用。</li>\n<li><p>常用的开发方法有：结构化方法、原型法、面向对象方法。</p>\n</li>\n<li><p>1、结构化方法</p>\n<ul>\n<li>结构化方法是早期应用最为广泛的一种开发方法。按照信息系统生命周期，应用结构化系统开发方法，把整个系统的开发过程分为若干阶段，然后一步一步地依次进行，前一阶段是最后一阶段的工作依据;每个阶段又划分为详细的工作步骤，顺序作业。</li>\n<li>每个阶段和主要步骤都有明确详尽的文档编制要求，各个阶段和各个步骤的向下转移都是通过建立各自的软件文档和对关键阶段，步骤进行审核和控制实现。</li>\n<li>瀑布模型就是结构化方法中的一种</li>\n<li>优点：<ul>\n<li>理论基础严密，注重开发过程的整体性和全局性</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>开发周期长；文档、设计说明繁琐、工作效率低；要求在开发之初全面认识系统的信息需求，充分预测各种可能发现的变化，但这并不现实</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2、原型法<ul>\n<li>原型法的基本思想与结构化方法不同，原型法认为在很难一下子全面准确地提出用户需求的情况下，首先不要求一定要对系统做全面、详细的调查，分析、而是本着开发人员对用户需求的初步理解，先快速开发一个原型系统，然后通过反复修改来实现用户的最终系统需求。</li>\n<li>抛弃型原型：此类原型在系统真正实现以后就放弃不用了。</li>\n<li>进化型原型：此类原型的构造从目标系统的一个或几个基本需求出发，通过修改和追加功能的过程逐渐丰富，演化成最终系统。</li>\n</ul>\n</li>\n<li>3、面向对象方法<ul>\n<li>随着应用系统日益复杂庞大和面向对象程序设计语言的日益成熟，面向对象的系统开发方法以其直观，方便的优点获得广泛的应用。面向对象开发方法主要分为分析、设计和实现三个阶段。在整个过程中都使用同一套工具完成。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"计算机网络知识\"><a href=\"#计算机网络知识\" class=\"headerlink\" title=\"计算机网络知识\"></a>计算机网络知识</h1><h2 id=\"网络技术标准与协议\"><a href=\"#网络技术标准与协议\" class=\"headerlink\" title=\"网络技术标准与协议\"></a>网络技术标准与协议</h2><h3 id=\"OSI七层协议\"><a href=\"#OSI七层协议\" class=\"headerlink\" title=\"OSI七层协议\"></a>OSI七层协议</h3><ul>\n<li><strong>1、物理层：</strong>该层包括物理联网媒介，如电缆连线连接器。该层的协议产生并检测电压以便发送和接收携带数据信号。具体标准有RS232、V.35、RJ-45、FDDI</li>\n<li><strong>2、数据链路层：</strong>它控制网络层与物理层直接的通信。它的主要功能是将从网络层接收到的数据分割层特定的可被物理层传输的帧。常见的协议有IEEE802.3/.2、HDLC、PPP、ATM</li>\n<li><strong>3、网络层：</strong>其主要功能是将网络地址（例如，IP地址）翻译成对应的物理地址（例如，网卡地址），并决定如何将数据从发送方路由到接收方。在TCP/IP协议中，网络层具体协议有IP、ICMP、IGMP、IPX、ARP等</li>\n<li><strong>4、传输层：</strong>主要负责确保数据可靠、顺序、无错地从A点到传输到B点。如提供建立、维护和拆除传送连接的功能；选择网络层提供最适合的服务；在系统之间提供可靠的透明的数据传送，提供端到端的错误恢复和流量控制。具体协议有TCP、UDP、SPX</li>\n<li><strong>5、会话层：</strong>负责在网络中的两节点之间建立和维持通信，以及提供交互会话的管理功能，如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式。常见的协议有RPC、SQL、NFS</li>\n<li><strong>6、表示层：</strong>如同应用程式和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同，表示层管理数据的解密加密、数据转换、格式化和文本压缩。常见的协议有JPEG、ASCII、GIF、DES、MPEG</li>\n<li><strong>7、应用层：</strong>负责对软件提供接口以使程序能使用网络服务、如事物处理程序、文件传送协议和网络管理等。在TCP\\IP协议中，常见的协议有HTTP、Telnet、FTP、SMTP</li>\n</ul>\n<h3 id=\"网络协议和标准\"><a href=\"#网络协议和标准\" class=\"headerlink\" title=\"网络协议和标准\"></a>网络协议和标准</h3><ul>\n<li>IEEE 802规范定义了网卡如何访问传输介质（如光缆、双绞线、无线等），以及如何在传输的介质上传输数据的方法，还定义了传输信息的网络设备之间连接建立、维护和拆除的路径。</li>\n<li><strong>802.1：</strong>802协议概论</li>\n<li><strong>802.2：</strong>逻辑链路控制层LLC协议</li>\n<li><strong>802.3：</strong>以太网的CSMA/CD载波监听多路访问/冲突检测协议</li>\n<li><strong>802.4：</strong>令牌总线Token Bus协议</li>\n<li><strong>802.5：</strong>令牌环Token Ring协议</li>\n<li><strong>802.6：</strong>城域网MAN协议</li>\n<li><strong>802.7：</strong>FDDI宽带技术协议</li>\n<li><strong>802.8：</strong>光纤技术协议</li>\n<li><strong>802.9：</strong>局域网上的语音/数据集成规范</li>\n<li><strong>802.10：</strong>局域网安全互操作标准</li>\n<li><strong>802.11：</strong>无线局域网WLAN标准协议</li>\n<li>以太网规范IEEE 802.3是重要的局域网协议，内容包括<ul>\n<li><strong>IEEE 802.3</strong>        标准以太网       10MB/s          传输介质为细同轴电缆</li>\n<li><strong>IEEE 802.3u</strong>       快速以太网       100MB/s         双绞线</li>\n<li><strong>IEEE 802.3z</strong>       千兆以太网       1000MB/s        光纤或双绞线</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"信息系统建设\"><a href=\"#信息系统建设\" class=\"headerlink\" title=\"信息系统建设\"></a>信息系统建设</h1><h2 id=\"信息系统生命周期\"><a href=\"#信息系统生命周期\" class=\"headerlink\" title=\"信息系统生命周期\"></a>信息系统生命周期</h2><ul>\n<li>信息系统建设的内容主要包括设备采购、系统集成、软件开发和运维服务。系统集成是指将计算机软件、硬件、网络通信、信息安全等技术和产品集成为能够满足用户特定需求的信息系统。","more":"</li>\n<li>1、立项阶段<ul>\n<li>概念阶段或需求阶段，概念形成过程，根据用户单位业务发展和经营管理的需要提出建设信息系统的初步构想，需求分析过程，即对企业信息系统的需求进行深入的调研和分析，形成《需求规格说明书》，经评审、批准和立项</li>\n</ul>\n</li>\n<li>2、开发阶段<ul>\n<li>1、总体规划阶段：已立项阶段所做的需求分析为基础，明确信息系统在企业经营战略中的作用和地位，指导信息系统开发，优化配置并利用各种资源，包括内部资源和外部资源，通过规划过程规范和完善用户单位的业务流程</li>\n<li>2、系统分析阶段：目标是为系统设计阶段提供系统的逻辑模型，内容包括组织结构及功能分析，业务流程分析，数据和数据流程分析及系统初步方案。</li>\n</ul>\n</li>\n<li>3、运维阶段<ul>\n<li>信息系统通过验收，正式移交给用户以后，就进入了运维阶段，要保障系统正常运行，系统维护是不可缺少的工作，维护可分为四中类型：</li>\n<li>1、更正性维护</li>\n<li>2、适应性维护</li>\n<li>3、完善性维护</li>\n<li>4、预防性维护</li>\n</ul>\n</li>\n<li>4、消亡阶段<ul>\n<li>开发一个信息系统并希望它一劳永逸地运行下去是不现实的。企业的信息系统经常不可避免地会遇到系统更新改造，功能扩展，甚至报废重建等情况，当系统正在适应当前环境，或没有必要再进行维护，系统就进入了消亡阶段</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统开发方法\"><a href=\"#系统开发方法\" class=\"headerlink\" title=\"系统开发方法\"></a>系统开发方法</h2><ul>\n<li>系统开发时，为了更好地控制时间、质量、成本等方面的要求及到达用户满意，除了技术,管理等因素外，系统开发方法也起着很重要的作用。</li>\n<li><p>常用的开发方法有：结构化方法、原型法、面向对象方法。</p>\n</li>\n<li><p>1、结构化方法</p>\n<ul>\n<li>结构化方法是早期应用最为广泛的一种开发方法。按照信息系统生命周期，应用结构化系统开发方法，把整个系统的开发过程分为若干阶段，然后一步一步地依次进行，前一阶段是最后一阶段的工作依据;每个阶段又划分为详细的工作步骤，顺序作业。</li>\n<li>每个阶段和主要步骤都有明确详尽的文档编制要求，各个阶段和各个步骤的向下转移都是通过建立各自的软件文档和对关键阶段，步骤进行审核和控制实现。</li>\n<li>瀑布模型就是结构化方法中的一种</li>\n<li>优点：<ul>\n<li>理论基础严密，注重开发过程的整体性和全局性</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>开发周期长；文档、设计说明繁琐、工作效率低；要求在开发之初全面认识系统的信息需求，充分预测各种可能发现的变化，但这并不现实</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2、原型法<ul>\n<li>原型法的基本思想与结构化方法不同，原型法认为在很难一下子全面准确地提出用户需求的情况下，首先不要求一定要对系统做全面、详细的调查，分析、而是本着开发人员对用户需求的初步理解，先快速开发一个原型系统，然后通过反复修改来实现用户的最终系统需求。</li>\n<li>抛弃型原型：此类原型在系统真正实现以后就放弃不用了。</li>\n<li>进化型原型：此类原型的构造从目标系统的一个或几个基本需求出发，通过修改和追加功能的过程逐渐丰富，演化成最终系统。</li>\n</ul>\n</li>\n<li>3、面向对象方法<ul>\n<li>随着应用系统日益复杂庞大和面向对象程序设计语言的日益成熟，面向对象的系统开发方法以其直观，方便的优点获得广泛的应用。面向对象开发方法主要分为分析、设计和实现三个阶段。在整个过程中都使用同一套工具完成。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"计算机网络知识\"><a href=\"#计算机网络知识\" class=\"headerlink\" title=\"计算机网络知识\"></a>计算机网络知识</h1><h2 id=\"网络技术标准与协议\"><a href=\"#网络技术标准与协议\" class=\"headerlink\" title=\"网络技术标准与协议\"></a>网络技术标准与协议</h2><h3 id=\"OSI七层协议\"><a href=\"#OSI七层协议\" class=\"headerlink\" title=\"OSI七层协议\"></a>OSI七层协议</h3><ul>\n<li><strong>1、物理层：</strong>该层包括物理联网媒介，如电缆连线连接器。该层的协议产生并检测电压以便发送和接收携带数据信号。具体标准有RS232、V.35、RJ-45、FDDI</li>\n<li><strong>2、数据链路层：</strong>它控制网络层与物理层直接的通信。它的主要功能是将从网络层接收到的数据分割层特定的可被物理层传输的帧。常见的协议有IEEE802.3/.2、HDLC、PPP、ATM</li>\n<li><strong>3、网络层：</strong>其主要功能是将网络地址（例如，IP地址）翻译成对应的物理地址（例如，网卡地址），并决定如何将数据从发送方路由到接收方。在TCP/IP协议中，网络层具体协议有IP、ICMP、IGMP、IPX、ARP等</li>\n<li><strong>4、传输层：</strong>主要负责确保数据可靠、顺序、无错地从A点到传输到B点。如提供建立、维护和拆除传送连接的功能；选择网络层提供最适合的服务；在系统之间提供可靠的透明的数据传送，提供端到端的错误恢复和流量控制。具体协议有TCP、UDP、SPX</li>\n<li><strong>5、会话层：</strong>负责在网络中的两节点之间建立和维持通信，以及提供交互会话的管理功能，如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式。常见的协议有RPC、SQL、NFS</li>\n<li><strong>6、表示层：</strong>如同应用程式和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同，表示层管理数据的解密加密、数据转换、格式化和文本压缩。常见的协议有JPEG、ASCII、GIF、DES、MPEG</li>\n<li><strong>7、应用层：</strong>负责对软件提供接口以使程序能使用网络服务、如事物处理程序、文件传送协议和网络管理等。在TCP\\IP协议中，常见的协议有HTTP、Telnet、FTP、SMTP</li>\n</ul>\n<h3 id=\"网络协议和标准\"><a href=\"#网络协议和标准\" class=\"headerlink\" title=\"网络协议和标准\"></a>网络协议和标准</h3><ul>\n<li>IEEE 802规范定义了网卡如何访问传输介质（如光缆、双绞线、无线等），以及如何在传输的介质上传输数据的方法，还定义了传输信息的网络设备之间连接建立、维护和拆除的路径。</li>\n<li><strong>802.1：</strong>802协议概论</li>\n<li><strong>802.2：</strong>逻辑链路控制层LLC协议</li>\n<li><strong>802.3：</strong>以太网的CSMA/CD载波监听多路访问/冲突检测协议</li>\n<li><strong>802.4：</strong>令牌总线Token Bus协议</li>\n<li><strong>802.5：</strong>令牌环Token Ring协议</li>\n<li><strong>802.6：</strong>城域网MAN协议</li>\n<li><strong>802.7：</strong>FDDI宽带技术协议</li>\n<li><strong>802.8：</strong>光纤技术协议</li>\n<li><strong>802.9：</strong>局域网上的语音/数据集成规范</li>\n<li><strong>802.10：</strong>局域网安全互操作标准</li>\n<li><strong>802.11：</strong>无线局域网WLAN标准协议</li>\n<li>以太网规范IEEE 802.3是重要的局域网协议，内容包括<ul>\n<li><strong>IEEE 802.3</strong>        标准以太网       10MB/s          传输介质为细同轴电缆</li>\n<li><strong>IEEE 802.3u</strong>       快速以太网       100MB/s         双绞线</li>\n<li><strong>IEEE 802.3z</strong>       千兆以太网       1000MB/s        光纤或双绞线</li>\n</ul>\n</li>\n</ul>"},{"title":"第七章 项目范围管理","date":"2016-10-27T02:57:33.000Z","comments":1,"toc":true,"_content":"\n# 项目范围管理概念\n## 含义及作用\n- 项目范围管理包括确保项目做且只做所需要的全部工作，以成功完成项目的各个过程。通俗地将，项目范围管理就是要做范围内的事，而且只做范围内的事，即不少做也不多做。\n- 项目范围是项目其他各方面管理的基础，如果范围都弄不清，成本，进度和质量等就无从谈起。确认项目范围对项目管理有如下重要性：\n - 1、清楚了项目的工作具体范围和具体工作内容，为提高成本，时间和资源估算的准确性提供了基础。\n - 2、项目范围既然是确定要完成哪些具体的工作，项目范围基准是确定项目进度测量和控制的基准\n - 3、项目范围的确定就是确定了项目的具体工作任务，有助于清楚的责任划分和任务分配\n\n<!--more--> \n## 项目范围管理的主要过程\n- 1、编制范围管理计划过程，对如何定义，确认和控制项目范围的过程进行描述\n- 2、收集需求。为实现项目目标，明确并记录项目干系人的相关需求的过程\n- 3、定义范围。详细描述产品范围和项目范围，编制项目范围说明书，作为以后项目决策的基础\n- 4、创建工作分解结构。把整个项目工作分解为较小，易于管理的组成部分，形成一个自上而下的分解结构。\n- 5、确认范围。正式验收已完成的可交付成果。\n- 6、范围控制。监督项目和产品的范围状态、管理范围基准变更\n\n","source":"_posts/第七章 项目范围管理.md","raw":"---\ntitle: 第七章 项目范围管理\ndate: 2016-10-27 10:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 项目范围管理概念\n## 含义及作用\n- 项目范围管理包括确保项目做且只做所需要的全部工作，以成功完成项目的各个过程。通俗地将，项目范围管理就是要做范围内的事，而且只做范围内的事，即不少做也不多做。\n- 项目范围是项目其他各方面管理的基础，如果范围都弄不清，成本，进度和质量等就无从谈起。确认项目范围对项目管理有如下重要性：\n - 1、清楚了项目的工作具体范围和具体工作内容，为提高成本，时间和资源估算的准确性提供了基础。\n - 2、项目范围既然是确定要完成哪些具体的工作，项目范围基准是确定项目进度测量和控制的基准\n - 3、项目范围的确定就是确定了项目的具体工作任务，有助于清楚的责任划分和任务分配\n\n<!--more--> \n## 项目范围管理的主要过程\n- 1、编制范围管理计划过程，对如何定义，确认和控制项目范围的过程进行描述\n- 2、收集需求。为实现项目目标，明确并记录项目干系人的相关需求的过程\n- 3、定义范围。详细描述产品范围和项目范围，编制项目范围说明书，作为以后项目决策的基础\n- 4、创建工作分解结构。把整个项目工作分解为较小，易于管理的组成部分，形成一个自上而下的分解结构。\n- 5、确认范围。正式验收已完成的可交付成果。\n- 6、范围控制。监督项目和产品的范围状态、管理范围基准变更\n\n","slug":"第七章 项目范围管理","published":1,"updated":"2021-06-25T02:00:18.191Z","layout":"post","photos":[],"link":"","_id":"ckqjatomp0032qkl5yhri9ey6","content":"<h1 id=\"项目范围管理概念\"><a href=\"#项目范围管理概念\" class=\"headerlink\" title=\"项目范围管理概念\"></a>项目范围管理概念</h1><h2 id=\"含义及作用\"><a href=\"#含义及作用\" class=\"headerlink\" title=\"含义及作用\"></a>含义及作用</h2><ul>\n<li>项目范围管理包括确保项目做且只做所需要的全部工作，以成功完成项目的各个过程。通俗地将，项目范围管理就是要做范围内的事，而且只做范围内的事，即不少做也不多做。</li>\n<li>项目范围是项目其他各方面管理的基础，如果范围都弄不清，成本，进度和质量等就无从谈起。确认项目范围对项目管理有如下重要性：<ul>\n<li>1、清楚了项目的工作具体范围和具体工作内容，为提高成本，时间和资源估算的准确性提供了基础。</li>\n<li>2、项目范围既然是确定要完成哪些具体的工作，项目范围基准是确定项目进度测量和控制的基准</li>\n<li>3、项目范围的确定就是确定了项目的具体工作任务，有助于清楚的责任划分和任务分配</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a> \n<h2 id=\"项目范围管理的主要过程\"><a href=\"#项目范围管理的主要过程\" class=\"headerlink\" title=\"项目范围管理的主要过程\"></a>项目范围管理的主要过程</h2><ul>\n<li>1、编制范围管理计划过程，对如何定义，确认和控制项目范围的过程进行描述</li>\n<li>2、收集需求。为实现项目目标，明确并记录项目干系人的相关需求的过程</li>\n<li>3、定义范围。详细描述产品范围和项目范围，编制项目范围说明书，作为以后项目决策的基础</li>\n<li>4、创建工作分解结构。把整个项目工作分解为较小，易于管理的组成部分，形成一个自上而下的分解结构。</li>\n<li>5、确认范围。正式验收已完成的可交付成果。</li>\n<li>6、范围控制。监督项目和产品的范围状态、管理范围基准变更</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"项目范围管理概念\"><a href=\"#项目范围管理概念\" class=\"headerlink\" title=\"项目范围管理概念\"></a>项目范围管理概念</h1><h2 id=\"含义及作用\"><a href=\"#含义及作用\" class=\"headerlink\" title=\"含义及作用\"></a>含义及作用</h2><ul>\n<li>项目范围管理包括确保项目做且只做所需要的全部工作，以成功完成项目的各个过程。通俗地将，项目范围管理就是要做范围内的事，而且只做范围内的事，即不少做也不多做。</li>\n<li>项目范围是项目其他各方面管理的基础，如果范围都弄不清，成本，进度和质量等就无从谈起。确认项目范围对项目管理有如下重要性：<ul>\n<li>1、清楚了项目的工作具体范围和具体工作内容，为提高成本，时间和资源估算的准确性提供了基础。</li>\n<li>2、项目范围既然是确定要完成哪些具体的工作，项目范围基准是确定项目进度测量和控制的基准</li>\n<li>3、项目范围的确定就是确定了项目的具体工作任务，有助于清楚的责任划分和任务分配</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"项目范围管理的主要过程\"><a href=\"#项目范围管理的主要过程\" class=\"headerlink\" title=\"项目范围管理的主要过程\"></a>项目范围管理的主要过程</h2><ul>\n<li>1、编制范围管理计划过程，对如何定义，确认和控制项目范围的过程进行描述</li>\n<li>2、收集需求。为实现项目目标，明确并记录项目干系人的相关需求的过程</li>\n<li>3、定义范围。详细描述产品范围和项目范围，编制项目范围说明书，作为以后项目决策的基础</li>\n<li>4、创建工作分解结构。把整个项目工作分解为较小，易于管理的组成部分，形成一个自上而下的分解结构。</li>\n<li>5、确认范围。正式验收已完成的可交付成果。</li>\n<li>6、范围控制。监督项目和产品的范围状态、管理范围基准变更</li>\n</ul>"},{"title":"第九章 项目成本管理","date":"2016-10-24T15:57:33.000Z","comments":1,"toc":true,"_content":"\n# 概念及相关术语\n## 概念及构成\n - 成本是指项目活动或其组成的部分的货币价值或价格。\n\n## 项目成本失控原因\n<!--more-->\n - 1、对项目认识不足\n   - 1、对信息系统工程成本控制的特点认识不足、对难度估计不足。\n   - 2、工程项目的规模不合理，一个大而全的项目往往导致工期很长，而且导致工程实施的技术难度太高，导致技术人员的投入方面跟不上工程建设的需要，并且建设单位各部门对信息系统工程的接受能力和观念的转变更不上信息系统建设的需要\n   - 3、工程项目的设计及实施人员缺乏成本意识，导致项目的设计不满足成本控制的要求\n   - 4、对项目成本的使用缺乏责任感，随意开支，铺张浪费。\n - 2、组织制度不健全\n   - 1、制度不完善\n   - 2、责任不落实。缺乏成本控制的责任感，在项目各个阶段和工作包没有落实具体的成本控制人员\n   - 3、承建单位项目经理没有明确的投资分工，导致对投资控制的领导督查不力\n - 3、方法问题\n   - 1、缺乏用于项目投资控制所需要的有关报表及数据处理的方法\n   - 2、缺乏系统的成本控制程序和明确的具体要求，在项目进展不同阶段对成本控制的任务的要求不明确，在项目进展的整个过程中缺乏连贯性控制\n   - 3、缺乏科学、严格、明确且完整的成本控制方法和工作制度\n   - 4、缺乏对计算机辅助投资控制程序的利用\n   - 5、缺乏对计划值与实际值进行动态的比较分析，并及时提供各种需要状态报告及经验总结\n - 4、技术制约\n   - 1、由于进行项目成本估算发生在工程项目建设的早期阶段，对项目相关信息了解不深，项目规划设计不够完善，不能满足成本估算的需求\n   - 2、采用项目成本估算方法不恰当，与项目的实际情况不符，或与所得到的项目数据资料不符。\n   - 3、项目成本计算的数据不准确或有漏项，从而导致计算成本偏低。\n   - 4、设计者未对设计方案进行优化，导致项目设计方案突破项目成本目标\n   - 5、物资或设备价格的上涨，大大超过预期的浮动范围\n   - 6、项目规划和设计方面的变更引起的成本增加\n   - 7、对工程实施中可能遇见的风险估计不足，导致实施成本大量增加\n  - 5、需求管理不当\n  \n## 项目成本管理过程\n- 1、制订成本管理计划\n - 制订了项目成本结构、估算、预算和控制的标准\n- 2、成本估算\n - 编制完成项目活动所需要的大致成本\n- 3、成本预算\n - 合计各个活动或工作包的估算成本，以建立成本基准\n- 4、成本控制\n - 影响造成成本偏差的因素，控制项目预算的变更\n\n## 相关术语\n### 成本类型\n- 1、可变成本\n- 2、固定成本\n- 3、直接成本\n- 4、间接成本\n- 5、机会成本\n- 6、沉没成本\n\n# 成本估算采用技术与工具\n- 1、专家判断\n- 2、类比估算\n- 3、参数估算\n- 4、自下而上估算\n- 5、三点估算\n - 最可能成本（Cm）\n - 最乐观成本（Co）\n - 最悲观成本（Cp）\n - 预期成本 Ce=（Co+4Cm+Cp）/6\n- 6、储备分析\n- 7、质量成本（COQ）\n- 8、项目管理软件\n- 9、卖方投标分析\n- 10、群体决策技术\n\n# 项目成本预算\n## 制定项目成本预算的步骤\n- 1、将项目总成本分摊到项目工作分解结构的各个工作包\n- 2、将各个工作包成本在分配到该工作包所包含的各项活动上\n- 3、确定各项成本预算支出的时间计划及项目成本预算计划\n\n# 项目成本控制\n## 项目成本控制内容\n- 1、对造成成本基准变更的因素施加影响\n- 2、确保所有变更请求得得到了及时处理\n- 3、当变更实际发生时，管理这些变更\n- 4、确保成本支出不超过批准的资金限额，即不超出按时段、按WBS组件、按活动分配的限额、也不超出项目总限额\n- 5、监督成本绩效，找出分析与成本基准间的变更\n- 6、对照资金支出，监督工作绩效\n- 7、防止在成本或资源使用报告中出现未经批准的变更\n- 8、向有关干系人报告所有经批准的变更及相关成本\n- 9、设法把预期的成本超支控制在可接受范围内\n\n## 项目成本控制所用的工具与技术\n### 挣值管理（EVM）\n- 把范围、进度和资源绩效综合起来考虑，以评估绩效和进展的方法\n- 1、计划值（Planned Value，**PV**）\n - 完成计划工作所花的预算成本\n- 2、挣值（Earned Value，**EV**）\n - 完成实际工作的预算成本\n- 3、实际成本（Actual Cost，**AC**）\n - 完成实际工作的实际成本\n- 4、进度偏差（Schedule Variance，**SV**）\n - **SV = EV-PV **\n - SV大于0进度超前，SV小于0进度落后\n- 5、成本偏差（Cost Variance，**CV**）\n - **CV = EV-AC**\n - CV大于0成本节省，CV小于0成本超支\n- 6、进度绩效指数（Schedule Performance Index，**SPI**）\n - **SPI = EV/PV**\n - SPI大于1进度超前，SPI小于1进度落后\n- 7、成本绩效指数（Cost Performance Index，**CPI**）\n - **CPI = EV/AC**\n - CPI大于1成本节省，CPI小于1成本超支\n- 8、完工预算（**BAC**)\n - 将要执行的工作所建立的全部预算总和，全部计划工作的价值，项目的成本基准\n- 9、完工偏差（**VAC**）\n - **VAC = BAC-EAC**\n - 对预算亏空量或盈余量的一种预测，是完工预算与完工估算之差\n- 10、完工估算（**EAC**）\n - **EAC = AC+ETC**\n - 完成所有工作所需要的预期总成本，等于截止目前的实际成本加上完工尚需估算\n- 11、完工尚需估算（**ETC**）\n - 完成所有剩余项目工作的预计成本\n - 非典型偏差\n   - **ETC = BAC-EV**\n - 典型偏差\n   - **ETC = （BAC-EV）/CPI** 或者 **EAC = BAC/CPI**\n- 12、完工尚需绩效指数（**TCPI**）\n - ** TCPI = （BAC-EV）/(BAC-AC)**\n \n   ","source":"_posts/第九章 项目成本管理.md","raw":"---\ntitle: 第九章 项目成本管理\ndate: 2016-10-24 23:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 概念及相关术语\n## 概念及构成\n - 成本是指项目活动或其组成的部分的货币价值或价格。\n\n## 项目成本失控原因\n<!--more-->\n - 1、对项目认识不足\n   - 1、对信息系统工程成本控制的特点认识不足、对难度估计不足。\n   - 2、工程项目的规模不合理，一个大而全的项目往往导致工期很长，而且导致工程实施的技术难度太高，导致技术人员的投入方面跟不上工程建设的需要，并且建设单位各部门对信息系统工程的接受能力和观念的转变更不上信息系统建设的需要\n   - 3、工程项目的设计及实施人员缺乏成本意识，导致项目的设计不满足成本控制的要求\n   - 4、对项目成本的使用缺乏责任感，随意开支，铺张浪费。\n - 2、组织制度不健全\n   - 1、制度不完善\n   - 2、责任不落实。缺乏成本控制的责任感，在项目各个阶段和工作包没有落实具体的成本控制人员\n   - 3、承建单位项目经理没有明确的投资分工，导致对投资控制的领导督查不力\n - 3、方法问题\n   - 1、缺乏用于项目投资控制所需要的有关报表及数据处理的方法\n   - 2、缺乏系统的成本控制程序和明确的具体要求，在项目进展不同阶段对成本控制的任务的要求不明确，在项目进展的整个过程中缺乏连贯性控制\n   - 3、缺乏科学、严格、明确且完整的成本控制方法和工作制度\n   - 4、缺乏对计算机辅助投资控制程序的利用\n   - 5、缺乏对计划值与实际值进行动态的比较分析，并及时提供各种需要状态报告及经验总结\n - 4、技术制约\n   - 1、由于进行项目成本估算发生在工程项目建设的早期阶段，对项目相关信息了解不深，项目规划设计不够完善，不能满足成本估算的需求\n   - 2、采用项目成本估算方法不恰当，与项目的实际情况不符，或与所得到的项目数据资料不符。\n   - 3、项目成本计算的数据不准确或有漏项，从而导致计算成本偏低。\n   - 4、设计者未对设计方案进行优化，导致项目设计方案突破项目成本目标\n   - 5、物资或设备价格的上涨，大大超过预期的浮动范围\n   - 6、项目规划和设计方面的变更引起的成本增加\n   - 7、对工程实施中可能遇见的风险估计不足，导致实施成本大量增加\n  - 5、需求管理不当\n  \n## 项目成本管理过程\n- 1、制订成本管理计划\n - 制订了项目成本结构、估算、预算和控制的标准\n- 2、成本估算\n - 编制完成项目活动所需要的大致成本\n- 3、成本预算\n - 合计各个活动或工作包的估算成本，以建立成本基准\n- 4、成本控制\n - 影响造成成本偏差的因素，控制项目预算的变更\n\n## 相关术语\n### 成本类型\n- 1、可变成本\n- 2、固定成本\n- 3、直接成本\n- 4、间接成本\n- 5、机会成本\n- 6、沉没成本\n\n# 成本估算采用技术与工具\n- 1、专家判断\n- 2、类比估算\n- 3、参数估算\n- 4、自下而上估算\n- 5、三点估算\n - 最可能成本（Cm）\n - 最乐观成本（Co）\n - 最悲观成本（Cp）\n - 预期成本 Ce=（Co+4Cm+Cp）/6\n- 6、储备分析\n- 7、质量成本（COQ）\n- 8、项目管理软件\n- 9、卖方投标分析\n- 10、群体决策技术\n\n# 项目成本预算\n## 制定项目成本预算的步骤\n- 1、将项目总成本分摊到项目工作分解结构的各个工作包\n- 2、将各个工作包成本在分配到该工作包所包含的各项活动上\n- 3、确定各项成本预算支出的时间计划及项目成本预算计划\n\n# 项目成本控制\n## 项目成本控制内容\n- 1、对造成成本基准变更的因素施加影响\n- 2、确保所有变更请求得得到了及时处理\n- 3、当变更实际发生时，管理这些变更\n- 4、确保成本支出不超过批准的资金限额，即不超出按时段、按WBS组件、按活动分配的限额、也不超出项目总限额\n- 5、监督成本绩效，找出分析与成本基准间的变更\n- 6、对照资金支出，监督工作绩效\n- 7、防止在成本或资源使用报告中出现未经批准的变更\n- 8、向有关干系人报告所有经批准的变更及相关成本\n- 9、设法把预期的成本超支控制在可接受范围内\n\n## 项目成本控制所用的工具与技术\n### 挣值管理（EVM）\n- 把范围、进度和资源绩效综合起来考虑，以评估绩效和进展的方法\n- 1、计划值（Planned Value，**PV**）\n - 完成计划工作所花的预算成本\n- 2、挣值（Earned Value，**EV**）\n - 完成实际工作的预算成本\n- 3、实际成本（Actual Cost，**AC**）\n - 完成实际工作的实际成本\n- 4、进度偏差（Schedule Variance，**SV**）\n - **SV = EV-PV **\n - SV大于0进度超前，SV小于0进度落后\n- 5、成本偏差（Cost Variance，**CV**）\n - **CV = EV-AC**\n - CV大于0成本节省，CV小于0成本超支\n- 6、进度绩效指数（Schedule Performance Index，**SPI**）\n - **SPI = EV/PV**\n - SPI大于1进度超前，SPI小于1进度落后\n- 7、成本绩效指数（Cost Performance Index，**CPI**）\n - **CPI = EV/AC**\n - CPI大于1成本节省，CPI小于1成本超支\n- 8、完工预算（**BAC**)\n - 将要执行的工作所建立的全部预算总和，全部计划工作的价值，项目的成本基准\n- 9、完工偏差（**VAC**）\n - **VAC = BAC-EAC**\n - 对预算亏空量或盈余量的一种预测，是完工预算与完工估算之差\n- 10、完工估算（**EAC**）\n - **EAC = AC+ETC**\n - 完成所有工作所需要的预期总成本，等于截止目前的实际成本加上完工尚需估算\n- 11、完工尚需估算（**ETC**）\n - 完成所有剩余项目工作的预计成本\n - 非典型偏差\n   - **ETC = BAC-EV**\n - 典型偏差\n   - **ETC = （BAC-EV）/CPI** 或者 **EAC = BAC/CPI**\n- 12、完工尚需绩效指数（**TCPI**）\n - ** TCPI = （BAC-EV）/(BAC-AC)**\n \n   ","slug":"第九章 项目成本管理","published":1,"updated":"2021-06-25T02:00:18.195Z","layout":"post","photos":[],"link":"","_id":"ckqjatomq0033qkl5llqsb37a","content":"<h1 id=\"概念及相关术语\"><a href=\"#概念及相关术语\" class=\"headerlink\" title=\"概念及相关术语\"></a>概念及相关术语</h1><h2 id=\"概念及构成\"><a href=\"#概念及构成\" class=\"headerlink\" title=\"概念及构成\"></a>概念及构成</h2><ul>\n<li>成本是指项目活动或其组成的部分的货币价值或价格。</li>\n</ul>\n<h2 id=\"项目成本失控原因\"><a href=\"#项目成本失控原因\" class=\"headerlink\" title=\"项目成本失控原因\"></a>项目成本失控原因</h2><a id=\"more\"></a>\n<ul>\n<li>1、对项目认识不足<ul>\n<li>1、对信息系统工程成本控制的特点认识不足、对难度估计不足。</li>\n<li>2、工程项目的规模不合理，一个大而全的项目往往导致工期很长，而且导致工程实施的技术难度太高，导致技术人员的投入方面跟不上工程建设的需要，并且建设单位各部门对信息系统工程的接受能力和观念的转变更不上信息系统建设的需要</li>\n<li>3、工程项目的设计及实施人员缺乏成本意识，导致项目的设计不满足成本控制的要求</li>\n<li>4、对项目成本的使用缺乏责任感，随意开支，铺张浪费。</li>\n</ul>\n</li>\n<li>2、组织制度不健全<ul>\n<li>1、制度不完善</li>\n<li>2、责任不落实。缺乏成本控制的责任感，在项目各个阶段和工作包没有落实具体的成本控制人员</li>\n<li>3、承建单位项目经理没有明确的投资分工，导致对投资控制的领导督查不力</li>\n</ul>\n</li>\n<li>3、方法问题<ul>\n<li>1、缺乏用于项目投资控制所需要的有关报表及数据处理的方法</li>\n<li>2、缺乏系统的成本控制程序和明确的具体要求，在项目进展不同阶段对成本控制的任务的要求不明确，在项目进展的整个过程中缺乏连贯性控制</li>\n<li>3、缺乏科学、严格、明确且完整的成本控制方法和工作制度</li>\n<li>4、缺乏对计算机辅助投资控制程序的利用</li>\n<li>5、缺乏对计划值与实际值进行动态的比较分析，并及时提供各种需要状态报告及经验总结</li>\n</ul>\n</li>\n<li>4、技术制约<ul>\n<li>1、由于进行项目成本估算发生在工程项目建设的早期阶段，对项目相关信息了解不深，项目规划设计不够完善，不能满足成本估算的需求</li>\n<li>2、采用项目成本估算方法不恰当，与项目的实际情况不符，或与所得到的项目数据资料不符。</li>\n<li>3、项目成本计算的数据不准确或有漏项，从而导致计算成本偏低。</li>\n<li>4、设计者未对设计方案进行优化，导致项目设计方案突破项目成本目标</li>\n<li>5、物资或设备价格的上涨，大大超过预期的浮动范围</li>\n<li>6、项目规划和设计方面的变更引起的成本增加</li>\n<li>7、对工程实施中可能遇见的风险估计不足，导致实施成本大量增加</li>\n<li>5、需求管理不当</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目成本管理过程\"><a href=\"#项目成本管理过程\" class=\"headerlink\" title=\"项目成本管理过程\"></a>项目成本管理过程</h2><ul>\n<li>1、制订成本管理计划<ul>\n<li>制订了项目成本结构、估算、预算和控制的标准</li>\n</ul>\n</li>\n<li>2、成本估算<ul>\n<li>编制完成项目活动所需要的大致成本</li>\n</ul>\n</li>\n<li>3、成本预算<ul>\n<li>合计各个活动或工作包的估算成本，以建立成本基准</li>\n</ul>\n</li>\n<li>4、成本控制<ul>\n<li>影响造成成本偏差的因素，控制项目预算的变更</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"相关术语\"><a href=\"#相关术语\" class=\"headerlink\" title=\"相关术语\"></a>相关术语</h2><h3 id=\"成本类型\"><a href=\"#成本类型\" class=\"headerlink\" title=\"成本类型\"></a>成本类型</h3><ul>\n<li>1、可变成本</li>\n<li>2、固定成本</li>\n<li>3、直接成本</li>\n<li>4、间接成本</li>\n<li>5、机会成本</li>\n<li>6、沉没成本</li>\n</ul>\n<h1 id=\"成本估算采用技术与工具\"><a href=\"#成本估算采用技术与工具\" class=\"headerlink\" title=\"成本估算采用技术与工具\"></a>成本估算采用技术与工具</h1><ul>\n<li>1、专家判断</li>\n<li>2、类比估算</li>\n<li>3、参数估算</li>\n<li>4、自下而上估算</li>\n<li>5、三点估算<ul>\n<li>最可能成本（Cm）</li>\n<li>最乐观成本（Co）</li>\n<li>最悲观成本（Cp）</li>\n<li>预期成本 Ce=（Co+4Cm+Cp）/6</li>\n</ul>\n</li>\n<li>6、储备分析</li>\n<li>7、质量成本（COQ）</li>\n<li>8、项目管理软件</li>\n<li>9、卖方投标分析</li>\n<li>10、群体决策技术</li>\n</ul>\n<h1 id=\"项目成本预算\"><a href=\"#项目成本预算\" class=\"headerlink\" title=\"项目成本预算\"></a>项目成本预算</h1><h2 id=\"制定项目成本预算的步骤\"><a href=\"#制定项目成本预算的步骤\" class=\"headerlink\" title=\"制定项目成本预算的步骤\"></a>制定项目成本预算的步骤</h2><ul>\n<li>1、将项目总成本分摊到项目工作分解结构的各个工作包</li>\n<li>2、将各个工作包成本在分配到该工作包所包含的各项活动上</li>\n<li>3、确定各项成本预算支出的时间计划及项目成本预算计划</li>\n</ul>\n<h1 id=\"项目成本控制\"><a href=\"#项目成本控制\" class=\"headerlink\" title=\"项目成本控制\"></a>项目成本控制</h1><h2 id=\"项目成本控制内容\"><a href=\"#项目成本控制内容\" class=\"headerlink\" title=\"项目成本控制内容\"></a>项目成本控制内容</h2><ul>\n<li>1、对造成成本基准变更的因素施加影响</li>\n<li>2、确保所有变更请求得得到了及时处理</li>\n<li>3、当变更实际发生时，管理这些变更</li>\n<li>4、确保成本支出不超过批准的资金限额，即不超出按时段、按WBS组件、按活动分配的限额、也不超出项目总限额</li>\n<li>5、监督成本绩效，找出分析与成本基准间的变更</li>\n<li>6、对照资金支出，监督工作绩效</li>\n<li>7、防止在成本或资源使用报告中出现未经批准的变更</li>\n<li>8、向有关干系人报告所有经批准的变更及相关成本</li>\n<li>9、设法把预期的成本超支控制在可接受范围内</li>\n</ul>\n<h2 id=\"项目成本控制所用的工具与技术\"><a href=\"#项目成本控制所用的工具与技术\" class=\"headerlink\" title=\"项目成本控制所用的工具与技术\"></a>项目成本控制所用的工具与技术</h2><h3 id=\"挣值管理（EVM）\"><a href=\"#挣值管理（EVM）\" class=\"headerlink\" title=\"挣值管理（EVM）\"></a>挣值管理（EVM）</h3><ul>\n<li>把范围、进度和资源绩效综合起来考虑，以评估绩效和进展的方法</li>\n<li>1、计划值（Planned Value，<strong>PV</strong>）<ul>\n<li>完成计划工作所花的预算成本</li>\n</ul>\n</li>\n<li>2、挣值（Earned Value，<strong>EV</strong>）<ul>\n<li>完成实际工作的预算成本</li>\n</ul>\n</li>\n<li>3、实际成本（Actual Cost，<strong>AC</strong>）<ul>\n<li>完成实际工作的实际成本</li>\n</ul>\n</li>\n<li>4、进度偏差（Schedule Variance，<strong>SV</strong>）<ul>\n<li><strong>SV = EV-PV </strong></li>\n<li>SV大于0进度超前，SV小于0进度落后</li>\n</ul>\n</li>\n<li>5、成本偏差（Cost Variance，<strong>CV</strong>）<ul>\n<li><strong>CV = EV-AC</strong></li>\n<li>CV大于0成本节省，CV小于0成本超支</li>\n</ul>\n</li>\n<li>6、进度绩效指数（Schedule Performance Index，<strong>SPI</strong>）<ul>\n<li><strong>SPI = EV/PV</strong></li>\n<li>SPI大于1进度超前，SPI小于1进度落后</li>\n</ul>\n</li>\n<li>7、成本绩效指数（Cost Performance Index，<strong>CPI</strong>）<ul>\n<li><strong>CPI = EV/AC</strong></li>\n<li>CPI大于1成本节省，CPI小于1成本超支</li>\n</ul>\n</li>\n<li>8、完工预算（<strong>BAC</strong>)<ul>\n<li>将要执行的工作所建立的全部预算总和，全部计划工作的价值，项目的成本基准</li>\n</ul>\n</li>\n<li>9、完工偏差（<strong>VAC</strong>）<ul>\n<li><strong>VAC = BAC-EAC</strong></li>\n<li>对预算亏空量或盈余量的一种预测，是完工预算与完工估算之差</li>\n</ul>\n</li>\n<li>10、完工估算（<strong>EAC</strong>）<ul>\n<li><strong>EAC = AC+ETC</strong></li>\n<li>完成所有工作所需要的预期总成本，等于截止目前的实际成本加上完工尚需估算</li>\n</ul>\n</li>\n<li>11、完工尚需估算（<strong>ETC</strong>）<ul>\n<li>完成所有剩余项目工作的预计成本</li>\n<li>非典型偏差<ul>\n<li><strong>ETC = BAC-EV</strong></li>\n</ul>\n</li>\n<li>典型偏差<ul>\n<li><strong>ETC = （BAC-EV）/CPI</strong> 或者 <strong>EAC = BAC/CPI</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>12、完工尚需绩效指数（<strong>TCPI</strong>）<ul>\n<li><strong> TCPI = （BAC-EV）/(BAC-AC)</strong></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"概念及相关术语\"><a href=\"#概念及相关术语\" class=\"headerlink\" title=\"概念及相关术语\"></a>概念及相关术语</h1><h2 id=\"概念及构成\"><a href=\"#概念及构成\" class=\"headerlink\" title=\"概念及构成\"></a>概念及构成</h2><ul>\n<li>成本是指项目活动或其组成的部分的货币价值或价格。</li>\n</ul>\n<h2 id=\"项目成本失控原因\"><a href=\"#项目成本失控原因\" class=\"headerlink\" title=\"项目成本失控原因\"></a>项目成本失控原因</h2>","more":"<ul>\n<li>1、对项目认识不足<ul>\n<li>1、对信息系统工程成本控制的特点认识不足、对难度估计不足。</li>\n<li>2、工程项目的规模不合理，一个大而全的项目往往导致工期很长，而且导致工程实施的技术难度太高，导致技术人员的投入方面跟不上工程建设的需要，并且建设单位各部门对信息系统工程的接受能力和观念的转变更不上信息系统建设的需要</li>\n<li>3、工程项目的设计及实施人员缺乏成本意识，导致项目的设计不满足成本控制的要求</li>\n<li>4、对项目成本的使用缺乏责任感，随意开支，铺张浪费。</li>\n</ul>\n</li>\n<li>2、组织制度不健全<ul>\n<li>1、制度不完善</li>\n<li>2、责任不落实。缺乏成本控制的责任感，在项目各个阶段和工作包没有落实具体的成本控制人员</li>\n<li>3、承建单位项目经理没有明确的投资分工，导致对投资控制的领导督查不力</li>\n</ul>\n</li>\n<li>3、方法问题<ul>\n<li>1、缺乏用于项目投资控制所需要的有关报表及数据处理的方法</li>\n<li>2、缺乏系统的成本控制程序和明确的具体要求，在项目进展不同阶段对成本控制的任务的要求不明确，在项目进展的整个过程中缺乏连贯性控制</li>\n<li>3、缺乏科学、严格、明确且完整的成本控制方法和工作制度</li>\n<li>4、缺乏对计算机辅助投资控制程序的利用</li>\n<li>5、缺乏对计划值与实际值进行动态的比较分析，并及时提供各种需要状态报告及经验总结</li>\n</ul>\n</li>\n<li>4、技术制约<ul>\n<li>1、由于进行项目成本估算发生在工程项目建设的早期阶段，对项目相关信息了解不深，项目规划设计不够完善，不能满足成本估算的需求</li>\n<li>2、采用项目成本估算方法不恰当，与项目的实际情况不符，或与所得到的项目数据资料不符。</li>\n<li>3、项目成本计算的数据不准确或有漏项，从而导致计算成本偏低。</li>\n<li>4、设计者未对设计方案进行优化，导致项目设计方案突破项目成本目标</li>\n<li>5、物资或设备价格的上涨，大大超过预期的浮动范围</li>\n<li>6、项目规划和设计方面的变更引起的成本增加</li>\n<li>7、对工程实施中可能遇见的风险估计不足，导致实施成本大量增加</li>\n<li>5、需求管理不当</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目成本管理过程\"><a href=\"#项目成本管理过程\" class=\"headerlink\" title=\"项目成本管理过程\"></a>项目成本管理过程</h2><ul>\n<li>1、制订成本管理计划<ul>\n<li>制订了项目成本结构、估算、预算和控制的标准</li>\n</ul>\n</li>\n<li>2、成本估算<ul>\n<li>编制完成项目活动所需要的大致成本</li>\n</ul>\n</li>\n<li>3、成本预算<ul>\n<li>合计各个活动或工作包的估算成本，以建立成本基准</li>\n</ul>\n</li>\n<li>4、成本控制<ul>\n<li>影响造成成本偏差的因素，控制项目预算的变更</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"相关术语\"><a href=\"#相关术语\" class=\"headerlink\" title=\"相关术语\"></a>相关术语</h2><h3 id=\"成本类型\"><a href=\"#成本类型\" class=\"headerlink\" title=\"成本类型\"></a>成本类型</h3><ul>\n<li>1、可变成本</li>\n<li>2、固定成本</li>\n<li>3、直接成本</li>\n<li>4、间接成本</li>\n<li>5、机会成本</li>\n<li>6、沉没成本</li>\n</ul>\n<h1 id=\"成本估算采用技术与工具\"><a href=\"#成本估算采用技术与工具\" class=\"headerlink\" title=\"成本估算采用技术与工具\"></a>成本估算采用技术与工具</h1><ul>\n<li>1、专家判断</li>\n<li>2、类比估算</li>\n<li>3、参数估算</li>\n<li>4、自下而上估算</li>\n<li>5、三点估算<ul>\n<li>最可能成本（Cm）</li>\n<li>最乐观成本（Co）</li>\n<li>最悲观成本（Cp）</li>\n<li>预期成本 Ce=（Co+4Cm+Cp）/6</li>\n</ul>\n</li>\n<li>6、储备分析</li>\n<li>7、质量成本（COQ）</li>\n<li>8、项目管理软件</li>\n<li>9、卖方投标分析</li>\n<li>10、群体决策技术</li>\n</ul>\n<h1 id=\"项目成本预算\"><a href=\"#项目成本预算\" class=\"headerlink\" title=\"项目成本预算\"></a>项目成本预算</h1><h2 id=\"制定项目成本预算的步骤\"><a href=\"#制定项目成本预算的步骤\" class=\"headerlink\" title=\"制定项目成本预算的步骤\"></a>制定项目成本预算的步骤</h2><ul>\n<li>1、将项目总成本分摊到项目工作分解结构的各个工作包</li>\n<li>2、将各个工作包成本在分配到该工作包所包含的各项活动上</li>\n<li>3、确定各项成本预算支出的时间计划及项目成本预算计划</li>\n</ul>\n<h1 id=\"项目成本控制\"><a href=\"#项目成本控制\" class=\"headerlink\" title=\"项目成本控制\"></a>项目成本控制</h1><h2 id=\"项目成本控制内容\"><a href=\"#项目成本控制内容\" class=\"headerlink\" title=\"项目成本控制内容\"></a>项目成本控制内容</h2><ul>\n<li>1、对造成成本基准变更的因素施加影响</li>\n<li>2、确保所有变更请求得得到了及时处理</li>\n<li>3、当变更实际发生时，管理这些变更</li>\n<li>4、确保成本支出不超过批准的资金限额，即不超出按时段、按WBS组件、按活动分配的限额、也不超出项目总限额</li>\n<li>5、监督成本绩效，找出分析与成本基准间的变更</li>\n<li>6、对照资金支出，监督工作绩效</li>\n<li>7、防止在成本或资源使用报告中出现未经批准的变更</li>\n<li>8、向有关干系人报告所有经批准的变更及相关成本</li>\n<li>9、设法把预期的成本超支控制在可接受范围内</li>\n</ul>\n<h2 id=\"项目成本控制所用的工具与技术\"><a href=\"#项目成本控制所用的工具与技术\" class=\"headerlink\" title=\"项目成本控制所用的工具与技术\"></a>项目成本控制所用的工具与技术</h2><h3 id=\"挣值管理（EVM）\"><a href=\"#挣值管理（EVM）\" class=\"headerlink\" title=\"挣值管理（EVM）\"></a>挣值管理（EVM）</h3><ul>\n<li>把范围、进度和资源绩效综合起来考虑，以评估绩效和进展的方法</li>\n<li>1、计划值（Planned Value，<strong>PV</strong>）<ul>\n<li>完成计划工作所花的预算成本</li>\n</ul>\n</li>\n<li>2、挣值（Earned Value，<strong>EV</strong>）<ul>\n<li>完成实际工作的预算成本</li>\n</ul>\n</li>\n<li>3、实际成本（Actual Cost，<strong>AC</strong>）<ul>\n<li>完成实际工作的实际成本</li>\n</ul>\n</li>\n<li>4、进度偏差（Schedule Variance，<strong>SV</strong>）<ul>\n<li><strong>SV = EV-PV </strong></li>\n<li>SV大于0进度超前，SV小于0进度落后</li>\n</ul>\n</li>\n<li>5、成本偏差（Cost Variance，<strong>CV</strong>）<ul>\n<li><strong>CV = EV-AC</strong></li>\n<li>CV大于0成本节省，CV小于0成本超支</li>\n</ul>\n</li>\n<li>6、进度绩效指数（Schedule Performance Index，<strong>SPI</strong>）<ul>\n<li><strong>SPI = EV/PV</strong></li>\n<li>SPI大于1进度超前，SPI小于1进度落后</li>\n</ul>\n</li>\n<li>7、成本绩效指数（Cost Performance Index，<strong>CPI</strong>）<ul>\n<li><strong>CPI = EV/AC</strong></li>\n<li>CPI大于1成本节省，CPI小于1成本超支</li>\n</ul>\n</li>\n<li>8、完工预算（<strong>BAC</strong>)<ul>\n<li>将要执行的工作所建立的全部预算总和，全部计划工作的价值，项目的成本基准</li>\n</ul>\n</li>\n<li>9、完工偏差（<strong>VAC</strong>）<ul>\n<li><strong>VAC = BAC-EAC</strong></li>\n<li>对预算亏空量或盈余量的一种预测，是完工预算与完工估算之差</li>\n</ul>\n</li>\n<li>10、完工估算（<strong>EAC</strong>）<ul>\n<li><strong>EAC = AC+ETC</strong></li>\n<li>完成所有工作所需要的预期总成本，等于截止目前的实际成本加上完工尚需估算</li>\n</ul>\n</li>\n<li>11、完工尚需估算（<strong>ETC</strong>）<ul>\n<li>完成所有剩余项目工作的预计成本</li>\n<li>非典型偏差<ul>\n<li><strong>ETC = BAC-EV</strong></li>\n</ul>\n</li>\n<li>典型偏差<ul>\n<li><strong>ETC = （BAC-EV）/CPI</strong> 或者 <strong>EAC = BAC/CPI</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>12、完工尚需绩效指数（<strong>TCPI</strong>）<ul>\n<li><strong> TCPI = （BAC-EV）/(BAC-AC)</strong></li>\n</ul>\n</li>\n</ul>"},{"title":"第六章 项目整体管理","date":"2016-10-28T02:57:33.000Z","comments":1,"toc":true,"_content":"\n# 概述\n## 含义、作用和过程\n- 项目整体管理包括为识别、定义、组合、统一和协调各项目管理过程组成的各种过程和活动而开展的工作，是项目管理中一项综合性和全局性的管理工作。整体管理就是要决定在什么时间把工作量分配到相应的资源上，有哪些潜在的问题并在其出现之前积极处理，以及协调各项工作使项目整体上取得一个好的结果。包括选择资源分配、平衡相互竞争的目标和方案，以及协调项目管理各知识领域直接的依赖关系。\n\n<!--more-->\n- **6个过程**\n- **1、制定项目章程**\n - 编写一份正式文件的过程，这份文件就是项目章程。通过发布项目章程，正式地批准项目并授权项目经理在项目活动中使用资源\n- **2、制定项目管理计划**\n - 定义、准备和协调所有子计划，并把它们整合为一份综合项目管理计划过程。项目管理计划包括经过整合的项目基准和子计划\n- **3、指导与管理项目工作**\n - 为实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准变更的过程。\n- **4、监控项目工作**\n - 跟踪、审查、和报告项目进展，以实现项目管理计划中确定的绩效目标的过程\n- **5、实施整体变更控制**\n - 审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并对变更处理结果进行沟通的过程\n- **6、结束项目或阶段**\n - 完成所有项目管理过程的所有活动，以正式结束项目或阶段的过程\n\n## 项目管理团队活动\n- 1、分析和理解项目范围。包括产品需求、标准、假设、约束、项目干系人的期望和其他与项目相关的因素，以及它们在项目中是如何被管理和考虑的\n- 2、把产品需求的验收标准进行归档\n- 3、理解如何获取已明确的信息，并用结构化的方法将其纳入到项目管理计划\n- 4、准备工作分解结构\n- 5、采取恰当的行动使项目按照所规划的范围和整体管理过程来实施\n- 6、对项目状态、过程和产品进行度量和监督\n- 7、分析项目风险\n\n## 项目经理是整合者\n- 整合者是项目经理承担的重要角色之一，他要通过沟通来协调，通过协调来整合。作为整合者，项目经理必须从宏观视角来审视项目。\n- 作为整合者，项目经理必须\n- 1、通过与项目干系人主动，全面的沟通，来了解他们对项目的需求\n- 2、在相互竞争的众多干系人直接寻找平衡点\n- 3、通过认证、细致的协调工作，来达到各种需求间的平衡，实现整合\n\n## 整体管理的地位\n- 1、项目团队需要在整体管理的指导下从事后面九大领域的管理\n- 2、其他九大领域的管理，最终是为了实现项目的整体管理，实现项目目标的综合最优\n\n# 项目整体管理实现过程\n## 制定项目章程概述\n- 项目章程是编写一份正式批准项目并授权项目经理在项目活动中使用组织资源的文件过程。项目章程宣告一个项目的正式启动、项目经理的任命，并对项目的目标、范围、主要可交付成果、主要制约因素与主要假设条件进行总体性描述。\n项目章程体现高级管理层对项目的原则性要求。是项目经理寻求各主要干系人支持的依据。\n- 项目章程不能太抽象，也不能太具体。另外，项目经理可以参与甚至起草项目章程，但项目章程是项目以外的实体来发布的，如发起人，项目集或项目管理办公室职员，项目经理是项目章程的实施者。项目章程遵循“谁签发，谁有权修改”的原则。\n\n## 项目章程的作用\n- 1、确定项目经理，规定项目经理的权力\n- 2、正式确认项目的存在，给项目一个合法的地位\n- 3、规定项目的总体目标，包括范围、时间、成本和质量\n- 4、通过叙述启动项目的理由，把项目与执行组织的日常经营运作及战略计划等联系起来","source":"_posts/第六章 项目整体管理.md","raw":"---\ntitle: 第六章 项目整体管理\ndate: 2016-10-28 10:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 概述\n## 含义、作用和过程\n- 项目整体管理包括为识别、定义、组合、统一和协调各项目管理过程组成的各种过程和活动而开展的工作，是项目管理中一项综合性和全局性的管理工作。整体管理就是要决定在什么时间把工作量分配到相应的资源上，有哪些潜在的问题并在其出现之前积极处理，以及协调各项工作使项目整体上取得一个好的结果。包括选择资源分配、平衡相互竞争的目标和方案，以及协调项目管理各知识领域直接的依赖关系。\n\n<!--more-->\n- **6个过程**\n- **1、制定项目章程**\n - 编写一份正式文件的过程，这份文件就是项目章程。通过发布项目章程，正式地批准项目并授权项目经理在项目活动中使用资源\n- **2、制定项目管理计划**\n - 定义、准备和协调所有子计划，并把它们整合为一份综合项目管理计划过程。项目管理计划包括经过整合的项目基准和子计划\n- **3、指导与管理项目工作**\n - 为实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准变更的过程。\n- **4、监控项目工作**\n - 跟踪、审查、和报告项目进展，以实现项目管理计划中确定的绩效目标的过程\n- **5、实施整体变更控制**\n - 审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并对变更处理结果进行沟通的过程\n- **6、结束项目或阶段**\n - 完成所有项目管理过程的所有活动，以正式结束项目或阶段的过程\n\n## 项目管理团队活动\n- 1、分析和理解项目范围。包括产品需求、标准、假设、约束、项目干系人的期望和其他与项目相关的因素，以及它们在项目中是如何被管理和考虑的\n- 2、把产品需求的验收标准进行归档\n- 3、理解如何获取已明确的信息，并用结构化的方法将其纳入到项目管理计划\n- 4、准备工作分解结构\n- 5、采取恰当的行动使项目按照所规划的范围和整体管理过程来实施\n- 6、对项目状态、过程和产品进行度量和监督\n- 7、分析项目风险\n\n## 项目经理是整合者\n- 整合者是项目经理承担的重要角色之一，他要通过沟通来协调，通过协调来整合。作为整合者，项目经理必须从宏观视角来审视项目。\n- 作为整合者，项目经理必须\n- 1、通过与项目干系人主动，全面的沟通，来了解他们对项目的需求\n- 2、在相互竞争的众多干系人直接寻找平衡点\n- 3、通过认证、细致的协调工作，来达到各种需求间的平衡，实现整合\n\n## 整体管理的地位\n- 1、项目团队需要在整体管理的指导下从事后面九大领域的管理\n- 2、其他九大领域的管理，最终是为了实现项目的整体管理，实现项目目标的综合最优\n\n# 项目整体管理实现过程\n## 制定项目章程概述\n- 项目章程是编写一份正式批准项目并授权项目经理在项目活动中使用组织资源的文件过程。项目章程宣告一个项目的正式启动、项目经理的任命，并对项目的目标、范围、主要可交付成果、主要制约因素与主要假设条件进行总体性描述。\n项目章程体现高级管理层对项目的原则性要求。是项目经理寻求各主要干系人支持的依据。\n- 项目章程不能太抽象，也不能太具体。另外，项目经理可以参与甚至起草项目章程，但项目章程是项目以外的实体来发布的，如发起人，项目集或项目管理办公室职员，项目经理是项目章程的实施者。项目章程遵循“谁签发，谁有权修改”的原则。\n\n## 项目章程的作用\n- 1、确定项目经理，规定项目经理的权力\n- 2、正式确认项目的存在，给项目一个合法的地位\n- 3、规定项目的总体目标，包括范围、时间、成本和质量\n- 4、通过叙述启动项目的理由，把项目与执行组织的日常经营运作及战略计划等联系起来","slug":"第六章 项目整体管理","published":1,"updated":"2021-06-25T02:00:18.270Z","layout":"post","photos":[],"link":"","_id":"ckqjatoms0035qkl5a6w6qjtl","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"含义、作用和过程\"><a href=\"#含义、作用和过程\" class=\"headerlink\" title=\"含义、作用和过程\"></a>含义、作用和过程</h2><ul>\n<li>项目整体管理包括为识别、定义、组合、统一和协调各项目管理过程组成的各种过程和活动而开展的工作，是项目管理中一项综合性和全局性的管理工作。整体管理就是要决定在什么时间把工作量分配到相应的资源上，有哪些潜在的问题并在其出现之前积极处理，以及协调各项工作使项目整体上取得一个好的结果。包括选择资源分配、平衡相互竞争的目标和方案，以及协调项目管理各知识领域直接的依赖关系。</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><strong>6个过程</strong></li>\n<li><strong>1、制定项目章程</strong><ul>\n<li>编写一份正式文件的过程，这份文件就是项目章程。通过发布项目章程，正式地批准项目并授权项目经理在项目活动中使用资源</li>\n</ul>\n</li>\n<li><strong>2、制定项目管理计划</strong><ul>\n<li>定义、准备和协调所有子计划，并把它们整合为一份综合项目管理计划过程。项目管理计划包括经过整合的项目基准和子计划</li>\n</ul>\n</li>\n<li><strong>3、指导与管理项目工作</strong><ul>\n<li>为实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准变更的过程。</li>\n</ul>\n</li>\n<li><strong>4、监控项目工作</strong><ul>\n<li>跟踪、审查、和报告项目进展，以实现项目管理计划中确定的绩效目标的过程</li>\n</ul>\n</li>\n<li><strong>5、实施整体变更控制</strong><ul>\n<li>审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并对变更处理结果进行沟通的过程</li>\n</ul>\n</li>\n<li><strong>6、结束项目或阶段</strong><ul>\n<li>完成所有项目管理过程的所有活动，以正式结束项目或阶段的过程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目管理团队活动\"><a href=\"#项目管理团队活动\" class=\"headerlink\" title=\"项目管理团队活动\"></a>项目管理团队活动</h2><ul>\n<li>1、分析和理解项目范围。包括产品需求、标准、假设、约束、项目干系人的期望和其他与项目相关的因素，以及它们在项目中是如何被管理和考虑的</li>\n<li>2、把产品需求的验收标准进行归档</li>\n<li>3、理解如何获取已明确的信息，并用结构化的方法将其纳入到项目管理计划</li>\n<li>4、准备工作分解结构</li>\n<li>5、采取恰当的行动使项目按照所规划的范围和整体管理过程来实施</li>\n<li>6、对项目状态、过程和产品进行度量和监督</li>\n<li>7、分析项目风险</li>\n</ul>\n<h2 id=\"项目经理是整合者\"><a href=\"#项目经理是整合者\" class=\"headerlink\" title=\"项目经理是整合者\"></a>项目经理是整合者</h2><ul>\n<li>整合者是项目经理承担的重要角色之一，他要通过沟通来协调，通过协调来整合。作为整合者，项目经理必须从宏观视角来审视项目。</li>\n<li>作为整合者，项目经理必须</li>\n<li>1、通过与项目干系人主动，全面的沟通，来了解他们对项目的需求</li>\n<li>2、在相互竞争的众多干系人直接寻找平衡点</li>\n<li>3、通过认证、细致的协调工作，来达到各种需求间的平衡，实现整合</li>\n</ul>\n<h2 id=\"整体管理的地位\"><a href=\"#整体管理的地位\" class=\"headerlink\" title=\"整体管理的地位\"></a>整体管理的地位</h2><ul>\n<li>1、项目团队需要在整体管理的指导下从事后面九大领域的管理</li>\n<li>2、其他九大领域的管理，最终是为了实现项目的整体管理，实现项目目标的综合最优</li>\n</ul>\n<h1 id=\"项目整体管理实现过程\"><a href=\"#项目整体管理实现过程\" class=\"headerlink\" title=\"项目整体管理实现过程\"></a>项目整体管理实现过程</h1><h2 id=\"制定项目章程概述\"><a href=\"#制定项目章程概述\" class=\"headerlink\" title=\"制定项目章程概述\"></a>制定项目章程概述</h2><ul>\n<li>项目章程是编写一份正式批准项目并授权项目经理在项目活动中使用组织资源的文件过程。项目章程宣告一个项目的正式启动、项目经理的任命，并对项目的目标、范围、主要可交付成果、主要制约因素与主要假设条件进行总体性描述。<br>项目章程体现高级管理层对项目的原则性要求。是项目经理寻求各主要干系人支持的依据。</li>\n<li>项目章程不能太抽象，也不能太具体。另外，项目经理可以参与甚至起草项目章程，但项目章程是项目以外的实体来发布的，如发起人，项目集或项目管理办公室职员，项目经理是项目章程的实施者。项目章程遵循“谁签发，谁有权修改”的原则。</li>\n</ul>\n<h2 id=\"项目章程的作用\"><a href=\"#项目章程的作用\" class=\"headerlink\" title=\"项目章程的作用\"></a>项目章程的作用</h2><ul>\n<li>1、确定项目经理，规定项目经理的权力</li>\n<li>2、正式确认项目的存在，给项目一个合法的地位</li>\n<li>3、规定项目的总体目标，包括范围、时间、成本和质量</li>\n<li>4、通过叙述启动项目的理由，把项目与执行组织的日常经营运作及战略计划等联系起来</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"含义、作用和过程\"><a href=\"#含义、作用和过程\" class=\"headerlink\" title=\"含义、作用和过程\"></a>含义、作用和过程</h2><ul>\n<li>项目整体管理包括为识别、定义、组合、统一和协调各项目管理过程组成的各种过程和活动而开展的工作，是项目管理中一项综合性和全局性的管理工作。整体管理就是要决定在什么时间把工作量分配到相应的资源上，有哪些潜在的问题并在其出现之前积极处理，以及协调各项工作使项目整体上取得一个好的结果。包括选择资源分配、平衡相互竞争的目标和方案，以及协调项目管理各知识领域直接的依赖关系。</li>\n</ul>","more":"<ul>\n<li><strong>6个过程</strong></li>\n<li><strong>1、制定项目章程</strong><ul>\n<li>编写一份正式文件的过程，这份文件就是项目章程。通过发布项目章程，正式地批准项目并授权项目经理在项目活动中使用资源</li>\n</ul>\n</li>\n<li><strong>2、制定项目管理计划</strong><ul>\n<li>定义、准备和协调所有子计划，并把它们整合为一份综合项目管理计划过程。项目管理计划包括经过整合的项目基准和子计划</li>\n</ul>\n</li>\n<li><strong>3、指导与管理项目工作</strong><ul>\n<li>为实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准变更的过程。</li>\n</ul>\n</li>\n<li><strong>4、监控项目工作</strong><ul>\n<li>跟踪、审查、和报告项目进展，以实现项目管理计划中确定的绩效目标的过程</li>\n</ul>\n</li>\n<li><strong>5、实施整体变更控制</strong><ul>\n<li>审查所有变更请求，批准变更，管理对可交付成果、组织过程资产、项目文件和项目管理计划的变更，并对变更处理结果进行沟通的过程</li>\n</ul>\n</li>\n<li><strong>6、结束项目或阶段</strong><ul>\n<li>完成所有项目管理过程的所有活动，以正式结束项目或阶段的过程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目管理团队活动\"><a href=\"#项目管理团队活动\" class=\"headerlink\" title=\"项目管理团队活动\"></a>项目管理团队活动</h2><ul>\n<li>1、分析和理解项目范围。包括产品需求、标准、假设、约束、项目干系人的期望和其他与项目相关的因素，以及它们在项目中是如何被管理和考虑的</li>\n<li>2、把产品需求的验收标准进行归档</li>\n<li>3、理解如何获取已明确的信息，并用结构化的方法将其纳入到项目管理计划</li>\n<li>4、准备工作分解结构</li>\n<li>5、采取恰当的行动使项目按照所规划的范围和整体管理过程来实施</li>\n<li>6、对项目状态、过程和产品进行度量和监督</li>\n<li>7、分析项目风险</li>\n</ul>\n<h2 id=\"项目经理是整合者\"><a href=\"#项目经理是整合者\" class=\"headerlink\" title=\"项目经理是整合者\"></a>项目经理是整合者</h2><ul>\n<li>整合者是项目经理承担的重要角色之一，他要通过沟通来协调，通过协调来整合。作为整合者，项目经理必须从宏观视角来审视项目。</li>\n<li>作为整合者，项目经理必须</li>\n<li>1、通过与项目干系人主动，全面的沟通，来了解他们对项目的需求</li>\n<li>2、在相互竞争的众多干系人直接寻找平衡点</li>\n<li>3、通过认证、细致的协调工作，来达到各种需求间的平衡，实现整合</li>\n</ul>\n<h2 id=\"整体管理的地位\"><a href=\"#整体管理的地位\" class=\"headerlink\" title=\"整体管理的地位\"></a>整体管理的地位</h2><ul>\n<li>1、项目团队需要在整体管理的指导下从事后面九大领域的管理</li>\n<li>2、其他九大领域的管理，最终是为了实现项目的整体管理，实现项目目标的综合最优</li>\n</ul>\n<h1 id=\"项目整体管理实现过程\"><a href=\"#项目整体管理实现过程\" class=\"headerlink\" title=\"项目整体管理实现过程\"></a>项目整体管理实现过程</h1><h2 id=\"制定项目章程概述\"><a href=\"#制定项目章程概述\" class=\"headerlink\" title=\"制定项目章程概述\"></a>制定项目章程概述</h2><ul>\n<li>项目章程是编写一份正式批准项目并授权项目经理在项目活动中使用组织资源的文件过程。项目章程宣告一个项目的正式启动、项目经理的任命，并对项目的目标、范围、主要可交付成果、主要制约因素与主要假设条件进行总体性描述。<br>项目章程体现高级管理层对项目的原则性要求。是项目经理寻求各主要干系人支持的依据。</li>\n<li>项目章程不能太抽象，也不能太具体。另外，项目经理可以参与甚至起草项目章程，但项目章程是项目以外的实体来发布的，如发起人，项目集或项目管理办公室职员，项目经理是项目章程的实施者。项目章程遵循“谁签发，谁有权修改”的原则。</li>\n</ul>\n<h2 id=\"项目章程的作用\"><a href=\"#项目章程的作用\" class=\"headerlink\" title=\"项目章程的作用\"></a>项目章程的作用</h2><ul>\n<li>1、确定项目经理，规定项目经理的权力</li>\n<li>2、正式确认项目的存在，给项目一个合法的地位</li>\n<li>3、规定项目的总体目标，包括范围、时间、成本和质量</li>\n<li>4、通过叙述启动项目的理由，把项目与执行组织的日常经营运作及战略计划等联系起来</li>\n</ul>"},{"title":"第二章 信息系统集成及服务管理","date":"2016-11-03T15:57:33.000Z","comments":1,"toc":true,"_content":"\n# 信息系统集成及服务管理体系\n***随着信息技术的飞速发展，信息系统建设取得了巨大的成绩，积累了宝贵的经验，主流是健康的。但暴露出来的各种问题不容忽视。随着我国信息化建设的逐步推进，对信息系统集成及服务的引导和管理，逐渐形成了我国自由的信息系统集成及服务管理体系。***\n<!--more-->\n## 信息系统集成及服务管理内容\n\n### 服务内容\n- 1、信息技术咨询服务（为企业提供信息化建设规划和解决方案属于前端环节）\n- 2、系统集成服务\n- 3、技术支持服务\n- 4、运行维护服务\n\n### 信息系统集成管理体系\n*目前存在的问题*\n- 1、系统质量不能满足应用的基本要求\n- 2、工程进度拖拖后延期\n- 3、项目资金使用不合理或严重超出预算\n- 4、项目文档不全甚至严重缺水\n- 5、在项目实施过程中系统业务需求一变再变\n- 6、在项目实施过程中经常出现扯皮、推诿现象\n- 7、系统存在着安全漏洞和隐患\n- 8、重硬件轻软件，重开发轻维护，重建设轻应用\n- 9、信息系统服务企业缺乏规范的流程和能力管理\n- 10、信息系统建设普遍存在产品化与个性化需求的矛盾\n- 11、开放性要求高、而标准和规范更新快\n\n*产生问题的原因*\n- 1、不具备技术实力的系统集成商搅乱信息集成及服务市场\n- 2、一些建设单位在选择项目承建商和进行业务需求分析方面经验不足\n- 3、信息系统集成及服务企业自身建设有待加强\n- 4、缺乏相应的机制和制度\n- 5、企业能力建设缺乏相关的指导标准\n\n*管理体系*\n- 1、信息系统集成、运维服务和信息系统监理资质管理\n- 2、信息系统集成、运维服务和信息系统监理相关人员管理\n- 3、国家计划（投资）部门对规范的、具备信息系统项目管理能力的企业和人员的建议新要求\n- 4、信息系统用户对规范的、具备信息系统项目管理能力的企业和人员市场信息需求\n\n***政府主管部门的作用是加强“引导、规范、监管、服务”；***\n\n## 信息系统集成及服务管理推进\n### 实施信息系统集成及服务资质管理制度\n- 1、推荐优秀系统集成商\n- 2、对信息系统集成企业进行资质认证\n\n***成绩***\n- 1、认证工作及结果被各级政府和社会各界广泛认同\n - 1、67号文件第十条规定：“未经资质认证的单位，不得承揽或者以其他单位名义承揽信息化工程”；第十一条规定：“建设单位不得将信息化工程项目包给不具备相关资质等级的单位”；\n - 2、保密局发文：把具有信息产业部颁发的《计算机信息系统集成资质证书》（一级或二级）作为“涉密系统集成单位”的必要条件\n - 3、47号文件认证贯彻执行《振兴软件产业行动纲要》。要求“对国家重大项目信息化工程实行招标制、工程监理制、承建单位实行资质认证”；明确规定“利用财政性质资金建设的信息化工程，用于购买软件产品和服务的资金原则上不得低于总投资的30%”\n- 2、资质认证对系统集成人员的队伍、环境社保、质保体系、客服体系、培训体系、软件成果及所占比例、注册资本及财务状况、营业规模及业绩、项目质量、单位信誉进行严格审查、一年一度填报、四年一次换证\n- 3、有效地规范了信息系统集成市场，使皮包商钻空子和搅乱市场秩序的状况得到了控制\n- 4、信息系统工程质量显著提高\n- 5、发展创造良好的环境起到了引导作用。\n\n### 推行项目经理制度\n### 推出ITSS标准及评估服务\n\n# 信息系统集成及服务资质管理\n## 必要性和意义\n- 必要性（主流是健康的但也存在一些问题不容忽视）\n - 问题1、用户选择集成商缺少依据和标准\n - 问题2、国家规定参与竞标需要资质认证而我们没给企业确认等级，企业参与国际竞争有困难\n - 问题3、不具备能力的单位搅乱市场\n  \n- 意义：\n - 1、有利于系统集成及服务企业展示自身实力，参与市场竞争；按照等级条件加强自身建设\n - 2、有利于规范信息系统集成及服务市场\n - 3、有利于保证信息系统及服务工程质量\n\n## 管理办法\n- 1、工作机构\n- 2、资质设定\n- 3、资质申请与认定\n- 4、资质证书管理\n - 有效期四年、正副本同等效力\n\n## 等级条件\n- 1、综合条件\n- 2、财务状况\n- 3、信誉\n- 4、业绩\n- 5、管理能力\n - 1、质量管理体系\n   - 1、企业在运作过程中严格执行单位制度文件和质量体系文件\n   - 2、有详细完整的实施记录\n   - 3、有可视化的实施效果\n - 2、客户服务管理\n   - 1、对不同级别的系统集成企业要求建立客户服务制度，并配备专门客服部门和客服人员。越高级别要求越高\n- 6、技术实力\n- 7、人才实力\n\n","source":"_posts/第二章 信息系统集成及服务管理.md","raw":"---\ntitle: 第二章 信息系统集成及服务管理\ndate: 2016-11-03 23:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 信息系统集成及服务管理体系\n***随着信息技术的飞速发展，信息系统建设取得了巨大的成绩，积累了宝贵的经验，主流是健康的。但暴露出来的各种问题不容忽视。随着我国信息化建设的逐步推进，对信息系统集成及服务的引导和管理，逐渐形成了我国自由的信息系统集成及服务管理体系。***\n<!--more-->\n## 信息系统集成及服务管理内容\n\n### 服务内容\n- 1、信息技术咨询服务（为企业提供信息化建设规划和解决方案属于前端环节）\n- 2、系统集成服务\n- 3、技术支持服务\n- 4、运行维护服务\n\n### 信息系统集成管理体系\n*目前存在的问题*\n- 1、系统质量不能满足应用的基本要求\n- 2、工程进度拖拖后延期\n- 3、项目资金使用不合理或严重超出预算\n- 4、项目文档不全甚至严重缺水\n- 5、在项目实施过程中系统业务需求一变再变\n- 6、在项目实施过程中经常出现扯皮、推诿现象\n- 7、系统存在着安全漏洞和隐患\n- 8、重硬件轻软件，重开发轻维护，重建设轻应用\n- 9、信息系统服务企业缺乏规范的流程和能力管理\n- 10、信息系统建设普遍存在产品化与个性化需求的矛盾\n- 11、开放性要求高、而标准和规范更新快\n\n*产生问题的原因*\n- 1、不具备技术实力的系统集成商搅乱信息集成及服务市场\n- 2、一些建设单位在选择项目承建商和进行业务需求分析方面经验不足\n- 3、信息系统集成及服务企业自身建设有待加强\n- 4、缺乏相应的机制和制度\n- 5、企业能力建设缺乏相关的指导标准\n\n*管理体系*\n- 1、信息系统集成、运维服务和信息系统监理资质管理\n- 2、信息系统集成、运维服务和信息系统监理相关人员管理\n- 3、国家计划（投资）部门对规范的、具备信息系统项目管理能力的企业和人员的建议新要求\n- 4、信息系统用户对规范的、具备信息系统项目管理能力的企业和人员市场信息需求\n\n***政府主管部门的作用是加强“引导、规范、监管、服务”；***\n\n## 信息系统集成及服务管理推进\n### 实施信息系统集成及服务资质管理制度\n- 1、推荐优秀系统集成商\n- 2、对信息系统集成企业进行资质认证\n\n***成绩***\n- 1、认证工作及结果被各级政府和社会各界广泛认同\n - 1、67号文件第十条规定：“未经资质认证的单位，不得承揽或者以其他单位名义承揽信息化工程”；第十一条规定：“建设单位不得将信息化工程项目包给不具备相关资质等级的单位”；\n - 2、保密局发文：把具有信息产业部颁发的《计算机信息系统集成资质证书》（一级或二级）作为“涉密系统集成单位”的必要条件\n - 3、47号文件认证贯彻执行《振兴软件产业行动纲要》。要求“对国家重大项目信息化工程实行招标制、工程监理制、承建单位实行资质认证”；明确规定“利用财政性质资金建设的信息化工程，用于购买软件产品和服务的资金原则上不得低于总投资的30%”\n- 2、资质认证对系统集成人员的队伍、环境社保、质保体系、客服体系、培训体系、软件成果及所占比例、注册资本及财务状况、营业规模及业绩、项目质量、单位信誉进行严格审查、一年一度填报、四年一次换证\n- 3、有效地规范了信息系统集成市场，使皮包商钻空子和搅乱市场秩序的状况得到了控制\n- 4、信息系统工程质量显著提高\n- 5、发展创造良好的环境起到了引导作用。\n\n### 推行项目经理制度\n### 推出ITSS标准及评估服务\n\n# 信息系统集成及服务资质管理\n## 必要性和意义\n- 必要性（主流是健康的但也存在一些问题不容忽视）\n - 问题1、用户选择集成商缺少依据和标准\n - 问题2、国家规定参与竞标需要资质认证而我们没给企业确认等级，企业参与国际竞争有困难\n - 问题3、不具备能力的单位搅乱市场\n  \n- 意义：\n - 1、有利于系统集成及服务企业展示自身实力，参与市场竞争；按照等级条件加强自身建设\n - 2、有利于规范信息系统集成及服务市场\n - 3、有利于保证信息系统及服务工程质量\n\n## 管理办法\n- 1、工作机构\n- 2、资质设定\n- 3、资质申请与认定\n- 4、资质证书管理\n - 有效期四年、正副本同等效力\n\n## 等级条件\n- 1、综合条件\n- 2、财务状况\n- 3、信誉\n- 4、业绩\n- 5、管理能力\n - 1、质量管理体系\n   - 1、企业在运作过程中严格执行单位制度文件和质量体系文件\n   - 2、有详细完整的实施记录\n   - 3、有可视化的实施效果\n - 2、客户服务管理\n   - 1、对不同级别的系统集成企业要求建立客户服务制度，并配备专门客服部门和客服人员。越高级别要求越高\n- 6、技术实力\n- 7、人才实力\n\n","slug":"第二章 信息系统集成及服务管理","published":1,"updated":"2021-06-25T02:00:18.197Z","layout":"post","photos":[],"link":"","_id":"ckqjatomt0037qkl5cfhwwphy","content":"<h1 id=\"信息系统集成及服务管理体系\"><a href=\"#信息系统集成及服务管理体系\" class=\"headerlink\" title=\"信息系统集成及服务管理体系\"></a>信息系统集成及服务管理体系</h1><p><strong><em>随着信息技术的飞速发展，信息系统建设取得了巨大的成绩，积累了宝贵的经验，主流是健康的。但暴露出来的各种问题不容忽视。随着我国信息化建设的逐步推进，对信息系统集成及服务的引导和管理，逐渐形成了我国自由的信息系统集成及服务管理体系。</em></strong><br><a id=\"more\"></a></p>\n<h2 id=\"信息系统集成及服务管理内容\"><a href=\"#信息系统集成及服务管理内容\" class=\"headerlink\" title=\"信息系统集成及服务管理内容\"></a>信息系统集成及服务管理内容</h2><h3 id=\"服务内容\"><a href=\"#服务内容\" class=\"headerlink\" title=\"服务内容\"></a>服务内容</h3><ul>\n<li>1、信息技术咨询服务（为企业提供信息化建设规划和解决方案属于前端环节）</li>\n<li>2、系统集成服务</li>\n<li>3、技术支持服务</li>\n<li>4、运行维护服务</li>\n</ul>\n<h3 id=\"信息系统集成管理体系\"><a href=\"#信息系统集成管理体系\" class=\"headerlink\" title=\"信息系统集成管理体系\"></a>信息系统集成管理体系</h3><p><em>目前存在的问题</em></p>\n<ul>\n<li>1、系统质量不能满足应用的基本要求</li>\n<li>2、工程进度拖拖后延期</li>\n<li>3、项目资金使用不合理或严重超出预算</li>\n<li>4、项目文档不全甚至严重缺水</li>\n<li>5、在项目实施过程中系统业务需求一变再变</li>\n<li>6、在项目实施过程中经常出现扯皮、推诿现象</li>\n<li>7、系统存在着安全漏洞和隐患</li>\n<li>8、重硬件轻软件，重开发轻维护，重建设轻应用</li>\n<li>9、信息系统服务企业缺乏规范的流程和能力管理</li>\n<li>10、信息系统建设普遍存在产品化与个性化需求的矛盾</li>\n<li>11、开放性要求高、而标准和规范更新快</li>\n</ul>\n<p><em>产生问题的原因</em></p>\n<ul>\n<li>1、不具备技术实力的系统集成商搅乱信息集成及服务市场</li>\n<li>2、一些建设单位在选择项目承建商和进行业务需求分析方面经验不足</li>\n<li>3、信息系统集成及服务企业自身建设有待加强</li>\n<li>4、缺乏相应的机制和制度</li>\n<li>5、企业能力建设缺乏相关的指导标准</li>\n</ul>\n<p><em>管理体系</em></p>\n<ul>\n<li>1、信息系统集成、运维服务和信息系统监理资质管理</li>\n<li>2、信息系统集成、运维服务和信息系统监理相关人员管理</li>\n<li>3、国家计划（投资）部门对规范的、具备信息系统项目管理能力的企业和人员的建议新要求</li>\n<li>4、信息系统用户对规范的、具备信息系统项目管理能力的企业和人员市场信息需求</li>\n</ul>\n<p><strong><em>政府主管部门的作用是加强“引导、规范、监管、服务”；</em></strong></p>\n<h2 id=\"信息系统集成及服务管理推进\"><a href=\"#信息系统集成及服务管理推进\" class=\"headerlink\" title=\"信息系统集成及服务管理推进\"></a>信息系统集成及服务管理推进</h2><h3 id=\"实施信息系统集成及服务资质管理制度\"><a href=\"#实施信息系统集成及服务资质管理制度\" class=\"headerlink\" title=\"实施信息系统集成及服务资质管理制度\"></a>实施信息系统集成及服务资质管理制度</h3><ul>\n<li>1、推荐优秀系统集成商</li>\n<li>2、对信息系统集成企业进行资质认证</li>\n</ul>\n<p><strong><em>成绩</em></strong></p>\n<ul>\n<li>1、认证工作及结果被各级政府和社会各界广泛认同<ul>\n<li>1、67号文件第十条规定：“未经资质认证的单位，不得承揽或者以其他单位名义承揽信息化工程”；第十一条规定：“建设单位不得将信息化工程项目包给不具备相关资质等级的单位”；</li>\n<li>2、保密局发文：把具有信息产业部颁发的《计算机信息系统集成资质证书》（一级或二级）作为“涉密系统集成单位”的必要条件</li>\n<li>3、47号文件认证贯彻执行《振兴软件产业行动纲要》。要求“对国家重大项目信息化工程实行招标制、工程监理制、承建单位实行资质认证”；明确规定“利用财政性质资金建设的信息化工程，用于购买软件产品和服务的资金原则上不得低于总投资的30%”</li>\n</ul>\n</li>\n<li>2、资质认证对系统集成人员的队伍、环境社保、质保体系、客服体系、培训体系、软件成果及所占比例、注册资本及财务状况、营业规模及业绩、项目质量、单位信誉进行严格审查、一年一度填报、四年一次换证</li>\n<li>3、有效地规范了信息系统集成市场，使皮包商钻空子和搅乱市场秩序的状况得到了控制</li>\n<li>4、信息系统工程质量显著提高</li>\n<li>5、发展创造良好的环境起到了引导作用。</li>\n</ul>\n<h3 id=\"推行项目经理制度\"><a href=\"#推行项目经理制度\" class=\"headerlink\" title=\"推行项目经理制度\"></a>推行项目经理制度</h3><h3 id=\"推出ITSS标准及评估服务\"><a href=\"#推出ITSS标准及评估服务\" class=\"headerlink\" title=\"推出ITSS标准及评估服务\"></a>推出ITSS标准及评估服务</h3><h1 id=\"信息系统集成及服务资质管理\"><a href=\"#信息系统集成及服务资质管理\" class=\"headerlink\" title=\"信息系统集成及服务资质管理\"></a>信息系统集成及服务资质管理</h1><h2 id=\"必要性和意义\"><a href=\"#必要性和意义\" class=\"headerlink\" title=\"必要性和意义\"></a>必要性和意义</h2><ul>\n<li><p>必要性（主流是健康的但也存在一些问题不容忽视）</p>\n<ul>\n<li>问题1、用户选择集成商缺少依据和标准</li>\n<li>问题2、国家规定参与竞标需要资质认证而我们没给企业确认等级，企业参与国际竞争有困难</li>\n<li>问题3、不具备能力的单位搅乱市场</li>\n</ul>\n</li>\n<li><p>意义：</p>\n<ul>\n<li>1、有利于系统集成及服务企业展示自身实力，参与市场竞争；按照等级条件加强自身建设</li>\n<li>2、有利于规范信息系统集成及服务市场</li>\n<li>3、有利于保证信息系统及服务工程质量</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"管理办法\"><a href=\"#管理办法\" class=\"headerlink\" title=\"管理办法\"></a>管理办法</h2><ul>\n<li>1、工作机构</li>\n<li>2、资质设定</li>\n<li>3、资质申请与认定</li>\n<li>4、资质证书管理<ul>\n<li>有效期四年、正副本同等效力</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"等级条件\"><a href=\"#等级条件\" class=\"headerlink\" title=\"等级条件\"></a>等级条件</h2><ul>\n<li>1、综合条件</li>\n<li>2、财务状况</li>\n<li>3、信誉</li>\n<li>4、业绩</li>\n<li>5、管理能力<ul>\n<li>1、质量管理体系<ul>\n<li>1、企业在运作过程中严格执行单位制度文件和质量体系文件</li>\n<li>2、有详细完整的实施记录</li>\n<li>3、有可视化的实施效果</li>\n</ul>\n</li>\n<li>2、客户服务管理<ul>\n<li>1、对不同级别的系统集成企业要求建立客户服务制度，并配备专门客服部门和客服人员。越高级别要求越高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>6、技术实力</li>\n<li>7、人才实力</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"信息系统集成及服务管理体系\"><a href=\"#信息系统集成及服务管理体系\" class=\"headerlink\" title=\"信息系统集成及服务管理体系\"></a>信息系统集成及服务管理体系</h1><p><strong><em>随着信息技术的飞速发展，信息系统建设取得了巨大的成绩，积累了宝贵的经验，主流是健康的。但暴露出来的各种问题不容忽视。随着我国信息化建设的逐步推进，对信息系统集成及服务的引导和管理，逐渐形成了我国自由的信息系统集成及服务管理体系。</em></strong><br>","more":"</p>\n<h2 id=\"信息系统集成及服务管理内容\"><a href=\"#信息系统集成及服务管理内容\" class=\"headerlink\" title=\"信息系统集成及服务管理内容\"></a>信息系统集成及服务管理内容</h2><h3 id=\"服务内容\"><a href=\"#服务内容\" class=\"headerlink\" title=\"服务内容\"></a>服务内容</h3><ul>\n<li>1、信息技术咨询服务（为企业提供信息化建设规划和解决方案属于前端环节）</li>\n<li>2、系统集成服务</li>\n<li>3、技术支持服务</li>\n<li>4、运行维护服务</li>\n</ul>\n<h3 id=\"信息系统集成管理体系\"><a href=\"#信息系统集成管理体系\" class=\"headerlink\" title=\"信息系统集成管理体系\"></a>信息系统集成管理体系</h3><p><em>目前存在的问题</em></p>\n<ul>\n<li>1、系统质量不能满足应用的基本要求</li>\n<li>2、工程进度拖拖后延期</li>\n<li>3、项目资金使用不合理或严重超出预算</li>\n<li>4、项目文档不全甚至严重缺水</li>\n<li>5、在项目实施过程中系统业务需求一变再变</li>\n<li>6、在项目实施过程中经常出现扯皮、推诿现象</li>\n<li>7、系统存在着安全漏洞和隐患</li>\n<li>8、重硬件轻软件，重开发轻维护，重建设轻应用</li>\n<li>9、信息系统服务企业缺乏规范的流程和能力管理</li>\n<li>10、信息系统建设普遍存在产品化与个性化需求的矛盾</li>\n<li>11、开放性要求高、而标准和规范更新快</li>\n</ul>\n<p><em>产生问题的原因</em></p>\n<ul>\n<li>1、不具备技术实力的系统集成商搅乱信息集成及服务市场</li>\n<li>2、一些建设单位在选择项目承建商和进行业务需求分析方面经验不足</li>\n<li>3、信息系统集成及服务企业自身建设有待加强</li>\n<li>4、缺乏相应的机制和制度</li>\n<li>5、企业能力建设缺乏相关的指导标准</li>\n</ul>\n<p><em>管理体系</em></p>\n<ul>\n<li>1、信息系统集成、运维服务和信息系统监理资质管理</li>\n<li>2、信息系统集成、运维服务和信息系统监理相关人员管理</li>\n<li>3、国家计划（投资）部门对规范的、具备信息系统项目管理能力的企业和人员的建议新要求</li>\n<li>4、信息系统用户对规范的、具备信息系统项目管理能力的企业和人员市场信息需求</li>\n</ul>\n<p><strong><em>政府主管部门的作用是加强“引导、规范、监管、服务”；</em></strong></p>\n<h2 id=\"信息系统集成及服务管理推进\"><a href=\"#信息系统集成及服务管理推进\" class=\"headerlink\" title=\"信息系统集成及服务管理推进\"></a>信息系统集成及服务管理推进</h2><h3 id=\"实施信息系统集成及服务资质管理制度\"><a href=\"#实施信息系统集成及服务资质管理制度\" class=\"headerlink\" title=\"实施信息系统集成及服务资质管理制度\"></a>实施信息系统集成及服务资质管理制度</h3><ul>\n<li>1、推荐优秀系统集成商</li>\n<li>2、对信息系统集成企业进行资质认证</li>\n</ul>\n<p><strong><em>成绩</em></strong></p>\n<ul>\n<li>1、认证工作及结果被各级政府和社会各界广泛认同<ul>\n<li>1、67号文件第十条规定：“未经资质认证的单位，不得承揽或者以其他单位名义承揽信息化工程”；第十一条规定：“建设单位不得将信息化工程项目包给不具备相关资质等级的单位”；</li>\n<li>2、保密局发文：把具有信息产业部颁发的《计算机信息系统集成资质证书》（一级或二级）作为“涉密系统集成单位”的必要条件</li>\n<li>3、47号文件认证贯彻执行《振兴软件产业行动纲要》。要求“对国家重大项目信息化工程实行招标制、工程监理制、承建单位实行资质认证”；明确规定“利用财政性质资金建设的信息化工程，用于购买软件产品和服务的资金原则上不得低于总投资的30%”</li>\n</ul>\n</li>\n<li>2、资质认证对系统集成人员的队伍、环境社保、质保体系、客服体系、培训体系、软件成果及所占比例、注册资本及财务状况、营业规模及业绩、项目质量、单位信誉进行严格审查、一年一度填报、四年一次换证</li>\n<li>3、有效地规范了信息系统集成市场，使皮包商钻空子和搅乱市场秩序的状况得到了控制</li>\n<li>4、信息系统工程质量显著提高</li>\n<li>5、发展创造良好的环境起到了引导作用。</li>\n</ul>\n<h3 id=\"推行项目经理制度\"><a href=\"#推行项目经理制度\" class=\"headerlink\" title=\"推行项目经理制度\"></a>推行项目经理制度</h3><h3 id=\"推出ITSS标准及评估服务\"><a href=\"#推出ITSS标准及评估服务\" class=\"headerlink\" title=\"推出ITSS标准及评估服务\"></a>推出ITSS标准及评估服务</h3><h1 id=\"信息系统集成及服务资质管理\"><a href=\"#信息系统集成及服务资质管理\" class=\"headerlink\" title=\"信息系统集成及服务资质管理\"></a>信息系统集成及服务资质管理</h1><h2 id=\"必要性和意义\"><a href=\"#必要性和意义\" class=\"headerlink\" title=\"必要性和意义\"></a>必要性和意义</h2><ul>\n<li><p>必要性（主流是健康的但也存在一些问题不容忽视）</p>\n<ul>\n<li>问题1、用户选择集成商缺少依据和标准</li>\n<li>问题2、国家规定参与竞标需要资质认证而我们没给企业确认等级，企业参与国际竞争有困难</li>\n<li>问题3、不具备能力的单位搅乱市场</li>\n</ul>\n</li>\n<li><p>意义：</p>\n<ul>\n<li>1、有利于系统集成及服务企业展示自身实力，参与市场竞争；按照等级条件加强自身建设</li>\n<li>2、有利于规范信息系统集成及服务市场</li>\n<li>3、有利于保证信息系统及服务工程质量</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"管理办法\"><a href=\"#管理办法\" class=\"headerlink\" title=\"管理办法\"></a>管理办法</h2><ul>\n<li>1、工作机构</li>\n<li>2、资质设定</li>\n<li>3、资质申请与认定</li>\n<li>4、资质证书管理<ul>\n<li>有效期四年、正副本同等效力</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"等级条件\"><a href=\"#等级条件\" class=\"headerlink\" title=\"等级条件\"></a>等级条件</h2><ul>\n<li>1、综合条件</li>\n<li>2、财务状况</li>\n<li>3、信誉</li>\n<li>4、业绩</li>\n<li>5、管理能力<ul>\n<li>1、质量管理体系<ul>\n<li>1、企业在运作过程中严格执行单位制度文件和质量体系文件</li>\n<li>2、有详细完整的实施记录</li>\n<li>3、有可视化的实施效果</li>\n</ul>\n</li>\n<li>2、客户服务管理<ul>\n<li>1、对不同级别的系统集成企业要求建立客户服务制度，并配备专门客服部门和客服人员。越高级别要求越高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>6、技术实力</li>\n<li>7、人才实力</li>\n</ul>"},{"title":"第十三章 项目合同管理","date":"2016-10-22T02:57:33.000Z","comments":1,"toc":true,"_content":"\n# 项目合同\n## 有效合同原则\n- 1、签订合同的当事人应具有相应的民事权利能力和民事行为能力\n- 2、意思表示真实\n- 3、不违反法律或社会公共利益\n\n<!--more-->\n## 无效合同\n- 1、一方以欺诈、胁迫的手段订立合同\n- 2、恶意串通，损害国家、集体或者第三人利益\n- 3、以合法形式掩盖非法目的\n- 4、损害社会公共利益\n- 5、违反法律、行政法规的强制性规定。\n\n# 合同分类\n## 按信息系统范围划分的合同分类\n- **1、总承包合同**\n - 也称“叫要吃合同”，发包人把信息系统工程建设从开始立项、论证、设计、采购、施工到竣工的全部任务，一并发包给一个具备资质的承包人。\n- **2、单项工程承包合同**\n - 发包人将信息系统工程建设的不同工作任务，分别发包给不同的承包人\n- **3、分包合同**\n - 总承包单位将其承包的部分项目，在发包给与承包单位。\n - 条件：第一，承包人只能将自己承包的非关键、非主体部分工程分包给具有相应资质条件的分包人，而且不可以进行二次分包；第二，分包工程必须经过发包人同意。\n \n## 按项目付款方式划分的合同分类\n- **1、总价合同**\n - 总价合同又称固定价格合同，是指在合同确定一个完成项目的总价，承包人据此完成项目全部合同内容的合同。\n - 适用于工程量不太大且能精确计算、工期较短、技术不太复杂、风险不大的项目。\n- **2、成本补偿合同**\n - 由发包人向承包人支付为完成工作而发生的全部合法实际成本（可报销成本），并且按照事先约定的某一种方法外加一笔费用作为卖方的利润。\n - 适用：\n   - 1、需立即开展工作的项目\n   - 2、对项目内容及技术经济指标未确定的项目\n   - 3、风险大的项目\n- **3、工料合同**\n - 工料合同是兼具成本补偿合同和总价合同的某些特点的混合合同。通俗的讲就是设备合同\n \n# 项目合同签订\n## 合同内容\n- **1、当事人各自的权利、义务**\n- **2、项目费用及工程款的支付方式**\n - 1、支付货款的条件\n - 2、结算支付的方式\n - 3、拒付货款的条件。发包方有权部分或全部拒付货款\n- **3、项目变更约定**\n - 合同生效后，当事人不得因姓名、名称的变更或者法定代表人、负责人、承办人的变动而不履行合同的义务。\n- **4、违约责任**\n - 1、继续履行\n - 2、采取补救措施（如质量不符合约定，可以要求修理、更换、重作、退货、减少价款或报酬）\n - 3、赔偿损失\n - 4、支付约定违约或定金\n\n## 合同签订注意事项\n- **1、当事人的法律资格**\n- **2、质量验收标准**\n- **3、验收时间**\n- **4、技术支持服务**\n - 对于开发完成后发生的技术性问题，如果是因为开发商的工作质量所造成的，应当由开发商负责无偿地解决。\n- **5、损害赔偿**\n- **6、保密约定**\n- **7、合同附件**\n - 合同生效后，当事人就质量、价款或者报酬、履行地点等内容没有约定或者约定不明确，可以协议补充。\n- **8、法律公证**\n\n# 项目合同管理\n## 合同管理主要内容\n- **1、合同签订管理**\n- **2、合同履行管理**\n- **3、合同变更管理**\n- **4、合同档案管理**\n - 即合同文件管理，是整个合同管理的基础。它作为信息系统项目管理的组成部分，是被统一整合为一体的一套具体的过程、相关的控制职能和自动化工具。\n \n# 合同索赔处理\n## 索赔依据\n- 1、国家有关的法律如《合同法》、行政法规和地方法规\n- 2、国家、部门和地方有关信息系统工程的标准、规范和文件\n- 3、本项目的实施合同文件，包括招标文件、合同文本及附件\n- 4、有关的凭证，包括来往文件、签证及变更通知、会议纪要、进度表、产品采购\n- 5、其他相关文件，包括市场行情记录、各种会记核算资料\n\n## 索赔流程\n- 项目发生索赔事件，一般先由监理工程师调节，达成索赔认可共识，索赔认可遵守一般流程如图\n![索赔流程](20161107215359.png)\n- **1、提出索赔要求**\n - 在索赔事件发生后28天内，索赔方应以书面的索赔通知书形式，向监理工程师提出索赔意向\n- **2、报送索赔资料**\n - 在索赔通知书发出后28天内，索赔方应向监理工程师提出延长工期和（或）补偿经济经济损失的详细索赔报告及有关资料\n- **3、监理工程师答复**\n - 搜到索赔方有关资料后，应于28天内给以答复，28天内未予答复视为默认得到认可\n- **4、索赔认可**\n- **5、关于持续索赔**\n - 当索赔事件持续进行时，索赔方应当阶段性向监理工程师发出索赔意向，在索赔事件终了后28天内，向监理工程师送交索赔的有关资料和最终索赔报告，工程师应在28天内给予答复或要求索赔方进一步补充索赔理由和证据，逾期未答复，视为该项索赔成立。\n - 若调节不成，可由政府建设主管机构进行调解，若仍调解不成，则可由经济合同仲裁委员会进行调解或仲裁，仲裁委员会的裁决具有法律效力，但如果对仲裁结果不服，仍可以通过诉讼解决。\n \n## 索赔处理原则\n- **1、索赔必须以合同未依据**\n- **2、必须注意资料的积累**\n- **3、及时、合理地处理索赔**\n- **4、加强索赔的前瞻性**\n - 在工程实施的过程中，应对可能引起的索赔进行预测，及时采集补救措施，避免过多索赔事件的发生。","source":"_posts/第十三章 项目合同管理.md","raw":"---\ntitle: 第十三章 项目合同管理\ndate: 2016-10-22 10:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 项目合同\n## 有效合同原则\n- 1、签订合同的当事人应具有相应的民事权利能力和民事行为能力\n- 2、意思表示真实\n- 3、不违反法律或社会公共利益\n\n<!--more-->\n## 无效合同\n- 1、一方以欺诈、胁迫的手段订立合同\n- 2、恶意串通，损害国家、集体或者第三人利益\n- 3、以合法形式掩盖非法目的\n- 4、损害社会公共利益\n- 5、违反法律、行政法规的强制性规定。\n\n# 合同分类\n## 按信息系统范围划分的合同分类\n- **1、总承包合同**\n - 也称“叫要吃合同”，发包人把信息系统工程建设从开始立项、论证、设计、采购、施工到竣工的全部任务，一并发包给一个具备资质的承包人。\n- **2、单项工程承包合同**\n - 发包人将信息系统工程建设的不同工作任务，分别发包给不同的承包人\n- **3、分包合同**\n - 总承包单位将其承包的部分项目，在发包给与承包单位。\n - 条件：第一，承包人只能将自己承包的非关键、非主体部分工程分包给具有相应资质条件的分包人，而且不可以进行二次分包；第二，分包工程必须经过发包人同意。\n \n## 按项目付款方式划分的合同分类\n- **1、总价合同**\n - 总价合同又称固定价格合同，是指在合同确定一个完成项目的总价，承包人据此完成项目全部合同内容的合同。\n - 适用于工程量不太大且能精确计算、工期较短、技术不太复杂、风险不大的项目。\n- **2、成本补偿合同**\n - 由发包人向承包人支付为完成工作而发生的全部合法实际成本（可报销成本），并且按照事先约定的某一种方法外加一笔费用作为卖方的利润。\n - 适用：\n   - 1、需立即开展工作的项目\n   - 2、对项目内容及技术经济指标未确定的项目\n   - 3、风险大的项目\n- **3、工料合同**\n - 工料合同是兼具成本补偿合同和总价合同的某些特点的混合合同。通俗的讲就是设备合同\n \n# 项目合同签订\n## 合同内容\n- **1、当事人各自的权利、义务**\n- **2、项目费用及工程款的支付方式**\n - 1、支付货款的条件\n - 2、结算支付的方式\n - 3、拒付货款的条件。发包方有权部分或全部拒付货款\n- **3、项目变更约定**\n - 合同生效后，当事人不得因姓名、名称的变更或者法定代表人、负责人、承办人的变动而不履行合同的义务。\n- **4、违约责任**\n - 1、继续履行\n - 2、采取补救措施（如质量不符合约定，可以要求修理、更换、重作、退货、减少价款或报酬）\n - 3、赔偿损失\n - 4、支付约定违约或定金\n\n## 合同签订注意事项\n- **1、当事人的法律资格**\n- **2、质量验收标准**\n- **3、验收时间**\n- **4、技术支持服务**\n - 对于开发完成后发生的技术性问题，如果是因为开发商的工作质量所造成的，应当由开发商负责无偿地解决。\n- **5、损害赔偿**\n- **6、保密约定**\n- **7、合同附件**\n - 合同生效后，当事人就质量、价款或者报酬、履行地点等内容没有约定或者约定不明确，可以协议补充。\n- **8、法律公证**\n\n# 项目合同管理\n## 合同管理主要内容\n- **1、合同签订管理**\n- **2、合同履行管理**\n- **3、合同变更管理**\n- **4、合同档案管理**\n - 即合同文件管理，是整个合同管理的基础。它作为信息系统项目管理的组成部分，是被统一整合为一体的一套具体的过程、相关的控制职能和自动化工具。\n \n# 合同索赔处理\n## 索赔依据\n- 1、国家有关的法律如《合同法》、行政法规和地方法规\n- 2、国家、部门和地方有关信息系统工程的标准、规范和文件\n- 3、本项目的实施合同文件，包括招标文件、合同文本及附件\n- 4、有关的凭证，包括来往文件、签证及变更通知、会议纪要、进度表、产品采购\n- 5、其他相关文件，包括市场行情记录、各种会记核算资料\n\n## 索赔流程\n- 项目发生索赔事件，一般先由监理工程师调节，达成索赔认可共识，索赔认可遵守一般流程如图\n![索赔流程](20161107215359.png)\n- **1、提出索赔要求**\n - 在索赔事件发生后28天内，索赔方应以书面的索赔通知书形式，向监理工程师提出索赔意向\n- **2、报送索赔资料**\n - 在索赔通知书发出后28天内，索赔方应向监理工程师提出延长工期和（或）补偿经济经济损失的详细索赔报告及有关资料\n- **3、监理工程师答复**\n - 搜到索赔方有关资料后，应于28天内给以答复，28天内未予答复视为默认得到认可\n- **4、索赔认可**\n- **5、关于持续索赔**\n - 当索赔事件持续进行时，索赔方应当阶段性向监理工程师发出索赔意向，在索赔事件终了后28天内，向监理工程师送交索赔的有关资料和最终索赔报告，工程师应在28天内给予答复或要求索赔方进一步补充索赔理由和证据，逾期未答复，视为该项索赔成立。\n - 若调节不成，可由政府建设主管机构进行调解，若仍调解不成，则可由经济合同仲裁委员会进行调解或仲裁，仲裁委员会的裁决具有法律效力，但如果对仲裁结果不服，仍可以通过诉讼解决。\n \n## 索赔处理原则\n- **1、索赔必须以合同未依据**\n- **2、必须注意资料的积累**\n- **3、及时、合理地处理索赔**\n- **4、加强索赔的前瞻性**\n - 在工程实施的过程中，应对可能引起的索赔进行预测，及时采集补救措施，避免过多索赔事件的发生。","slug":"第十三章 项目合同管理","published":1,"updated":"2021-06-25T02:00:18.271Z","layout":"post","photos":[],"link":"","_id":"ckqjatomu0038qkl5pch3yt9k","content":"<h1 id=\"项目合同\"><a href=\"#项目合同\" class=\"headerlink\" title=\"项目合同\"></a>项目合同</h1><h2 id=\"有效合同原则\"><a href=\"#有效合同原则\" class=\"headerlink\" title=\"有效合同原则\"></a>有效合同原则</h2><ul>\n<li>1、签订合同的当事人应具有相应的民事权利能力和民事行为能力</li>\n<li>2、意思表示真实</li>\n<li>3、不违反法律或社会公共利益</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"无效合同\"><a href=\"#无效合同\" class=\"headerlink\" title=\"无效合同\"></a>无效合同</h2><ul>\n<li>1、一方以欺诈、胁迫的手段订立合同</li>\n<li>2、恶意串通，损害国家、集体或者第三人利益</li>\n<li>3、以合法形式掩盖非法目的</li>\n<li>4、损害社会公共利益</li>\n<li>5、违反法律、行政法规的强制性规定。</li>\n</ul>\n<h1 id=\"合同分类\"><a href=\"#合同分类\" class=\"headerlink\" title=\"合同分类\"></a>合同分类</h1><h2 id=\"按信息系统范围划分的合同分类\"><a href=\"#按信息系统范围划分的合同分类\" class=\"headerlink\" title=\"按信息系统范围划分的合同分类\"></a>按信息系统范围划分的合同分类</h2><ul>\n<li><strong>1、总承包合同</strong><ul>\n<li>也称“叫要吃合同”，发包人把信息系统工程建设从开始立项、论证、设计、采购、施工到竣工的全部任务，一并发包给一个具备资质的承包人。</li>\n</ul>\n</li>\n<li><strong>2、单项工程承包合同</strong><ul>\n<li>发包人将信息系统工程建设的不同工作任务，分别发包给不同的承包人</li>\n</ul>\n</li>\n<li><strong>3、分包合同</strong><ul>\n<li>总承包单位将其承包的部分项目，在发包给与承包单位。</li>\n<li>条件：第一，承包人只能将自己承包的非关键、非主体部分工程分包给具有相应资质条件的分包人，而且不可以进行二次分包；第二，分包工程必须经过发包人同意。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"按项目付款方式划分的合同分类\"><a href=\"#按项目付款方式划分的合同分类\" class=\"headerlink\" title=\"按项目付款方式划分的合同分类\"></a>按项目付款方式划分的合同分类</h2><ul>\n<li><strong>1、总价合同</strong><ul>\n<li>总价合同又称固定价格合同，是指在合同确定一个完成项目的总价，承包人据此完成项目全部合同内容的合同。</li>\n<li>适用于工程量不太大且能精确计算、工期较短、技术不太复杂、风险不大的项目。</li>\n</ul>\n</li>\n<li><strong>2、成本补偿合同</strong><ul>\n<li>由发包人向承包人支付为完成工作而发生的全部合法实际成本（可报销成本），并且按照事先约定的某一种方法外加一笔费用作为卖方的利润。</li>\n<li>适用：<ul>\n<li>1、需立即开展工作的项目</li>\n<li>2、对项目内容及技术经济指标未确定的项目</li>\n<li>3、风险大的项目</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>3、工料合同</strong><ul>\n<li>工料合同是兼具成本补偿合同和总价合同的某些特点的混合合同。通俗的讲就是设备合同</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"项目合同签订\"><a href=\"#项目合同签订\" class=\"headerlink\" title=\"项目合同签订\"></a>项目合同签订</h1><h2 id=\"合同内容\"><a href=\"#合同内容\" class=\"headerlink\" title=\"合同内容\"></a>合同内容</h2><ul>\n<li><strong>1、当事人各自的权利、义务</strong></li>\n<li><strong>2、项目费用及工程款的支付方式</strong><ul>\n<li>1、支付货款的条件</li>\n<li>2、结算支付的方式</li>\n<li>3、拒付货款的条件。发包方有权部分或全部拒付货款</li>\n</ul>\n</li>\n<li><strong>3、项目变更约定</strong><ul>\n<li>合同生效后，当事人不得因姓名、名称的变更或者法定代表人、负责人、承办人的变动而不履行合同的义务。</li>\n</ul>\n</li>\n<li><strong>4、违约责任</strong><ul>\n<li>1、继续履行</li>\n<li>2、采取补救措施（如质量不符合约定，可以要求修理、更换、重作、退货、减少价款或报酬）</li>\n<li>3、赔偿损失</li>\n<li>4、支付约定违约或定金</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"合同签订注意事项\"><a href=\"#合同签订注意事项\" class=\"headerlink\" title=\"合同签订注意事项\"></a>合同签订注意事项</h2><ul>\n<li><strong>1、当事人的法律资格</strong></li>\n<li><strong>2、质量验收标准</strong></li>\n<li><strong>3、验收时间</strong></li>\n<li><strong>4、技术支持服务</strong><ul>\n<li>对于开发完成后发生的技术性问题，如果是因为开发商的工作质量所造成的，应当由开发商负责无偿地解决。</li>\n</ul>\n</li>\n<li><strong>5、损害赔偿</strong></li>\n<li><strong>6、保密约定</strong></li>\n<li><strong>7、合同附件</strong><ul>\n<li>合同生效后，当事人就质量、价款或者报酬、履行地点等内容没有约定或者约定不明确，可以协议补充。</li>\n</ul>\n</li>\n<li><strong>8、法律公证</strong></li>\n</ul>\n<h1 id=\"项目合同管理\"><a href=\"#项目合同管理\" class=\"headerlink\" title=\"项目合同管理\"></a>项目合同管理</h1><h2 id=\"合同管理主要内容\"><a href=\"#合同管理主要内容\" class=\"headerlink\" title=\"合同管理主要内容\"></a>合同管理主要内容</h2><ul>\n<li><strong>1、合同签订管理</strong></li>\n<li><strong>2、合同履行管理</strong></li>\n<li><strong>3、合同变更管理</strong></li>\n<li><strong>4、合同档案管理</strong><ul>\n<li>即合同文件管理，是整个合同管理的基础。它作为信息系统项目管理的组成部分，是被统一整合为一体的一套具体的过程、相关的控制职能和自动化工具。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"合同索赔处理\"><a href=\"#合同索赔处理\" class=\"headerlink\" title=\"合同索赔处理\"></a>合同索赔处理</h1><h2 id=\"索赔依据\"><a href=\"#索赔依据\" class=\"headerlink\" title=\"索赔依据\"></a>索赔依据</h2><ul>\n<li>1、国家有关的法律如《合同法》、行政法规和地方法规</li>\n<li>2、国家、部门和地方有关信息系统工程的标准、规范和文件</li>\n<li>3、本项目的实施合同文件，包括招标文件、合同文本及附件</li>\n<li>4、有关的凭证，包括来往文件、签证及变更通知、会议纪要、进度表、产品采购</li>\n<li>5、其他相关文件，包括市场行情记录、各种会记核算资料</li>\n</ul>\n<h2 id=\"索赔流程\"><a href=\"#索赔流程\" class=\"headerlink\" title=\"索赔流程\"></a>索赔流程</h2><ul>\n<li>项目发生索赔事件，一般先由监理工程师调节，达成索赔认可共识，索赔认可遵守一般流程如图<br><img src=\"20161107215359.png\" alt=\"索赔流程\"></li>\n<li><strong>1、提出索赔要求</strong><ul>\n<li>在索赔事件发生后28天内，索赔方应以书面的索赔通知书形式，向监理工程师提出索赔意向</li>\n</ul>\n</li>\n<li><strong>2、报送索赔资料</strong><ul>\n<li>在索赔通知书发出后28天内，索赔方应向监理工程师提出延长工期和（或）补偿经济经济损失的详细索赔报告及有关资料</li>\n</ul>\n</li>\n<li><strong>3、监理工程师答复</strong><ul>\n<li>搜到索赔方有关资料后，应于28天内给以答复，28天内未予答复视为默认得到认可</li>\n</ul>\n</li>\n<li><strong>4、索赔认可</strong></li>\n<li><strong>5、关于持续索赔</strong><ul>\n<li>当索赔事件持续进行时，索赔方应当阶段性向监理工程师发出索赔意向，在索赔事件终了后28天内，向监理工程师送交索赔的有关资料和最终索赔报告，工程师应在28天内给予答复或要求索赔方进一步补充索赔理由和证据，逾期未答复，视为该项索赔成立。</li>\n<li>若调节不成，可由政府建设主管机构进行调解，若仍调解不成，则可由经济合同仲裁委员会进行调解或仲裁，仲裁委员会的裁决具有法律效力，但如果对仲裁结果不服，仍可以通过诉讼解决。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索赔处理原则\"><a href=\"#索赔处理原则\" class=\"headerlink\" title=\"索赔处理原则\"></a>索赔处理原则</h2><ul>\n<li><strong>1、索赔必须以合同未依据</strong></li>\n<li><strong>2、必须注意资料的积累</strong></li>\n<li><strong>3、及时、合理地处理索赔</strong></li>\n<li><strong>4、加强索赔的前瞻性</strong><ul>\n<li>在工程实施的过程中，应对可能引起的索赔进行预测，及时采集补救措施，避免过多索赔事件的发生。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"项目合同\"><a href=\"#项目合同\" class=\"headerlink\" title=\"项目合同\"></a>项目合同</h1><h2 id=\"有效合同原则\"><a href=\"#有效合同原则\" class=\"headerlink\" title=\"有效合同原则\"></a>有效合同原则</h2><ul>\n<li>1、签订合同的当事人应具有相应的民事权利能力和民事行为能力</li>\n<li>2、意思表示真实</li>\n<li>3、不违反法律或社会公共利益</li>\n</ul>","more":"<h2 id=\"无效合同\"><a href=\"#无效合同\" class=\"headerlink\" title=\"无效合同\"></a>无效合同</h2><ul>\n<li>1、一方以欺诈、胁迫的手段订立合同</li>\n<li>2、恶意串通，损害国家、集体或者第三人利益</li>\n<li>3、以合法形式掩盖非法目的</li>\n<li>4、损害社会公共利益</li>\n<li>5、违反法律、行政法规的强制性规定。</li>\n</ul>\n<h1 id=\"合同分类\"><a href=\"#合同分类\" class=\"headerlink\" title=\"合同分类\"></a>合同分类</h1><h2 id=\"按信息系统范围划分的合同分类\"><a href=\"#按信息系统范围划分的合同分类\" class=\"headerlink\" title=\"按信息系统范围划分的合同分类\"></a>按信息系统范围划分的合同分类</h2><ul>\n<li><strong>1、总承包合同</strong><ul>\n<li>也称“叫要吃合同”，发包人把信息系统工程建设从开始立项、论证、设计、采购、施工到竣工的全部任务，一并发包给一个具备资质的承包人。</li>\n</ul>\n</li>\n<li><strong>2、单项工程承包合同</strong><ul>\n<li>发包人将信息系统工程建设的不同工作任务，分别发包给不同的承包人</li>\n</ul>\n</li>\n<li><strong>3、分包合同</strong><ul>\n<li>总承包单位将其承包的部分项目，在发包给与承包单位。</li>\n<li>条件：第一，承包人只能将自己承包的非关键、非主体部分工程分包给具有相应资质条件的分包人，而且不可以进行二次分包；第二，分包工程必须经过发包人同意。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"按项目付款方式划分的合同分类\"><a href=\"#按项目付款方式划分的合同分类\" class=\"headerlink\" title=\"按项目付款方式划分的合同分类\"></a>按项目付款方式划分的合同分类</h2><ul>\n<li><strong>1、总价合同</strong><ul>\n<li>总价合同又称固定价格合同，是指在合同确定一个完成项目的总价，承包人据此完成项目全部合同内容的合同。</li>\n<li>适用于工程量不太大且能精确计算、工期较短、技术不太复杂、风险不大的项目。</li>\n</ul>\n</li>\n<li><strong>2、成本补偿合同</strong><ul>\n<li>由发包人向承包人支付为完成工作而发生的全部合法实际成本（可报销成本），并且按照事先约定的某一种方法外加一笔费用作为卖方的利润。</li>\n<li>适用：<ul>\n<li>1、需立即开展工作的项目</li>\n<li>2、对项目内容及技术经济指标未确定的项目</li>\n<li>3、风险大的项目</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>3、工料合同</strong><ul>\n<li>工料合同是兼具成本补偿合同和总价合同的某些特点的混合合同。通俗的讲就是设备合同</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"项目合同签订\"><a href=\"#项目合同签订\" class=\"headerlink\" title=\"项目合同签订\"></a>项目合同签订</h1><h2 id=\"合同内容\"><a href=\"#合同内容\" class=\"headerlink\" title=\"合同内容\"></a>合同内容</h2><ul>\n<li><strong>1、当事人各自的权利、义务</strong></li>\n<li><strong>2、项目费用及工程款的支付方式</strong><ul>\n<li>1、支付货款的条件</li>\n<li>2、结算支付的方式</li>\n<li>3、拒付货款的条件。发包方有权部分或全部拒付货款</li>\n</ul>\n</li>\n<li><strong>3、项目变更约定</strong><ul>\n<li>合同生效后，当事人不得因姓名、名称的变更或者法定代表人、负责人、承办人的变动而不履行合同的义务。</li>\n</ul>\n</li>\n<li><strong>4、违约责任</strong><ul>\n<li>1、继续履行</li>\n<li>2、采取补救措施（如质量不符合约定，可以要求修理、更换、重作、退货、减少价款或报酬）</li>\n<li>3、赔偿损失</li>\n<li>4、支付约定违约或定金</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"合同签订注意事项\"><a href=\"#合同签订注意事项\" class=\"headerlink\" title=\"合同签订注意事项\"></a>合同签订注意事项</h2><ul>\n<li><strong>1、当事人的法律资格</strong></li>\n<li><strong>2、质量验收标准</strong></li>\n<li><strong>3、验收时间</strong></li>\n<li><strong>4、技术支持服务</strong><ul>\n<li>对于开发完成后发生的技术性问题，如果是因为开发商的工作质量所造成的，应当由开发商负责无偿地解决。</li>\n</ul>\n</li>\n<li><strong>5、损害赔偿</strong></li>\n<li><strong>6、保密约定</strong></li>\n<li><strong>7、合同附件</strong><ul>\n<li>合同生效后，当事人就质量、价款或者报酬、履行地点等内容没有约定或者约定不明确，可以协议补充。</li>\n</ul>\n</li>\n<li><strong>8、法律公证</strong></li>\n</ul>\n<h1 id=\"项目合同管理\"><a href=\"#项目合同管理\" class=\"headerlink\" title=\"项目合同管理\"></a>项目合同管理</h1><h2 id=\"合同管理主要内容\"><a href=\"#合同管理主要内容\" class=\"headerlink\" title=\"合同管理主要内容\"></a>合同管理主要内容</h2><ul>\n<li><strong>1、合同签订管理</strong></li>\n<li><strong>2、合同履行管理</strong></li>\n<li><strong>3、合同变更管理</strong></li>\n<li><strong>4、合同档案管理</strong><ul>\n<li>即合同文件管理，是整个合同管理的基础。它作为信息系统项目管理的组成部分，是被统一整合为一体的一套具体的过程、相关的控制职能和自动化工具。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"合同索赔处理\"><a href=\"#合同索赔处理\" class=\"headerlink\" title=\"合同索赔处理\"></a>合同索赔处理</h1><h2 id=\"索赔依据\"><a href=\"#索赔依据\" class=\"headerlink\" title=\"索赔依据\"></a>索赔依据</h2><ul>\n<li>1、国家有关的法律如《合同法》、行政法规和地方法规</li>\n<li>2、国家、部门和地方有关信息系统工程的标准、规范和文件</li>\n<li>3、本项目的实施合同文件，包括招标文件、合同文本及附件</li>\n<li>4、有关的凭证，包括来往文件、签证及变更通知、会议纪要、进度表、产品采购</li>\n<li>5、其他相关文件，包括市场行情记录、各种会记核算资料</li>\n</ul>\n<h2 id=\"索赔流程\"><a href=\"#索赔流程\" class=\"headerlink\" title=\"索赔流程\"></a>索赔流程</h2><ul>\n<li>项目发生索赔事件，一般先由监理工程师调节，达成索赔认可共识，索赔认可遵守一般流程如图<br><img src=\"20161107215359.png\" alt=\"索赔流程\"></li>\n<li><strong>1、提出索赔要求</strong><ul>\n<li>在索赔事件发生后28天内，索赔方应以书面的索赔通知书形式，向监理工程师提出索赔意向</li>\n</ul>\n</li>\n<li><strong>2、报送索赔资料</strong><ul>\n<li>在索赔通知书发出后28天内，索赔方应向监理工程师提出延长工期和（或）补偿经济经济损失的详细索赔报告及有关资料</li>\n</ul>\n</li>\n<li><strong>3、监理工程师答复</strong><ul>\n<li>搜到索赔方有关资料后，应于28天内给以答复，28天内未予答复视为默认得到认可</li>\n</ul>\n</li>\n<li><strong>4、索赔认可</strong></li>\n<li><strong>5、关于持续索赔</strong><ul>\n<li>当索赔事件持续进行时，索赔方应当阶段性向监理工程师发出索赔意向，在索赔事件终了后28天内，向监理工程师送交索赔的有关资料和最终索赔报告，工程师应在28天内给予答复或要求索赔方进一步补充索赔理由和证据，逾期未答复，视为该项索赔成立。</li>\n<li>若调节不成，可由政府建设主管机构进行调解，若仍调解不成，则可由经济合同仲裁委员会进行调解或仲裁，仲裁委员会的裁决具有法律效力，但如果对仲裁结果不服，仍可以通过诉讼解决。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索赔处理原则\"><a href=\"#索赔处理原则\" class=\"headerlink\" title=\"索赔处理原则\"></a>索赔处理原则</h2><ul>\n<li><strong>1、索赔必须以合同未依据</strong></li>\n<li><strong>2、必须注意资料的积累</strong></li>\n<li><strong>3、及时、合理地处理索赔</strong></li>\n<li><strong>4、加强索赔的前瞻性</strong><ul>\n<li>在工程实施的过程中，应对可能引起的索赔进行预测，及时采集补救措施，避免过多索赔事件的发生。</li>\n</ul>\n</li>\n</ul>"},{"title":"第十九章 项目收尾管理","date":"2016-10-09T15:57:33.000Z","comments":1,"toc":true,"_content":"\n# 项目验收\n- 项目验收时项目收尾管理中的首要环节，只有完成项目验收工作后，才能进入后续的项目总结、系统维护以及项目后面的评价等工作阶段。\n- 项目的正式验收包括验收项目产品、文档及已经完成的交付成果。对系统集成项目进行验收时需要根据项目前期所签署的合同内容以及对应的 技术工作内容，如果在项目执行过程中发生了合同变更，还因将变更内容也作为验收的评价依据。\n\n<!--more-->\n## 过程\n- **1、验收测试**\n- **2、系统试运行**\n- **3、系统文档验收**\n - 1、系统集成项目介绍\n - 2、系统集成项目最终报告\n - 3、信息系统说明手册\n - 4、信息系统维护手册\n - 5、软硬件产品说明书、质量保证书。\n- **4、项目终验**\n - 最终验收报告就是业主方认可承建方项目工作的最重要文件之一，这是确认项目工作结束的重要标志。\n \n# 项目总结\n- 项目总结属于项目收尾的管理收尾。而管理收尾有时又称为行政收尾，就是检查项目团队成员及相关干系人是否按规定履行所有职责。实施行政收尾过程还包括收集项目记录、分析项目成败、收集应吸取的教训，以及将项目信息存档供本组织将来使用。\n- **1、项目总结意义**\n - 1、了解项目全过程的工作情况及相关的团队和成员的绩效状况\n - 2、了解出现的问题并进行改进措施总结\n - 3、了解项目全过程中出现的值得吸取的经验并进行总结\n - 4、对总结后的文档进行讨论，通过后即存入公司的知识库，从而纳入企业的过程资产。\n- **2、项目总结会的准备工作**\n - 1、收集整理项目过程文档和经验教训\n - 2、经验教训的收集和形成项目总结会议的讨论稿\n- **3、项目总结会**\n - 需要全体参与项目的成员都参加，并又全体讨论形成文件。\n - 讨论内容\n  - 1、项目绩效：项目的完成情况，具体的项目计划完成情效率\n  - 2、技术绩效：最终的工作范围与项目初期的工作范围的比较结果是什么，工作范围上有什么变更，项目的相关变更是否合理，处理是否有效，变更是否对项目的质量、进度和成本等有重大影响。\n  - 3、成本绩效\n  - 4、进度计划绩效\n  - 5、项目的沟通：是否建立了完善并有效利用的沟通体系。\n  - 6、识别问题和解决问题：项目中发生的问题是否解决，问题的原因是否可以避免\n  - 7、意见和建议\n  \n# 系统维护\n## 软件项目的后续工作\n- **1、软件bug的修改**\n- **2、软件升级**\n- **3、后续技术支持**\n\n## 系统集成项目的后续工作\n- **1、信息系统日常维护工作**\n- **2、硬件产品更新**\n- **3、满足信息系统的新需求**\n\n# 项目后评价\n- **1、信息系统目标评价**\n- **2、信息系统过程评价**\n- **3、信息系统效益评价**\n - 1、信息系统技术评价\n - 2、信息系统经济效益评价\n - 3、信息系统管理效益评价\n - 4、信息系统社会效益评价\n - 5、信息系统环境影响评价\n- **4、信息系统可持续性评价**\n\n  \n","source":"_posts/第十九章 项目收尾管理.md","raw":"---\ntitle: 第十九章 项目收尾管理\ndate: 2016-10-9 23:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 项目验收\n- 项目验收时项目收尾管理中的首要环节，只有完成项目验收工作后，才能进入后续的项目总结、系统维护以及项目后面的评价等工作阶段。\n- 项目的正式验收包括验收项目产品、文档及已经完成的交付成果。对系统集成项目进行验收时需要根据项目前期所签署的合同内容以及对应的 技术工作内容，如果在项目执行过程中发生了合同变更，还因将变更内容也作为验收的评价依据。\n\n<!--more-->\n## 过程\n- **1、验收测试**\n- **2、系统试运行**\n- **3、系统文档验收**\n - 1、系统集成项目介绍\n - 2、系统集成项目最终报告\n - 3、信息系统说明手册\n - 4、信息系统维护手册\n - 5、软硬件产品说明书、质量保证书。\n- **4、项目终验**\n - 最终验收报告就是业主方认可承建方项目工作的最重要文件之一，这是确认项目工作结束的重要标志。\n \n# 项目总结\n- 项目总结属于项目收尾的管理收尾。而管理收尾有时又称为行政收尾，就是检查项目团队成员及相关干系人是否按规定履行所有职责。实施行政收尾过程还包括收集项目记录、分析项目成败、收集应吸取的教训，以及将项目信息存档供本组织将来使用。\n- **1、项目总结意义**\n - 1、了解项目全过程的工作情况及相关的团队和成员的绩效状况\n - 2、了解出现的问题并进行改进措施总结\n - 3、了解项目全过程中出现的值得吸取的经验并进行总结\n - 4、对总结后的文档进行讨论，通过后即存入公司的知识库，从而纳入企业的过程资产。\n- **2、项目总结会的准备工作**\n - 1、收集整理项目过程文档和经验教训\n - 2、经验教训的收集和形成项目总结会议的讨论稿\n- **3、项目总结会**\n - 需要全体参与项目的成员都参加，并又全体讨论形成文件。\n - 讨论内容\n  - 1、项目绩效：项目的完成情况，具体的项目计划完成情效率\n  - 2、技术绩效：最终的工作范围与项目初期的工作范围的比较结果是什么，工作范围上有什么变更，项目的相关变更是否合理，处理是否有效，变更是否对项目的质量、进度和成本等有重大影响。\n  - 3、成本绩效\n  - 4、进度计划绩效\n  - 5、项目的沟通：是否建立了完善并有效利用的沟通体系。\n  - 6、识别问题和解决问题：项目中发生的问题是否解决，问题的原因是否可以避免\n  - 7、意见和建议\n  \n# 系统维护\n## 软件项目的后续工作\n- **1、软件bug的修改**\n- **2、软件升级**\n- **3、后续技术支持**\n\n## 系统集成项目的后续工作\n- **1、信息系统日常维护工作**\n- **2、硬件产品更新**\n- **3、满足信息系统的新需求**\n\n# 项目后评价\n- **1、信息系统目标评价**\n- **2、信息系统过程评价**\n- **3、信息系统效益评价**\n - 1、信息系统技术评价\n - 2、信息系统经济效益评价\n - 3、信息系统管理效益评价\n - 4、信息系统社会效益评价\n - 5、信息系统环境影响评价\n- **4、信息系统可持续性评价**\n\n  \n","slug":"第十九章 项目收尾管理","published":1,"updated":"2021-06-25T02:00:18.321Z","layout":"post","photos":[],"link":"","_id":"ckqjatomx003bqkl561hzggaf","content":"<h1 id=\"项目验收\"><a href=\"#项目验收\" class=\"headerlink\" title=\"项目验收\"></a>项目验收</h1><ul>\n<li>项目验收时项目收尾管理中的首要环节，只有完成项目验收工作后，才能进入后续的项目总结、系统维护以及项目后面的评价等工作阶段。</li>\n<li>项目的正式验收包括验收项目产品、文档及已经完成的交付成果。对系统集成项目进行验收时需要根据项目前期所签署的合同内容以及对应的 技术工作内容，如果在项目执行过程中发生了合同变更，还因将变更内容也作为验收的评价依据。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><ul>\n<li><strong>1、验收测试</strong></li>\n<li><strong>2、系统试运行</strong></li>\n<li><strong>3、系统文档验收</strong><ul>\n<li>1、系统集成项目介绍</li>\n<li>2、系统集成项目最终报告</li>\n<li>3、信息系统说明手册</li>\n<li>4、信息系统维护手册</li>\n<li>5、软硬件产品说明书、质量保证书。</li>\n</ul>\n</li>\n<li><strong>4、项目终验</strong><ul>\n<li>最终验收报告就是业主方认可承建方项目工作的最重要文件之一，这是确认项目工作结束的重要标志。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h1><ul>\n<li>项目总结属于项目收尾的管理收尾。而管理收尾有时又称为行政收尾，就是检查项目团队成员及相关干系人是否按规定履行所有职责。实施行政收尾过程还包括收集项目记录、分析项目成败、收集应吸取的教训，以及将项目信息存档供本组织将来使用。</li>\n<li><strong>1、项目总结意义</strong><ul>\n<li>1、了解项目全过程的工作情况及相关的团队和成员的绩效状况</li>\n<li>2、了解出现的问题并进行改进措施总结</li>\n<li>3、了解项目全过程中出现的值得吸取的经验并进行总结</li>\n<li>4、对总结后的文档进行讨论，通过后即存入公司的知识库，从而纳入企业的过程资产。</li>\n</ul>\n</li>\n<li><strong>2、项目总结会的准备工作</strong><ul>\n<li>1、收集整理项目过程文档和经验教训</li>\n<li>2、经验教训的收集和形成项目总结会议的讨论稿</li>\n</ul>\n</li>\n<li><strong>3、项目总结会</strong><ul>\n<li>需要全体参与项目的成员都参加，并又全体讨论形成文件。</li>\n<li>讨论内容</li>\n<li>1、项目绩效：项目的完成情况，具体的项目计划完成情效率</li>\n<li>2、技术绩效：最终的工作范围与项目初期的工作范围的比较结果是什么，工作范围上有什么变更，项目的相关变更是否合理，处理是否有效，变更是否对项目的质量、进度和成本等有重大影响。</li>\n<li>3、成本绩效</li>\n<li>4、进度计划绩效</li>\n<li>5、项目的沟通：是否建立了完善并有效利用的沟通体系。</li>\n<li>6、识别问题和解决问题：项目中发生的问题是否解决，问题的原因是否可以避免</li>\n<li>7、意见和建议</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"系统维护\"><a href=\"#系统维护\" class=\"headerlink\" title=\"系统维护\"></a>系统维护</h1><h2 id=\"软件项目的后续工作\"><a href=\"#软件项目的后续工作\" class=\"headerlink\" title=\"软件项目的后续工作\"></a>软件项目的后续工作</h2><ul>\n<li><strong>1、软件bug的修改</strong></li>\n<li><strong>2、软件升级</strong></li>\n<li><strong>3、后续技术支持</strong></li>\n</ul>\n<h2 id=\"系统集成项目的后续工作\"><a href=\"#系统集成项目的后续工作\" class=\"headerlink\" title=\"系统集成项目的后续工作\"></a>系统集成项目的后续工作</h2><ul>\n<li><strong>1、信息系统日常维护工作</strong></li>\n<li><strong>2、硬件产品更新</strong></li>\n<li><strong>3、满足信息系统的新需求</strong></li>\n</ul>\n<h1 id=\"项目后评价\"><a href=\"#项目后评价\" class=\"headerlink\" title=\"项目后评价\"></a>项目后评价</h1><ul>\n<li><strong>1、信息系统目标评价</strong></li>\n<li><strong>2、信息系统过程评价</strong></li>\n<li><strong>3、信息系统效益评价</strong><ul>\n<li>1、信息系统技术评价</li>\n<li>2、信息系统经济效益评价</li>\n<li>3、信息系统管理效益评价</li>\n<li>4、信息系统社会效益评价</li>\n<li>5、信息系统环境影响评价</li>\n</ul>\n</li>\n<li><strong>4、信息系统可持续性评价</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"项目验收\"><a href=\"#项目验收\" class=\"headerlink\" title=\"项目验收\"></a>项目验收</h1><ul>\n<li>项目验收时项目收尾管理中的首要环节，只有完成项目验收工作后，才能进入后续的项目总结、系统维护以及项目后面的评价等工作阶段。</li>\n<li>项目的正式验收包括验收项目产品、文档及已经完成的交付成果。对系统集成项目进行验收时需要根据项目前期所签署的合同内容以及对应的 技术工作内容，如果在项目执行过程中发生了合同变更，还因将变更内容也作为验收的评价依据。</li>\n</ul>","more":"<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><ul>\n<li><strong>1、验收测试</strong></li>\n<li><strong>2、系统试运行</strong></li>\n<li><strong>3、系统文档验收</strong><ul>\n<li>1、系统集成项目介绍</li>\n<li>2、系统集成项目最终报告</li>\n<li>3、信息系统说明手册</li>\n<li>4、信息系统维护手册</li>\n<li>5、软硬件产品说明书、质量保证书。</li>\n</ul>\n</li>\n<li><strong>4、项目终验</strong><ul>\n<li>最终验收报告就是业主方认可承建方项目工作的最重要文件之一，这是确认项目工作结束的重要标志。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h1><ul>\n<li>项目总结属于项目收尾的管理收尾。而管理收尾有时又称为行政收尾，就是检查项目团队成员及相关干系人是否按规定履行所有职责。实施行政收尾过程还包括收集项目记录、分析项目成败、收集应吸取的教训，以及将项目信息存档供本组织将来使用。</li>\n<li><strong>1、项目总结意义</strong><ul>\n<li>1、了解项目全过程的工作情况及相关的团队和成员的绩效状况</li>\n<li>2、了解出现的问题并进行改进措施总结</li>\n<li>3、了解项目全过程中出现的值得吸取的经验并进行总结</li>\n<li>4、对总结后的文档进行讨论，通过后即存入公司的知识库，从而纳入企业的过程资产。</li>\n</ul>\n</li>\n<li><strong>2、项目总结会的准备工作</strong><ul>\n<li>1、收集整理项目过程文档和经验教训</li>\n<li>2、经验教训的收集和形成项目总结会议的讨论稿</li>\n</ul>\n</li>\n<li><strong>3、项目总结会</strong><ul>\n<li>需要全体参与项目的成员都参加，并又全体讨论形成文件。</li>\n<li>讨论内容</li>\n<li>1、项目绩效：项目的完成情况，具体的项目计划完成情效率</li>\n<li>2、技术绩效：最终的工作范围与项目初期的工作范围的比较结果是什么，工作范围上有什么变更，项目的相关变更是否合理，处理是否有效，变更是否对项目的质量、进度和成本等有重大影响。</li>\n<li>3、成本绩效</li>\n<li>4、进度计划绩效</li>\n<li>5、项目的沟通：是否建立了完善并有效利用的沟通体系。</li>\n<li>6、识别问题和解决问题：项目中发生的问题是否解决，问题的原因是否可以避免</li>\n<li>7、意见和建议</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"系统维护\"><a href=\"#系统维护\" class=\"headerlink\" title=\"系统维护\"></a>系统维护</h1><h2 id=\"软件项目的后续工作\"><a href=\"#软件项目的后续工作\" class=\"headerlink\" title=\"软件项目的后续工作\"></a>软件项目的后续工作</h2><ul>\n<li><strong>1、软件bug的修改</strong></li>\n<li><strong>2、软件升级</strong></li>\n<li><strong>3、后续技术支持</strong></li>\n</ul>\n<h2 id=\"系统集成项目的后续工作\"><a href=\"#系统集成项目的后续工作\" class=\"headerlink\" title=\"系统集成项目的后续工作\"></a>系统集成项目的后续工作</h2><ul>\n<li><strong>1、信息系统日常维护工作</strong></li>\n<li><strong>2、硬件产品更新</strong></li>\n<li><strong>3、满足信息系统的新需求</strong></li>\n</ul>\n<h1 id=\"项目后评价\"><a href=\"#项目后评价\" class=\"headerlink\" title=\"项目后评价\"></a>项目后评价</h1><ul>\n<li><strong>1、信息系统目标评价</strong></li>\n<li><strong>2、信息系统过程评价</strong></li>\n<li><strong>3、信息系统效益评价</strong><ul>\n<li>1、信息系统技术评价</li>\n<li>2、信息系统经济效益评价</li>\n<li>3、信息系统管理效益评价</li>\n<li>4、信息系统社会效益评价</li>\n<li>5、信息系统环境影响评价</li>\n</ul>\n</li>\n<li><strong>4、信息系统可持续性评价</strong></li>\n</ul>"},{"title":"第八章 项目进度管理","date":"2016-10-25T02:57:33.000Z","comments":1,"toc":true,"_content":"\n# 7个过程\n- **1、规划进度管理过程**\n - 制定政策、程序和文档以管理项目进度\n- **2、定义活动过程**\n - 识别和记录为完成项目可交付成果而需采取的具体行动\n- **3、排列活动顺序过程**\n - 识别和记录项目活动之间的关系\n- **4、估算活动资源过程**\n - 估算执行各项活动所需材料、人员、设备或用品的种类和数量\n- **5、估算活动持续时间过程**\n - 根据资源估算的结果、估算完成单项活动所需工期\n- **6、制定进度过程**\n - 分析活动顺序、持续时间、资源需求和进度制约因素，创建项目进度模型\n- **7、控制进度过程**\n - 监督项目活动状态、更新项目进展、管理进度基准变更，以实现计划\n<!--more-->\n\n# 排列活动顺序的工具和技术\n## 前导图法\n- 前导图法（Precedence Diagramming Method，PDM），也称紧前关系绘图法，是用于编制项目进度网络的一种方法，它使用方框或者长方形代表活动，节点之间用箭头连接，以显示节点之间的逻辑关系。\n![前导图法](20161106214152.png)\n### 依赖关系\n- 1、**结束-开始的关系（F-S型）。前序活动结束后，后续活动才能开始。**\n - 例如：只有比赛（紧前活动）结束，颁奖典礼（紧后活动）才能开始\n- 2、**结束-结束的关系（F-F型）。前序活动结束后，后续活动才能结束。**\n - 例如：只有完成文件的编写（紧前活动），才能完成文件的编辑（紧后活动）。\n- 3、**开始-开始的关系（S-S型）。前序活动开始后，后续活动才能开始。**\n - 例如：开始地浇灌（紧前活动）之后，才能开始混凝土的找平（紧后活动）。\n- 4、**开始-结束的关系（S-F型）。前序活动开始后，后续活动才能结束。**\n - 例如：只有第二位保安人员开始值班（紧前活动），第一位保安人员才能结束值班（紧后活动）。\n![活动依赖关系图](20161106214322.png)\n - 在前导图法中，每项活动有唯一的活动号，每项活动都注明了预计工期（活动持续时间）。通常，每个节点的活动会有如下几个时间：最早开始时间（ES）、最迟开始时间（LS）、最早完成时间（EF）、最迟完成时间（LF）\n ![](20161106214712.png)\n \n## 箭线图法\n- 与前导图法不同，箭线图法（Arrow Diagramming Method，ADM）是用箭线表示活动、节点表示事件的一种网络图绘制方法，这种网络图也被称作双代号网络图（节点和箭线都要编号）或活动箭线图（AOA）。\n  ![箭线图法](20161106215655.png)\n- 在箭线图法中，活动的开始（箭尾）事件叫做该活动的紧前事件，活动的结束（箭头）事件叫该活动的紧后事件\n- 3个基本原则\n - 1、网络图中每一活动和每一事件都必须有唯一的一个代号，即网络图中不会有相同的代号\n - 2、任两项活动的紧前事件和紧后事件代号至少有一个不相同，节点代号沿箭线方向越来越大\n - 3、流入（流出）同一节点的活动，均有共同的紧后活动（或紧前活动）\n\n# 估算活动持续时间工具和技术\n- 1、专家判断\n - 借鉴历史信息，专家判断能提供持续时间估算所需要的信息，或根据以往类似的项目经验，给出活动持续时间的上限\n- 2、类比估算\n - 使用相似活动或项目的历史数据，来估算\n- 3、参数估算\n - 基于历史数据和项目参数，使用某种算法来计算成本或持续时间\n- 4、三点估算\n - 最可能时间（Tm）\n - 最乐观时间（To）\n - 最悲观时间（Tp）\n - 期望持续时间 **Te = （To+4Tm+Tp）/6**\n- 5、群体决策技术\n- 6、储备分析\n - 进行持续时间估算时，需要考虑应急储备（有时称时间储备或缓冲时间），并将其纳内项目进度计划中。\n \n# 进度规划\n## 关键链法\n- 是一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲时间，以应对资源限制和项目的不确定性。\n- 在进度模型中，估算项目最短工期，确定逻辑网络路径的进度灵活性大小的一种方法。\n- 关键路径是项目中时间最长的活动顺序，决定着可能的项目最短工期。\n- **总浮动时间**\n - 在不延误项目完工时间且不违反进度制约因素的前提下，活动可以从最早开始时间推迟或拖延的时间量。\n - **总浮动时间 = 最晚开始时间 - 最早开始时间**\n- **自由浮动时间**\n - 在不延误任何紧后活动的最早开始时间且不违反进度制约的因素前提下，活动可以从最早开始时间推迟或拖延的时间量\n -  **自由浮动时间 = 紧后活动最早开始时间的最小值 - 本活动的最早完成时间**\n\n# 控制进度\n## 缩短工期活动的方法\n- 1、赶工，投入更多的资源或增加工作时间，以缩短关键活动的工期；\n- 2、快速根据，并行施工，以缩短关键路径的长度\n- 3、使用高素质的资源或经验更丰富的人员\n- 4、减少活动范围或降低活动要求\n- 5、改进方法或技术，以提高生产效率\n- 6、加强质量管理，及时发现问题，减少返工，从而缩短工期。\n","source":"_posts/第八章 项目进度管理.md","raw":"---\ntitle: 第八章 项目进度管理\ndate: 2016-10-25 10:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 7个过程\n- **1、规划进度管理过程**\n - 制定政策、程序和文档以管理项目进度\n- **2、定义活动过程**\n - 识别和记录为完成项目可交付成果而需采取的具体行动\n- **3、排列活动顺序过程**\n - 识别和记录项目活动之间的关系\n- **4、估算活动资源过程**\n - 估算执行各项活动所需材料、人员、设备或用品的种类和数量\n- **5、估算活动持续时间过程**\n - 根据资源估算的结果、估算完成单项活动所需工期\n- **6、制定进度过程**\n - 分析活动顺序、持续时间、资源需求和进度制约因素，创建项目进度模型\n- **7、控制进度过程**\n - 监督项目活动状态、更新项目进展、管理进度基准变更，以实现计划\n<!--more-->\n\n# 排列活动顺序的工具和技术\n## 前导图法\n- 前导图法（Precedence Diagramming Method，PDM），也称紧前关系绘图法，是用于编制项目进度网络的一种方法，它使用方框或者长方形代表活动，节点之间用箭头连接，以显示节点之间的逻辑关系。\n![前导图法](20161106214152.png)\n### 依赖关系\n- 1、**结束-开始的关系（F-S型）。前序活动结束后，后续活动才能开始。**\n - 例如：只有比赛（紧前活动）结束，颁奖典礼（紧后活动）才能开始\n- 2、**结束-结束的关系（F-F型）。前序活动结束后，后续活动才能结束。**\n - 例如：只有完成文件的编写（紧前活动），才能完成文件的编辑（紧后活动）。\n- 3、**开始-开始的关系（S-S型）。前序活动开始后，后续活动才能开始。**\n - 例如：开始地浇灌（紧前活动）之后，才能开始混凝土的找平（紧后活动）。\n- 4、**开始-结束的关系（S-F型）。前序活动开始后，后续活动才能结束。**\n - 例如：只有第二位保安人员开始值班（紧前活动），第一位保安人员才能结束值班（紧后活动）。\n![活动依赖关系图](20161106214322.png)\n - 在前导图法中，每项活动有唯一的活动号，每项活动都注明了预计工期（活动持续时间）。通常，每个节点的活动会有如下几个时间：最早开始时间（ES）、最迟开始时间（LS）、最早完成时间（EF）、最迟完成时间（LF）\n ![](20161106214712.png)\n \n## 箭线图法\n- 与前导图法不同，箭线图法（Arrow Diagramming Method，ADM）是用箭线表示活动、节点表示事件的一种网络图绘制方法，这种网络图也被称作双代号网络图（节点和箭线都要编号）或活动箭线图（AOA）。\n  ![箭线图法](20161106215655.png)\n- 在箭线图法中，活动的开始（箭尾）事件叫做该活动的紧前事件，活动的结束（箭头）事件叫该活动的紧后事件\n- 3个基本原则\n - 1、网络图中每一活动和每一事件都必须有唯一的一个代号，即网络图中不会有相同的代号\n - 2、任两项活动的紧前事件和紧后事件代号至少有一个不相同，节点代号沿箭线方向越来越大\n - 3、流入（流出）同一节点的活动，均有共同的紧后活动（或紧前活动）\n\n# 估算活动持续时间工具和技术\n- 1、专家判断\n - 借鉴历史信息，专家判断能提供持续时间估算所需要的信息，或根据以往类似的项目经验，给出活动持续时间的上限\n- 2、类比估算\n - 使用相似活动或项目的历史数据，来估算\n- 3、参数估算\n - 基于历史数据和项目参数，使用某种算法来计算成本或持续时间\n- 4、三点估算\n - 最可能时间（Tm）\n - 最乐观时间（To）\n - 最悲观时间（Tp）\n - 期望持续时间 **Te = （To+4Tm+Tp）/6**\n- 5、群体决策技术\n- 6、储备分析\n - 进行持续时间估算时，需要考虑应急储备（有时称时间储备或缓冲时间），并将其纳内项目进度计划中。\n \n# 进度规划\n## 关键链法\n- 是一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲时间，以应对资源限制和项目的不确定性。\n- 在进度模型中，估算项目最短工期，确定逻辑网络路径的进度灵活性大小的一种方法。\n- 关键路径是项目中时间最长的活动顺序，决定着可能的项目最短工期。\n- **总浮动时间**\n - 在不延误项目完工时间且不违反进度制约因素的前提下，活动可以从最早开始时间推迟或拖延的时间量。\n - **总浮动时间 = 最晚开始时间 - 最早开始时间**\n- **自由浮动时间**\n - 在不延误任何紧后活动的最早开始时间且不违反进度制约的因素前提下，活动可以从最早开始时间推迟或拖延的时间量\n -  **自由浮动时间 = 紧后活动最早开始时间的最小值 - 本活动的最早完成时间**\n\n# 控制进度\n## 缩短工期活动的方法\n- 1、赶工，投入更多的资源或增加工作时间，以缩短关键活动的工期；\n- 2、快速根据，并行施工，以缩短关键路径的长度\n- 3、使用高素质的资源或经验更丰富的人员\n- 4、减少活动范围或降低活动要求\n- 5、改进方法或技术，以提高生产效率\n- 6、加强质量管理，及时发现问题，减少返工，从而缩短工期。\n","slug":"第八章 项目进度管理","published":1,"updated":"2021-06-25T02:00:18.199Z","layout":"post","photos":[],"link":"","_id":"ckqjatomy003cqkl5gfxmr1qw","content":"<h1 id=\"7个过程\"><a href=\"#7个过程\" class=\"headerlink\" title=\"7个过程\"></a>7个过程</h1><ul>\n<li><strong>1、规划进度管理过程</strong><ul>\n<li>制定政策、程序和文档以管理项目进度</li>\n</ul>\n</li>\n<li><strong>2、定义活动过程</strong><ul>\n<li>识别和记录为完成项目可交付成果而需采取的具体行动</li>\n</ul>\n</li>\n<li><strong>3、排列活动顺序过程</strong><ul>\n<li>识别和记录项目活动之间的关系</li>\n</ul>\n</li>\n<li><strong>4、估算活动资源过程</strong><ul>\n<li>估算执行各项活动所需材料、人员、设备或用品的种类和数量</li>\n</ul>\n</li>\n<li><strong>5、估算活动持续时间过程</strong><ul>\n<li>根据资源估算的结果、估算完成单项活动所需工期</li>\n</ul>\n</li>\n<li><strong>6、制定进度过程</strong><ul>\n<li>分析活动顺序、持续时间、资源需求和进度制约因素，创建项目进度模型</li>\n</ul>\n</li>\n<li><strong>7、控制进度过程</strong><ul>\n<li>监督项目活动状态、更新项目进展、管理进度基准变更，以实现计划<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"排列活动顺序的工具和技术\"><a href=\"#排列活动顺序的工具和技术\" class=\"headerlink\" title=\"排列活动顺序的工具和技术\"></a>排列活动顺序的工具和技术</h1><h2 id=\"前导图法\"><a href=\"#前导图法\" class=\"headerlink\" title=\"前导图法\"></a>前导图法</h2><ul>\n<li>前导图法（Precedence Diagramming Method，PDM），也称紧前关系绘图法，是用于编制项目进度网络的一种方法，它使用方框或者长方形代表活动，节点之间用箭头连接，以显示节点之间的逻辑关系。<br><img src=\"20161106214152.png\" alt=\"前导图法\"><h3 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h3></li>\n<li>1、<strong>结束-开始的关系（F-S型）。前序活动结束后，后续活动才能开始。</strong><ul>\n<li>例如：只有比赛（紧前活动）结束，颁奖典礼（紧后活动）才能开始</li>\n</ul>\n</li>\n<li>2、<strong>结束-结束的关系（F-F型）。前序活动结束后，后续活动才能结束。</strong><ul>\n<li>例如：只有完成文件的编写（紧前活动），才能完成文件的编辑（紧后活动）。</li>\n</ul>\n</li>\n<li>3、<strong>开始-开始的关系（S-S型）。前序活动开始后，后续活动才能开始。</strong><ul>\n<li>例如：开始地浇灌（紧前活动）之后，才能开始混凝土的找平（紧后活动）。</li>\n</ul>\n</li>\n<li>4、<strong>开始-结束的关系（S-F型）。前序活动开始后，后续活动才能结束。</strong><ul>\n<li>例如：只有第二位保安人员开始值班（紧前活动），第一位保安人员才能结束值班（紧后活动）。<br><img src=\"20161106214322.png\" alt=\"活动依赖关系图\"></li>\n<li>在前导图法中，每项活动有唯一的活动号，每项活动都注明了预计工期（活动持续时间）。通常，每个节点的活动会有如下几个时间：最早开始时间（ES）、最迟开始时间（LS）、最早完成时间（EF）、最迟完成时间（LF）<br><img src=\"20161106214712.png\" alt></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"箭线图法\"><a href=\"#箭线图法\" class=\"headerlink\" title=\"箭线图法\"></a>箭线图法</h2><ul>\n<li>与前导图法不同，箭线图法（Arrow Diagramming Method，ADM）是用箭线表示活动、节点表示事件的一种网络图绘制方法，这种网络图也被称作双代号网络图（节点和箭线都要编号）或活动箭线图（AOA）。<br><img src=\"20161106215655.png\" alt=\"箭线图法\"></li>\n<li>在箭线图法中，活动的开始（箭尾）事件叫做该活动的紧前事件，活动的结束（箭头）事件叫该活动的紧后事件</li>\n<li>3个基本原则<ul>\n<li>1、网络图中每一活动和每一事件都必须有唯一的一个代号，即网络图中不会有相同的代号</li>\n<li>2、任两项活动的紧前事件和紧后事件代号至少有一个不相同，节点代号沿箭线方向越来越大</li>\n<li>3、流入（流出）同一节点的活动，均有共同的紧后活动（或紧前活动）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"估算活动持续时间工具和技术\"><a href=\"#估算活动持续时间工具和技术\" class=\"headerlink\" title=\"估算活动持续时间工具和技术\"></a>估算活动持续时间工具和技术</h1><ul>\n<li>1、专家判断<ul>\n<li>借鉴历史信息，专家判断能提供持续时间估算所需要的信息，或根据以往类似的项目经验，给出活动持续时间的上限</li>\n</ul>\n</li>\n<li>2、类比估算<ul>\n<li>使用相似活动或项目的历史数据，来估算</li>\n</ul>\n</li>\n<li>3、参数估算<ul>\n<li>基于历史数据和项目参数，使用某种算法来计算成本或持续时间</li>\n</ul>\n</li>\n<li>4、三点估算<ul>\n<li>最可能时间（Tm）</li>\n<li>最乐观时间（To）</li>\n<li>最悲观时间（Tp）</li>\n<li>期望持续时间 <strong>Te = （To+4Tm+Tp）/6</strong></li>\n</ul>\n</li>\n<li>5、群体决策技术</li>\n<li>6、储备分析<ul>\n<li>进行持续时间估算时，需要考虑应急储备（有时称时间储备或缓冲时间），并将其纳内项目进度计划中。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"进度规划\"><a href=\"#进度规划\" class=\"headerlink\" title=\"进度规划\"></a>进度规划</h1><h2 id=\"关键链法\"><a href=\"#关键链法\" class=\"headerlink\" title=\"关键链法\"></a>关键链法</h2><ul>\n<li>是一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲时间，以应对资源限制和项目的不确定性。</li>\n<li>在进度模型中，估算项目最短工期，确定逻辑网络路径的进度灵活性大小的一种方法。</li>\n<li>关键路径是项目中时间最长的活动顺序，决定着可能的项目最短工期。</li>\n<li><strong>总浮动时间</strong><ul>\n<li>在不延误项目完工时间且不违反进度制约因素的前提下，活动可以从最早开始时间推迟或拖延的时间量。</li>\n<li><strong>总浮动时间 = 最晚开始时间 - 最早开始时间</strong></li>\n</ul>\n</li>\n<li><strong>自由浮动时间</strong><ul>\n<li>在不延误任何紧后活动的最早开始时间且不违反进度制约的因素前提下，活动可以从最早开始时间推迟或拖延的时间量</li>\n<li><strong>自由浮动时间 = 紧后活动最早开始时间的最小值 - 本活动的最早完成时间</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"控制进度\"><a href=\"#控制进度\" class=\"headerlink\" title=\"控制进度\"></a>控制进度</h1><h2 id=\"缩短工期活动的方法\"><a href=\"#缩短工期活动的方法\" class=\"headerlink\" title=\"缩短工期活动的方法\"></a>缩短工期活动的方法</h2><ul>\n<li>1、赶工，投入更多的资源或增加工作时间，以缩短关键活动的工期；</li>\n<li>2、快速根据，并行施工，以缩短关键路径的长度</li>\n<li>3、使用高素质的资源或经验更丰富的人员</li>\n<li>4、减少活动范围或降低活动要求</li>\n<li>5、改进方法或技术，以提高生产效率</li>\n<li>6、加强质量管理，及时发现问题，减少返工，从而缩短工期。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"7个过程\"><a href=\"#7个过程\" class=\"headerlink\" title=\"7个过程\"></a>7个过程</h1><ul>\n<li><strong>1、规划进度管理过程</strong><ul>\n<li>制定政策、程序和文档以管理项目进度</li>\n</ul>\n</li>\n<li><strong>2、定义活动过程</strong><ul>\n<li>识别和记录为完成项目可交付成果而需采取的具体行动</li>\n</ul>\n</li>\n<li><strong>3、排列活动顺序过程</strong><ul>\n<li>识别和记录项目活动之间的关系</li>\n</ul>\n</li>\n<li><strong>4、估算活动资源过程</strong><ul>\n<li>估算执行各项活动所需材料、人员、设备或用品的种类和数量</li>\n</ul>\n</li>\n<li><strong>5、估算活动持续时间过程</strong><ul>\n<li>根据资源估算的结果、估算完成单项活动所需工期</li>\n</ul>\n</li>\n<li><strong>6、制定进度过程</strong><ul>\n<li>分析活动顺序、持续时间、资源需求和进度制约因素，创建项目进度模型</li>\n</ul>\n</li>\n<li><strong>7、控制进度过程</strong><ul>\n<li>监督项目活动状态、更新项目进展、管理进度基准变更，以实现计划","more":"</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"排列活动顺序的工具和技术\"><a href=\"#排列活动顺序的工具和技术\" class=\"headerlink\" title=\"排列活动顺序的工具和技术\"></a>排列活动顺序的工具和技术</h1><h2 id=\"前导图法\"><a href=\"#前导图法\" class=\"headerlink\" title=\"前导图法\"></a>前导图法</h2><ul>\n<li>前导图法（Precedence Diagramming Method，PDM），也称紧前关系绘图法，是用于编制项目进度网络的一种方法，它使用方框或者长方形代表活动，节点之间用箭头连接，以显示节点之间的逻辑关系。<br><img src=\"20161106214152.png\" alt=\"前导图法\"><h3 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h3></li>\n<li>1、<strong>结束-开始的关系（F-S型）。前序活动结束后，后续活动才能开始。</strong><ul>\n<li>例如：只有比赛（紧前活动）结束，颁奖典礼（紧后活动）才能开始</li>\n</ul>\n</li>\n<li>2、<strong>结束-结束的关系（F-F型）。前序活动结束后，后续活动才能结束。</strong><ul>\n<li>例如：只有完成文件的编写（紧前活动），才能完成文件的编辑（紧后活动）。</li>\n</ul>\n</li>\n<li>3、<strong>开始-开始的关系（S-S型）。前序活动开始后，后续活动才能开始。</strong><ul>\n<li>例如：开始地浇灌（紧前活动）之后，才能开始混凝土的找平（紧后活动）。</li>\n</ul>\n</li>\n<li>4、<strong>开始-结束的关系（S-F型）。前序活动开始后，后续活动才能结束。</strong><ul>\n<li>例如：只有第二位保安人员开始值班（紧前活动），第一位保安人员才能结束值班（紧后活动）。<br><img src=\"20161106214322.png\" alt=\"活动依赖关系图\"></li>\n<li>在前导图法中，每项活动有唯一的活动号，每项活动都注明了预计工期（活动持续时间）。通常，每个节点的活动会有如下几个时间：最早开始时间（ES）、最迟开始时间（LS）、最早完成时间（EF）、最迟完成时间（LF）<br><img src=\"20161106214712.png\" alt></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"箭线图法\"><a href=\"#箭线图法\" class=\"headerlink\" title=\"箭线图法\"></a>箭线图法</h2><ul>\n<li>与前导图法不同，箭线图法（Arrow Diagramming Method，ADM）是用箭线表示活动、节点表示事件的一种网络图绘制方法，这种网络图也被称作双代号网络图（节点和箭线都要编号）或活动箭线图（AOA）。<br><img src=\"20161106215655.png\" alt=\"箭线图法\"></li>\n<li>在箭线图法中，活动的开始（箭尾）事件叫做该活动的紧前事件，活动的结束（箭头）事件叫该活动的紧后事件</li>\n<li>3个基本原则<ul>\n<li>1、网络图中每一活动和每一事件都必须有唯一的一个代号，即网络图中不会有相同的代号</li>\n<li>2、任两项活动的紧前事件和紧后事件代号至少有一个不相同，节点代号沿箭线方向越来越大</li>\n<li>3、流入（流出）同一节点的活动，均有共同的紧后活动（或紧前活动）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"估算活动持续时间工具和技术\"><a href=\"#估算活动持续时间工具和技术\" class=\"headerlink\" title=\"估算活动持续时间工具和技术\"></a>估算活动持续时间工具和技术</h1><ul>\n<li>1、专家判断<ul>\n<li>借鉴历史信息，专家判断能提供持续时间估算所需要的信息，或根据以往类似的项目经验，给出活动持续时间的上限</li>\n</ul>\n</li>\n<li>2、类比估算<ul>\n<li>使用相似活动或项目的历史数据，来估算</li>\n</ul>\n</li>\n<li>3、参数估算<ul>\n<li>基于历史数据和项目参数，使用某种算法来计算成本或持续时间</li>\n</ul>\n</li>\n<li>4、三点估算<ul>\n<li>最可能时间（Tm）</li>\n<li>最乐观时间（To）</li>\n<li>最悲观时间（Tp）</li>\n<li>期望持续时间 <strong>Te = （To+4Tm+Tp）/6</strong></li>\n</ul>\n</li>\n<li>5、群体决策技术</li>\n<li>6、储备分析<ul>\n<li>进行持续时间估算时，需要考虑应急储备（有时称时间储备或缓冲时间），并将其纳内项目进度计划中。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"进度规划\"><a href=\"#进度规划\" class=\"headerlink\" title=\"进度规划\"></a>进度规划</h1><h2 id=\"关键链法\"><a href=\"#关键链法\" class=\"headerlink\" title=\"关键链法\"></a>关键链法</h2><ul>\n<li>是一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲时间，以应对资源限制和项目的不确定性。</li>\n<li>在进度模型中，估算项目最短工期，确定逻辑网络路径的进度灵活性大小的一种方法。</li>\n<li>关键路径是项目中时间最长的活动顺序，决定着可能的项目最短工期。</li>\n<li><strong>总浮动时间</strong><ul>\n<li>在不延误项目完工时间且不违反进度制约因素的前提下，活动可以从最早开始时间推迟或拖延的时间量。</li>\n<li><strong>总浮动时间 = 最晚开始时间 - 最早开始时间</strong></li>\n</ul>\n</li>\n<li><strong>自由浮动时间</strong><ul>\n<li>在不延误任何紧后活动的最早开始时间且不违反进度制约的因素前提下，活动可以从最早开始时间推迟或拖延的时间量</li>\n<li><strong>自由浮动时间 = 紧后活动最早开始时间的最小值 - 本活动的最早完成时间</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"控制进度\"><a href=\"#控制进度\" class=\"headerlink\" title=\"控制进度\"></a>控制进度</h1><h2 id=\"缩短工期活动的方法\"><a href=\"#缩短工期活动的方法\" class=\"headerlink\" title=\"缩短工期活动的方法\"></a>缩短工期活动的方法</h2><ul>\n<li>1、赶工，投入更多的资源或增加工作时间，以缩短关键活动的工期；</li>\n<li>2、快速根据，并行施工，以缩短关键路径的长度</li>\n<li>3、使用高素质的资源或经验更丰富的人员</li>\n<li>4、减少活动范围或降低活动要求</li>\n<li>5、改进方法或技术，以提高生产效率</li>\n<li>6、加强质量管理，及时发现问题，减少返工，从而缩短工期。</li>\n</ul>"},{"title":"第十六章 变更管理","date":"2016-10-12T15:57:33.000Z","comments":1,"toc":true,"_content":"\n# 项目变更基本概念\n- 在信息系统项目实施过程中，由于项目环境或者其他原因而对项目产品的功能、性能、架构、技术指标、集成方法、项目的范围基准、进度基准和成本基准等方面做出的改变。\n- 变更管理的实质，是根据项目推进过程中越来越丰富的项目认知，不断调整项目努力方向和资源配置，最大程度地满足客户等项目干系人的需求，提升项目价值。\n<!--more-->\n\n## 变更含义\n- 变更管理是为了使项目实际执行情况和项目基准相一致而对项目变更进行管理，其可能的结果是拒绝变更或调整基准\n- 从资源增值视觉看，变更的实质是在项目过程中，按一定的流程、根据变化了的情况更新方案、调整资源的配置方式或将储备资源运用于项目中，以满足客户等相关干系人的需求。\n\n## 变更分类\n- 1、按变更性质分为重大变更、重要变更和一般变更，可通过不同的审批权限控制。\n- 2、按变更的迫切性分为紧急变更和非紧急变更，可通过不同的变更处理流程进行控制\n- 3、按变更所发生的领域和阶段，可分为进度变更、成本变更、质量变更、设计变更、实施变更和工作（产品）范围变更\n- 4、按变更来源可分为内部变更和外部变更\n\n## 变更产生的原因\n- 项目具有逐渐完善的基本特征，这就意味着早期的共识会随着对项目的逐步细化，在实施过程不可避免地发生变化。\n- 变更原因常见有\n- 1、产品范围（成果）定义的过失或者疏忽\n- 2、项目范围（工作）定义的过失或者疏忽\n- 3、客户提出新的需求\n- 4、应对风险的紧急措施或规避措施\n- 5、项目执行过程与项目基准要求不一致带来的被动调整（进度、质量、成本）\n- 6、项目团队人员调整\n- 7、技术革新的要求\n- 8、外部事件（例如政策变动或自然环境的变化）\n\n# 变更管理的基本原则\n- 1、基准管理\n- 2、建立变更控制流程\n- 3、建立变更控制委员会\n- 4、完整体现变更的影响\n\n## 角色职责\n- 1、变更申请人\n - 提出变更申请的相关人，项目的任何干系人都可以提出变更\n- 2、项目经理\n - 项目经理对项目负责，也对整个项目变更管理过程负责。\n - 项目经理负责变更申请的影响，负责召开变更控制委员会会议，负责监控变更及已批准变更的正确实施\n- 3、变更控制委员会（CCB）\n - 一个正式的组织，负责审查、评价、批准、推迟或者否决项目变更\n- 4、变更实施人\n- 5、配置管理员\n - 变更过程的相关产物应纳入配置管理系统中，配置管理员负责把变更后的基准纳入整个项目基准中，变更过程中的其他记录文件也应纳入配置管理系统。\n \n## 工作程序\n- 1、提出变更申请\n - 以文档的形式向变更控制委员会提出变更申请，所有的申请必须书面形式记录。并纳入配置管理系统中\n- 2、变更影响分析\n- 3、CCB审查批准\n- 4、实施变更\n- 5、监控变更实施\n- 6、结束变更\n\n# 变更管理相关事项\n## 操作要点\n- 1、对变更产生的因素施加影响，防止不必要的变更，减小无谓的评估，提高必要变更的通过效率\n- 2、变更的操作过程应当规范化\n- 3、对变更的确认应当正式化\n\n## 变更管理和整体管理及配置管理的关系\n- 变更管理是项目整体管理的一部分，属于项目整体变更控制的范畴。应变更管理涉及范围、进度、成本、质量、人力资源和合同管理等多个方面，且重要性不可忽视。\n- 配置管理重点关注可交付产品及各过程文档，而变更管理则着眼于识别、记录、批准或否决对项目文件、可交付产品或基准的变更\n\n","source":"_posts/第十六章 变更管理.md","raw":"---\ntitle: 第十六章 变更管理\ndate: 2016-10-12 23:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 项目变更基本概念\n- 在信息系统项目实施过程中，由于项目环境或者其他原因而对项目产品的功能、性能、架构、技术指标、集成方法、项目的范围基准、进度基准和成本基准等方面做出的改变。\n- 变更管理的实质，是根据项目推进过程中越来越丰富的项目认知，不断调整项目努力方向和资源配置，最大程度地满足客户等项目干系人的需求，提升项目价值。\n<!--more-->\n\n## 变更含义\n- 变更管理是为了使项目实际执行情况和项目基准相一致而对项目变更进行管理，其可能的结果是拒绝变更或调整基准\n- 从资源增值视觉看，变更的实质是在项目过程中，按一定的流程、根据变化了的情况更新方案、调整资源的配置方式或将储备资源运用于项目中，以满足客户等相关干系人的需求。\n\n## 变更分类\n- 1、按变更性质分为重大变更、重要变更和一般变更，可通过不同的审批权限控制。\n- 2、按变更的迫切性分为紧急变更和非紧急变更，可通过不同的变更处理流程进行控制\n- 3、按变更所发生的领域和阶段，可分为进度变更、成本变更、质量变更、设计变更、实施变更和工作（产品）范围变更\n- 4、按变更来源可分为内部变更和外部变更\n\n## 变更产生的原因\n- 项目具有逐渐完善的基本特征，这就意味着早期的共识会随着对项目的逐步细化，在实施过程不可避免地发生变化。\n- 变更原因常见有\n- 1、产品范围（成果）定义的过失或者疏忽\n- 2、项目范围（工作）定义的过失或者疏忽\n- 3、客户提出新的需求\n- 4、应对风险的紧急措施或规避措施\n- 5、项目执行过程与项目基准要求不一致带来的被动调整（进度、质量、成本）\n- 6、项目团队人员调整\n- 7、技术革新的要求\n- 8、外部事件（例如政策变动或自然环境的变化）\n\n# 变更管理的基本原则\n- 1、基准管理\n- 2、建立变更控制流程\n- 3、建立变更控制委员会\n- 4、完整体现变更的影响\n\n## 角色职责\n- 1、变更申请人\n - 提出变更申请的相关人，项目的任何干系人都可以提出变更\n- 2、项目经理\n - 项目经理对项目负责，也对整个项目变更管理过程负责。\n - 项目经理负责变更申请的影响，负责召开变更控制委员会会议，负责监控变更及已批准变更的正确实施\n- 3、变更控制委员会（CCB）\n - 一个正式的组织，负责审查、评价、批准、推迟或者否决项目变更\n- 4、变更实施人\n- 5、配置管理员\n - 变更过程的相关产物应纳入配置管理系统中，配置管理员负责把变更后的基准纳入整个项目基准中，变更过程中的其他记录文件也应纳入配置管理系统。\n \n## 工作程序\n- 1、提出变更申请\n - 以文档的形式向变更控制委员会提出变更申请，所有的申请必须书面形式记录。并纳入配置管理系统中\n- 2、变更影响分析\n- 3、CCB审查批准\n- 4、实施变更\n- 5、监控变更实施\n- 6、结束变更\n\n# 变更管理相关事项\n## 操作要点\n- 1、对变更产生的因素施加影响，防止不必要的变更，减小无谓的评估，提高必要变更的通过效率\n- 2、变更的操作过程应当规范化\n- 3、对变更的确认应当正式化\n\n## 变更管理和整体管理及配置管理的关系\n- 变更管理是项目整体管理的一部分，属于项目整体变更控制的范畴。应变更管理涉及范围、进度、成本、质量、人力资源和合同管理等多个方面，且重要性不可忽视。\n- 配置管理重点关注可交付产品及各过程文档，而变更管理则着眼于识别、记录、批准或否决对项目文件、可交付产品或基准的变更\n\n","slug":"第十六章 变更管理","published":1,"updated":"2021-06-25T02:00:18.324Z","layout":"post","photos":[],"link":"","_id":"ckqjaton2003fqkl5i1jzwaab","content":"<h1 id=\"项目变更基本概念\"><a href=\"#项目变更基本概念\" class=\"headerlink\" title=\"项目变更基本概念\"></a>项目变更基本概念</h1><ul>\n<li>在信息系统项目实施过程中，由于项目环境或者其他原因而对项目产品的功能、性能、架构、技术指标、集成方法、项目的范围基准、进度基准和成本基准等方面做出的改变。</li>\n<li>变更管理的实质，是根据项目推进过程中越来越丰富的项目认知，不断调整项目努力方向和资源配置，最大程度地满足客户等项目干系人的需求，提升项目价值。<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"变更含义\"><a href=\"#变更含义\" class=\"headerlink\" title=\"变更含义\"></a>变更含义</h2><ul>\n<li>变更管理是为了使项目实际执行情况和项目基准相一致而对项目变更进行管理，其可能的结果是拒绝变更或调整基准</li>\n<li>从资源增值视觉看，变更的实质是在项目过程中，按一定的流程、根据变化了的情况更新方案、调整资源的配置方式或将储备资源运用于项目中，以满足客户等相关干系人的需求。</li>\n</ul>\n<h2 id=\"变更分类\"><a href=\"#变更分类\" class=\"headerlink\" title=\"变更分类\"></a>变更分类</h2><ul>\n<li>1、按变更性质分为重大变更、重要变更和一般变更，可通过不同的审批权限控制。</li>\n<li>2、按变更的迫切性分为紧急变更和非紧急变更，可通过不同的变更处理流程进行控制</li>\n<li>3、按变更所发生的领域和阶段，可分为进度变更、成本变更、质量变更、设计变更、实施变更和工作（产品）范围变更</li>\n<li>4、按变更来源可分为内部变更和外部变更</li>\n</ul>\n<h2 id=\"变更产生的原因\"><a href=\"#变更产生的原因\" class=\"headerlink\" title=\"变更产生的原因\"></a>变更产生的原因</h2><ul>\n<li>项目具有逐渐完善的基本特征，这就意味着早期的共识会随着对项目的逐步细化，在实施过程不可避免地发生变化。</li>\n<li>变更原因常见有</li>\n<li>1、产品范围（成果）定义的过失或者疏忽</li>\n<li>2、项目范围（工作）定义的过失或者疏忽</li>\n<li>3、客户提出新的需求</li>\n<li>4、应对风险的紧急措施或规避措施</li>\n<li>5、项目执行过程与项目基准要求不一致带来的被动调整（进度、质量、成本）</li>\n<li>6、项目团队人员调整</li>\n<li>7、技术革新的要求</li>\n<li>8、外部事件（例如政策变动或自然环境的变化）</li>\n</ul>\n<h1 id=\"变更管理的基本原则\"><a href=\"#变更管理的基本原则\" class=\"headerlink\" title=\"变更管理的基本原则\"></a>变更管理的基本原则</h1><ul>\n<li>1、基准管理</li>\n<li>2、建立变更控制流程</li>\n<li>3、建立变更控制委员会</li>\n<li>4、完整体现变更的影响</li>\n</ul>\n<h2 id=\"角色职责\"><a href=\"#角色职责\" class=\"headerlink\" title=\"角色职责\"></a>角色职责</h2><ul>\n<li>1、变更申请人<ul>\n<li>提出变更申请的相关人，项目的任何干系人都可以提出变更</li>\n</ul>\n</li>\n<li>2、项目经理<ul>\n<li>项目经理对项目负责，也对整个项目变更管理过程负责。</li>\n<li>项目经理负责变更申请的影响，负责召开变更控制委员会会议，负责监控变更及已批准变更的正确实施</li>\n</ul>\n</li>\n<li>3、变更控制委员会（CCB）<ul>\n<li>一个正式的组织，负责审查、评价、批准、推迟或者否决项目变更</li>\n</ul>\n</li>\n<li>4、变更实施人</li>\n<li>5、配置管理员<ul>\n<li>变更过程的相关产物应纳入配置管理系统中，配置管理员负责把变更后的基准纳入整个项目基准中，变更过程中的其他记录文件也应纳入配置管理系统。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工作程序\"><a href=\"#工作程序\" class=\"headerlink\" title=\"工作程序\"></a>工作程序</h2><ul>\n<li>1、提出变更申请<ul>\n<li>以文档的形式向变更控制委员会提出变更申请，所有的申请必须书面形式记录。并纳入配置管理系统中</li>\n</ul>\n</li>\n<li>2、变更影响分析</li>\n<li>3、CCB审查批准</li>\n<li>4、实施变更</li>\n<li>5、监控变更实施</li>\n<li>6、结束变更</li>\n</ul>\n<h1 id=\"变更管理相关事项\"><a href=\"#变更管理相关事项\" class=\"headerlink\" title=\"变更管理相关事项\"></a>变更管理相关事项</h1><h2 id=\"操作要点\"><a href=\"#操作要点\" class=\"headerlink\" title=\"操作要点\"></a>操作要点</h2><ul>\n<li>1、对变更产生的因素施加影响，防止不必要的变更，减小无谓的评估，提高必要变更的通过效率</li>\n<li>2、变更的操作过程应当规范化</li>\n<li>3、对变更的确认应当正式化</li>\n</ul>\n<h2 id=\"变更管理和整体管理及配置管理的关系\"><a href=\"#变更管理和整体管理及配置管理的关系\" class=\"headerlink\" title=\"变更管理和整体管理及配置管理的关系\"></a>变更管理和整体管理及配置管理的关系</h2><ul>\n<li>变更管理是项目整体管理的一部分，属于项目整体变更控制的范畴。应变更管理涉及范围、进度、成本、质量、人力资源和合同管理等多个方面，且重要性不可忽视。</li>\n<li>配置管理重点关注可交付产品及各过程文档，而变更管理则着眼于识别、记录、批准或否决对项目文件、可交付产品或基准的变更</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"项目变更基本概念\"><a href=\"#项目变更基本概念\" class=\"headerlink\" title=\"项目变更基本概念\"></a>项目变更基本概念</h1><ul>\n<li>在信息系统项目实施过程中，由于项目环境或者其他原因而对项目产品的功能、性能、架构、技术指标、集成方法、项目的范围基准、进度基准和成本基准等方面做出的改变。</li>\n<li>变更管理的实质，是根据项目推进过程中越来越丰富的项目认知，不断调整项目努力方向和资源配置，最大程度地满足客户等项目干系人的需求，提升项目价值。","more":"</li>\n</ul>\n<h2 id=\"变更含义\"><a href=\"#变更含义\" class=\"headerlink\" title=\"变更含义\"></a>变更含义</h2><ul>\n<li>变更管理是为了使项目实际执行情况和项目基准相一致而对项目变更进行管理，其可能的结果是拒绝变更或调整基准</li>\n<li>从资源增值视觉看，变更的实质是在项目过程中，按一定的流程、根据变化了的情况更新方案、调整资源的配置方式或将储备资源运用于项目中，以满足客户等相关干系人的需求。</li>\n</ul>\n<h2 id=\"变更分类\"><a href=\"#变更分类\" class=\"headerlink\" title=\"变更分类\"></a>变更分类</h2><ul>\n<li>1、按变更性质分为重大变更、重要变更和一般变更，可通过不同的审批权限控制。</li>\n<li>2、按变更的迫切性分为紧急变更和非紧急变更，可通过不同的变更处理流程进行控制</li>\n<li>3、按变更所发生的领域和阶段，可分为进度变更、成本变更、质量变更、设计变更、实施变更和工作（产品）范围变更</li>\n<li>4、按变更来源可分为内部变更和外部变更</li>\n</ul>\n<h2 id=\"变更产生的原因\"><a href=\"#变更产生的原因\" class=\"headerlink\" title=\"变更产生的原因\"></a>变更产生的原因</h2><ul>\n<li>项目具有逐渐完善的基本特征，这就意味着早期的共识会随着对项目的逐步细化，在实施过程不可避免地发生变化。</li>\n<li>变更原因常见有</li>\n<li>1、产品范围（成果）定义的过失或者疏忽</li>\n<li>2、项目范围（工作）定义的过失或者疏忽</li>\n<li>3、客户提出新的需求</li>\n<li>4、应对风险的紧急措施或规避措施</li>\n<li>5、项目执行过程与项目基准要求不一致带来的被动调整（进度、质量、成本）</li>\n<li>6、项目团队人员调整</li>\n<li>7、技术革新的要求</li>\n<li>8、外部事件（例如政策变动或自然环境的变化）</li>\n</ul>\n<h1 id=\"变更管理的基本原则\"><a href=\"#变更管理的基本原则\" class=\"headerlink\" title=\"变更管理的基本原则\"></a>变更管理的基本原则</h1><ul>\n<li>1、基准管理</li>\n<li>2、建立变更控制流程</li>\n<li>3、建立变更控制委员会</li>\n<li>4、完整体现变更的影响</li>\n</ul>\n<h2 id=\"角色职责\"><a href=\"#角色职责\" class=\"headerlink\" title=\"角色职责\"></a>角色职责</h2><ul>\n<li>1、变更申请人<ul>\n<li>提出变更申请的相关人，项目的任何干系人都可以提出变更</li>\n</ul>\n</li>\n<li>2、项目经理<ul>\n<li>项目经理对项目负责，也对整个项目变更管理过程负责。</li>\n<li>项目经理负责变更申请的影响，负责召开变更控制委员会会议，负责监控变更及已批准变更的正确实施</li>\n</ul>\n</li>\n<li>3、变更控制委员会（CCB）<ul>\n<li>一个正式的组织，负责审查、评价、批准、推迟或者否决项目变更</li>\n</ul>\n</li>\n<li>4、变更实施人</li>\n<li>5、配置管理员<ul>\n<li>变更过程的相关产物应纳入配置管理系统中，配置管理员负责把变更后的基准纳入整个项目基准中，变更过程中的其他记录文件也应纳入配置管理系统。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工作程序\"><a href=\"#工作程序\" class=\"headerlink\" title=\"工作程序\"></a>工作程序</h2><ul>\n<li>1、提出变更申请<ul>\n<li>以文档的形式向变更控制委员会提出变更申请，所有的申请必须书面形式记录。并纳入配置管理系统中</li>\n</ul>\n</li>\n<li>2、变更影响分析</li>\n<li>3、CCB审查批准</li>\n<li>4、实施变更</li>\n<li>5、监控变更实施</li>\n<li>6、结束变更</li>\n</ul>\n<h1 id=\"变更管理相关事项\"><a href=\"#变更管理相关事项\" class=\"headerlink\" title=\"变更管理相关事项\"></a>变更管理相关事项</h1><h2 id=\"操作要点\"><a href=\"#操作要点\" class=\"headerlink\" title=\"操作要点\"></a>操作要点</h2><ul>\n<li>1、对变更产生的因素施加影响，防止不必要的变更，减小无谓的评估，提高必要变更的通过效率</li>\n<li>2、变更的操作过程应当规范化</li>\n<li>3、对变更的确认应当正式化</li>\n</ul>\n<h2 id=\"变更管理和整体管理及配置管理的关系\"><a href=\"#变更管理和整体管理及配置管理的关系\" class=\"headerlink\" title=\"变更管理和整体管理及配置管理的关系\"></a>变更管理和整体管理及配置管理的关系</h2><ul>\n<li>变更管理是项目整体管理的一部分，属于项目整体变更控制的范畴。应变更管理涉及范围、进度、成本、质量、人力资源和合同管理等多个方面，且重要性不可忽视。</li>\n<li>配置管理重点关注可交付产品及各过程文档，而变更管理则着眼于识别、记录、批准或否决对项目文件、可交付产品或基准的变更</li>\n</ul>"},{"title":"第十章 项目质量管理","date":"2016-10-23T02:57:33.000Z","comments":1,"toc":true,"_content":"\n# 概念\n- 1、质量\n - 国际标准化组织（ISO）对质量的定义是：“反应实体满足主体明确和隐含需求的能力的特性总和”\n - 国际标准（GB/T 19000-2008）对质量的定义：“一组固有特性满足要求的程度”\n- 2、项目质量\n - 从项目作为一次性的活动来看，项目质量体现在由WBS反映出的项目范围内所有阶段、子项目、项目工作单元的质量所构成，即项目的工作质量；从项目作为一项最终产品来看，项目质量体现在其性能或者使用价值上。\n<!--more-->\n\n# 质量保证方法和与工具\n- 1、质量审计\n - 1、识别全部正在实施的良好及最佳实践\n - 2、识别全部违规做法、差距及不足\n - 3、分享所在组织或行业中类似项目的良好实践\n - 4、积极、主动地提供协助，以改进过程的执行，从而帮助团队提高生产效率\n - 5、强调每次审计都应对组织经验教训的积累做出贡献。\n- 2、过程分析\n - 按照过程改进计划中概括的步骤来识别所需要的改进。它也要检查在过程运行期间遇到的问题、制约因素，以及发现的非增值活动。过程分析包括根本原因分析——用于识别问题、探究根本原因，并制定预防措施的一种具体技术。\n\n# 质量控制工具与技术\n## 老七工具\n- 1、因果图*（鱼骨图或石川馨图）\n- 2、流程图\n- 3、检查表\n- 4、帕累托图\n- 5、直方图\n- 6、控制图\n- 7、散点图\n![](20161106230900.png)\n## 新七工具\n- 1、亲和图\n- 2、过程决策程序图\n- 3、关联图\n- 4、树形图\n- 5、优先矩阵图\n- 6、活动网络图\n- 7、矩阵图\n![](20161106230813.png)\n\n## 技术\n- 1、统计抽样\n- 2、检查\n- 3、审查以批准的变更请求\n\n","source":"_posts/第十章 项目质量管理.md","raw":"---\ntitle: 第十章 项目质量管理\ndate: 2016-10-23 10:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 概念\n- 1、质量\n - 国际标准化组织（ISO）对质量的定义是：“反应实体满足主体明确和隐含需求的能力的特性总和”\n - 国际标准（GB/T 19000-2008）对质量的定义：“一组固有特性满足要求的程度”\n- 2、项目质量\n - 从项目作为一次性的活动来看，项目质量体现在由WBS反映出的项目范围内所有阶段、子项目、项目工作单元的质量所构成，即项目的工作质量；从项目作为一项最终产品来看，项目质量体现在其性能或者使用价值上。\n<!--more-->\n\n# 质量保证方法和与工具\n- 1、质量审计\n - 1、识别全部正在实施的良好及最佳实践\n - 2、识别全部违规做法、差距及不足\n - 3、分享所在组织或行业中类似项目的良好实践\n - 4、积极、主动地提供协助，以改进过程的执行，从而帮助团队提高生产效率\n - 5、强调每次审计都应对组织经验教训的积累做出贡献。\n- 2、过程分析\n - 按照过程改进计划中概括的步骤来识别所需要的改进。它也要检查在过程运行期间遇到的问题、制约因素，以及发现的非增值活动。过程分析包括根本原因分析——用于识别问题、探究根本原因，并制定预防措施的一种具体技术。\n\n# 质量控制工具与技术\n## 老七工具\n- 1、因果图*（鱼骨图或石川馨图）\n- 2、流程图\n- 3、检查表\n- 4、帕累托图\n- 5、直方图\n- 6、控制图\n- 7、散点图\n![](20161106230900.png)\n## 新七工具\n- 1、亲和图\n- 2、过程决策程序图\n- 3、关联图\n- 4、树形图\n- 5、优先矩阵图\n- 6、活动网络图\n- 7、矩阵图\n![](20161106230813.png)\n\n## 技术\n- 1、统计抽样\n- 2、检查\n- 3、审查以批准的变更请求\n\n","slug":"第十章 项目质量管理","published":1,"updated":"2021-06-25T02:00:18.329Z","layout":"post","photos":[],"link":"","_id":"ckqjaton4003gqkl5zglguliw","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ul>\n<li>1、质量<ul>\n<li>国际标准化组织（ISO）对质量的定义是：“反应实体满足主体明确和隐含需求的能力的特性总和”</li>\n<li>国际标准（GB/T 19000-2008）对质量的定义：“一组固有特性满足要求的程度”</li>\n</ul>\n</li>\n<li>2、项目质量<ul>\n<li>从项目作为一次性的活动来看，项目质量体现在由WBS反映出的项目范围内所有阶段、子项目、项目工作单元的质量所构成，即项目的工作质量；从项目作为一项最终产品来看，项目质量体现在其性能或者使用价值上。<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"质量保证方法和与工具\"><a href=\"#质量保证方法和与工具\" class=\"headerlink\" title=\"质量保证方法和与工具\"></a>质量保证方法和与工具</h1><ul>\n<li>1、质量审计<ul>\n<li>1、识别全部正在实施的良好及最佳实践</li>\n<li>2、识别全部违规做法、差距及不足</li>\n<li>3、分享所在组织或行业中类似项目的良好实践</li>\n<li>4、积极、主动地提供协助，以改进过程的执行，从而帮助团队提高生产效率</li>\n<li>5、强调每次审计都应对组织经验教训的积累做出贡献。</li>\n</ul>\n</li>\n<li>2、过程分析<ul>\n<li>按照过程改进计划中概括的步骤来识别所需要的改进。它也要检查在过程运行期间遇到的问题、制约因素，以及发现的非增值活动。过程分析包括根本原因分析——用于识别问题、探究根本原因，并制定预防措施的一种具体技术。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"质量控制工具与技术\"><a href=\"#质量控制工具与技术\" class=\"headerlink\" title=\"质量控制工具与技术\"></a>质量控制工具与技术</h1><h2 id=\"老七工具\"><a href=\"#老七工具\" class=\"headerlink\" title=\"老七工具\"></a>老七工具</h2><ul>\n<li>1、因果图*（鱼骨图或石川馨图）</li>\n<li>2、流程图</li>\n<li>3、检查表</li>\n<li>4、帕累托图</li>\n<li>5、直方图</li>\n<li>6、控制图</li>\n<li>7、散点图<br><img src=\"20161106230900.png\" alt><h2 id=\"新七工具\"><a href=\"#新七工具\" class=\"headerlink\" title=\"新七工具\"></a>新七工具</h2></li>\n<li>1、亲和图</li>\n<li>2、过程决策程序图</li>\n<li>3、关联图</li>\n<li>4、树形图</li>\n<li>5、优先矩阵图</li>\n<li>6、活动网络图</li>\n<li>7、矩阵图<br><img src=\"20161106230813.png\" alt></li>\n</ul>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><ul>\n<li>1、统计抽样</li>\n<li>2、检查</li>\n<li>3、审查以批准的变更请求</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ul>\n<li>1、质量<ul>\n<li>国际标准化组织（ISO）对质量的定义是：“反应实体满足主体明确和隐含需求的能力的特性总和”</li>\n<li>国际标准（GB/T 19000-2008）对质量的定义：“一组固有特性满足要求的程度”</li>\n</ul>\n</li>\n<li>2、项目质量<ul>\n<li>从项目作为一次性的活动来看，项目质量体现在由WBS反映出的项目范围内所有阶段、子项目、项目工作单元的质量所构成，即项目的工作质量；从项目作为一项最终产品来看，项目质量体现在其性能或者使用价值上。","more":"</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"质量保证方法和与工具\"><a href=\"#质量保证方法和与工具\" class=\"headerlink\" title=\"质量保证方法和与工具\"></a>质量保证方法和与工具</h1><ul>\n<li>1、质量审计<ul>\n<li>1、识别全部正在实施的良好及最佳实践</li>\n<li>2、识别全部违规做法、差距及不足</li>\n<li>3、分享所在组织或行业中类似项目的良好实践</li>\n<li>4、积极、主动地提供协助，以改进过程的执行，从而帮助团队提高生产效率</li>\n<li>5、强调每次审计都应对组织经验教训的积累做出贡献。</li>\n</ul>\n</li>\n<li>2、过程分析<ul>\n<li>按照过程改进计划中概括的步骤来识别所需要的改进。它也要检查在过程运行期间遇到的问题、制约因素，以及发现的非增值活动。过程分析包括根本原因分析——用于识别问题、探究根本原因，并制定预防措施的一种具体技术。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"质量控制工具与技术\"><a href=\"#质量控制工具与技术\" class=\"headerlink\" title=\"质量控制工具与技术\"></a>质量控制工具与技术</h1><h2 id=\"老七工具\"><a href=\"#老七工具\" class=\"headerlink\" title=\"老七工具\"></a>老七工具</h2><ul>\n<li>1、因果图*（鱼骨图或石川馨图）</li>\n<li>2、流程图</li>\n<li>3、检查表</li>\n<li>4、帕累托图</li>\n<li>5、直方图</li>\n<li>6、控制图</li>\n<li>7、散点图<br><img src=\"20161106230900.png\" alt><h2 id=\"新七工具\"><a href=\"#新七工具\" class=\"headerlink\" title=\"新七工具\"></a>新七工具</h2></li>\n<li>1、亲和图</li>\n<li>2、过程决策程序图</li>\n<li>3、关联图</li>\n<li>4、树形图</li>\n<li>5、优先矩阵图</li>\n<li>6、活动网络图</li>\n<li>7、矩阵图<br><img src=\"20161106230813.png\" alt></li>\n</ul>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><ul>\n<li>1、统计抽样</li>\n<li>2、检查</li>\n<li>3、审查以批准的变更请求</li>\n</ul>"},{"title":"第四章 项目管理一般知识","date":"2016-11-01T15:57:33.000Z","comments":1,"toc":true,"_content":"\n# 项目定义\n- 项目是为了达到特定的目的，使用一定的资源，在确定的期间内，为特定发起人提供独特的产品、服务或成果而进行的一系列相互关联的活动的集合。\n\n<!--more-->\n# 项目目标\n## 项目目标的概念\n- 项目目标包括成果性目标和约束性目标\n- 项目的约束性目标也叫管理性目标，项目的成果性目标有时也简称为项目目标。项目成果性目标指通过项目开发出的满足客户要求的产品、系统、服务或成功。\n\n## 项目目标的特性\n- 1、项目的目标有不同的优先级\n- 2、项目目标具有层次性\n\n# 项目特点\n- **1、临时性**\n - 每一个项目都有一个明确的开始时间和结束时间，临时性也指项目是一次性的。\n- **2、独特性**\n - 项目要提供某一独特产品，提供独特的服务或成果，因此“没有完全一样的项目”\n- **3、渐进明细**\n - 项目的成果性目标是逐步完成的。项目的产品、成果或服务事先不可见，在项目前期只能粗略的进行项目定义，随着项目的进行才能逐渐明朗、完善和精确。\n \n# 信息系统集成项目的特点\n- 所谓的信息系统集成，就是从客户和用户的需求出发，将硬件、系统软件、工具软件、网络、数据库、应用软件或者云计算提供的服务以及相关的支撑环境集成为实用的信息系统过程。在这个过程中，应根据需求，开发相应的软件和硬件，并把他们集成为一个系统。\n- 信息系统集成项目的产品是满足需求、支持用户业务的信息系统\n- 信息系统集成项目建设的指导方法是**“总体规划、分布实施”**\n- 特点：\n - 1、信息系统集成项目要以满足客户和用户的需求为根本出发点\n - 2、客户和用户的需求常常不够明确，复杂多变，由此应加强需求变更管理以控制风险\n - 3、系统集成不是简单选择最好的产品的行为，而是要选择（或开发）最适合用户的需求和投资规模的产品、技术和服务的活动集合\n - 4、高技术与高技术的集成。\n - 5、系统工程。系统集成包含技术，管理和商务等方面，是一项综合性的系统工程，需要相关的各方面足够重视，必要时应“一把手”挂帅，并且多方密切协作\n - 6、项目团队的成员年轻，流动率高。因此对企业的管理技术水平和项目经理的领导艺术水平要求较高。\n - 7、强调沟通的重要性。信息系统开发需要成员间的协作，也可以说是沟通的产物。\n \n# 信息系统项目生命周期模型\n- **1、瀑布模型**\n - 又叫预测型生命周期，完全计划驱动型什么周期。在这个模型里，在项目生命周期的尽早时间，要确定项目范围及交付此范围所需的时间和成本。\n - 一下情况优先选择这种生命周期： 在项目需求明确、充分了解拟交付的产品、有厚实的行业实践基础、或者整批一次性交付产品有利于干系人。\n ![瀑布模型](20161109155449.png)\n - 特点：\n  - 1、从上一项开发活动接受其成果作为本次活动的输入\n  - 2、利用这一输入，实施本次活动应完成的工作内容\n  - 3、给出本次活动的工作成果，作为输出传给一下项开发活动\n  - 4、对本次活动的实施工作成果进行评审。若其工作成果得到确认，则继续进行下一项活动，或则返回前一项，甚至更前项的活动\n- **2、迭代模型**\n - 在大多数传统的生命周期中，阶段是以其中的主要活动命名：需求分析、设计、编码、测试。传统的软件开发工作大部分强调过程的串行执行，也就是一个活动需要在前一个活动完成后才开始，从而形成一个过程串。\n - RUP 软件统一过程是一种“过程方法”，他就是迭代模型的一种\n ![典型的迭代模型RUP](20161109163412.png)\n- **3、敏捷方法**\n - 是一种以人为核心、迭代、循序渐进的开发方法，适用于一开始并没有或不能完整地确定出需求和范围的项目，或者需要应对快速变化的环境，或者需求和范围难以事先确定，或者能够以有利于干系人的方式定义较小的增量改进\n - 敏捷方法，也叫适应性型生命周期，或者变更驱动方法\n- **4、V模型**\n - ![V模型示意图](20161109164006.png)\n - V模型的左边下降的是开发过程各阶段，与此相对应的是右边上升的部分，即各测试过程的各个阶段。\n- **5、原型化模型** \n - 是为了弥补瀑布模型的不足而产生的。\n - 原型化模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，经过和用户针对原型的讨论和交流，弄清需求以便真正把握用户需要的软件产品是什么样子的。\n- **6、螺旋模型** \n - 螺旋模型是一个演化软件的过程模型，将原型实现的迭代特征与线性顺序（瀑布）模型中控制的和系统化的方面结合起来。\n - 螺旋模型强调了风险分析，特别适用于庞大而复杂的、搞风险的系统\n -![螺旋模型](20161109165124.png)\n \n# 项目过程\n- PDCA循环\n- ![PDCA循环的基本模型](20161109165451.png) \n- 项目管理监控过程与PDCA进行交互\n- ![将项目管理过程组映射成PDCA循环](20161109165613.png)\n\n# 项目管理过程组\n## 启动过程组\n- ![管理类过程中顶层的项目过程组之间的执行流向](20161109165818.png)\n- ![项目边界](20161109165849.png)","source":"_posts/第四章 项目管理一般知识.md","raw":"---\ntitle: 第四章 项目管理一般知识\ndate: 2016-11-1 23:57:33 \ncomments: true \ncategories: 系统集成项目管理\ntoc: true\n---\n\n# 项目定义\n- 项目是为了达到特定的目的，使用一定的资源，在确定的期间内，为特定发起人提供独特的产品、服务或成果而进行的一系列相互关联的活动的集合。\n\n<!--more-->\n# 项目目标\n## 项目目标的概念\n- 项目目标包括成果性目标和约束性目标\n- 项目的约束性目标也叫管理性目标，项目的成果性目标有时也简称为项目目标。项目成果性目标指通过项目开发出的满足客户要求的产品、系统、服务或成功。\n\n## 项目目标的特性\n- 1、项目的目标有不同的优先级\n- 2、项目目标具有层次性\n\n# 项目特点\n- **1、临时性**\n - 每一个项目都有一个明确的开始时间和结束时间，临时性也指项目是一次性的。\n- **2、独特性**\n - 项目要提供某一独特产品，提供独特的服务或成果，因此“没有完全一样的项目”\n- **3、渐进明细**\n - 项目的成果性目标是逐步完成的。项目的产品、成果或服务事先不可见，在项目前期只能粗略的进行项目定义，随着项目的进行才能逐渐明朗、完善和精确。\n \n# 信息系统集成项目的特点\n- 所谓的信息系统集成，就是从客户和用户的需求出发，将硬件、系统软件、工具软件、网络、数据库、应用软件或者云计算提供的服务以及相关的支撑环境集成为实用的信息系统过程。在这个过程中，应根据需求，开发相应的软件和硬件，并把他们集成为一个系统。\n- 信息系统集成项目的产品是满足需求、支持用户业务的信息系统\n- 信息系统集成项目建设的指导方法是**“总体规划、分布实施”**\n- 特点：\n - 1、信息系统集成项目要以满足客户和用户的需求为根本出发点\n - 2、客户和用户的需求常常不够明确，复杂多变，由此应加强需求变更管理以控制风险\n - 3、系统集成不是简单选择最好的产品的行为，而是要选择（或开发）最适合用户的需求和投资规模的产品、技术和服务的活动集合\n - 4、高技术与高技术的集成。\n - 5、系统工程。系统集成包含技术，管理和商务等方面，是一项综合性的系统工程，需要相关的各方面足够重视，必要时应“一把手”挂帅，并且多方密切协作\n - 6、项目团队的成员年轻，流动率高。因此对企业的管理技术水平和项目经理的领导艺术水平要求较高。\n - 7、强调沟通的重要性。信息系统开发需要成员间的协作，也可以说是沟通的产物。\n \n# 信息系统项目生命周期模型\n- **1、瀑布模型**\n - 又叫预测型生命周期，完全计划驱动型什么周期。在这个模型里，在项目生命周期的尽早时间，要确定项目范围及交付此范围所需的时间和成本。\n - 一下情况优先选择这种生命周期： 在项目需求明确、充分了解拟交付的产品、有厚实的行业实践基础、或者整批一次性交付产品有利于干系人。\n ![瀑布模型](20161109155449.png)\n - 特点：\n  - 1、从上一项开发活动接受其成果作为本次活动的输入\n  - 2、利用这一输入，实施本次活动应完成的工作内容\n  - 3、给出本次活动的工作成果，作为输出传给一下项开发活动\n  - 4、对本次活动的实施工作成果进行评审。若其工作成果得到确认，则继续进行下一项活动，或则返回前一项，甚至更前项的活动\n- **2、迭代模型**\n - 在大多数传统的生命周期中，阶段是以其中的主要活动命名：需求分析、设计、编码、测试。传统的软件开发工作大部分强调过程的串行执行，也就是一个活动需要在前一个活动完成后才开始，从而形成一个过程串。\n - RUP 软件统一过程是一种“过程方法”，他就是迭代模型的一种\n ![典型的迭代模型RUP](20161109163412.png)\n- **3、敏捷方法**\n - 是一种以人为核心、迭代、循序渐进的开发方法，适用于一开始并没有或不能完整地确定出需求和范围的项目，或者需要应对快速变化的环境，或者需求和范围难以事先确定，或者能够以有利于干系人的方式定义较小的增量改进\n - 敏捷方法，也叫适应性型生命周期，或者变更驱动方法\n- **4、V模型**\n - ![V模型示意图](20161109164006.png)\n - V模型的左边下降的是开发过程各阶段，与此相对应的是右边上升的部分，即各测试过程的各个阶段。\n- **5、原型化模型** \n - 是为了弥补瀑布模型的不足而产生的。\n - 原型化模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，经过和用户针对原型的讨论和交流，弄清需求以便真正把握用户需要的软件产品是什么样子的。\n- **6、螺旋模型** \n - 螺旋模型是一个演化软件的过程模型，将原型实现的迭代特征与线性顺序（瀑布）模型中控制的和系统化的方面结合起来。\n - 螺旋模型强调了风险分析，特别适用于庞大而复杂的、搞风险的系统\n -![螺旋模型](20161109165124.png)\n \n# 项目过程\n- PDCA循环\n- ![PDCA循环的基本模型](20161109165451.png) \n- 项目管理监控过程与PDCA进行交互\n- ![将项目管理过程组映射成PDCA循环](20161109165613.png)\n\n# 项目管理过程组\n## 启动过程组\n- ![管理类过程中顶层的项目过程组之间的执行流向](20161109165818.png)\n- ![项目边界](20161109165849.png)","slug":"第四章 项目管理一般知识","published":1,"updated":"2021-06-25T02:00:18.339Z","layout":"post","photos":[],"link":"","_id":"ckqjaton8003jqkl5bnka3ejz","content":"<h1 id=\"项目定义\"><a href=\"#项目定义\" class=\"headerlink\" title=\"项目定义\"></a>项目定义</h1><ul>\n<li>项目是为了达到特定的目的，使用一定的资源，在确定的期间内，为特定发起人提供独特的产品、服务或成果而进行的一系列相互关联的活动的集合。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"项目目标\"><a href=\"#项目目标\" class=\"headerlink\" title=\"项目目标\"></a>项目目标</h1><h2 id=\"项目目标的概念\"><a href=\"#项目目标的概念\" class=\"headerlink\" title=\"项目目标的概念\"></a>项目目标的概念</h2><ul>\n<li>项目目标包括成果性目标和约束性目标</li>\n<li>项目的约束性目标也叫管理性目标，项目的成果性目标有时也简称为项目目标。项目成果性目标指通过项目开发出的满足客户要求的产品、系统、服务或成功。</li>\n</ul>\n<h2 id=\"项目目标的特性\"><a href=\"#项目目标的特性\" class=\"headerlink\" title=\"项目目标的特性\"></a>项目目标的特性</h2><ul>\n<li>1、项目的目标有不同的优先级</li>\n<li>2、项目目标具有层次性</li>\n</ul>\n<h1 id=\"项目特点\"><a href=\"#项目特点\" class=\"headerlink\" title=\"项目特点\"></a>项目特点</h1><ul>\n<li><strong>1、临时性</strong><ul>\n<li>每一个项目都有一个明确的开始时间和结束时间，临时性也指项目是一次性的。</li>\n</ul>\n</li>\n<li><strong>2、独特性</strong><ul>\n<li>项目要提供某一独特产品，提供独特的服务或成果，因此“没有完全一样的项目”</li>\n</ul>\n</li>\n<li><strong>3、渐进明细</strong><ul>\n<li>项目的成果性目标是逐步完成的。项目的产品、成果或服务事先不可见，在项目前期只能粗略的进行项目定义，随着项目的进行才能逐渐明朗、完善和精确。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"信息系统集成项目的特点\"><a href=\"#信息系统集成项目的特点\" class=\"headerlink\" title=\"信息系统集成项目的特点\"></a>信息系统集成项目的特点</h1><ul>\n<li>所谓的信息系统集成，就是从客户和用户的需求出发，将硬件、系统软件、工具软件、网络、数据库、应用软件或者云计算提供的服务以及相关的支撑环境集成为实用的信息系统过程。在这个过程中，应根据需求，开发相应的软件和硬件，并把他们集成为一个系统。</li>\n<li>信息系统集成项目的产品是满足需求、支持用户业务的信息系统</li>\n<li>信息系统集成项目建设的指导方法是<strong>“总体规划、分布实施”</strong></li>\n<li>特点：<ul>\n<li>1、信息系统集成项目要以满足客户和用户的需求为根本出发点</li>\n<li>2、客户和用户的需求常常不够明确，复杂多变，由此应加强需求变更管理以控制风险</li>\n<li>3、系统集成不是简单选择最好的产品的行为，而是要选择（或开发）最适合用户的需求和投资规模的产品、技术和服务的活动集合</li>\n<li>4、高技术与高技术的集成。</li>\n<li>5、系统工程。系统集成包含技术，管理和商务等方面，是一项综合性的系统工程，需要相关的各方面足够重视，必要时应“一把手”挂帅，并且多方密切协作</li>\n<li>6、项目团队的成员年轻，流动率高。因此对企业的管理技术水平和项目经理的领导艺术水平要求较高。</li>\n<li>7、强调沟通的重要性。信息系统开发需要成员间的协作，也可以说是沟通的产物。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"信息系统项目生命周期模型\"><a href=\"#信息系统项目生命周期模型\" class=\"headerlink\" title=\"信息系统项目生命周期模型\"></a>信息系统项目生命周期模型</h1><ul>\n<li><strong>1、瀑布模型</strong><ul>\n<li>又叫预测型生命周期，完全计划驱动型什么周期。在这个模型里，在项目生命周期的尽早时间，要确定项目范围及交付此范围所需的时间和成本。</li>\n<li>一下情况优先选择这种生命周期： 在项目需求明确、充分了解拟交付的产品、有厚实的行业实践基础、或者整批一次性交付产品有利于干系人。<br><img src=\"20161109155449.png\" alt=\"瀑布模型\"></li>\n<li>特点：</li>\n<li>1、从上一项开发活动接受其成果作为本次活动的输入</li>\n<li>2、利用这一输入，实施本次活动应完成的工作内容</li>\n<li>3、给出本次活动的工作成果，作为输出传给一下项开发活动</li>\n<li>4、对本次活动的实施工作成果进行评审。若其工作成果得到确认，则继续进行下一项活动，或则返回前一项，甚至更前项的活动</li>\n</ul>\n</li>\n<li><strong>2、迭代模型</strong><ul>\n<li>在大多数传统的生命周期中，阶段是以其中的主要活动命名：需求分析、设计、编码、测试。传统的软件开发工作大部分强调过程的串行执行，也就是一个活动需要在前一个活动完成后才开始，从而形成一个过程串。</li>\n<li>RUP 软件统一过程是一种“过程方法”，他就是迭代模型的一种<br><img src=\"20161109163412.png\" alt=\"典型的迭代模型RUP\"></li>\n</ul>\n</li>\n<li><strong>3、敏捷方法</strong><ul>\n<li>是一种以人为核心、迭代、循序渐进的开发方法，适用于一开始并没有或不能完整地确定出需求和范围的项目，或者需要应对快速变化的环境，或者需求和范围难以事先确定，或者能够以有利于干系人的方式定义较小的增量改进</li>\n<li>敏捷方法，也叫适应性型生命周期，或者变更驱动方法</li>\n</ul>\n</li>\n<li><strong>4、V模型</strong><ul>\n<li><img src=\"20161109164006.png\" alt=\"V模型示意图\"></li>\n<li>V模型的左边下降的是开发过程各阶段，与此相对应的是右边上升的部分，即各测试过程的各个阶段。</li>\n</ul>\n</li>\n<li><strong>5、原型化模型</strong> <ul>\n<li>是为了弥补瀑布模型的不足而产生的。</li>\n<li>原型化模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，经过和用户针对原型的讨论和交流，弄清需求以便真正把握用户需要的软件产品是什么样子的。</li>\n</ul>\n</li>\n<li><strong>6、螺旋模型</strong> <ul>\n<li>螺旋模型是一个演化软件的过程模型，将原型实现的迭代特征与线性顺序（瀑布）模型中控制的和系统化的方面结合起来。</li>\n<li>螺旋模型强调了风险分析，特别适用于庞大而复杂的、搞风险的系统<br>-<img src=\"20161109165124.png\" alt=\"螺旋模型\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"项目过程\"><a href=\"#项目过程\" class=\"headerlink\" title=\"项目过程\"></a>项目过程</h1><ul>\n<li>PDCA循环</li>\n<li><img src=\"20161109165451.png\" alt=\"PDCA循环的基本模型\"> </li>\n<li>项目管理监控过程与PDCA进行交互</li>\n<li><img src=\"20161109165613.png\" alt=\"将项目管理过程组映射成PDCA循环\"></li>\n</ul>\n<h1 id=\"项目管理过程组\"><a href=\"#项目管理过程组\" class=\"headerlink\" title=\"项目管理过程组\"></a>项目管理过程组</h1><h2 id=\"启动过程组\"><a href=\"#启动过程组\" class=\"headerlink\" title=\"启动过程组\"></a>启动过程组</h2><ul>\n<li><img src=\"20161109165818.png\" alt=\"管理类过程中顶层的项目过程组之间的执行流向\"></li>\n<li><img src=\"20161109165849.png\" alt=\"项目边界\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"项目定义\"><a href=\"#项目定义\" class=\"headerlink\" title=\"项目定义\"></a>项目定义</h1><ul>\n<li>项目是为了达到特定的目的，使用一定的资源，在确定的期间内，为特定发起人提供独特的产品、服务或成果而进行的一系列相互关联的活动的集合。</li>\n</ul>","more":"<h1 id=\"项目目标\"><a href=\"#项目目标\" class=\"headerlink\" title=\"项目目标\"></a>项目目标</h1><h2 id=\"项目目标的概念\"><a href=\"#项目目标的概念\" class=\"headerlink\" title=\"项目目标的概念\"></a>项目目标的概念</h2><ul>\n<li>项目目标包括成果性目标和约束性目标</li>\n<li>项目的约束性目标也叫管理性目标，项目的成果性目标有时也简称为项目目标。项目成果性目标指通过项目开发出的满足客户要求的产品、系统、服务或成功。</li>\n</ul>\n<h2 id=\"项目目标的特性\"><a href=\"#项目目标的特性\" class=\"headerlink\" title=\"项目目标的特性\"></a>项目目标的特性</h2><ul>\n<li>1、项目的目标有不同的优先级</li>\n<li>2、项目目标具有层次性</li>\n</ul>\n<h1 id=\"项目特点\"><a href=\"#项目特点\" class=\"headerlink\" title=\"项目特点\"></a>项目特点</h1><ul>\n<li><strong>1、临时性</strong><ul>\n<li>每一个项目都有一个明确的开始时间和结束时间，临时性也指项目是一次性的。</li>\n</ul>\n</li>\n<li><strong>2、独特性</strong><ul>\n<li>项目要提供某一独特产品，提供独特的服务或成果，因此“没有完全一样的项目”</li>\n</ul>\n</li>\n<li><strong>3、渐进明细</strong><ul>\n<li>项目的成果性目标是逐步完成的。项目的产品、成果或服务事先不可见，在项目前期只能粗略的进行项目定义，随着项目的进行才能逐渐明朗、完善和精确。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"信息系统集成项目的特点\"><a href=\"#信息系统集成项目的特点\" class=\"headerlink\" title=\"信息系统集成项目的特点\"></a>信息系统集成项目的特点</h1><ul>\n<li>所谓的信息系统集成，就是从客户和用户的需求出发，将硬件、系统软件、工具软件、网络、数据库、应用软件或者云计算提供的服务以及相关的支撑环境集成为实用的信息系统过程。在这个过程中，应根据需求，开发相应的软件和硬件，并把他们集成为一个系统。</li>\n<li>信息系统集成项目的产品是满足需求、支持用户业务的信息系统</li>\n<li>信息系统集成项目建设的指导方法是<strong>“总体规划、分布实施”</strong></li>\n<li>特点：<ul>\n<li>1、信息系统集成项目要以满足客户和用户的需求为根本出发点</li>\n<li>2、客户和用户的需求常常不够明确，复杂多变，由此应加强需求变更管理以控制风险</li>\n<li>3、系统集成不是简单选择最好的产品的行为，而是要选择（或开发）最适合用户的需求和投资规模的产品、技术和服务的活动集合</li>\n<li>4、高技术与高技术的集成。</li>\n<li>5、系统工程。系统集成包含技术，管理和商务等方面，是一项综合性的系统工程，需要相关的各方面足够重视，必要时应“一把手”挂帅，并且多方密切协作</li>\n<li>6、项目团队的成员年轻，流动率高。因此对企业的管理技术水平和项目经理的领导艺术水平要求较高。</li>\n<li>7、强调沟通的重要性。信息系统开发需要成员间的协作，也可以说是沟通的产物。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"信息系统项目生命周期模型\"><a href=\"#信息系统项目生命周期模型\" class=\"headerlink\" title=\"信息系统项目生命周期模型\"></a>信息系统项目生命周期模型</h1><ul>\n<li><strong>1、瀑布模型</strong><ul>\n<li>又叫预测型生命周期，完全计划驱动型什么周期。在这个模型里，在项目生命周期的尽早时间，要确定项目范围及交付此范围所需的时间和成本。</li>\n<li>一下情况优先选择这种生命周期： 在项目需求明确、充分了解拟交付的产品、有厚实的行业实践基础、或者整批一次性交付产品有利于干系人。<br><img src=\"20161109155449.png\" alt=\"瀑布模型\"></li>\n<li>特点：</li>\n<li>1、从上一项开发活动接受其成果作为本次活动的输入</li>\n<li>2、利用这一输入，实施本次活动应完成的工作内容</li>\n<li>3、给出本次活动的工作成果，作为输出传给一下项开发活动</li>\n<li>4、对本次活动的实施工作成果进行评审。若其工作成果得到确认，则继续进行下一项活动，或则返回前一项，甚至更前项的活动</li>\n</ul>\n</li>\n<li><strong>2、迭代模型</strong><ul>\n<li>在大多数传统的生命周期中，阶段是以其中的主要活动命名：需求分析、设计、编码、测试。传统的软件开发工作大部分强调过程的串行执行，也就是一个活动需要在前一个活动完成后才开始，从而形成一个过程串。</li>\n<li>RUP 软件统一过程是一种“过程方法”，他就是迭代模型的一种<br><img src=\"20161109163412.png\" alt=\"典型的迭代模型RUP\"></li>\n</ul>\n</li>\n<li><strong>3、敏捷方法</strong><ul>\n<li>是一种以人为核心、迭代、循序渐进的开发方法，适用于一开始并没有或不能完整地确定出需求和范围的项目，或者需要应对快速变化的环境，或者需求和范围难以事先确定，或者能够以有利于干系人的方式定义较小的增量改进</li>\n<li>敏捷方法，也叫适应性型生命周期，或者变更驱动方法</li>\n</ul>\n</li>\n<li><strong>4、V模型</strong><ul>\n<li><img src=\"20161109164006.png\" alt=\"V模型示意图\"></li>\n<li>V模型的左边下降的是开发过程各阶段，与此相对应的是右边上升的部分，即各测试过程的各个阶段。</li>\n</ul>\n</li>\n<li><strong>5、原型化模型</strong> <ul>\n<li>是为了弥补瀑布模型的不足而产生的。</li>\n<li>原型化模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，经过和用户针对原型的讨论和交流，弄清需求以便真正把握用户需要的软件产品是什么样子的。</li>\n</ul>\n</li>\n<li><strong>6、螺旋模型</strong> <ul>\n<li>螺旋模型是一个演化软件的过程模型，将原型实现的迭代特征与线性顺序（瀑布）模型中控制的和系统化的方面结合起来。</li>\n<li>螺旋模型强调了风险分析，特别适用于庞大而复杂的、搞风险的系统<br>-<img src=\"20161109165124.png\" alt=\"螺旋模型\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"项目过程\"><a href=\"#项目过程\" class=\"headerlink\" title=\"项目过程\"></a>项目过程</h1><ul>\n<li>PDCA循环</li>\n<li><img src=\"20161109165451.png\" alt=\"PDCA循环的基本模型\"> </li>\n<li>项目管理监控过程与PDCA进行交互</li>\n<li><img src=\"20161109165613.png\" alt=\"将项目管理过程组映射成PDCA循环\"></li>\n</ul>\n<h1 id=\"项目管理过程组\"><a href=\"#项目管理过程组\" class=\"headerlink\" title=\"项目管理过程组\"></a>项目管理过程组</h1><h2 id=\"启动过程组\"><a href=\"#启动过程组\" class=\"headerlink\" title=\"启动过程组\"></a>启动过程组</h2><ul>\n<li><img src=\"20161109165818.png\" alt=\"管理类过程中顶层的项目过程组之间的执行流向\"></li>\n<li><img src=\"20161109165849.png\" alt=\"项目边界\"></li>\n</ul>"},{"title":"编写一个简单的操作系统——从头开始","date":"2020-10-20T13:09:20.000Z","comments":1,"toc":false,"_content":"\n我们以前都使用过操作系统（例如Window XP，Linux等），也许我们甚至已经编写了一些程序可以在一个操作系统上运行；但是什么是操作系统呢？使用计算机时，多少由硬件完成，多少有软件完成，\n\n\n[源码及开发文档](https://github.com/yanwuyang/littlebee)","source":"_posts/编写一个简单的操作系统.md","raw":"---\ntitle: 编写一个简单的操作系统——从头开始\ndate: 2020-10-20 21:09:20\ncomments: true \ncategories: 操作系统\ntoc: false\n---\n\n我们以前都使用过操作系统（例如Window XP，Linux等），也许我们甚至已经编写了一些程序可以在一个操作系统上运行；但是什么是操作系统呢？使用计算机时，多少由硬件完成，多少有软件完成，\n\n\n[源码及开发文档](https://github.com/yanwuyang/littlebee)","slug":"编写一个简单的操作系统","published":1,"updated":"2021-06-30T08:11:01.919Z","layout":"post","photos":[],"link":"","_id":"ckqjatona003kqkl55rx4lvb2","content":"<p>我们以前都使用过操作系统（例如Window XP，Linux等），也许我们甚至已经编写了一些程序可以在一个操作系统上运行；但是什么是操作系统呢？使用计算机时，多少由硬件完成，多少有软件完成，</p>\n<p><a href=\"https://github.com/yanwuyang/littlebee\" target=\"_blank\" rel=\"noopener\">源码及开发文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们以前都使用过操作系统（例如Window XP，Linux等），也许我们甚至已经编写了一些程序可以在一个操作系统上运行；但是什么是操作系统呢？使用计算机时，多少由硬件完成，多少有软件完成，</p>\n<p><a href=\"https://github.com/yanwuyang/littlebee\" target=\"_blank\" rel=\"noopener\">源码及开发文档</a></p>\n"},{"title":"虚拟机联网方式设置","date":"2014-10-07T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## Bridging（桥接）\n\n这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享\n<!--more-->\n![桥接](6c224f4a20a4462399c138119b22720e0cf3d7be.jpg)\n\n## NAT连接\n第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。\n第二、虚拟机设置如下图\n![NAT连接](241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg)\n第三、设置虚拟机IP\n例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了\n网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以\n通过 ipconfig /all可以获得宿主主机的DNS，如下图。\n![虚拟机IP](d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg)\n\n通过上面的设置就可以上网了\n虚拟机网络设置 在Edit——》Virtual Nework Editor\n![网络设置](203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg)\nVMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。\n如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254\n![网络设置](e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg) \n默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可\n![网络设置](d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg) \n 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。\n ![网络拓扑图]( aec379310a55b31966f8dc0140a98226cffc1744.jpg) \n\n ## 拓展知识\n网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。\n\n那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。\n\n***举例说明***\n假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。\n但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：\n\n小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？\n![网络拓扑图]( a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg) \n家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99\n","source":"_posts/虚拟机联网方式设置.md","raw":"---\ntitle: 虚拟机联网方式设置\ndate: 2014-10-08\ncomments: true\ncategories: VMware\ntoc: true  \n---\n\n## Bridging（桥接）\n\n这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享\n<!--more-->\n![桥接](6c224f4a20a4462399c138119b22720e0cf3d7be.jpg)\n\n## NAT连接\n第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。\n第二、虚拟机设置如下图\n![NAT连接](241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg)\n第三、设置虚拟机IP\n例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了\n网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以\n通过 ipconfig /all可以获得宿主主机的DNS，如下图。\n![虚拟机IP](d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg)\n\n通过上面的设置就可以上网了\n虚拟机网络设置 在Edit——》Virtual Nework Editor\n![网络设置](203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg)\nVMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。\n如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254\n![网络设置](e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg) \n默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可\n![网络设置](d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg) \n 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。\n ![网络拓扑图]( aec379310a55b31966f8dc0140a98226cffc1744.jpg) \n\n ## 拓展知识\n网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。\n\n那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。\n\n***举例说明***\n假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。\n但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：\n\n小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？\n![网络拓扑图]( a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg) \n家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99\n","slug":"虚拟机联网方式设置","published":1,"updated":"2021-06-25T02:00:18.452Z","layout":"post","photos":[],"link":"","_id":"ckqjatone003nqkl5cm5qyvg9","content":"<h2 id=\"Bridging（桥接）\"><a href=\"#Bridging（桥接）\" class=\"headerlink\" title=\"Bridging（桥接）\"></a>Bridging（桥接）</h2><p>这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享<br><a id=\"more\"></a><br><img src=\"6c224f4a20a4462399c138119b22720e0cf3d7be.jpg\" alt=\"桥接\"></p>\n<h2 id=\"NAT连接\"><a href=\"#NAT连接\" class=\"headerlink\" title=\"NAT连接\"></a>NAT连接</h2><p>第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。<br>第二、虚拟机设置如下图<br><img src=\"241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg\" alt=\"NAT连接\"><br>第三、设置虚拟机IP<br>例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了<br>网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以<br>通过 ipconfig /all可以获得宿主主机的DNS，如下图。<br><img src=\"d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg\" alt=\"虚拟机IP\"></p>\n<p>通过上面的设置就可以上网了<br>虚拟机网络设置 在Edit——》Virtual Nework Editor<br><img src=\"203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg\" alt=\"网络设置\"><br>VMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。<br>如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254<br><img src=\"e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg\" alt=\"网络设置\"><br>默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可<br><img src=\"d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg\" alt=\"网络设置\"><br> 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。<br> <img src=\"aec379310a55b31966f8dc0140a98226cffc1744.jpg\" alt=\"网络拓扑图\"> </p>\n<h2 id=\"拓展知识\"><a href=\"#拓展知识\" class=\"headerlink\" title=\"拓展知识\"></a>拓展知识</h2><p>网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。</p>\n<p>那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。</p>\n<p><strong><em>举例说明</em></strong><br>假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。<br>但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：</p>\n<p>小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？<br><img src=\"a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg\" alt=\"网络拓扑图\"><br>家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Bridging（桥接）\"><a href=\"#Bridging（桥接）\" class=\"headerlink\" title=\"Bridging（桥接）\"></a>Bridging（桥接）</h2><p>这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享<br>","more":"<br><img src=\"6c224f4a20a4462399c138119b22720e0cf3d7be.jpg\" alt=\"桥接\"></p>\n<h2 id=\"NAT连接\"><a href=\"#NAT连接\" class=\"headerlink\" title=\"NAT连接\"></a>NAT连接</h2><p>第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。<br>第二、虚拟机设置如下图<br><img src=\"241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg\" alt=\"NAT连接\"><br>第三、设置虚拟机IP<br>例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了<br>网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以<br>通过 ipconfig /all可以获得宿主主机的DNS，如下图。<br><img src=\"d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg\" alt=\"虚拟机IP\"></p>\n<p>通过上面的设置就可以上网了<br>虚拟机网络设置 在Edit——》Virtual Nework Editor<br><img src=\"203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg\" alt=\"网络设置\"><br>VMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。<br>如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254<br><img src=\"e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg\" alt=\"网络设置\"><br>默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可<br><img src=\"d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg\" alt=\"网络设置\"><br> 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。<br> <img src=\"aec379310a55b31966f8dc0140a98226cffc1744.jpg\" alt=\"网络拓扑图\"> </p>\n<h2 id=\"拓展知识\"><a href=\"#拓展知识\" class=\"headerlink\" title=\"拓展知识\"></a>拓展知识</h2><p>网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。</p>\n<p>那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。</p>\n<p><strong><em>举例说明</em></strong><br>假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。<br>但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：</p>\n<p>小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？<br><img src=\"a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg\" alt=\"网络拓扑图\"><br>家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99</p>"},{"title":"解决问题心得","date":"2015-01-26T13:28:01.000Z","comments":1,"_content":"\n 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。\n <!--more-->\n在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。\n\n很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。\n\n有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。\n","source":"_posts/解决问题心得.md","raw":"---\ntitle: 解决问题心得\ndate: 2015-01-26 21:28:01\ncomments: true\ncategories: 心得体会\n---\n\n 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。\n <!--more-->\n在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。\n\n很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。\n\n有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。\n","slug":"解决问题心得","published":1,"updated":"2021-06-25T02:00:18.485Z","layout":"post","photos":[],"link":"","_id":"ckqjatonh003oqkl53lfodp9s","content":"<p> 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。<br> <a id=\"more\"></a><br>在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。</p>\n<p>很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。</p>\n<p>有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。</p>\n","site":{"data":{}},"excerpt":"<p> 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。<br>","more":"<br>在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。</p>\n<p>很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。</p>\n<p>有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。</p>"},{"title":"调试JVM","date":"2021-03-27T14:48:20.000Z","comments":1,"toc":true,"_content":"\n\n## 下载OpenJDK7源码\n\n[openjdk-7-fcs-src-b147-27_jun_2011.zip](http://www.java.net/download/openjdk/jdk7/promoted/b147/openjdk-7-fcs-src-b147-27_jun_2011.zip)\n\n<!--more-->\n## 解压\n\n```\nunzip openjdk-7-fcs-src-b147-27_jun_2011.zip\n```\n\n## 安装JDK6\n编译openjdk7依赖jdk6，安装jdk6在这就阐述\n\n## 下载安装Apache Ant\nhttps://ant.apache.org/bindownload.cgi\n\n\n## 编写Build脚本\n\n在hotspot目录下编写构建脚本build.sh\n\n```\n#!/bin/bash\n\nexport LANG=C\n\nexport ALT_BOOTDIR=\"/usr/java/jdk1.6.0_38\"\nexport ALT_JDK_IMPORT_PATH=\"/usr/java/jdk1.6.0_38\"\n\nexport ANT_HOME=\"/opt/apache-ant-1.9.15\"\n\n#允许自动下载依赖包\nexport ALLOW_DOWNLOADS=true\n#使用预编译头文件，以提升便以速度\nexport USE_PRECOMPILED_HEADER=true\n\n#要编译的版本\nexport SKIP_DEBUG_BUILD=false\nexport SKIP_FASTDEBUG_BUILD=true\n#包含全部的调试信息\nexport  ENABLE_FULL_DEBUG_SYMBOLS=1\n\nexport HOTSPOT_BUILD_JOBS=3\nexport ARCH_DATA_MODEL=64\nexport ALT_OUTPUTDIR=/opt/openjdk/build/hotspot_debug\n\nexport CC_INTERP=1\n\ncd make\nmake jvmg jvmg1 2>&1 | tee /opt/openjdk/build/hotspot_debug.log\n\n```\n\n## 调试JVM\n\n```\n#/bin/sh\n\n/opt/openjdk/build/hotspot_debug/linux_amd64_compiler2/jvmg/hotspot -gdb \\\n-XX:+UseG1GC -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGC -XX:+TraceMarkSweep -Xloggc:gc.log  Demo\n\n```\n\n## 遇到的问题\n\nhttps://my.oschina.net/zhangdq/blog/2250314\n\n","source":"_posts/调试JVM.md","raw":"---\ntitle: 调试JVM\ndate: 2021-03-27 22:48:20\ncomments: true \ncategories: JVM\ntoc: true\n---\n\n\n## 下载OpenJDK7源码\n\n[openjdk-7-fcs-src-b147-27_jun_2011.zip](http://www.java.net/download/openjdk/jdk7/promoted/b147/openjdk-7-fcs-src-b147-27_jun_2011.zip)\n\n<!--more-->\n## 解压\n\n```\nunzip openjdk-7-fcs-src-b147-27_jun_2011.zip\n```\n\n## 安装JDK6\n编译openjdk7依赖jdk6，安装jdk6在这就阐述\n\n## 下载安装Apache Ant\nhttps://ant.apache.org/bindownload.cgi\n\n\n## 编写Build脚本\n\n在hotspot目录下编写构建脚本build.sh\n\n```\n#!/bin/bash\n\nexport LANG=C\n\nexport ALT_BOOTDIR=\"/usr/java/jdk1.6.0_38\"\nexport ALT_JDK_IMPORT_PATH=\"/usr/java/jdk1.6.0_38\"\n\nexport ANT_HOME=\"/opt/apache-ant-1.9.15\"\n\n#允许自动下载依赖包\nexport ALLOW_DOWNLOADS=true\n#使用预编译头文件，以提升便以速度\nexport USE_PRECOMPILED_HEADER=true\n\n#要编译的版本\nexport SKIP_DEBUG_BUILD=false\nexport SKIP_FASTDEBUG_BUILD=true\n#包含全部的调试信息\nexport  ENABLE_FULL_DEBUG_SYMBOLS=1\n\nexport HOTSPOT_BUILD_JOBS=3\nexport ARCH_DATA_MODEL=64\nexport ALT_OUTPUTDIR=/opt/openjdk/build/hotspot_debug\n\nexport CC_INTERP=1\n\ncd make\nmake jvmg jvmg1 2>&1 | tee /opt/openjdk/build/hotspot_debug.log\n\n```\n\n## 调试JVM\n\n```\n#/bin/sh\n\n/opt/openjdk/build/hotspot_debug/linux_amd64_compiler2/jvmg/hotspot -gdb \\\n-XX:+UseG1GC -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGC -XX:+TraceMarkSweep -Xloggc:gc.log  Demo\n\n```\n\n## 遇到的问题\n\nhttps://my.oschina.net/zhangdq/blog/2250314\n\n","slug":"调试JVM","published":1,"updated":"2021-06-30T09:50:14.836Z","layout":"post","photos":[],"link":"","_id":"ckqjatonj003qqkl5l8l119ag","content":"<h2 id=\"下载OpenJDK7源码\"><a href=\"#下载OpenJDK7源码\" class=\"headerlink\" title=\"下载OpenJDK7源码\"></a>下载OpenJDK7源码</h2><p><a href=\"http://www.java.net/download/openjdk/jdk7/promoted/b147/openjdk-7-fcs-src-b147-27_jun_2011.zip\" target=\"_blank\" rel=\"noopener\">openjdk-7-fcs-src-b147-27_jun_2011.zip</a></p>\n<a id=\"more\"></a>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip openjdk-7-fcs-src-b147-27_jun_2011.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装JDK6\"><a href=\"#安装JDK6\" class=\"headerlink\" title=\"安装JDK6\"></a>安装JDK6</h2><p>编译openjdk7依赖jdk6，安装jdk6在这就阐述</p>\n<h2 id=\"下载安装Apache-Ant\"><a href=\"#下载安装Apache-Ant\" class=\"headerlink\" title=\"下载安装Apache Ant\"></a>下载安装Apache Ant</h2><p><a href=\"https://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"noopener\">https://ant.apache.org/bindownload.cgi</a></p>\n<h2 id=\"编写Build脚本\"><a href=\"#编写Build脚本\" class=\"headerlink\" title=\"编写Build脚本\"></a>编写Build脚本</h2><p>在hotspot目录下编写构建脚本build.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">export LANG=C</span><br><span class=\"line\"></span><br><span class=\"line\">export ALT_BOOTDIR=&quot;/usr/java/jdk1.6.0_38&quot;</span><br><span class=\"line\">export ALT_JDK_IMPORT_PATH=&quot;/usr/java/jdk1.6.0_38&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">export ANT_HOME=&quot;/opt/apache-ant-1.9.15&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#允许自动下载依赖包</span><br><span class=\"line\">export ALLOW_DOWNLOADS=true</span><br><span class=\"line\">#使用预编译头文件，以提升便以速度</span><br><span class=\"line\">export USE_PRECOMPILED_HEADER=true</span><br><span class=\"line\"></span><br><span class=\"line\">#要编译的版本</span><br><span class=\"line\">export SKIP_DEBUG_BUILD=false</span><br><span class=\"line\">export SKIP_FASTDEBUG_BUILD=true</span><br><span class=\"line\">#包含全部的调试信息</span><br><span class=\"line\">export  ENABLE_FULL_DEBUG_SYMBOLS=1</span><br><span class=\"line\"></span><br><span class=\"line\">export HOTSPOT_BUILD_JOBS=3</span><br><span class=\"line\">export ARCH_DATA_MODEL=64</span><br><span class=\"line\">export ALT_OUTPUTDIR=/opt/openjdk/build/hotspot_debug</span><br><span class=\"line\"></span><br><span class=\"line\">export CC_INTERP=1</span><br><span class=\"line\"></span><br><span class=\"line\">cd make</span><br><span class=\"line\">make jvmg jvmg1 2&gt;&amp;1 | tee /opt/openjdk/build/hotspot_debug.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"调试JVM\"><a href=\"#调试JVM\" class=\"headerlink\" title=\"调试JVM\"></a>调试JVM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">/opt/openjdk/build/hotspot_debug/linux_amd64_compiler2/jvmg/hotspot -gdb \\</span><br><span class=\"line\">-XX:+UseG1GC -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGC -XX:+TraceMarkSweep -Xloggc:gc.log  Demo</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p><a href=\"https://my.oschina.net/zhangdq/blog/2250314\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zhangdq/blog/2250314</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"下载OpenJDK7源码\"><a href=\"#下载OpenJDK7源码\" class=\"headerlink\" title=\"下载OpenJDK7源码\"></a>下载OpenJDK7源码</h2><p><a href=\"http://www.java.net/download/openjdk/jdk7/promoted/b147/openjdk-7-fcs-src-b147-27_jun_2011.zip\" target=\"_blank\" rel=\"noopener\">openjdk-7-fcs-src-b147-27_jun_2011.zip</a></p>","more":"<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip openjdk-7-fcs-src-b147-27_jun_2011.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装JDK6\"><a href=\"#安装JDK6\" class=\"headerlink\" title=\"安装JDK6\"></a>安装JDK6</h2><p>编译openjdk7依赖jdk6，安装jdk6在这就阐述</p>\n<h2 id=\"下载安装Apache-Ant\"><a href=\"#下载安装Apache-Ant\" class=\"headerlink\" title=\"下载安装Apache Ant\"></a>下载安装Apache Ant</h2><p><a href=\"https://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"noopener\">https://ant.apache.org/bindownload.cgi</a></p>\n<h2 id=\"编写Build脚本\"><a href=\"#编写Build脚本\" class=\"headerlink\" title=\"编写Build脚本\"></a>编写Build脚本</h2><p>在hotspot目录下编写构建脚本build.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">export LANG=C</span><br><span class=\"line\"></span><br><span class=\"line\">export ALT_BOOTDIR=&quot;/usr/java/jdk1.6.0_38&quot;</span><br><span class=\"line\">export ALT_JDK_IMPORT_PATH=&quot;/usr/java/jdk1.6.0_38&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">export ANT_HOME=&quot;/opt/apache-ant-1.9.15&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#允许自动下载依赖包</span><br><span class=\"line\">export ALLOW_DOWNLOADS=true</span><br><span class=\"line\">#使用预编译头文件，以提升便以速度</span><br><span class=\"line\">export USE_PRECOMPILED_HEADER=true</span><br><span class=\"line\"></span><br><span class=\"line\">#要编译的版本</span><br><span class=\"line\">export SKIP_DEBUG_BUILD=false</span><br><span class=\"line\">export SKIP_FASTDEBUG_BUILD=true</span><br><span class=\"line\">#包含全部的调试信息</span><br><span class=\"line\">export  ENABLE_FULL_DEBUG_SYMBOLS=1</span><br><span class=\"line\"></span><br><span class=\"line\">export HOTSPOT_BUILD_JOBS=3</span><br><span class=\"line\">export ARCH_DATA_MODEL=64</span><br><span class=\"line\">export ALT_OUTPUTDIR=/opt/openjdk/build/hotspot_debug</span><br><span class=\"line\"></span><br><span class=\"line\">export CC_INTERP=1</span><br><span class=\"line\"></span><br><span class=\"line\">cd make</span><br><span class=\"line\">make jvmg jvmg1 2&gt;&amp;1 | tee /opt/openjdk/build/hotspot_debug.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"调试JVM\"><a href=\"#调试JVM\" class=\"headerlink\" title=\"调试JVM\"></a>调试JVM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">/opt/openjdk/build/hotspot_debug/linux_amd64_compiler2/jvmg/hotspot -gdb \\</span><br><span class=\"line\">-XX:+UseG1GC -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGC -XX:+TraceMarkSweep -Xloggc:gc.log  Demo</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p><a href=\"https://my.oschina.net/zhangdq/blog/2250314\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zhangdq/blog/2250314</a></p>"},{"title":"2017年上半年Java高级工程师求职面试题总结","date":"2017-06-20T14:48:20.000Z","comments":1,"toc":true,"_content":"\n## HashMap的数据结构\n数组加单链表结构。不允许有相同的key允许null为key，null为key的时候值是保存下了数组下标为0中。可以有相同的value\n<!--more-->\n```java\npublic class HashMap{\n    Entity[] entity;\n    public HashMap(){\n        entity = new Entity[10];\n    }\n    class Entity{\n        String key;\n        String value;\n        int hash;\n        Entity next;\t\n    }\n    public void put(Object key,Object value){\n        int i = key.hashCode % entity.length;\n        if(entity[i]==null){\n            entity[i] = new Entity(key,value,i,null);\n        }else{\n            Entity temp = entity[i];\n            entity[i] =  = new Entity(key,value,i,temp);\n        }\n    }\n    public Object get(Object key){\n        int i = key.hashCode % entity.length;\n        Entity temp = Entity[i];\n        while(temp!=null){\n            if(temp.key.equlas(key)){\n                return temp.value;\n            }else{\n                temp = temp.next;\n            }\n        }\t\n    }\n}\n```\n\n## ArrayList的数据结构\n数组结构，允许重复数据，取值快，插入慢\n```java\nclass ArrayList{\n    Object[] elementData;\n    int elementCount;\n    public ArrayList(){\n        elementData = new Object[10];\n    }\n    public void add(Object o){\n        elementData[elementCount++]=o; \n    }\n}\n```\n\n## HashSet的数据结构\n不允许有相同的值，无序的，优势在于查找相同元素的时候时间复杂度为最低\n```java\nclass HashSet{\n    HashMap map ;\n    Object PRESENT = new Object();\n    public add(Object v){\n        map.put(v,PRESENT);\n    }\n}\n```\n\n## LinkedList的数据结构\n双链表结构\n```java\nclass LinkedList{\n    Node first;\n    Node last;\n    public void push(Object o){\n        addFirst(o);\n    }\n    private void addFirst(Object o){\n        if(first==null){\n            first =new Node();\n        }else{\n\t\t\t\n        }\n    }\n    class Node {\n        Object v;\n        Node prev;\n        Node next;\n        public Node(Object o,Node prev,Node next){\n            v=o;\n            prev = prev;\n            next = next;\n        }\n    }\t\n}\n```\n\n## Integer值的==判断\n```java\nInteger a=1;\nInteger b=1;\na==b  echo true\nInteger a1=200;\nInteger b1=200;\na1==b1  echo false \n```\n-128到127之间的值是存在一块缓存区域中超过此区间这个是new Integer\n\n## 创建一个线程池有几种方法以及参数\n可以使用Executors类创建也可以自己new ThreadPoolExecutor();\n```java\nnew ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory);\n```\n执行流程当有任务执行的时候创建一个线程执行此任务如果，已到达corePoolSize大小并且小于maximumPoolSize时且没有空闲的线程，将任务加入到任务队列中\n当任务队列慢了的时候开始创建新的线程执行任务队列中的任务。当等于maximumPoolSize大小的时候且任务队列满了的时候此时开始启用策略，默认是拒绝任务加入，还有一种是抛弃旧的任务。\n当任务都执行完成了线程池的线程数大于corePoolSize，并且空闲时间大于keepAliveTime时销毁线程使之线程池中的数量等于corePoolSize\n\nExecutors.newFixedThreadPool(int nThreads)：创建一个固定的大小的线程池\nExecutors.newSingleThreadExecutor();创建一个线程的线程池\nExecutors.newCachedThreadPool()；创建一个0到Integer.MAX_VALUE区间的线程池 线程空闲60秒销毁\n\n## Spring的IOC（循环依赖）\nIOC 注入有三种方式\n构造器注入、set注入、注解注入\n\n循环注入问题\n如果采用构造器或者bean为prototype的此时循环依赖会抛出异常，在以下情况不会出现循环依赖异常scope为singleton非构造器注入\n\n## Spring AOP\n有两种代理方式一中是使用JdkDynamicAopProxy一种是使用cglib判断方式是被代理的类有没有实现一个接口\n```java\npublic class DefaultAopProxyFactory implements AopProxyFactory, Serializable {\n    public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n        if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {\n            Class targetClass = config.getTargetClass();\n            if (targetClass == null) {\n                throw new AopConfigException(\"TargetSource cannot determine target class: \" +\n                    \"Either an interface or a target is required for proxy creation.\");\n            }\n            if (targetClass.isInterface()) {\n                return new JdkDynamicAopProxy(config);\n            }\n            return CglibProxyFactory.createCglibProxy(config);\n        }else {\n            return new JdkDynamicAopProxy(config);\n        }\n    }\n\n    /**\n     * Determine whether the supplied {@link AdvisedSupport} has only the\n     * {@link org.springframework.aop.SpringProxy} interface specified\n     * (or no proxy interfaces specified at all).\n     */\n    private boolean hasNoUserSuppliedProxyInterfaces(AdvisedSupport config) {\n        Class[] interfaces = config.getProxiedInterfaces();\n        return (interfaces.length == 0 || (interfaces.length == 1 && SpringProxy.class.equals(interfaces[0])));\n    }\n}\n```\n\n## Spring一个方法是否可以配置多个切面\n可以,是采用递归的方式执行\n\n## Java内存结构\n方法区 堆 栈 程序计数器 本地方法栈\n方法区：被所有线程共享区域用于存放已被虚拟机加载的类信息，常量，静态变量等数据\n栈：它是线程私有的，生命周期与线程相同，存放编译期间可知的8种基本数据类型，及对象引用和指令地址\n堆：堆被所有线程共享区域，在虚拟机启动时创建，唯一目的存放对象实例\n程序计数器：当前线程所执行的行号指示器\n本地方法栈：用于支持native方法的运行\n堆有可以细分为新生代、幸存区、和老年代\n\n## Spring多数据源的事物控制\n\n\n## Spring事物嵌套\n采用REQUIRED级别只要一个失败结果都失败不管有没有try异常\n场景：如果一个失败了另一个不受影响 可以对那个需要不受印象的配置为NOT_SUPPORTED 已非事物执行如果当前存在事物就将事物挂起\n或者采用独立事物执行 REQUIRES_NEW新建一个事物，如果当前存在事物就将事物挂起\n\n## ThreadLocal结构\n当前线程属性threadLocals 为一个ThreadLocalMap结构\n\n## redis\n单进程单线程 多路 I/O 复用模型\n\n## redis有几种数据结构\nString：字符串\nhash：哈希 Map结构\nList:列表 双向链表结构\nset：集合 不允许重复且无序的\nsortset 有序集合\n\n## redis常用方法\nString类型对应 set get del\nHash类型对应 hset hget hdel\nList类型对应 lset lpush lpop\nset: sadd spop\nsortset    zadd \n发布/订阅\n原子操作\n\n## redis事物\n\n## 分布式锁如何实现\n借助redis\n- 1、setnx(lockkey, 当前时间+过期超时时间) ，如果返回1，则获取锁成功；\n如果返回0则没有获取到锁，转向2。\n- 2、get(lockkey)获取值oldExpireTime ，并将这个value值与当前的系统时间进行比较，\n如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向3。\n- 3、计算newExpireTime=当前时间+过期超时时间，然后getset(lockkey, newExpireTime) \n会返回当前lockkey的值currentExpireTime。\n- 4、判断currentExpireTime与oldExpireTime 是否相等，如果相等，\n说明当前getset设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。\n- 5、在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行delete释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。\n\n## 多个方法同时操作一条数据怎么办\n将表的引擎修改为innerDB这种就支持行锁，但注意的是表里面需要含有主键 查询条件也需要为主键字段或者会成为表锁\n\n## 二叉树遍历的几种方式\n前序（根左右） 中序（左根右）后序（左右根）\n\n## 二分查找法\n\n## 栈（先进后出）\n```java\nclass Stack{\n    Object[] element;\n    int elementCount;\n\t\n    public Stack(){\n        element = new Object[10];\n    }\n\t\n    public synchronized void push(Object o){\n        element[elementCount++]=o;\n    }\n    public synchronized Object pop(){\n        Object o = element[elementCount--];\n        element[elementCount--]=null;\n        return o;\n    }\n}\n```\n## 堆（先进先出）\n\n## http状态码\n\n## linux下查看日志文件常用命令\n\n## 适配器模式\n系统需要使用现有的类，而这些类的接口不符合系统的接口。\n\n## Java中那些类使用了那些模式\n\n## 乐观锁\n每次去拿数据的时候都认为别人不会修改，所以不会上锁，但在更新的时候会判断一下再次期间有没有人去更新这个数据，可是使用版本号等机制。\n在表中添加一个version字段来记录当前数据的版本号\n\n## 悲观锁\n每次取数据的时候都会认为别人会对这个数据进行修改，所以每次拿数据的时候都会加上锁 比如行锁，表锁等，读锁，写锁等\n\nmysql 锁分三种 行锁、表锁、页锁\ninnoDB 行锁在检索数据的时候只有根据索引为条件才会添加行锁或者为表锁\nMyISAM 表锁 不支持事物\na、对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。\nb、对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。\nBDB 页锁\n\n行锁：对写操作多的时候使用行数可以提搞并发；缺点：比页锁需要占用更多的内存。\n表锁：对度操作多的时候使用表锁可以提高性能\n\n## 事物与锁\n事物：原子性、一致性、隔离性、持久性\n锁：是为了保证数据的完整性。\n\n## 线上mysql如何查看那条sql执行时间比较长\n查看mysql慢日志\n\n## synchronized与Lock\nsynchronizeed与Lock实现的功能都一样，在使用方面synchronizeed是隐式的而Lock是显示的\n大多数情况下，内置锁都能很好的工作，但在功能上存在一些局限性，例如，无法中断一个正在等待获取锁的的线程。或者无法再请求获取一个锁时无限地等待下去。\nLock是基于CAS LockSupport.park()与LockSupport.unpark实现\n\n## 请描述一下GC（jvm垃圾回收器）\n\n## Java中的引用有几种?\n四种 分别为强引用 弱引用 软引用 虚引用\n\n## Java中的threadlocal是怎么用的? threadlocal中的内部实现是怎么样的? 哪种引用?\nnew ThreadLocal()调用set get方法\n软引用\n使用当前线程的的threadLocals属性 这是一个Map结构\n\n## Java中的\"final\"关键字在多线程的语义中，有什么含义\n最终的不可修改的\n\n## 说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\n    在操作系统中的实现原理? 如果都是cpu轮训话，会不会对cpu影响太大?\n    应用到了linux中的什么特性?\nNIO无阻塞IO，基于事件驱动，\n在Select中绑定Socket 注册相关事件\nByteBuffer.allocateDirect() \n\n## nio中， 如果不显式的调用 system.gc() 那会出现什么问题？\n会引起内存溢出\n对系统而言分为内核空间和用户空间 而jvm属于用户空间在jvm中垃圾是自动回收，而触发这个垃圾回收器的时机是java堆内存满的时候\n在NIO中使用的ByteBuffer通过allocateDirect在内核内存中分配了一份空间。而此空间不属于jvm堆所以如果不显示调用gc就会引起系统内存溢出的情况\n这也是传说中的零拷贝\n\n## SimpleDateFormat如果是一个全局变量的话，有什么问题？\n因为不是同步的 在并发的时候会引起各种错误异常\n\n## HashMap的操作中，直接使用keySet()遍历有什么问题\n性能底下；为啥呢因为会遍历两次\n\n## 线程池队列中几种策略\n两种\n第一种：拒绝任务\n第二种：丢弃历史任务\n\n## ConcurrentHashMap为什么会比HashTable快\n\n## 一个数组n 其中的值是1到n-1 找出其中第一个重复的\n\n## 两个整数交换不使用第三个变量\na=a+b;\nb=a-b;\na=a-b;\n\n## 手写代码实现LRU数据结构\n查看http://www.programcreek.com/2013/03/leetcode-lru-cache-java/\n\n## 一个数组将奇数放左边偶数放右边\n\n## 一个字符串找出第一个相同的字符\n\n## 数据库sql优化\n\n## 数据库索引该如何建在正确的字段上\n\n## Spring有几种事物隔离\n\n## 请描述一下Spring MVC 从发起请求到后台的处理流程\n\n## 请描述一下JVM类加载\n","source":"_posts/2017年上半年Java高级工程师求职面试题总结.md","raw":"---\ntitle: 2017年上半年Java高级工程师求职面试题总结\ndate: 2017-06-20 22:48:20\ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n## HashMap的数据结构\n数组加单链表结构。不允许有相同的key允许null为key，null为key的时候值是保存下了数组下标为0中。可以有相同的value\n<!--more-->\n```java\npublic class HashMap{\n    Entity[] entity;\n    public HashMap(){\n        entity = new Entity[10];\n    }\n    class Entity{\n        String key;\n        String value;\n        int hash;\n        Entity next;\t\n    }\n    public void put(Object key,Object value){\n        int i = key.hashCode % entity.length;\n        if(entity[i]==null){\n            entity[i] = new Entity(key,value,i,null);\n        }else{\n            Entity temp = entity[i];\n            entity[i] =  = new Entity(key,value,i,temp);\n        }\n    }\n    public Object get(Object key){\n        int i = key.hashCode % entity.length;\n        Entity temp = Entity[i];\n        while(temp!=null){\n            if(temp.key.equlas(key)){\n                return temp.value;\n            }else{\n                temp = temp.next;\n            }\n        }\t\n    }\n}\n```\n\n## ArrayList的数据结构\n数组结构，允许重复数据，取值快，插入慢\n```java\nclass ArrayList{\n    Object[] elementData;\n    int elementCount;\n    public ArrayList(){\n        elementData = new Object[10];\n    }\n    public void add(Object o){\n        elementData[elementCount++]=o; \n    }\n}\n```\n\n## HashSet的数据结构\n不允许有相同的值，无序的，优势在于查找相同元素的时候时间复杂度为最低\n```java\nclass HashSet{\n    HashMap map ;\n    Object PRESENT = new Object();\n    public add(Object v){\n        map.put(v,PRESENT);\n    }\n}\n```\n\n## LinkedList的数据结构\n双链表结构\n```java\nclass LinkedList{\n    Node first;\n    Node last;\n    public void push(Object o){\n        addFirst(o);\n    }\n    private void addFirst(Object o){\n        if(first==null){\n            first =new Node();\n        }else{\n\t\t\t\n        }\n    }\n    class Node {\n        Object v;\n        Node prev;\n        Node next;\n        public Node(Object o,Node prev,Node next){\n            v=o;\n            prev = prev;\n            next = next;\n        }\n    }\t\n}\n```\n\n## Integer值的==判断\n```java\nInteger a=1;\nInteger b=1;\na==b  echo true\nInteger a1=200;\nInteger b1=200;\na1==b1  echo false \n```\n-128到127之间的值是存在一块缓存区域中超过此区间这个是new Integer\n\n## 创建一个线程池有几种方法以及参数\n可以使用Executors类创建也可以自己new ThreadPoolExecutor();\n```java\nnew ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory);\n```\n执行流程当有任务执行的时候创建一个线程执行此任务如果，已到达corePoolSize大小并且小于maximumPoolSize时且没有空闲的线程，将任务加入到任务队列中\n当任务队列慢了的时候开始创建新的线程执行任务队列中的任务。当等于maximumPoolSize大小的时候且任务队列满了的时候此时开始启用策略，默认是拒绝任务加入，还有一种是抛弃旧的任务。\n当任务都执行完成了线程池的线程数大于corePoolSize，并且空闲时间大于keepAliveTime时销毁线程使之线程池中的数量等于corePoolSize\n\nExecutors.newFixedThreadPool(int nThreads)：创建一个固定的大小的线程池\nExecutors.newSingleThreadExecutor();创建一个线程的线程池\nExecutors.newCachedThreadPool()；创建一个0到Integer.MAX_VALUE区间的线程池 线程空闲60秒销毁\n\n## Spring的IOC（循环依赖）\nIOC 注入有三种方式\n构造器注入、set注入、注解注入\n\n循环注入问题\n如果采用构造器或者bean为prototype的此时循环依赖会抛出异常，在以下情况不会出现循环依赖异常scope为singleton非构造器注入\n\n## Spring AOP\n有两种代理方式一中是使用JdkDynamicAopProxy一种是使用cglib判断方式是被代理的类有没有实现一个接口\n```java\npublic class DefaultAopProxyFactory implements AopProxyFactory, Serializable {\n    public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n        if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {\n            Class targetClass = config.getTargetClass();\n            if (targetClass == null) {\n                throw new AopConfigException(\"TargetSource cannot determine target class: \" +\n                    \"Either an interface or a target is required for proxy creation.\");\n            }\n            if (targetClass.isInterface()) {\n                return new JdkDynamicAopProxy(config);\n            }\n            return CglibProxyFactory.createCglibProxy(config);\n        }else {\n            return new JdkDynamicAopProxy(config);\n        }\n    }\n\n    /**\n     * Determine whether the supplied {@link AdvisedSupport} has only the\n     * {@link org.springframework.aop.SpringProxy} interface specified\n     * (or no proxy interfaces specified at all).\n     */\n    private boolean hasNoUserSuppliedProxyInterfaces(AdvisedSupport config) {\n        Class[] interfaces = config.getProxiedInterfaces();\n        return (interfaces.length == 0 || (interfaces.length == 1 && SpringProxy.class.equals(interfaces[0])));\n    }\n}\n```\n\n## Spring一个方法是否可以配置多个切面\n可以,是采用递归的方式执行\n\n## Java内存结构\n方法区 堆 栈 程序计数器 本地方法栈\n方法区：被所有线程共享区域用于存放已被虚拟机加载的类信息，常量，静态变量等数据\n栈：它是线程私有的，生命周期与线程相同，存放编译期间可知的8种基本数据类型，及对象引用和指令地址\n堆：堆被所有线程共享区域，在虚拟机启动时创建，唯一目的存放对象实例\n程序计数器：当前线程所执行的行号指示器\n本地方法栈：用于支持native方法的运行\n堆有可以细分为新生代、幸存区、和老年代\n\n## Spring多数据源的事物控制\n\n\n## Spring事物嵌套\n采用REQUIRED级别只要一个失败结果都失败不管有没有try异常\n场景：如果一个失败了另一个不受影响 可以对那个需要不受印象的配置为NOT_SUPPORTED 已非事物执行如果当前存在事物就将事物挂起\n或者采用独立事物执行 REQUIRES_NEW新建一个事物，如果当前存在事物就将事物挂起\n\n## ThreadLocal结构\n当前线程属性threadLocals 为一个ThreadLocalMap结构\n\n## redis\n单进程单线程 多路 I/O 复用模型\n\n## redis有几种数据结构\nString：字符串\nhash：哈希 Map结构\nList:列表 双向链表结构\nset：集合 不允许重复且无序的\nsortset 有序集合\n\n## redis常用方法\nString类型对应 set get del\nHash类型对应 hset hget hdel\nList类型对应 lset lpush lpop\nset: sadd spop\nsortset    zadd \n发布/订阅\n原子操作\n\n## redis事物\n\n## 分布式锁如何实现\n借助redis\n- 1、setnx(lockkey, 当前时间+过期超时时间) ，如果返回1，则获取锁成功；\n如果返回0则没有获取到锁，转向2。\n- 2、get(lockkey)获取值oldExpireTime ，并将这个value值与当前的系统时间进行比较，\n如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向3。\n- 3、计算newExpireTime=当前时间+过期超时时间，然后getset(lockkey, newExpireTime) \n会返回当前lockkey的值currentExpireTime。\n- 4、判断currentExpireTime与oldExpireTime 是否相等，如果相等，\n说明当前getset设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。\n- 5、在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行delete释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。\n\n## 多个方法同时操作一条数据怎么办\n将表的引擎修改为innerDB这种就支持行锁，但注意的是表里面需要含有主键 查询条件也需要为主键字段或者会成为表锁\n\n## 二叉树遍历的几种方式\n前序（根左右） 中序（左根右）后序（左右根）\n\n## 二分查找法\n\n## 栈（先进后出）\n```java\nclass Stack{\n    Object[] element;\n    int elementCount;\n\t\n    public Stack(){\n        element = new Object[10];\n    }\n\t\n    public synchronized void push(Object o){\n        element[elementCount++]=o;\n    }\n    public synchronized Object pop(){\n        Object o = element[elementCount--];\n        element[elementCount--]=null;\n        return o;\n    }\n}\n```\n## 堆（先进先出）\n\n## http状态码\n\n## linux下查看日志文件常用命令\n\n## 适配器模式\n系统需要使用现有的类，而这些类的接口不符合系统的接口。\n\n## Java中那些类使用了那些模式\n\n## 乐观锁\n每次去拿数据的时候都认为别人不会修改，所以不会上锁，但在更新的时候会判断一下再次期间有没有人去更新这个数据，可是使用版本号等机制。\n在表中添加一个version字段来记录当前数据的版本号\n\n## 悲观锁\n每次取数据的时候都会认为别人会对这个数据进行修改，所以每次拿数据的时候都会加上锁 比如行锁，表锁等，读锁，写锁等\n\nmysql 锁分三种 行锁、表锁、页锁\ninnoDB 行锁在检索数据的时候只有根据索引为条件才会添加行锁或者为表锁\nMyISAM 表锁 不支持事物\na、对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。\nb、对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。\nBDB 页锁\n\n行锁：对写操作多的时候使用行数可以提搞并发；缺点：比页锁需要占用更多的内存。\n表锁：对度操作多的时候使用表锁可以提高性能\n\n## 事物与锁\n事物：原子性、一致性、隔离性、持久性\n锁：是为了保证数据的完整性。\n\n## 线上mysql如何查看那条sql执行时间比较长\n查看mysql慢日志\n\n## synchronized与Lock\nsynchronizeed与Lock实现的功能都一样，在使用方面synchronizeed是隐式的而Lock是显示的\n大多数情况下，内置锁都能很好的工作，但在功能上存在一些局限性，例如，无法中断一个正在等待获取锁的的线程。或者无法再请求获取一个锁时无限地等待下去。\nLock是基于CAS LockSupport.park()与LockSupport.unpark实现\n\n## 请描述一下GC（jvm垃圾回收器）\n\n## Java中的引用有几种?\n四种 分别为强引用 弱引用 软引用 虚引用\n\n## Java中的threadlocal是怎么用的? threadlocal中的内部实现是怎么样的? 哪种引用?\nnew ThreadLocal()调用set get方法\n软引用\n使用当前线程的的threadLocals属性 这是一个Map结构\n\n## Java中的\"final\"关键字在多线程的语义中，有什么含义\n最终的不可修改的\n\n## 说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\n    在操作系统中的实现原理? 如果都是cpu轮训话，会不会对cpu影响太大?\n    应用到了linux中的什么特性?\nNIO无阻塞IO，基于事件驱动，\n在Select中绑定Socket 注册相关事件\nByteBuffer.allocateDirect() \n\n## nio中， 如果不显式的调用 system.gc() 那会出现什么问题？\n会引起内存溢出\n对系统而言分为内核空间和用户空间 而jvm属于用户空间在jvm中垃圾是自动回收，而触发这个垃圾回收器的时机是java堆内存满的时候\n在NIO中使用的ByteBuffer通过allocateDirect在内核内存中分配了一份空间。而此空间不属于jvm堆所以如果不显示调用gc就会引起系统内存溢出的情况\n这也是传说中的零拷贝\n\n## SimpleDateFormat如果是一个全局变量的话，有什么问题？\n因为不是同步的 在并发的时候会引起各种错误异常\n\n## HashMap的操作中，直接使用keySet()遍历有什么问题\n性能底下；为啥呢因为会遍历两次\n\n## 线程池队列中几种策略\n两种\n第一种：拒绝任务\n第二种：丢弃历史任务\n\n## ConcurrentHashMap为什么会比HashTable快\n\n## 一个数组n 其中的值是1到n-1 找出其中第一个重复的\n\n## 两个整数交换不使用第三个变量\na=a+b;\nb=a-b;\na=a-b;\n\n## 手写代码实现LRU数据结构\n查看http://www.programcreek.com/2013/03/leetcode-lru-cache-java/\n\n## 一个数组将奇数放左边偶数放右边\n\n## 一个字符串找出第一个相同的字符\n\n## 数据库sql优化\n\n## 数据库索引该如何建在正确的字段上\n\n## Spring有几种事物隔离\n\n## 请描述一下Spring MVC 从发起请求到后台的处理流程\n\n## 请描述一下JVM类加载\n","slug":"2017年上半年Java高级工程师求职面试题总结","published":1,"updated":"2021-06-25T02:00:17.782Z","layout":"post","photos":[],"link":"","_id":"ckqjatonl003tqkl5f8nc3fa0","content":"<h2 id=\"HashMap的数据结构\"><a href=\"#HashMap的数据结构\" class=\"headerlink\" title=\"HashMap的数据结构\"></a>HashMap的数据结构</h2><p>数组加单链表结构。不允许有相同的key允许null为key，null为key的时候值是保存下了数组下标为0中。可以有相同的value<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span></span>&#123;</span><br><span class=\"line\">    Entity[] entity;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        entity = <span class=\"keyword\">new</span> Entity[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entity</span></span>&#123;</span><br><span class=\"line\">        String key;</span><br><span class=\"line\">        String value;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">        Entity next;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Object key,Object value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = key.hashCode % entity.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(entity[i]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            entity[i] = <span class=\"keyword\">new</span> Entity(key,value,i,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Entity temp = entity[i];</span><br><span class=\"line\">            entity[i] =  = <span class=\"keyword\">new</span> Entity(key,value,i,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(Object key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = key.hashCode % entity.length;</span><br><span class=\"line\">        Entity temp = Entity[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.key.equlas(key))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> temp.value;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                temp = temp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ArrayList的数据结构\"><a href=\"#ArrayList的数据结构\" class=\"headerlink\" title=\"ArrayList的数据结构\"></a>ArrayList的数据结构</h2><p>数组结构，允许重复数据，取值快，插入慢<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span></span>&#123;</span><br><span class=\"line\">    Object[] elementData;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> elementCount;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        elementData = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        elementData[elementCount++]=o; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"HashSet的数据结构\"><a href=\"#HashSet的数据结构\" class=\"headerlink\" title=\"HashSet的数据结构\"></a>HashSet的数据结构</h2><p>不允许有相同的值，无序的，优势在于查找相同元素的时候时间复杂度为最低<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashSet</span></span>&#123;</span><br><span class=\"line\">    HashMap map ;</span><br><span class=\"line\">    Object PRESENT = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">add</span><span class=\"params\">(Object v)</span></span>&#123;</span><br><span class=\"line\">        map.put(v,PRESENT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"LinkedList的数据结构\"><a href=\"#LinkedList的数据结构\" class=\"headerlink\" title=\"LinkedList的数据结构\"></a>LinkedList的数据结构</h2><p>双链表结构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span>&#123;</span><br><span class=\"line\">    Node first;</span><br><span class=\"line\">    Node last;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        addFirst(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            first =<span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        Object v;</span><br><span class=\"line\">        Node prev;</span><br><span class=\"line\">        Node next;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Object o,Node prev,Node next)</span></span>&#123;</span><br><span class=\"line\">            v=o;</span><br><span class=\"line\">            prev = prev;</span><br><span class=\"line\">            next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Integer值的-判断\"><a href=\"#Integer值的-判断\" class=\"headerlink\" title=\"Integer值的==判断\"></a>Integer值的==判断</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a=<span class=\"number\">1</span>;</span><br><span class=\"line\">Integer b=<span class=\"number\">1</span>;</span><br><span class=\"line\">a==b  echo <span class=\"keyword\">true</span></span><br><span class=\"line\">Integer a1=<span class=\"number\">200</span>;</span><br><span class=\"line\">Integer b1=<span class=\"number\">200</span>;</span><br><span class=\"line\">a1==b1  echo <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>-128到127之间的值是存在一块缓存区域中超过此区间这个是new Integer</p>\n<h2 id=\"创建一个线程池有几种方法以及参数\"><a href=\"#创建一个线程池有几种方法以及参数\" class=\"headerlink\" title=\"创建一个线程池有几种方法以及参数\"></a>创建一个线程池有几种方法以及参数</h2><p>可以使用Executors类创建也可以自己new ThreadPoolExecutor();<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span><br><span class=\"line\">                              <span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">                              TimeUnit unit,</span><br><span class=\"line\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class=\"line\">                              ThreadFactory threadFactory);</span><br></pre></td></tr></table></figure></p>\n<p>执行流程当有任务执行的时候创建一个线程执行此任务如果，已到达corePoolSize大小并且小于maximumPoolSize时且没有空闲的线程，将任务加入到任务队列中<br>当任务队列慢了的时候开始创建新的线程执行任务队列中的任务。当等于maximumPoolSize大小的时候且任务队列满了的时候此时开始启用策略，默认是拒绝任务加入，还有一种是抛弃旧的任务。<br>当任务都执行完成了线程池的线程数大于corePoolSize，并且空闲时间大于keepAliveTime时销毁线程使之线程池中的数量等于corePoolSize</p>\n<p>Executors.newFixedThreadPool(int nThreads)：创建一个固定的大小的线程池<br>Executors.newSingleThreadExecutor();创建一个线程的线程池<br>Executors.newCachedThreadPool()；创建一个0到Integer.MAX_VALUE区间的线程池 线程空闲60秒销毁</p>\n<h2 id=\"Spring的IOC（循环依赖）\"><a href=\"#Spring的IOC（循环依赖）\" class=\"headerlink\" title=\"Spring的IOC（循环依赖）\"></a>Spring的IOC（循环依赖）</h2><p>IOC 注入有三种方式<br>构造器注入、set注入、注解注入</p>\n<p>循环注入问题<br>如果采用构造器或者bean为prototype的此时循环依赖会抛出异常，在以下情况不会出现循环依赖异常scope为singleton非构造器注入</p>\n<h2 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h2><p>有两种代理方式一中是使用JdkDynamicAopProxy一种是使用cglib判断方式是被代理的类有没有实现一个接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultAopProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AopProxyFactory</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AopProxy <span class=\"title\">createAopProxy</span><span class=\"params\">(AdvisedSupport config)</span> <span class=\"keyword\">throws</span> AopConfigException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class=\"line\">            Class targetClass = config.getTargetClass();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"TargetSource cannot determine target class: \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"Either an interface or a target is required for proxy creation.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetClass.isInterface()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CglibProxyFactory.createCglibProxy(config);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine whether the supplied &#123;<span class=\"doctag\">@link</span> AdvisedSupport&#125; has only the</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> org.springframework.aop.SpringProxy&#125; interface specified</span></span><br><span class=\"line\"><span class=\"comment\">     * (or no proxy interfaces specified at all).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNoUserSuppliedProxyInterfaces</span><span class=\"params\">(AdvisedSupport config)</span> </span>&#123;</span><br><span class=\"line\">        Class[] interfaces = config.getProxiedInterfaces();</span><br><span class=\"line\">        return (interfaces.length == 0 || (interfaces.length == 1 &amp;&amp; SpringProxy.class.equals(interfaces[0])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Spring一个方法是否可以配置多个切面\"><a href=\"#Spring一个方法是否可以配置多个切面\" class=\"headerlink\" title=\"Spring一个方法是否可以配置多个切面\"></a>Spring一个方法是否可以配置多个切面</h2><p>可以,是采用递归的方式执行</p>\n<h2 id=\"Java内存结构\"><a href=\"#Java内存结构\" class=\"headerlink\" title=\"Java内存结构\"></a>Java内存结构</h2><p>方法区 堆 栈 程序计数器 本地方法栈<br>方法区：被所有线程共享区域用于存放已被虚拟机加载的类信息，常量，静态变量等数据<br>栈：它是线程私有的，生命周期与线程相同，存放编译期间可知的8种基本数据类型，及对象引用和指令地址<br>堆：堆被所有线程共享区域，在虚拟机启动时创建，唯一目的存放对象实例<br>程序计数器：当前线程所执行的行号指示器<br>本地方法栈：用于支持native方法的运行<br>堆有可以细分为新生代、幸存区、和老年代</p>\n<h2 id=\"Spring多数据源的事物控制\"><a href=\"#Spring多数据源的事物控制\" class=\"headerlink\" title=\"Spring多数据源的事物控制\"></a>Spring多数据源的事物控制</h2><h2 id=\"Spring事物嵌套\"><a href=\"#Spring事物嵌套\" class=\"headerlink\" title=\"Spring事物嵌套\"></a>Spring事物嵌套</h2><p>采用REQUIRED级别只要一个失败结果都失败不管有没有try异常<br>场景：如果一个失败了另一个不受影响 可以对那个需要不受印象的配置为NOT_SUPPORTED 已非事物执行如果当前存在事物就将事物挂起<br>或者采用独立事物执行 REQUIRES_NEW新建一个事物，如果当前存在事物就将事物挂起</p>\n<h2 id=\"ThreadLocal结构\"><a href=\"#ThreadLocal结构\" class=\"headerlink\" title=\"ThreadLocal结构\"></a>ThreadLocal结构</h2><p>当前线程属性threadLocals 为一个ThreadLocalMap结构</p>\n<h2 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h2><p>单进程单线程 多路 I/O 复用模型</p>\n<h2 id=\"redis有几种数据结构\"><a href=\"#redis有几种数据结构\" class=\"headerlink\" title=\"redis有几种数据结构\"></a>redis有几种数据结构</h2><p>String：字符串<br>hash：哈希 Map结构<br>List:列表 双向链表结构<br>set：集合 不允许重复且无序的<br>sortset 有序集合</p>\n<h2 id=\"redis常用方法\"><a href=\"#redis常用方法\" class=\"headerlink\" title=\"redis常用方法\"></a>redis常用方法</h2><p>String类型对应 set get del<br>Hash类型对应 hset hget hdel<br>List类型对应 lset lpush lpop<br>set: sadd spop<br>sortset    zadd<br>发布/订阅<br>原子操作</p>\n<h2 id=\"redis事物\"><a href=\"#redis事物\" class=\"headerlink\" title=\"redis事物\"></a>redis事物</h2><h2 id=\"分布式锁如何实现\"><a href=\"#分布式锁如何实现\" class=\"headerlink\" title=\"分布式锁如何实现\"></a>分布式锁如何实现</h2><p>借助redis</p>\n<ul>\n<li>1、setnx(lockkey, 当前时间+过期超时时间) ，如果返回1，则获取锁成功；<br>如果返回0则没有获取到锁，转向2。</li>\n<li>2、get(lockkey)获取值oldExpireTime ，并将这个value值与当前的系统时间进行比较，<br>如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向3。</li>\n<li>3、计算newExpireTime=当前时间+过期超时时间，然后getset(lockkey, newExpireTime)<br>会返回当前lockkey的值currentExpireTime。</li>\n<li>4、判断currentExpireTime与oldExpireTime 是否相等，如果相等，<br>说明当前getset设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。</li>\n<li>5、在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行delete释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。</li>\n</ul>\n<h2 id=\"多个方法同时操作一条数据怎么办\"><a href=\"#多个方法同时操作一条数据怎么办\" class=\"headerlink\" title=\"多个方法同时操作一条数据怎么办\"></a>多个方法同时操作一条数据怎么办</h2><p>将表的引擎修改为innerDB这种就支持行锁，但注意的是表里面需要含有主键 查询条件也需要为主键字段或者会成为表锁</p>\n<h2 id=\"二叉树遍历的几种方式\"><a href=\"#二叉树遍历的几种方式\" class=\"headerlink\" title=\"二叉树遍历的几种方式\"></a>二叉树遍历的几种方式</h2><p>前序（根左右） 中序（左根右）后序（左右根）</p>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><h2 id=\"栈（先进后出）\"><a href=\"#栈（先进后出）\" class=\"headerlink\" title=\"栈（先进后出）\"></a>栈（先进后出）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span>&#123;</span><br><span class=\"line\">    Object[] element;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> elementCount;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        element = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        element[elementCount++]=o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Object <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object o = element[elementCount--];</span><br><span class=\"line\">        element[elementCount--]=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"堆（先进先出）\"><a href=\"#堆（先进先出）\" class=\"headerlink\" title=\"堆（先进先出）\"></a>堆（先进先出）</h2><h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><h2 id=\"linux下查看日志文件常用命令\"><a href=\"#linux下查看日志文件常用命令\" class=\"headerlink\" title=\"linux下查看日志文件常用命令\"></a>linux下查看日志文件常用命令</h2><h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>系统需要使用现有的类，而这些类的接口不符合系统的接口。</p>\n<h2 id=\"Java中那些类使用了那些模式\"><a href=\"#Java中那些类使用了那些模式\" class=\"headerlink\" title=\"Java中那些类使用了那些模式\"></a>Java中那些类使用了那些模式</h2><h2 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h2><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但在更新的时候会判断一下再次期间有没有人去更新这个数据，可是使用版本号等机制。<br>在表中添加一个version字段来记录当前数据的版本号</p>\n<h2 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h2><p>每次取数据的时候都会认为别人会对这个数据进行修改，所以每次拿数据的时候都会加上锁 比如行锁，表锁等，读锁，写锁等</p>\n<p>mysql 锁分三种 行锁、表锁、页锁<br>innoDB 行锁在检索数据的时候只有根据索引为条件才会添加行锁或者为表锁<br>MyISAM 表锁 不支持事物<br>a、对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。<br>b、对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。<br>BDB 页锁</p>\n<p>行锁：对写操作多的时候使用行数可以提搞并发；缺点：比页锁需要占用更多的内存。<br>表锁：对度操作多的时候使用表锁可以提高性能</p>\n<h2 id=\"事物与锁\"><a href=\"#事物与锁\" class=\"headerlink\" title=\"事物与锁\"></a>事物与锁</h2><p>事物：原子性、一致性、隔离性、持久性<br>锁：是为了保证数据的完整性。</p>\n<h2 id=\"线上mysql如何查看那条sql执行时间比较长\"><a href=\"#线上mysql如何查看那条sql执行时间比较长\" class=\"headerlink\" title=\"线上mysql如何查看那条sql执行时间比较长\"></a>线上mysql如何查看那条sql执行时间比较长</h2><p>查看mysql慢日志</p>\n<h2 id=\"synchronized与Lock\"><a href=\"#synchronized与Lock\" class=\"headerlink\" title=\"synchronized与Lock\"></a>synchronized与Lock</h2><p>synchronizeed与Lock实现的功能都一样，在使用方面synchronizeed是隐式的而Lock是显示的<br>大多数情况下，内置锁都能很好的工作，但在功能上存在一些局限性，例如，无法中断一个正在等待获取锁的的线程。或者无法再请求获取一个锁时无限地等待下去。<br>Lock是基于CAS LockSupport.park()与LockSupport.unpark实现</p>\n<h2 id=\"请描述一下GC（jvm垃圾回收器）\"><a href=\"#请描述一下GC（jvm垃圾回收器）\" class=\"headerlink\" title=\"请描述一下GC（jvm垃圾回收器）\"></a>请描述一下GC（jvm垃圾回收器）</h2><h2 id=\"Java中的引用有几种\"><a href=\"#Java中的引用有几种\" class=\"headerlink\" title=\"Java中的引用有几种?\"></a>Java中的引用有几种?</h2><p>四种 分别为强引用 弱引用 软引用 虚引用</p>\n<h2 id=\"Java中的threadlocal是怎么用的-threadlocal中的内部实现是怎么样的-哪种引用\"><a href=\"#Java中的threadlocal是怎么用的-threadlocal中的内部实现是怎么样的-哪种引用\" class=\"headerlink\" title=\"Java中的threadlocal是怎么用的? threadlocal中的内部实现是怎么样的? 哪种引用?\"></a>Java中的threadlocal是怎么用的? threadlocal中的内部实现是怎么样的? 哪种引用?</h2><p>new ThreadLocal()调用set get方法<br>软引用<br>使用当前线程的的threadLocals属性 这是一个Map结构</p>\n<h2 id=\"Java中的”final”关键字在多线程的语义中，有什么含义\"><a href=\"#Java中的”final”关键字在多线程的语义中，有什么含义\" class=\"headerlink\" title=\"Java中的”final”关键字在多线程的语义中，有什么含义\"></a>Java中的”final”关键字在多线程的语义中，有什么含义</h2><p>最终的不可修改的</p>\n<h2 id=\"说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\"><a href=\"#说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\" class=\"headerlink\" title=\"说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\"></a>说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？</h2><pre><code>在操作系统中的实现原理? 如果都是cpu轮训话，会不会对cpu影响太大?\n应用到了linux中的什么特性?\n</code></pre><p>NIO无阻塞IO，基于事件驱动，<br>在Select中绑定Socket 注册相关事件<br>ByteBuffer.allocateDirect() </p>\n<h2 id=\"nio中，-如果不显式的调用-system-gc-那会出现什么问题？\"><a href=\"#nio中，-如果不显式的调用-system-gc-那会出现什么问题？\" class=\"headerlink\" title=\"nio中， 如果不显式的调用 system.gc() 那会出现什么问题？\"></a>nio中， 如果不显式的调用 system.gc() 那会出现什么问题？</h2><p>会引起内存溢出<br>对系统而言分为内核空间和用户空间 而jvm属于用户空间在jvm中垃圾是自动回收，而触发这个垃圾回收器的时机是java堆内存满的时候<br>在NIO中使用的ByteBuffer通过allocateDirect在内核内存中分配了一份空间。而此空间不属于jvm堆所以如果不显示调用gc就会引起系统内存溢出的情况<br>这也是传说中的零拷贝</p>\n<h2 id=\"SimpleDateFormat如果是一个全局变量的话，有什么问题？\"><a href=\"#SimpleDateFormat如果是一个全局变量的话，有什么问题？\" class=\"headerlink\" title=\"SimpleDateFormat如果是一个全局变量的话，有什么问题？\"></a>SimpleDateFormat如果是一个全局变量的话，有什么问题？</h2><p>因为不是同步的 在并发的时候会引起各种错误异常</p>\n<h2 id=\"HashMap的操作中，直接使用keySet-遍历有什么问题\"><a href=\"#HashMap的操作中，直接使用keySet-遍历有什么问题\" class=\"headerlink\" title=\"HashMap的操作中，直接使用keySet()遍历有什么问题\"></a>HashMap的操作中，直接使用keySet()遍历有什么问题</h2><p>性能底下；为啥呢因为会遍历两次</p>\n<h2 id=\"线程池队列中几种策略\"><a href=\"#线程池队列中几种策略\" class=\"headerlink\" title=\"线程池队列中几种策略\"></a>线程池队列中几种策略</h2><p>两种<br>第一种：拒绝任务<br>第二种：丢弃历史任务</p>\n<h2 id=\"ConcurrentHashMap为什么会比HashTable快\"><a href=\"#ConcurrentHashMap为什么会比HashTable快\" class=\"headerlink\" title=\"ConcurrentHashMap为什么会比HashTable快\"></a>ConcurrentHashMap为什么会比HashTable快</h2><h2 id=\"一个数组n-其中的值是1到n-1-找出其中第一个重复的\"><a href=\"#一个数组n-其中的值是1到n-1-找出其中第一个重复的\" class=\"headerlink\" title=\"一个数组n 其中的值是1到n-1 找出其中第一个重复的\"></a>一个数组n 其中的值是1到n-1 找出其中第一个重复的</h2><h2 id=\"两个整数交换不使用第三个变量\"><a href=\"#两个整数交换不使用第三个变量\" class=\"headerlink\" title=\"两个整数交换不使用第三个变量\"></a>两个整数交换不使用第三个变量</h2><p>a=a+b;<br>b=a-b;<br>a=a-b;</p>\n<h2 id=\"手写代码实现LRU数据结构\"><a href=\"#手写代码实现LRU数据结构\" class=\"headerlink\" title=\"手写代码实现LRU数据结构\"></a>手写代码实现LRU数据结构</h2><p>查看<a href=\"http://www.programcreek.com/2013/03/leetcode-lru-cache-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2013/03/leetcode-lru-cache-java/</a></p>\n<h2 id=\"一个数组将奇数放左边偶数放右边\"><a href=\"#一个数组将奇数放左边偶数放右边\" class=\"headerlink\" title=\"一个数组将奇数放左边偶数放右边\"></a>一个数组将奇数放左边偶数放右边</h2><h2 id=\"一个字符串找出第一个相同的字符\"><a href=\"#一个字符串找出第一个相同的字符\" class=\"headerlink\" title=\"一个字符串找出第一个相同的字符\"></a>一个字符串找出第一个相同的字符</h2><h2 id=\"数据库sql优化\"><a href=\"#数据库sql优化\" class=\"headerlink\" title=\"数据库sql优化\"></a>数据库sql优化</h2><h2 id=\"数据库索引该如何建在正确的字段上\"><a href=\"#数据库索引该如何建在正确的字段上\" class=\"headerlink\" title=\"数据库索引该如何建在正确的字段上\"></a>数据库索引该如何建在正确的字段上</h2><h2 id=\"Spring有几种事物隔离\"><a href=\"#Spring有几种事物隔离\" class=\"headerlink\" title=\"Spring有几种事物隔离\"></a>Spring有几种事物隔离</h2><h2 id=\"请描述一下Spring-MVC-从发起请求到后台的处理流程\"><a href=\"#请描述一下Spring-MVC-从发起请求到后台的处理流程\" class=\"headerlink\" title=\"请描述一下Spring MVC 从发起请求到后台的处理流程\"></a>请描述一下Spring MVC 从发起请求到后台的处理流程</h2><h2 id=\"请描述一下JVM类加载\"><a href=\"#请描述一下JVM类加载\" class=\"headerlink\" title=\"请描述一下JVM类加载\"></a>请描述一下JVM类加载</h2>","site":{"data":{}},"excerpt":"<h2 id=\"HashMap的数据结构\"><a href=\"#HashMap的数据结构\" class=\"headerlink\" title=\"HashMap的数据结构\"></a>HashMap的数据结构</h2><p>数组加单链表结构。不允许有相同的key允许null为key，null为key的时候值是保存下了数组下标为0中。可以有相同的value<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span></span>&#123;</span><br><span class=\"line\">    Entity[] entity;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        entity = <span class=\"keyword\">new</span> Entity[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entity</span></span>&#123;</span><br><span class=\"line\">        String key;</span><br><span class=\"line\">        String value;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">        Entity next;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Object key,Object value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = key.hashCode % entity.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(entity[i]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            entity[i] = <span class=\"keyword\">new</span> Entity(key,value,i,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Entity temp = entity[i];</span><br><span class=\"line\">            entity[i] =  = <span class=\"keyword\">new</span> Entity(key,value,i,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(Object key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = key.hashCode % entity.length;</span><br><span class=\"line\">        Entity temp = Entity[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.key.equlas(key))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> temp.value;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                temp = temp.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ArrayList的数据结构\"><a href=\"#ArrayList的数据结构\" class=\"headerlink\" title=\"ArrayList的数据结构\"></a>ArrayList的数据结构</h2><p>数组结构，允许重复数据，取值快，插入慢<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span></span>&#123;</span><br><span class=\"line\">    Object[] elementData;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> elementCount;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        elementData = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        elementData[elementCount++]=o; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"HashSet的数据结构\"><a href=\"#HashSet的数据结构\" class=\"headerlink\" title=\"HashSet的数据结构\"></a>HashSet的数据结构</h2><p>不允许有相同的值，无序的，优势在于查找相同元素的时候时间复杂度为最低<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashSet</span></span>&#123;</span><br><span class=\"line\">    HashMap map ;</span><br><span class=\"line\">    Object PRESENT = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">add</span><span class=\"params\">(Object v)</span></span>&#123;</span><br><span class=\"line\">        map.put(v,PRESENT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"LinkedList的数据结构\"><a href=\"#LinkedList的数据结构\" class=\"headerlink\" title=\"LinkedList的数据结构\"></a>LinkedList的数据结构</h2><p>双链表结构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span>&#123;</span><br><span class=\"line\">    Node first;</span><br><span class=\"line\">    Node last;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        addFirst(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            first =<span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        Object v;</span><br><span class=\"line\">        Node prev;</span><br><span class=\"line\">        Node next;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Object o,Node prev,Node next)</span></span>&#123;</span><br><span class=\"line\">            v=o;</span><br><span class=\"line\">            prev = prev;</span><br><span class=\"line\">            next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Integer值的-判断\"><a href=\"#Integer值的-判断\" class=\"headerlink\" title=\"Integer值的==判断\"></a>Integer值的==判断</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a=<span class=\"number\">1</span>;</span><br><span class=\"line\">Integer b=<span class=\"number\">1</span>;</span><br><span class=\"line\">a==b  echo <span class=\"keyword\">true</span></span><br><span class=\"line\">Integer a1=<span class=\"number\">200</span>;</span><br><span class=\"line\">Integer b1=<span class=\"number\">200</span>;</span><br><span class=\"line\">a1==b1  echo <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>-128到127之间的值是存在一块缓存区域中超过此区间这个是new Integer</p>\n<h2 id=\"创建一个线程池有几种方法以及参数\"><a href=\"#创建一个线程池有几种方法以及参数\" class=\"headerlink\" title=\"创建一个线程池有几种方法以及参数\"></a>创建一个线程池有几种方法以及参数</h2><p>可以使用Executors类创建也可以自己new ThreadPoolExecutor();<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span><br><span class=\"line\">                              <span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">                              TimeUnit unit,</span><br><span class=\"line\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class=\"line\">                              ThreadFactory threadFactory);</span><br></pre></td></tr></table></figure></p>\n<p>执行流程当有任务执行的时候创建一个线程执行此任务如果，已到达corePoolSize大小并且小于maximumPoolSize时且没有空闲的线程，将任务加入到任务队列中<br>当任务队列慢了的时候开始创建新的线程执行任务队列中的任务。当等于maximumPoolSize大小的时候且任务队列满了的时候此时开始启用策略，默认是拒绝任务加入，还有一种是抛弃旧的任务。<br>当任务都执行完成了线程池的线程数大于corePoolSize，并且空闲时间大于keepAliveTime时销毁线程使之线程池中的数量等于corePoolSize</p>\n<p>Executors.newFixedThreadPool(int nThreads)：创建一个固定的大小的线程池<br>Executors.newSingleThreadExecutor();创建一个线程的线程池<br>Executors.newCachedThreadPool()；创建一个0到Integer.MAX_VALUE区间的线程池 线程空闲60秒销毁</p>\n<h2 id=\"Spring的IOC（循环依赖）\"><a href=\"#Spring的IOC（循环依赖）\" class=\"headerlink\" title=\"Spring的IOC（循环依赖）\"></a>Spring的IOC（循环依赖）</h2><p>IOC 注入有三种方式<br>构造器注入、set注入、注解注入</p>\n<p>循环注入问题<br>如果采用构造器或者bean为prototype的此时循环依赖会抛出异常，在以下情况不会出现循环依赖异常scope为singleton非构造器注入</p>\n<h2 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h2><p>有两种代理方式一中是使用JdkDynamicAopProxy一种是使用cglib判断方式是被代理的类有没有实现一个接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultAopProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AopProxyFactory</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AopProxy <span class=\"title\">createAopProxy</span><span class=\"params\">(AdvisedSupport config)</span> <span class=\"keyword\">throws</span> AopConfigException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class=\"line\">            Class targetClass = config.getTargetClass();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AopConfigException(<span class=\"string\">\"TargetSource cannot determine target class: \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"Either an interface or a target is required for proxy creation.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetClass.isInterface()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CglibProxyFactory.createCglibProxy(config);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(config);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine whether the supplied &#123;<span class=\"doctag\">@link</span> AdvisedSupport&#125; has only the</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> org.springframework.aop.SpringProxy&#125; interface specified</span></span><br><span class=\"line\"><span class=\"comment\">     * (or no proxy interfaces specified at all).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNoUserSuppliedProxyInterfaces</span><span class=\"params\">(AdvisedSupport config)</span> </span>&#123;</span><br><span class=\"line\">        Class[] interfaces = config.getProxiedInterfaces();</span><br><span class=\"line\">        return (interfaces.length == 0 || (interfaces.length == 1 &amp;&amp; SpringProxy.class.equals(interfaces[0])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Spring一个方法是否可以配置多个切面\"><a href=\"#Spring一个方法是否可以配置多个切面\" class=\"headerlink\" title=\"Spring一个方法是否可以配置多个切面\"></a>Spring一个方法是否可以配置多个切面</h2><p>可以,是采用递归的方式执行</p>\n<h2 id=\"Java内存结构\"><a href=\"#Java内存结构\" class=\"headerlink\" title=\"Java内存结构\"></a>Java内存结构</h2><p>方法区 堆 栈 程序计数器 本地方法栈<br>方法区：被所有线程共享区域用于存放已被虚拟机加载的类信息，常量，静态变量等数据<br>栈：它是线程私有的，生命周期与线程相同，存放编译期间可知的8种基本数据类型，及对象引用和指令地址<br>堆：堆被所有线程共享区域，在虚拟机启动时创建，唯一目的存放对象实例<br>程序计数器：当前线程所执行的行号指示器<br>本地方法栈：用于支持native方法的运行<br>堆有可以细分为新生代、幸存区、和老年代</p>\n<h2 id=\"Spring多数据源的事物控制\"><a href=\"#Spring多数据源的事物控制\" class=\"headerlink\" title=\"Spring多数据源的事物控制\"></a>Spring多数据源的事物控制</h2><h2 id=\"Spring事物嵌套\"><a href=\"#Spring事物嵌套\" class=\"headerlink\" title=\"Spring事物嵌套\"></a>Spring事物嵌套</h2><p>采用REQUIRED级别只要一个失败结果都失败不管有没有try异常<br>场景：如果一个失败了另一个不受影响 可以对那个需要不受印象的配置为NOT_SUPPORTED 已非事物执行如果当前存在事物就将事物挂起<br>或者采用独立事物执行 REQUIRES_NEW新建一个事物，如果当前存在事物就将事物挂起</p>\n<h2 id=\"ThreadLocal结构\"><a href=\"#ThreadLocal结构\" class=\"headerlink\" title=\"ThreadLocal结构\"></a>ThreadLocal结构</h2><p>当前线程属性threadLocals 为一个ThreadLocalMap结构</p>\n<h2 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h2><p>单进程单线程 多路 I/O 复用模型</p>\n<h2 id=\"redis有几种数据结构\"><a href=\"#redis有几种数据结构\" class=\"headerlink\" title=\"redis有几种数据结构\"></a>redis有几种数据结构</h2><p>String：字符串<br>hash：哈希 Map结构<br>List:列表 双向链表结构<br>set：集合 不允许重复且无序的<br>sortset 有序集合</p>\n<h2 id=\"redis常用方法\"><a href=\"#redis常用方法\" class=\"headerlink\" title=\"redis常用方法\"></a>redis常用方法</h2><p>String类型对应 set get del<br>Hash类型对应 hset hget hdel<br>List类型对应 lset lpush lpop<br>set: sadd spop<br>sortset    zadd<br>发布/订阅<br>原子操作</p>\n<h2 id=\"redis事物\"><a href=\"#redis事物\" class=\"headerlink\" title=\"redis事物\"></a>redis事物</h2><h2 id=\"分布式锁如何实现\"><a href=\"#分布式锁如何实现\" class=\"headerlink\" title=\"分布式锁如何实现\"></a>分布式锁如何实现</h2><p>借助redis</p>\n<ul>\n<li>1、setnx(lockkey, 当前时间+过期超时时间) ，如果返回1，则获取锁成功；<br>如果返回0则没有获取到锁，转向2。</li>\n<li>2、get(lockkey)获取值oldExpireTime ，并将这个value值与当前的系统时间进行比较，<br>如果小于当前系统时间，则认为这个锁已经超时，可以允许别的请求重新获取，转向3。</li>\n<li>3、计算newExpireTime=当前时间+过期超时时间，然后getset(lockkey, newExpireTime)<br>会返回当前lockkey的值currentExpireTime。</li>\n<li>4、判断currentExpireTime与oldExpireTime 是否相等，如果相等，<br>说明当前getset设置成功，获取到了锁。如果不相等，说明这个锁又被别的请求获取走了，那么当前请求可以直接返回失败，或者继续重试。</li>\n<li>5、在获取到锁之后，当前线程可以开始自己的业务处理，当处理完毕后，比较自己的处理时间和对于锁设置的超时时间，如果小于锁设置的超时时间，则直接执行delete释放锁；如果大于锁设置的超时时间，则不需要再锁进行处理。</li>\n</ul>\n<h2 id=\"多个方法同时操作一条数据怎么办\"><a href=\"#多个方法同时操作一条数据怎么办\" class=\"headerlink\" title=\"多个方法同时操作一条数据怎么办\"></a>多个方法同时操作一条数据怎么办</h2><p>将表的引擎修改为innerDB这种就支持行锁，但注意的是表里面需要含有主键 查询条件也需要为主键字段或者会成为表锁</p>\n<h2 id=\"二叉树遍历的几种方式\"><a href=\"#二叉树遍历的几种方式\" class=\"headerlink\" title=\"二叉树遍历的几种方式\"></a>二叉树遍历的几种方式</h2><p>前序（根左右） 中序（左根右）后序（左右根）</p>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><h2 id=\"栈（先进后出）\"><a href=\"#栈（先进后出）\" class=\"headerlink\" title=\"栈（先进后出）\"></a>栈（先进后出）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span>&#123;</span><br><span class=\"line\">    Object[] element;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> elementCount;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        element = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        element[elementCount++]=o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Object <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object o = element[elementCount--];</span><br><span class=\"line\">        element[elementCount--]=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"堆（先进先出）\"><a href=\"#堆（先进先出）\" class=\"headerlink\" title=\"堆（先进先出）\"></a>堆（先进先出）</h2><h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><h2 id=\"linux下查看日志文件常用命令\"><a href=\"#linux下查看日志文件常用命令\" class=\"headerlink\" title=\"linux下查看日志文件常用命令\"></a>linux下查看日志文件常用命令</h2><h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p>系统需要使用现有的类，而这些类的接口不符合系统的接口。</p>\n<h2 id=\"Java中那些类使用了那些模式\"><a href=\"#Java中那些类使用了那些模式\" class=\"headerlink\" title=\"Java中那些类使用了那些模式\"></a>Java中那些类使用了那些模式</h2><h2 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h2><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但在更新的时候会判断一下再次期间有没有人去更新这个数据，可是使用版本号等机制。<br>在表中添加一个version字段来记录当前数据的版本号</p>\n<h2 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h2><p>每次取数据的时候都会认为别人会对这个数据进行修改，所以每次拿数据的时候都会加上锁 比如行锁，表锁等，读锁，写锁等</p>\n<p>mysql 锁分三种 行锁、表锁、页锁<br>innoDB 行锁在检索数据的时候只有根据索引为条件才会添加行锁或者为表锁<br>MyISAM 表锁 不支持事物<br>a、对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。<br>b、对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。<br>BDB 页锁</p>\n<p>行锁：对写操作多的时候使用行数可以提搞并发；缺点：比页锁需要占用更多的内存。<br>表锁：对度操作多的时候使用表锁可以提高性能</p>\n<h2 id=\"事物与锁\"><a href=\"#事物与锁\" class=\"headerlink\" title=\"事物与锁\"></a>事物与锁</h2><p>事物：原子性、一致性、隔离性、持久性<br>锁：是为了保证数据的完整性。</p>\n<h2 id=\"线上mysql如何查看那条sql执行时间比较长\"><a href=\"#线上mysql如何查看那条sql执行时间比较长\" class=\"headerlink\" title=\"线上mysql如何查看那条sql执行时间比较长\"></a>线上mysql如何查看那条sql执行时间比较长</h2><p>查看mysql慢日志</p>\n<h2 id=\"synchronized与Lock\"><a href=\"#synchronized与Lock\" class=\"headerlink\" title=\"synchronized与Lock\"></a>synchronized与Lock</h2><p>synchronizeed与Lock实现的功能都一样，在使用方面synchronizeed是隐式的而Lock是显示的<br>大多数情况下，内置锁都能很好的工作，但在功能上存在一些局限性，例如，无法中断一个正在等待获取锁的的线程。或者无法再请求获取一个锁时无限地等待下去。<br>Lock是基于CAS LockSupport.park()与LockSupport.unpark实现</p>\n<h2 id=\"请描述一下GC（jvm垃圾回收器）\"><a href=\"#请描述一下GC（jvm垃圾回收器）\" class=\"headerlink\" title=\"请描述一下GC（jvm垃圾回收器）\"></a>请描述一下GC（jvm垃圾回收器）</h2><h2 id=\"Java中的引用有几种\"><a href=\"#Java中的引用有几种\" class=\"headerlink\" title=\"Java中的引用有几种?\"></a>Java中的引用有几种?</h2><p>四种 分别为强引用 弱引用 软引用 虚引用</p>\n<h2 id=\"Java中的threadlocal是怎么用的-threadlocal中的内部实现是怎么样的-哪种引用\"><a href=\"#Java中的threadlocal是怎么用的-threadlocal中的内部实现是怎么样的-哪种引用\" class=\"headerlink\" title=\"Java中的threadlocal是怎么用的? threadlocal中的内部实现是怎么样的? 哪种引用?\"></a>Java中的threadlocal是怎么用的? threadlocal中的内部实现是怎么样的? 哪种引用?</h2><p>new ThreadLocal()调用set get方法<br>软引用<br>使用当前线程的的threadLocals属性 这是一个Map结构</p>\n<h2 id=\"Java中的”final”关键字在多线程的语义中，有什么含义\"><a href=\"#Java中的”final”关键字在多线程的语义中，有什么含义\" class=\"headerlink\" title=\"Java中的”final”关键字在多线程的语义中，有什么含义\"></a>Java中的”final”关键字在多线程的语义中，有什么含义</h2><p>最终的不可修改的</p>\n<h2 id=\"说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\"><a href=\"#说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\" class=\"headerlink\" title=\"说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？\"></a>说说nio的架构，为什么变快了，说说select和buffer都是怎么用的？</h2><pre><code>在操作系统中的实现原理? 如果都是cpu轮训话，会不会对cpu影响太大?\n应用到了linux中的什么特性?\n</code></pre><p>NIO无阻塞IO，基于事件驱动，<br>在Select中绑定Socket 注册相关事件<br>ByteBuffer.allocateDirect() </p>\n<h2 id=\"nio中，-如果不显式的调用-system-gc-那会出现什么问题？\"><a href=\"#nio中，-如果不显式的调用-system-gc-那会出现什么问题？\" class=\"headerlink\" title=\"nio中， 如果不显式的调用 system.gc() 那会出现什么问题？\"></a>nio中， 如果不显式的调用 system.gc() 那会出现什么问题？</h2><p>会引起内存溢出<br>对系统而言分为内核空间和用户空间 而jvm属于用户空间在jvm中垃圾是自动回收，而触发这个垃圾回收器的时机是java堆内存满的时候<br>在NIO中使用的ByteBuffer通过allocateDirect在内核内存中分配了一份空间。而此空间不属于jvm堆所以如果不显示调用gc就会引起系统内存溢出的情况<br>这也是传说中的零拷贝</p>\n<h2 id=\"SimpleDateFormat如果是一个全局变量的话，有什么问题？\"><a href=\"#SimpleDateFormat如果是一个全局变量的话，有什么问题？\" class=\"headerlink\" title=\"SimpleDateFormat如果是一个全局变量的话，有什么问题？\"></a>SimpleDateFormat如果是一个全局变量的话，有什么问题？</h2><p>因为不是同步的 在并发的时候会引起各种错误异常</p>\n<h2 id=\"HashMap的操作中，直接使用keySet-遍历有什么问题\"><a href=\"#HashMap的操作中，直接使用keySet-遍历有什么问题\" class=\"headerlink\" title=\"HashMap的操作中，直接使用keySet()遍历有什么问题\"></a>HashMap的操作中，直接使用keySet()遍历有什么问题</h2><p>性能底下；为啥呢因为会遍历两次</p>\n<h2 id=\"线程池队列中几种策略\"><a href=\"#线程池队列中几种策略\" class=\"headerlink\" title=\"线程池队列中几种策略\"></a>线程池队列中几种策略</h2><p>两种<br>第一种：拒绝任务<br>第二种：丢弃历史任务</p>\n<h2 id=\"ConcurrentHashMap为什么会比HashTable快\"><a href=\"#ConcurrentHashMap为什么会比HashTable快\" class=\"headerlink\" title=\"ConcurrentHashMap为什么会比HashTable快\"></a>ConcurrentHashMap为什么会比HashTable快</h2><h2 id=\"一个数组n-其中的值是1到n-1-找出其中第一个重复的\"><a href=\"#一个数组n-其中的值是1到n-1-找出其中第一个重复的\" class=\"headerlink\" title=\"一个数组n 其中的值是1到n-1 找出其中第一个重复的\"></a>一个数组n 其中的值是1到n-1 找出其中第一个重复的</h2><h2 id=\"两个整数交换不使用第三个变量\"><a href=\"#两个整数交换不使用第三个变量\" class=\"headerlink\" title=\"两个整数交换不使用第三个变量\"></a>两个整数交换不使用第三个变量</h2><p>a=a+b;<br>b=a-b;<br>a=a-b;</p>\n<h2 id=\"手写代码实现LRU数据结构\"><a href=\"#手写代码实现LRU数据结构\" class=\"headerlink\" title=\"手写代码实现LRU数据结构\"></a>手写代码实现LRU数据结构</h2><p>查看<a href=\"http://www.programcreek.com/2013/03/leetcode-lru-cache-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2013/03/leetcode-lru-cache-java/</a></p>\n<h2 id=\"一个数组将奇数放左边偶数放右边\"><a href=\"#一个数组将奇数放左边偶数放右边\" class=\"headerlink\" title=\"一个数组将奇数放左边偶数放右边\"></a>一个数组将奇数放左边偶数放右边</h2><h2 id=\"一个字符串找出第一个相同的字符\"><a href=\"#一个字符串找出第一个相同的字符\" class=\"headerlink\" title=\"一个字符串找出第一个相同的字符\"></a>一个字符串找出第一个相同的字符</h2><h2 id=\"数据库sql优化\"><a href=\"#数据库sql优化\" class=\"headerlink\" title=\"数据库sql优化\"></a>数据库sql优化</h2><h2 id=\"数据库索引该如何建在正确的字段上\"><a href=\"#数据库索引该如何建在正确的字段上\" class=\"headerlink\" title=\"数据库索引该如何建在正确的字段上\"></a>数据库索引该如何建在正确的字段上</h2><h2 id=\"Spring有几种事物隔离\"><a href=\"#Spring有几种事物隔离\" class=\"headerlink\" title=\"Spring有几种事物隔离\"></a>Spring有几种事物隔离</h2><h2 id=\"请描述一下Spring-MVC-从发起请求到后台的处理流程\"><a href=\"#请描述一下Spring-MVC-从发起请求到后台的处理流程\" class=\"headerlink\" title=\"请描述一下Spring MVC 从发起请求到后台的处理流程\"></a>请描述一下Spring MVC 从发起请求到后台的处理流程</h2><h2 id=\"请描述一下JVM类加载\"><a href=\"#请描述一下JVM类加载\" class=\"headerlink\" title=\"请描述一下JVM类加载\"></a>请描述一下JVM类加载</h2>"},{"title":"北京交通运输职业学院网络财务管理系统项目技术经验总结","date":"2012-12-03T13:28:01.000Z","comments":1,"toc":true,"_content":"\n为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 \n\n只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 \n\n这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。 \n<!--more-->\n\n## 基本开发环境\n### JDK版本\n***JDK1.5***\n***JDK1.6***\n不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。\n\n### 中间件服务器\n***JBoss4.0.2***\n①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。\n②：开发中可能被修改的JBoss配置文件\n***控制台打印sql(服务器目录下server/default/conf/log4j.xml) ***\n```xml\n<appender name=\"IBatis\" class=\"org.apache.log4j.ConsoleAppender\"> <layout class=\"org.apache.log4j.PatternLayout\">  \n     <param name=\"ConversionPattern\" value=\"%-4r [%t] %-5p %c %x - %m%n\" />  \n   </layout> \n    <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">  \n         <param name=\"LevelMin\" value=\"DEBUG\" />  \n        <param name=\"LevelMax\" value=\"DEBUG\" /> \n     </filter> \n </appender>  \n<logger name=\"java.sql\" additivity=\"true\"> \n  <level value=\"DEBUG\" />  \n  <appender-ref ref=\"IBatis\" /> \n</logger>\n```\n***日志记录同上配置文件配置 ***\n```xml\n<appender name=\"BMS\" class=\"org.jboss.logging.appender.RollingFileAppender\"> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 \n    <errorHandler class=\"org.jboss.logging.util.OnlyOnceErrorHandler\"/> \n     <param name=\"File\" value=\"${jboss.server.home.dir}/log/bms/bms.log\"/> 这是日志文件保存的路径以及文件名 <param name=\"Append\" value=\"true\"/> 是否追加  \n    <param name=\"MaxFileSize\" value=\"500kB\"/> 指定log文件大小  \n    <param name=\"MaxBackupIndex\" value=\"10\"/> 最大备份数量超过就覆盖原来的 \n    <layout class=\"org.apache.log4j.PatternLayout\"> 输出格式 表达式搞不懂  \n       <!-- The default pattern: Date Priority [Category] Message\\n --> \n         <param name=\"ConversionPattern\" value=\"%d{ABSOLUTE} %-5p [%c{1}] %m%n\"/> </layout>  \n   </appender>  \n<category name=\"com.bopasoft\">  \n    <appender-ref ref=\"BMS\"/> </category> \n <root>  \n  <appender-ref ref=\"CONSOLE\"/> \n   <appender-ref ref=\"FILE\"/>  \n    <appender-ref ref=\"BMS\"/> \n </root>\n```\n最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改\n③：数据库\n***oracle10g ***\n④：IDE工具\nEclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了\n⑤：ANT\n构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。\n\n## 前台\n\n### 修饰框架sitemesh\n\n他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld \n\n&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。\n&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。  \n&lt;decorator:title default=\"...\" /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 \n\n只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。\n\n### 标签\n在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 \n\n### JS\n说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 \n\n## 后台\n### 持久层框架mybatis\n第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 \n### BSF\nBSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 \n\n后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。","source":"_posts/财务管理系统项目技术经验总结.md","raw":"---\ntitle: 北京交通运输职业学院网络财务管理系统项目技术经验总结\ndate: 2012-12-03 21:28:01\ncomments: true\ncategories: 心得体会\ntoc: true \n---\n\n为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 \n\n只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 \n\n这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。 \n<!--more-->\n\n## 基本开发环境\n### JDK版本\n***JDK1.5***\n***JDK1.6***\n不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。\n\n### 中间件服务器\n***JBoss4.0.2***\n①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。\n②：开发中可能被修改的JBoss配置文件\n***控制台打印sql(服务器目录下server/default/conf/log4j.xml) ***\n```xml\n<appender name=\"IBatis\" class=\"org.apache.log4j.ConsoleAppender\"> <layout class=\"org.apache.log4j.PatternLayout\">  \n     <param name=\"ConversionPattern\" value=\"%-4r [%t] %-5p %c %x - %m%n\" />  \n   </layout> \n    <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">  \n         <param name=\"LevelMin\" value=\"DEBUG\" />  \n        <param name=\"LevelMax\" value=\"DEBUG\" /> \n     </filter> \n </appender>  \n<logger name=\"java.sql\" additivity=\"true\"> \n  <level value=\"DEBUG\" />  \n  <appender-ref ref=\"IBatis\" /> \n</logger>\n```\n***日志记录同上配置文件配置 ***\n```xml\n<appender name=\"BMS\" class=\"org.jboss.logging.appender.RollingFileAppender\"> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 \n    <errorHandler class=\"org.jboss.logging.util.OnlyOnceErrorHandler\"/> \n     <param name=\"File\" value=\"${jboss.server.home.dir}/log/bms/bms.log\"/> 这是日志文件保存的路径以及文件名 <param name=\"Append\" value=\"true\"/> 是否追加  \n    <param name=\"MaxFileSize\" value=\"500kB\"/> 指定log文件大小  \n    <param name=\"MaxBackupIndex\" value=\"10\"/> 最大备份数量超过就覆盖原来的 \n    <layout class=\"org.apache.log4j.PatternLayout\"> 输出格式 表达式搞不懂  \n       <!-- The default pattern: Date Priority [Category] Message\\n --> \n         <param name=\"ConversionPattern\" value=\"%d{ABSOLUTE} %-5p [%c{1}] %m%n\"/> </layout>  \n   </appender>  \n<category name=\"com.bopasoft\">  \n    <appender-ref ref=\"BMS\"/> </category> \n <root>  \n  <appender-ref ref=\"CONSOLE\"/> \n   <appender-ref ref=\"FILE\"/>  \n    <appender-ref ref=\"BMS\"/> \n </root>\n```\n最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改\n③：数据库\n***oracle10g ***\n④：IDE工具\nEclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了\n⑤：ANT\n构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。\n\n## 前台\n\n### 修饰框架sitemesh\n\n他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld \n\n&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。\n&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。  \n&lt;decorator:title default=\"...\" /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 \n\n只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。\n\n### 标签\n在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 \n\n### JS\n说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 \n\n## 后台\n### 持久层框架mybatis\n第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 \n### BSF\nBSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 \n\n后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。","slug":"财务管理系统项目技术经验总结","published":1,"updated":"2021-06-25T02:00:18.487Z","layout":"post","photos":[],"link":"","_id":"ckqjatooz004zqkl5se4g8wgb","content":"<p>为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 </p>\n<p>只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 </p>\n<p>这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。<br><a id=\"more\"></a></p>\n<h2 id=\"基本开发环境\"><a href=\"#基本开发环境\" class=\"headerlink\" title=\"基本开发环境\"></a>基本开发环境</h2><h3 id=\"JDK版本\"><a href=\"#JDK版本\" class=\"headerlink\" title=\"JDK版本\"></a>JDK版本</h3><p><strong><em>JDK1.5</em></strong><br><strong><em>JDK1.6</em></strong><br>不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。</p>\n<h3 id=\"中间件服务器\"><a href=\"#中间件服务器\" class=\"headerlink\" title=\"中间件服务器\"></a>中间件服务器</h3><p><strong><em>JBoss4.0.2</em></strong><br>①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。<br>②：开发中可能被修改的JBoss配置文件<br><strong><em>控制台打印sql(服务器目录下server/default/conf/log4j.xml) </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"IBatis\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span>  </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%-4r [%t] %-5p %c %x - %m%n\"</span> /&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span>  </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"true\"</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"IBatis\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>日志记录同上配置文件配置 </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BMS\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.appender.RollingFileAppender\"</span>&gt;</span> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">errorHandler</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.util.OnlyOnceErrorHandler\"</span>/&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jboss.server.home.dir&#125;/log/bms/bms.log\"</span>/&gt;</span> 这是日志文件保存的路径以及文件名 <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Append\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span> 是否追加  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxFileSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"500kB\"</span>/&gt;</span> 指定log文件大小  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxBackupIndex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span> 最大备份数量超过就覆盖原来的 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span> 输出格式 表达式搞不懂  </span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- The default pattern: Date Priority [Category] Message\\n --&gt;</span> </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d&#123;ABSOLUTE&#125; %-5p [%c&#123;1&#125;] %m%n\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.bopasoft\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">category</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span>/&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改<br>③：数据库<br><strong><em>oracle10g </em></strong><br>④：IDE工具<br>Eclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了<br>⑤：ANT<br>构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。</p>\n<h2 id=\"前台\"><a href=\"#前台\" class=\"headerlink\" title=\"前台\"></a>前台</h2><h3 id=\"修饰框架sitemesh\"><a href=\"#修饰框架sitemesh\" class=\"headerlink\" title=\"修饰框架sitemesh\"></a>修饰框架sitemesh</h3><p>他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld </p>\n<p>&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。<br>&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。<br>&lt;decorator:title default=”…” /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 </p>\n<p>只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。</p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 </p>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 </p>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><h3 id=\"持久层框架mybatis\"><a href=\"#持久层框架mybatis\" class=\"headerlink\" title=\"持久层框架mybatis\"></a>持久层框架mybatis</h3><p>第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 </p>\n<h3 id=\"BSF\"><a href=\"#BSF\" class=\"headerlink\" title=\"BSF\"></a>BSF</h3><p>BSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 </p>\n<p>后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。</p>\n","site":{"data":{}},"excerpt":"<p>为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 </p>\n<p>只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 </p>\n<p>这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。<br>","more":"</p>\n<h2 id=\"基本开发环境\"><a href=\"#基本开发环境\" class=\"headerlink\" title=\"基本开发环境\"></a>基本开发环境</h2><h3 id=\"JDK版本\"><a href=\"#JDK版本\" class=\"headerlink\" title=\"JDK版本\"></a>JDK版本</h3><p><strong><em>JDK1.5</em></strong><br><strong><em>JDK1.6</em></strong><br>不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。</p>\n<h3 id=\"中间件服务器\"><a href=\"#中间件服务器\" class=\"headerlink\" title=\"中间件服务器\"></a>中间件服务器</h3><p><strong><em>JBoss4.0.2</em></strong><br>①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。<br>②：开发中可能被修改的JBoss配置文件<br><strong><em>控制台打印sql(服务器目录下server/default/conf/log4j.xml) </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"IBatis\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span>  </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%-4r [%t] %-5p %c %x - %m%n\"</span> /&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span>  </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"true\"</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"IBatis\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>日志记录同上配置文件配置 </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BMS\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.appender.RollingFileAppender\"</span>&gt;</span> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">errorHandler</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.util.OnlyOnceErrorHandler\"</span>/&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jboss.server.home.dir&#125;/log/bms/bms.log\"</span>/&gt;</span> 这是日志文件保存的路径以及文件名 <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Append\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span> 是否追加  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxFileSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"500kB\"</span>/&gt;</span> 指定log文件大小  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxBackupIndex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span> 最大备份数量超过就覆盖原来的 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span> 输出格式 表达式搞不懂  </span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- The default pattern: Date Priority [Category] Message\\n --&gt;</span> </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d&#123;ABSOLUTE&#125; %-5p [%c&#123;1&#125;] %m%n\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.bopasoft\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">category</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span>/&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改<br>③：数据库<br><strong><em>oracle10g </em></strong><br>④：IDE工具<br>Eclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了<br>⑤：ANT<br>构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。</p>\n<h2 id=\"前台\"><a href=\"#前台\" class=\"headerlink\" title=\"前台\"></a>前台</h2><h3 id=\"修饰框架sitemesh\"><a href=\"#修饰框架sitemesh\" class=\"headerlink\" title=\"修饰框架sitemesh\"></a>修饰框架sitemesh</h3><p>他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld </p>\n<p>&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。<br>&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。<br>&lt;decorator:title default=”…” /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 </p>\n<p>只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。</p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 </p>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 </p>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><h3 id=\"持久层框架mybatis\"><a href=\"#持久层框架mybatis\" class=\"headerlink\" title=\"持久层框架mybatis\"></a>持久层框架mybatis</h3><p>第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 </p>\n<h3 id=\"BSF\"><a href=\"#BSF\" class=\"headerlink\" title=\"BSF\"></a>BSF</h3><p>BSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 </p>\n<p>后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。</p>"},{"title":"Epoll源码分析","date":"2022-04-12T16:00:00.000Z","comments":1,"toc":true,"_content":"\nepoll 是Linux平台下的一种特有的多路复用IO实现方式，是管理TCP的组件，与传统的 select 相比，epoll 在性能上有很大的提升。\n<!--more-->\n\n## epoll 的创建\n要使用 epoll 首先需要调用 epoll_create() 函数创建一个 epoll 的句柄，epoll_create() 函数定义如下：\n```c\nint epoll_create(int size);\n```\n参数 size 是由于历史原因遗留下来的，现在不起作用。当用户调用 epoll_create() 函数时，会进入到内核空间，并且调用 sys_epoll_create() 内核函数来创建 epoll 句柄，sys_epoll_create() 函数代码如下：\n```c\nasmlinkage long sys_epoll_create(int size)\n{\n    int error, fd = -1;\n    struct eventpoll *ep;\n\n    error = -EINVAL;\n    if (size <= 0 || (error = ep_alloc(&ep)) < 0) {\n        fd = error;\n        goto error_return;\n    }\n\n    fd = anon_inode_getfd(\"[eventpoll]\", &eventpoll_fops, ep);\n    if (fd < 0)\n        ep_free(ep);\n\nerror_return:\n    return fd;\n}\n```\nsys_epoll_create() 主要做两件事情：\n* 1、调用 ep_alloc() 函数创建并初始化一个 eventpoll 对象。\n* 2、调用 anon_inode_getfd() 函数把 eventpoll 对象映射到一个文件句柄，并返回这个文件句柄。\n\n我们先来看看 eventpoll 这个对象，eventpoll 对象用于管理 epoll 监听的文件列表，其定义如下：\n\n```c\nstruct eventpoll {\n    ...\n    wait_queue_head_t wq;\n    ...\n    struct list_head rdllist;\n    struct rb_root rbr;\n    ...\n};\n```\n\n先来说明一下 eventpoll 对象各个成员的作用：\n\n* wq: 等待队列，当调用 epoll_wait(fd) 时会把进程添加到 eventpoll 对象的 wq 等待队列中。\n* rdllist: 保存已经就绪的文件列表。\n* rbr: 使用红黑树来管理所有被监听的文件。\n\n下图展示了 eventpoll 对象与被监听的文件关系：\n![](008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg)\n\n由于被监听的文件是通过 epitem 对象来管理的，所以上图中的节点都是以 epitem 对象的形式存在的。为什么要使用红黑树来管理被监听的文件呢？这是为了能够通过文件句柄快速查找到其对应的 epitem 对象。红黑树是一种平衡二叉树，如果对其不了解可以查阅相关的文档。\n\n## 向 epoll 添加文件句柄\n前面介绍了怎么创建 epoll，接下来介绍一下怎么向 epoll 添加要监听的文件。\n\n通过调用 epoll_ctl() 函数可以向 epoll 添加要监听的文件，其原型如下：\n```c\nlong epoll_ctl(int epfd, int op, int fd,struct epoll_event *event);\n```\n下面说明一下各个参数的作用：\n\n    epfd: 通过调用 epoll_create() 函数返回的文件句柄。\n    op: 要进行的操作，有3个选项：\n        EPOLL_CTL_ADD：表示要进行添加操作。\n        EPOLL_CTL_DEL：表示要进行删除操作。\n        EPOLL_CTL_MOD：表示要进行修改操作。\n    fd: 要监听的文件句柄。\n    event: 告诉内核需要监听什么事。其定义如下：\n\n\tstruct epoll_event {\n\t\t__uint32_t events;  /* Epoll events */\n\t\tepoll_data_t data;  /* User data variable */\n\t};\n\n    events 可以是以下几个宏的集合：\n\n    EPOLLIN ：表示对应的文件句柄可以读（包括对端SOCKET正常关闭）；\n    EPOLLOUT：表示对应的文件句柄可以写；\n    EPOLLPRI：表示对应的文件句柄有紧急的数据可读（这里应该表示有带外数据到来）；\n    EPOLLERR：表示对应的文件句柄发生错误；\n    EPOLLHUP：表示对应的文件句柄被挂断；\n    EPOLLET：将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\n    EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。\n\n\tdata 用来保存用户自定义数据。\n\nepoll_ctl() 函数会调用 sys_epoll_ctl() 内核函数，sys_epoll_ctl() 内核函数的实现如下：\n```c\nasmlinkage long sys_epoll_ctl(int epfd, int op, \n    int fd, struct epoll_event __user *event)\n{\n    ...\n    file = fget(epfd);\n    tfile = fget(fd);\n    ...\n    ep = file->private_data;\n\n    mutex_lock(&ep->mtx);\n\n    epi = ep_find(ep, tfile, fd);\n\n    error = -EINVAL;\n    switch (op) {\n    case EPOLL_CTL_ADD:\n        if (!epi) {\n            epds.events |= POLLERR | POLLHUP;\n\n            error = ep_insert(ep, &epds, tfile, fd);\n        } else\n            error = -EEXIST;\n        break;\n    ...\n    }\n    mutex_unlock(&ep->mtx);\n\n    ...\n    return error;\n}\n```\n\nsys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。\n\n我们继续来分析添加操作 ep_insert() 函数的实现：\n\n```c\nasmlinkage long sys_epoll_ctl(int epfd, int op, \n    int fd, struct epoll_event __user *event)\n{\n    ...\n    file = fget(epfd);\n    tfile = fget(fd);\n    ...\n    ep = file->private_data;\n\n    mutex_lock(&ep->mtx);\n\n    epi = ep_find(ep, tfile, fd);\n\n    error = -EINVAL;\n    switch (op) {\n    case EPOLL_CTL_ADD:\n        if (!epi) {\n            epds.events |= POLLERR | POLLHUP;\n\n            error = ep_insert(ep, &epds, tfile, fd);\n        } else\n            error = -EEXIST;\n        break;\n    ...\n    }\n    mutex_unlock(&ep->mtx);\n\n    ...\n    return error;\n}\n```\nsys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。\n\n我们继续来分析添加操作 ep_insert() 函数的实现：\n```c\nstatic int ep_insert(struct eventpoll *ep, struct epoll_event *event,\n             struct file *tfile, int fd)\n{\n    ...\n    error = -ENOMEM;\n    // 申请一个 epitem 对象\n    if (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))\n        goto error_return;\n\n    // 初始化 epitem 对象\n    INIT_LIST_HEAD(&epi->rdllink);\n    INIT_LIST_HEAD(&epi->fllink);\n    INIT_LIST_HEAD(&epi->pwqlist);\n    epi->ep = ep;\n    ep_set_ffd(&epi->ffd, tfile, fd);\n    epi->event = *event;\n    epi->nwait = 0;\n    epi->next = EP_UNACTIVE_PTR;\n\n    epq.epi = epi;\n    // 等价于: epq.pt->qproc = ep_ptable_queue_proc\n    init_poll_funcptr(&epq.pt, ep_ptable_queue_proc);\n\n    // 调用被监听文件的 poll 接口. \n    // 这个接口又各自文件系统实现, 如socket的话, 那么这个接口就是 tcp_poll().\n    revents = tfile->f_op->poll(tfile, &epq.pt);\n    ...\n    ep_rbtree_insert(ep, epi); // 把 epitem 对象添加到epoll的红黑树中进行管理\n\n    spin_lock_irqsave(&ep->lock, flags);\n\n    // 如果被监听的文件已经可以进行对应的读写操作\n    // 那么就把文件添加到epoll的就绪队列 rdllink 中, 并且唤醒调用 epoll_wait() 的进程.\n    if ((revents & event->events) && !ep_is_linked(&epi->rdllink)) {\n        list_add_tail(&epi->rdllink, &ep->rdllist);\n\n        if (waitqueue_active(&ep->wq))\n            wake_up_locked(&ep->wq);\n        if (waitqueue_active(&ep->poll_wait))\n            pwake++;\n    }\n\n    spin_unlock_irqrestore(&ep->lock, flags);\n    ...\n    return 0;\n    ...\n}\n```\n被监听的文件是通过 epitem 对象进行管理的，也就是说被监听的文件会被封装成 epitem 对象，然后会被添加到 eventpoll 对象的红黑树中进行管理（如上述代码中的 ep_rbtree_insert(ep, epi)）。\n\ntfile->f_op->poll(tfile, &epq.pt) 这行代码的作用是调用被监听文件的 poll() 接口，如果被监听的文件是一个socket句柄，那么就会调用 tcp_poll()，我们来看看 tcp_poll() 做了什么操作：\n```c\nunsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)\n{\n    struct sock *sk = sock->sk;\n    ...\n    poll_wait(file, sk->sk_sleep, wait);\n    ...\n    return mask;\n}\n\n```\n每个 socket 对象都有个等待队列（waitqueue, ）,用于存放等待 socket 状态更改的进程。\n\n从上述代码可以知道，tcp_poll() 调用了 poll_wait() 函数，而 poll_wait() 最终会调用 ep_ptable_queue_proc() 函数，ep_ptable_queue_proc() 函数实现如下：\n```c\nstatic void ep_ptable_queue_proc(struct file *file, \n    wait_queue_head_t *whead, poll_table *pt)\n{\n    struct epitem *epi = ep_item_from_epqueue(pt);\n    struct eppoll_entry *pwq;\n\n    if (epi->nwait >= 0 && (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) {\n        init_waitqueue_func_entry(&pwq->wait, ep_poll_callback);\n        pwq->whead = whead;\n        pwq->base = epi;\n        add_wait_queue(whead, &pwq->wait);\n        list_add_tail(&pwq->llink, &epi->pwqlist);\n        epi->nwait++;\n    } else {\n        epi->nwait = -1;\n    }\n}\n```\nep_ptable_queue_proc() 函数主要工作是把当前 epitem 对象添加到 socket 对象的等待队列中，并且设置唤醒函数为 ep_poll_callback()，也就是说，当socket状态发生变化时，会触发调用 ep_poll_callback() 函数。ep_poll_callback() 函数实现如下：\n```c\nstatic int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync, void *key)\n{\n    ...\n    // 把就绪的文件添加到就绪队列中\n    list_add_tail(&epi->rdllink, &ep->rdllist);\n\nis_linked:\n    // 唤醒调用 epoll_wait() 而被阻塞的进程\n    if (waitqueue_active(&ep->wq))\n        wake_up_locked(&ep->wq);\n    ...\n    return 1;\n}\n```\nep_poll_callback() 函数的主要工作是把就绪的文件添加到 eventepoll 对象的就绪队列中，然后唤醒调用 epoll_wait() 被阻塞的进程。\n\n## 等待被监听的文件状态发生改变\n把被监听的文件句柄添加到epoll后，就可以通过调用 epoll_wait() 等待被监听的文件状态发生改变。epoll_wait() 调用会阻塞当前进程，当被监听的文件状态发生改变时，epoll_wait() 调用便会返回。\n\nepoll_wait() 系统调用的原型如下：\n```c\nlong epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);\n```\n各个参数的意义：\n\n    epfd: 调用 epoll_create() 函数创建的epoll句柄。\n    events: 用来存放就绪文件列表。\n    maxevents: events 数组的大小。\n    timeout: 设置等待的超时时间。\n\nepoll_wait() 函数会调用 sys_epoll_wait() 内核函数，而 sys_epoll_wait() 函数最终会调用 ep_poll() 函数，我们来看看 ep_poll() 函数的实现：\n\n```c\nstatic int ep_poll(struct eventpoll *ep, \n    struct epoll_event __user *events, int maxevents, long timeout)\n{\n    ...\n    // 如果就绪文件列表为空\n    if (list_empty(&ep->rdllist)) {\n        // 把当前进程添加到epoll的等待队列中\n        init_waitqueue_entry(&wait, current);\n        wait.flags |= WQ_FLAG_EXCLUSIVE;\n        __add_wait_queue(&ep->wq, &wait);\n\n        for (;;) {\n            set_current_state(TASK_INTERRUPTIBLE); // 把当前进程设置为睡眠状态\n            if (!list_empty(&ep->rdllist) || !jtimeout) // 如果有就绪文件或者超时, 退出循环\n                break;\n            if (signal_pending(current)) { // 接收到信号也要退出\n                res = -EINTR;\n                break;\n            }\n\n            spin_unlock_irqrestore(&ep->lock, flags);\n            jtimeout = schedule_timeout(jtimeout); // 让出CPU, 切换到其他进程进行执行\n            spin_lock_irqsave(&ep->lock, flags);\n        }\n        // 有3种情况会执行到这里:\n        // 1. 被监听的文件集合中有就绪的文件\n        // 2. 设置了超时时间并且超时了\n        // 3. 接收到信号\n        __remove_wait_queue(&ep->wq, &wait);\n\n        set_current_state(TASK_RUNNING);\n    }\n    /* 是否有就绪的文件? */\n    eavail = !list_empty(&ep->rdllist);\n\n    spin_unlock_irqrestore(&ep->lock, flags);\n\n    if (!res && eavail \n        && !(res = ep_send_events(ep, events, maxevents)) && jtimeout)\n        goto retry;\n\n    return res;\n}\n```\nep_poll() 函数主要做以下几件事：\n\n    判断被监听的文件集合中是否有就绪的文件，如果有就返回。\n    如果没有就把当前进程添加到epoll的等待队列中，并且进入睡眠。\n    进程会一直睡眠直到有以下几种情况发生：\n        被监听的文件集合中有就绪的文件\n        设置了超时时间并且超时了\n        接收到信号\n    如果有就绪的文件，那么就调用 ep_send_events() 函数把就绪文件复制到 events 参数中。\n    返回就绪文件的个数。\n最后，我们通过一张图来总结epoll的原理：\n![](008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg)\n\n下面通过文字来描述一下这个过程：\n\n    通过调用 epoll_create() 函数创建并初始化一个 eventpoll 对象。\n    通过调用 epoll_ctl() 函数把被监听的文件句柄 (如socket句柄) 封装成 epitem 对象并且添加到 eventpoll 对象的红黑树中进行管理。\n    通过调用 epoll_wait() 函数等待被监听的文件状态发生改变。\n    当被监听的文件状态发生改变时（如socket接收到数据），会把文件句柄对应 epitem 对象添加到 eventpoll 对象的就绪队列 rdllist 中。并且把就绪队列的文件列表复制到 epoll_wait() 函数的 events 参数中。\n    唤醒调用 epoll_wait() 函数被阻塞（睡眠）的进程。\n","source":"_posts/Epoll源码分析.md","raw":"---\ntitle: Epoll源码分析\ndate: 2022-04-13\ncomments: true\ncategories: Linux\ntoc: true\n---\n\nepoll 是Linux平台下的一种特有的多路复用IO实现方式，是管理TCP的组件，与传统的 select 相比，epoll 在性能上有很大的提升。\n<!--more-->\n\n## epoll 的创建\n要使用 epoll 首先需要调用 epoll_create() 函数创建一个 epoll 的句柄，epoll_create() 函数定义如下：\n```c\nint epoll_create(int size);\n```\n参数 size 是由于历史原因遗留下来的，现在不起作用。当用户调用 epoll_create() 函数时，会进入到内核空间，并且调用 sys_epoll_create() 内核函数来创建 epoll 句柄，sys_epoll_create() 函数代码如下：\n```c\nasmlinkage long sys_epoll_create(int size)\n{\n    int error, fd = -1;\n    struct eventpoll *ep;\n\n    error = -EINVAL;\n    if (size <= 0 || (error = ep_alloc(&ep)) < 0) {\n        fd = error;\n        goto error_return;\n    }\n\n    fd = anon_inode_getfd(\"[eventpoll]\", &eventpoll_fops, ep);\n    if (fd < 0)\n        ep_free(ep);\n\nerror_return:\n    return fd;\n}\n```\nsys_epoll_create() 主要做两件事情：\n* 1、调用 ep_alloc() 函数创建并初始化一个 eventpoll 对象。\n* 2、调用 anon_inode_getfd() 函数把 eventpoll 对象映射到一个文件句柄，并返回这个文件句柄。\n\n我们先来看看 eventpoll 这个对象，eventpoll 对象用于管理 epoll 监听的文件列表，其定义如下：\n\n```c\nstruct eventpoll {\n    ...\n    wait_queue_head_t wq;\n    ...\n    struct list_head rdllist;\n    struct rb_root rbr;\n    ...\n};\n```\n\n先来说明一下 eventpoll 对象各个成员的作用：\n\n* wq: 等待队列，当调用 epoll_wait(fd) 时会把进程添加到 eventpoll 对象的 wq 等待队列中。\n* rdllist: 保存已经就绪的文件列表。\n* rbr: 使用红黑树来管理所有被监听的文件。\n\n下图展示了 eventpoll 对象与被监听的文件关系：\n![](008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg)\n\n由于被监听的文件是通过 epitem 对象来管理的，所以上图中的节点都是以 epitem 对象的形式存在的。为什么要使用红黑树来管理被监听的文件呢？这是为了能够通过文件句柄快速查找到其对应的 epitem 对象。红黑树是一种平衡二叉树，如果对其不了解可以查阅相关的文档。\n\n## 向 epoll 添加文件句柄\n前面介绍了怎么创建 epoll，接下来介绍一下怎么向 epoll 添加要监听的文件。\n\n通过调用 epoll_ctl() 函数可以向 epoll 添加要监听的文件，其原型如下：\n```c\nlong epoll_ctl(int epfd, int op, int fd,struct epoll_event *event);\n```\n下面说明一下各个参数的作用：\n\n    epfd: 通过调用 epoll_create() 函数返回的文件句柄。\n    op: 要进行的操作，有3个选项：\n        EPOLL_CTL_ADD：表示要进行添加操作。\n        EPOLL_CTL_DEL：表示要进行删除操作。\n        EPOLL_CTL_MOD：表示要进行修改操作。\n    fd: 要监听的文件句柄。\n    event: 告诉内核需要监听什么事。其定义如下：\n\n\tstruct epoll_event {\n\t\t__uint32_t events;  /* Epoll events */\n\t\tepoll_data_t data;  /* User data variable */\n\t};\n\n    events 可以是以下几个宏的集合：\n\n    EPOLLIN ：表示对应的文件句柄可以读（包括对端SOCKET正常关闭）；\n    EPOLLOUT：表示对应的文件句柄可以写；\n    EPOLLPRI：表示对应的文件句柄有紧急的数据可读（这里应该表示有带外数据到来）；\n    EPOLLERR：表示对应的文件句柄发生错误；\n    EPOLLHUP：表示对应的文件句柄被挂断；\n    EPOLLET：将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\n    EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。\n\n\tdata 用来保存用户自定义数据。\n\nepoll_ctl() 函数会调用 sys_epoll_ctl() 内核函数，sys_epoll_ctl() 内核函数的实现如下：\n```c\nasmlinkage long sys_epoll_ctl(int epfd, int op, \n    int fd, struct epoll_event __user *event)\n{\n    ...\n    file = fget(epfd);\n    tfile = fget(fd);\n    ...\n    ep = file->private_data;\n\n    mutex_lock(&ep->mtx);\n\n    epi = ep_find(ep, tfile, fd);\n\n    error = -EINVAL;\n    switch (op) {\n    case EPOLL_CTL_ADD:\n        if (!epi) {\n            epds.events |= POLLERR | POLLHUP;\n\n            error = ep_insert(ep, &epds, tfile, fd);\n        } else\n            error = -EEXIST;\n        break;\n    ...\n    }\n    mutex_unlock(&ep->mtx);\n\n    ...\n    return error;\n}\n```\n\nsys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。\n\n我们继续来分析添加操作 ep_insert() 函数的实现：\n\n```c\nasmlinkage long sys_epoll_ctl(int epfd, int op, \n    int fd, struct epoll_event __user *event)\n{\n    ...\n    file = fget(epfd);\n    tfile = fget(fd);\n    ...\n    ep = file->private_data;\n\n    mutex_lock(&ep->mtx);\n\n    epi = ep_find(ep, tfile, fd);\n\n    error = -EINVAL;\n    switch (op) {\n    case EPOLL_CTL_ADD:\n        if (!epi) {\n            epds.events |= POLLERR | POLLHUP;\n\n            error = ep_insert(ep, &epds, tfile, fd);\n        } else\n            error = -EEXIST;\n        break;\n    ...\n    }\n    mutex_unlock(&ep->mtx);\n\n    ...\n    return error;\n}\n```\nsys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。\n\n我们继续来分析添加操作 ep_insert() 函数的实现：\n```c\nstatic int ep_insert(struct eventpoll *ep, struct epoll_event *event,\n             struct file *tfile, int fd)\n{\n    ...\n    error = -ENOMEM;\n    // 申请一个 epitem 对象\n    if (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))\n        goto error_return;\n\n    // 初始化 epitem 对象\n    INIT_LIST_HEAD(&epi->rdllink);\n    INIT_LIST_HEAD(&epi->fllink);\n    INIT_LIST_HEAD(&epi->pwqlist);\n    epi->ep = ep;\n    ep_set_ffd(&epi->ffd, tfile, fd);\n    epi->event = *event;\n    epi->nwait = 0;\n    epi->next = EP_UNACTIVE_PTR;\n\n    epq.epi = epi;\n    // 等价于: epq.pt->qproc = ep_ptable_queue_proc\n    init_poll_funcptr(&epq.pt, ep_ptable_queue_proc);\n\n    // 调用被监听文件的 poll 接口. \n    // 这个接口又各自文件系统实现, 如socket的话, 那么这个接口就是 tcp_poll().\n    revents = tfile->f_op->poll(tfile, &epq.pt);\n    ...\n    ep_rbtree_insert(ep, epi); // 把 epitem 对象添加到epoll的红黑树中进行管理\n\n    spin_lock_irqsave(&ep->lock, flags);\n\n    // 如果被监听的文件已经可以进行对应的读写操作\n    // 那么就把文件添加到epoll的就绪队列 rdllink 中, 并且唤醒调用 epoll_wait() 的进程.\n    if ((revents & event->events) && !ep_is_linked(&epi->rdllink)) {\n        list_add_tail(&epi->rdllink, &ep->rdllist);\n\n        if (waitqueue_active(&ep->wq))\n            wake_up_locked(&ep->wq);\n        if (waitqueue_active(&ep->poll_wait))\n            pwake++;\n    }\n\n    spin_unlock_irqrestore(&ep->lock, flags);\n    ...\n    return 0;\n    ...\n}\n```\n被监听的文件是通过 epitem 对象进行管理的，也就是说被监听的文件会被封装成 epitem 对象，然后会被添加到 eventpoll 对象的红黑树中进行管理（如上述代码中的 ep_rbtree_insert(ep, epi)）。\n\ntfile->f_op->poll(tfile, &epq.pt) 这行代码的作用是调用被监听文件的 poll() 接口，如果被监听的文件是一个socket句柄，那么就会调用 tcp_poll()，我们来看看 tcp_poll() 做了什么操作：\n```c\nunsigned int tcp_poll(struct file *file, struct socket *sock, poll_table *wait)\n{\n    struct sock *sk = sock->sk;\n    ...\n    poll_wait(file, sk->sk_sleep, wait);\n    ...\n    return mask;\n}\n\n```\n每个 socket 对象都有个等待队列（waitqueue, ）,用于存放等待 socket 状态更改的进程。\n\n从上述代码可以知道，tcp_poll() 调用了 poll_wait() 函数，而 poll_wait() 最终会调用 ep_ptable_queue_proc() 函数，ep_ptable_queue_proc() 函数实现如下：\n```c\nstatic void ep_ptable_queue_proc(struct file *file, \n    wait_queue_head_t *whead, poll_table *pt)\n{\n    struct epitem *epi = ep_item_from_epqueue(pt);\n    struct eppoll_entry *pwq;\n\n    if (epi->nwait >= 0 && (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) {\n        init_waitqueue_func_entry(&pwq->wait, ep_poll_callback);\n        pwq->whead = whead;\n        pwq->base = epi;\n        add_wait_queue(whead, &pwq->wait);\n        list_add_tail(&pwq->llink, &epi->pwqlist);\n        epi->nwait++;\n    } else {\n        epi->nwait = -1;\n    }\n}\n```\nep_ptable_queue_proc() 函数主要工作是把当前 epitem 对象添加到 socket 对象的等待队列中，并且设置唤醒函数为 ep_poll_callback()，也就是说，当socket状态发生变化时，会触发调用 ep_poll_callback() 函数。ep_poll_callback() 函数实现如下：\n```c\nstatic int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync, void *key)\n{\n    ...\n    // 把就绪的文件添加到就绪队列中\n    list_add_tail(&epi->rdllink, &ep->rdllist);\n\nis_linked:\n    // 唤醒调用 epoll_wait() 而被阻塞的进程\n    if (waitqueue_active(&ep->wq))\n        wake_up_locked(&ep->wq);\n    ...\n    return 1;\n}\n```\nep_poll_callback() 函数的主要工作是把就绪的文件添加到 eventepoll 对象的就绪队列中，然后唤醒调用 epoll_wait() 被阻塞的进程。\n\n## 等待被监听的文件状态发生改变\n把被监听的文件句柄添加到epoll后，就可以通过调用 epoll_wait() 等待被监听的文件状态发生改变。epoll_wait() 调用会阻塞当前进程，当被监听的文件状态发生改变时，epoll_wait() 调用便会返回。\n\nepoll_wait() 系统调用的原型如下：\n```c\nlong epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);\n```\n各个参数的意义：\n\n    epfd: 调用 epoll_create() 函数创建的epoll句柄。\n    events: 用来存放就绪文件列表。\n    maxevents: events 数组的大小。\n    timeout: 设置等待的超时时间。\n\nepoll_wait() 函数会调用 sys_epoll_wait() 内核函数，而 sys_epoll_wait() 函数最终会调用 ep_poll() 函数，我们来看看 ep_poll() 函数的实现：\n\n```c\nstatic int ep_poll(struct eventpoll *ep, \n    struct epoll_event __user *events, int maxevents, long timeout)\n{\n    ...\n    // 如果就绪文件列表为空\n    if (list_empty(&ep->rdllist)) {\n        // 把当前进程添加到epoll的等待队列中\n        init_waitqueue_entry(&wait, current);\n        wait.flags |= WQ_FLAG_EXCLUSIVE;\n        __add_wait_queue(&ep->wq, &wait);\n\n        for (;;) {\n            set_current_state(TASK_INTERRUPTIBLE); // 把当前进程设置为睡眠状态\n            if (!list_empty(&ep->rdllist) || !jtimeout) // 如果有就绪文件或者超时, 退出循环\n                break;\n            if (signal_pending(current)) { // 接收到信号也要退出\n                res = -EINTR;\n                break;\n            }\n\n            spin_unlock_irqrestore(&ep->lock, flags);\n            jtimeout = schedule_timeout(jtimeout); // 让出CPU, 切换到其他进程进行执行\n            spin_lock_irqsave(&ep->lock, flags);\n        }\n        // 有3种情况会执行到这里:\n        // 1. 被监听的文件集合中有就绪的文件\n        // 2. 设置了超时时间并且超时了\n        // 3. 接收到信号\n        __remove_wait_queue(&ep->wq, &wait);\n\n        set_current_state(TASK_RUNNING);\n    }\n    /* 是否有就绪的文件? */\n    eavail = !list_empty(&ep->rdllist);\n\n    spin_unlock_irqrestore(&ep->lock, flags);\n\n    if (!res && eavail \n        && !(res = ep_send_events(ep, events, maxevents)) && jtimeout)\n        goto retry;\n\n    return res;\n}\n```\nep_poll() 函数主要做以下几件事：\n\n    判断被监听的文件集合中是否有就绪的文件，如果有就返回。\n    如果没有就把当前进程添加到epoll的等待队列中，并且进入睡眠。\n    进程会一直睡眠直到有以下几种情况发生：\n        被监听的文件集合中有就绪的文件\n        设置了超时时间并且超时了\n        接收到信号\n    如果有就绪的文件，那么就调用 ep_send_events() 函数把就绪文件复制到 events 参数中。\n    返回就绪文件的个数。\n最后，我们通过一张图来总结epoll的原理：\n![](008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg)\n\n下面通过文字来描述一下这个过程：\n\n    通过调用 epoll_create() 函数创建并初始化一个 eventpoll 对象。\n    通过调用 epoll_ctl() 函数把被监听的文件句柄 (如socket句柄) 封装成 epitem 对象并且添加到 eventpoll 对象的红黑树中进行管理。\n    通过调用 epoll_wait() 函数等待被监听的文件状态发生改变。\n    当被监听的文件状态发生改变时（如socket接收到数据），会把文件句柄对应 epitem 对象添加到 eventpoll 对象的就绪队列 rdllist 中。并且把就绪队列的文件列表复制到 epoll_wait() 函数的 events 参数中。\n    唤醒调用 epoll_wait() 函数被阻塞（睡眠）的进程。\n","slug":"Epoll源码分析","published":1,"updated":"2022-04-13T01:04:33.292Z","_id":"cl1wubgyj0000fsl5u1oytmdb","layout":"post","photos":[],"link":"","content":"<p>epoll 是Linux平台下的一种特有的多路复用IO实现方式，是管理TCP的组件，与传统的 select 相比，epoll 在性能上有很大的提升。<br><a id=\"more\"></a></p>\n<h2 id=\"epoll-的创建\"><a href=\"#epoll-的创建\" class=\"headerlink\" title=\"epoll 的创建\"></a>epoll 的创建</h2><p>要使用 epoll 首先需要调用 epoll_create() 函数创建一个 epoll 的句柄，epoll_create() 函数定义如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>参数 size 是由于历史原因遗留下来的，现在不起作用。当用户调用 epoll_create() 函数时，会进入到内核空间，并且调用 sys_epoll_create() 内核函数来创建 epoll 句柄，sys_epoll_create() 函数代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">asmlinkage <span class=\"keyword\">long</span> <span class=\"title\">sys_epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> error, fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> *<span class=\"title\">ep</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    error = -EINVAL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">0</span> || (error = ep_alloc(&amp;ep)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        fd = error;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> error_return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = anon_inode_getfd(<span class=\"string\">\"[eventpoll]\"</span>, &amp;eventpoll_fops, ep);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ep_free(ep);</span><br><span class=\"line\"></span><br><span class=\"line\">error_return:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>sys_epoll_create() 主要做两件事情：</p>\n<ul>\n<li>1、调用 ep_alloc() 函数创建并初始化一个 eventpoll 对象。</li>\n<li>2、调用 anon_inode_getfd() 函数把 eventpoll 对象映射到一个文件句柄，并返回这个文件句柄。</li>\n</ul>\n<p>我们先来看看 eventpoll 这个对象，eventpoll 对象用于管理 epoll 监听的文件列表，其定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> &#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">wait_queue_head_t</span> wq;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">rdllist</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_root</span> <span class=\"title\">rbr</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>先来说明一下 eventpoll 对象各个成员的作用：</p>\n<ul>\n<li>wq: 等待队列，当调用 epoll_wait(fd) 时会把进程添加到 eventpoll 对象的 wq 等待队列中。</li>\n<li>rdllist: 保存已经就绪的文件列表。</li>\n<li>rbr: 使用红黑树来管理所有被监听的文件。</li>\n</ul>\n<p>下图展示了 eventpoll 对象与被监听的文件关系：<br><img src=\"008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg\" alt></p>\n<p>由于被监听的文件是通过 epitem 对象来管理的，所以上图中的节点都是以 epitem 对象的形式存在的。为什么要使用红黑树来管理被监听的文件呢？这是为了能够通过文件句柄快速查找到其对应的 epitem 对象。红黑树是一种平衡二叉树，如果对其不了解可以查阅相关的文档。</p>\n<h2 id=\"向-epoll-添加文件句柄\"><a href=\"#向-epoll-添加文件句柄\" class=\"headerlink\" title=\"向 epoll 添加文件句柄\"></a>向 epoll 添加文件句柄</h2><p>前面介绍了怎么创建 epoll，接下来介绍一下怎么向 epoll 添加要监听的文件。</p>\n<p>通过调用 epoll_ctl() 函数可以向 epoll 添加要监听的文件，其原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, <span class=\"keyword\">int</span> fd,struct epoll_event *event)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>下面说明一下各个参数的作用：</p>\n<pre><code>epfd: 通过调用 epoll_create() 函数返回的文件句柄。\nop: 要进行的操作，有3个选项：\n    EPOLL_CTL_ADD：表示要进行添加操作。\n    EPOLL_CTL_DEL：表示要进行删除操作。\n    EPOLL_CTL_MOD：表示要进行修改操作。\nfd: 要监听的文件句柄。\nevent: 告诉内核需要监听什么事。其定义如下：\n\nstruct epoll_event {\n    __uint32_t events;  /* Epoll events */\n    epoll_data_t data;  /* User data variable */\n};\n\nevents 可以是以下几个宏的集合：\n\nEPOLLIN ：表示对应的文件句柄可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件句柄可以写；\nEPOLLPRI：表示对应的文件句柄有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件句柄发生错误；\nEPOLLHUP：表示对应的文件句柄被挂断；\nEPOLLET：将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。\n\ndata 用来保存用户自定义数据。\n</code></pre><p>epoll_ctl() 函数会调用 sys_epoll_ctl() 内核函数，sys_epoll_ctl() 内核函数的实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">asmlinkage <span class=\"keyword\">long</span> <span class=\"title\">sys_epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> fd, struct epoll_event __user *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    file = fget(epfd);</span><br><span class=\"line\">    tfile = fget(fd);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ep = file-&gt;private_data;</span><br><span class=\"line\"></span><br><span class=\"line\">    mutex_lock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    epi = ep_find(ep, tfile, fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    error = -EINVAL;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> EPOLL_CTL_ADD:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!epi) &#123;</span><br><span class=\"line\">            epds.events |= POLLERR | POLLHUP;</span><br><span class=\"line\"></span><br><span class=\"line\">            error = ep_insert(ep, &amp;epds, tfile, fd);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            error = -EEXIST;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>sys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。</p>\n<p>我们继续来分析添加操作 ep_insert() 函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">asmlinkage <span class=\"keyword\">long</span> <span class=\"title\">sys_epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> fd, struct epoll_event __user *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    file = fget(epfd);</span><br><span class=\"line\">    tfile = fget(fd);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ep = file-&gt;private_data;</span><br><span class=\"line\"></span><br><span class=\"line\">    mutex_lock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    epi = ep_find(ep, tfile, fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    error = -EINVAL;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> EPOLL_CTL_ADD:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!epi) &#123;</span><br><span class=\"line\">            epds.events |= POLLERR | POLLHUP;</span><br><span class=\"line\"></span><br><span class=\"line\">            error = ep_insert(ep, &amp;epds, tfile, fd);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            error = -EEXIST;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。</p>\n<p>我们继续来分析添加操作 ep_insert() 函数的实现：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ep_insert</span><span class=\"params\">(struct eventpoll *ep, struct epoll_event *event,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             struct file *tfile, <span class=\"keyword\">int</span> fd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    error = -ENOMEM;</span><br><span class=\"line\">    <span class=\"comment\">// 申请一个 epitem 对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> error_return;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 epitem 对象</span></span><br><span class=\"line\">    INIT_LIST_HEAD(&amp;epi-&gt;rdllink);</span><br><span class=\"line\">    INIT_LIST_HEAD(&amp;epi-&gt;fllink);</span><br><span class=\"line\">    INIT_LIST_HEAD(&amp;epi-&gt;pwqlist);</span><br><span class=\"line\">    epi-&gt;ep = ep;</span><br><span class=\"line\">    ep_set_ffd(&amp;epi-&gt;ffd, tfile, fd);</span><br><span class=\"line\">    epi-&gt;event = *event;</span><br><span class=\"line\">    epi-&gt;nwait = <span class=\"number\">0</span>;</span><br><span class=\"line\">    epi-&gt;next = EP_UNACTIVE_PTR;</span><br><span class=\"line\"></span><br><span class=\"line\">    epq.epi = epi;</span><br><span class=\"line\">    <span class=\"comment\">// 等价于: epq.pt-&gt;qproc = ep_ptable_queue_proc</span></span><br><span class=\"line\">    init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用被监听文件的 poll 接口. </span></span><br><span class=\"line\">    <span class=\"comment\">// 这个接口又各自文件系统实现, 如socket的话, 那么这个接口就是 tcp_poll().</span></span><br><span class=\"line\">    revents = tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ep_rbtree_insert(ep, epi); <span class=\"comment\">// 把 epitem 对象添加到epoll的红黑树中进行管理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果被监听的文件已经可以进行对应的读写操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么就把文件添加到epoll的就绪队列 rdllink 中, 并且唤醒调用 epoll_wait() 的进程.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((revents &amp; event-&gt;events) &amp;&amp; !ep_is_linked(&amp;epi-&gt;rdllink)) &#123;</span><br><span class=\"line\">        list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class=\"line\">            wake_up_locked(&amp;ep-&gt;wq);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class=\"line\">            pwake++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>被监听的文件是通过 epitem 对象进行管理的，也就是说被监听的文件会被封装成 epitem 对象，然后会被添加到 eventpoll 对象的红黑树中进行管理（如上述代码中的 ep_rbtree_insert(ep, epi)）。</p>\n<p>tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt) 这行代码的作用是调用被监听文件的 poll() 接口，如果被监听的文件是一个socket句柄，那么就会调用 tcp_poll()，我们来看看 tcp_poll() 做了什么操作：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">tcp_poll</span><span class=\"params\">(struct file *file, struct socket *sock, poll_table *wait)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sock</span> *<span class=\"title\">sk</span> = <span class=\"title\">sock</span>-&gt;<span class=\"title\">sk</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    poll_wait(file, sk-&gt;sk_sleep, wait);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每个 socket 对象都有个等待队列（waitqueue, ）,用于存放等待 socket 状态更改的进程。</p>\n<p>从上述代码可以知道，tcp_poll() 调用了 poll_wait() 函数，而 poll_wait() 最终会调用 ep_ptable_queue_proc() 函数，ep_ptable_queue_proc() 函数实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ep_ptable_queue_proc</span><span class=\"params\">(struct file *file, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">wait_queue_head_t</span> *whead, poll_table *pt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span> *<span class=\"title\">epi</span> = <span class=\"title\">ep_item_from_epqueue</span>(<span class=\"title\">pt</span>);</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eppoll_entry</span> *<span class=\"title\">pwq</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (epi-&gt;nwait &gt;= <span class=\"number\">0</span> &amp;&amp; (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) &#123;</span><br><span class=\"line\">        init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);</span><br><span class=\"line\">        pwq-&gt;whead = whead;</span><br><span class=\"line\">        pwq-&gt;base = epi;</span><br><span class=\"line\">        add_wait_queue(whead, &amp;pwq-&gt;wait);</span><br><span class=\"line\">        list_add_tail(&amp;pwq-&gt;llink, &amp;epi-&gt;pwqlist);</span><br><span class=\"line\">        epi-&gt;nwait++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        epi-&gt;nwait = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ep_ptable_queue_proc() 函数主要工作是把当前 epitem 对象添加到 socket 对象的等待队列中，并且设置唤醒函数为 ep_poll_callback()，也就是说，当socket状态发生变化时，会触发调用 ep_poll_callback() 函数。ep_poll_callback() 函数实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ep_poll_callback</span><span class=\"params\">(<span class=\"keyword\">wait_queue_t</span> *wait, <span class=\"keyword\">unsigned</span> mode, <span class=\"keyword\">int</span> sync, <span class=\"keyword\">void</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 把就绪的文件添加到就绪队列中</span></span><br><span class=\"line\">    list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class=\"line\"></span><br><span class=\"line\">is_linked:</span><br><span class=\"line\">    <span class=\"comment\">// 唤醒调用 epoll_wait() 而被阻塞的进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class=\"line\">        wake_up_locked(&amp;ep-&gt;wq);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ep_poll_callback() 函数的主要工作是把就绪的文件添加到 eventepoll 对象的就绪队列中，然后唤醒调用 epoll_wait() 被阻塞的进程。</p>\n<h2 id=\"等待被监听的文件状态发生改变\"><a href=\"#等待被监听的文件状态发生改变\" class=\"headerlink\" title=\"等待被监听的文件状态发生改变\"></a>等待被监听的文件状态发生改变</h2><p>把被监听的文件句柄添加到epoll后，就可以通过调用 epoll_wait() 等待被监听的文件状态发生改变。epoll_wait() 调用会阻塞当前进程，当被监听的文件状态发生改变时，epoll_wait() 调用便会返回。</p>\n<p>epoll_wait() 系统调用的原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">epoll_wait</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, struct epoll_event *events, <span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>各个参数的意义：</p>\n<pre><code>epfd: 调用 epoll_create() 函数创建的epoll句柄。\nevents: 用来存放就绪文件列表。\nmaxevents: events 数组的大小。\ntimeout: 设置等待的超时时间。\n</code></pre><p>epoll_wait() 函数会调用 sys_epoll_wait() 内核函数，而 sys_epoll_wait() 函数最终会调用 ep_poll() 函数，我们来看看 ep_poll() 函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ep_poll</span><span class=\"params\">(struct eventpoll *ep, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    struct epoll_event __user *events, <span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">long</span> timeout)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 如果就绪文件列表为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list_empty(&amp;ep-&gt;rdllist)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前进程添加到epoll的等待队列中</span></span><br><span class=\"line\">        init_waitqueue_entry(&amp;wait, current);</span><br><span class=\"line\">        wait.flags |= WQ_FLAG_EXCLUSIVE;</span><br><span class=\"line\">        __add_wait_queue(&amp;ep-&gt;wq, &amp;wait);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            set_current_state(TASK_INTERRUPTIBLE); <span class=\"comment\">// 把当前进程设置为睡眠状态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!list_empty(&amp;ep-&gt;rdllist) || !jtimeout) <span class=\"comment\">// 如果有就绪文件或者超时, 退出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (signal_pending(current)) &#123; <span class=\"comment\">// 接收到信号也要退出</span></span><br><span class=\"line\">                res = -EINTR;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\">            jtimeout = schedule_timeout(jtimeout); <span class=\"comment\">// 让出CPU, 切换到其他进程进行执行</span></span><br><span class=\"line\">            spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 有3种情况会执行到这里:</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 被监听的文件集合中有就绪的文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 设置了超时时间并且超时了</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 接收到信号</span></span><br><span class=\"line\">        __remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);</span><br><span class=\"line\"></span><br><span class=\"line\">        set_current_state(TASK_RUNNING);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 是否有就绪的文件? */</span></span><br><span class=\"line\">    eavail = !list_empty(&amp;ep-&gt;rdllist);</span><br><span class=\"line\"></span><br><span class=\"line\">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res &amp;&amp; eavail </span><br><span class=\"line\">        &amp;&amp; !(res = ep_send_events(ep, events, maxevents)) &amp;&amp; jtimeout)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ep_poll() 函数主要做以下几件事：</p>\n<pre><code>判断被监听的文件集合中是否有就绪的文件，如果有就返回。\n如果没有就把当前进程添加到epoll的等待队列中，并且进入睡眠。\n进程会一直睡眠直到有以下几种情况发生：\n    被监听的文件集合中有就绪的文件\n    设置了超时时间并且超时了\n    接收到信号\n如果有就绪的文件，那么就调用 ep_send_events() 函数把就绪文件复制到 events 参数中。\n返回就绪文件的个数。\n</code></pre><p>最后，我们通过一张图来总结epoll的原理：<br><img src=\"008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg\" alt></p>\n<p>下面通过文字来描述一下这个过程：</p>\n<pre><code>通过调用 epoll_create() 函数创建并初始化一个 eventpoll 对象。\n通过调用 epoll_ctl() 函数把被监听的文件句柄 (如socket句柄) 封装成 epitem 对象并且添加到 eventpoll 对象的红黑树中进行管理。\n通过调用 epoll_wait() 函数等待被监听的文件状态发生改变。\n当被监听的文件状态发生改变时（如socket接收到数据），会把文件句柄对应 epitem 对象添加到 eventpoll 对象的就绪队列 rdllist 中。并且把就绪队列的文件列表复制到 epoll_wait() 函数的 events 参数中。\n唤醒调用 epoll_wait() 函数被阻塞（睡眠）的进程。\n</code></pre>","site":{"data":{}},"excerpt":"<p>epoll 是Linux平台下的一种特有的多路复用IO实现方式，是管理TCP的组件，与传统的 select 相比，epoll 在性能上有很大的提升。<br>","more":"</p>\n<h2 id=\"epoll-的创建\"><a href=\"#epoll-的创建\" class=\"headerlink\" title=\"epoll 的创建\"></a>epoll 的创建</h2><p>要使用 epoll 首先需要调用 epoll_create() 函数创建一个 epoll 的句柄，epoll_create() 函数定义如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>参数 size 是由于历史原因遗留下来的，现在不起作用。当用户调用 epoll_create() 函数时，会进入到内核空间，并且调用 sys_epoll_create() 内核函数来创建 epoll 句柄，sys_epoll_create() 函数代码如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">asmlinkage <span class=\"keyword\">long</span> <span class=\"title\">sys_epoll_create</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> error, fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> *<span class=\"title\">ep</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    error = -EINVAL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">0</span> || (error = ep_alloc(&amp;ep)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        fd = error;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> error_return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = anon_inode_getfd(<span class=\"string\">\"[eventpoll]\"</span>, &amp;eventpoll_fops, ep);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ep_free(ep);</span><br><span class=\"line\"></span><br><span class=\"line\">error_return:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>sys_epoll_create() 主要做两件事情：</p>\n<ul>\n<li>1、调用 ep_alloc() 函数创建并初始化一个 eventpoll 对象。</li>\n<li>2、调用 anon_inode_getfd() 函数把 eventpoll 对象映射到一个文件句柄，并返回这个文件句柄。</li>\n</ul>\n<p>我们先来看看 eventpoll 这个对象，eventpoll 对象用于管理 epoll 监听的文件列表，其定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eventpoll</span> &#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">wait_queue_head_t</span> wq;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">rdllist</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rb_root</span> <span class=\"title\">rbr</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>先来说明一下 eventpoll 对象各个成员的作用：</p>\n<ul>\n<li>wq: 等待队列，当调用 epoll_wait(fd) 时会把进程添加到 eventpoll 对象的 wq 等待队列中。</li>\n<li>rdllist: 保存已经就绪的文件列表。</li>\n<li>rbr: 使用红黑树来管理所有被监听的文件。</li>\n</ul>\n<p>下图展示了 eventpoll 对象与被监听的文件关系：<br><img src=\"008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg\" alt></p>\n<p>由于被监听的文件是通过 epitem 对象来管理的，所以上图中的节点都是以 epitem 对象的形式存在的。为什么要使用红黑树来管理被监听的文件呢？这是为了能够通过文件句柄快速查找到其对应的 epitem 对象。红黑树是一种平衡二叉树，如果对其不了解可以查阅相关的文档。</p>\n<h2 id=\"向-epoll-添加文件句柄\"><a href=\"#向-epoll-添加文件句柄\" class=\"headerlink\" title=\"向 epoll 添加文件句柄\"></a>向 epoll 添加文件句柄</h2><p>前面介绍了怎么创建 epoll，接下来介绍一下怎么向 epoll 添加要监听的文件。</p>\n<p>通过调用 epoll_ctl() 函数可以向 epoll 添加要监听的文件，其原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, <span class=\"keyword\">int</span> fd,struct epoll_event *event)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>下面说明一下各个参数的作用：</p>\n<pre><code>epfd: 通过调用 epoll_create() 函数返回的文件句柄。\nop: 要进行的操作，有3个选项：\n    EPOLL_CTL_ADD：表示要进行添加操作。\n    EPOLL_CTL_DEL：表示要进行删除操作。\n    EPOLL_CTL_MOD：表示要进行修改操作。\nfd: 要监听的文件句柄。\nevent: 告诉内核需要监听什么事。其定义如下：\n\nstruct epoll_event {\n    __uint32_t events;  /* Epoll events */\n    epoll_data_t data;  /* User data variable */\n};\n\nevents 可以是以下几个宏的集合：\n\nEPOLLIN ：表示对应的文件句柄可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件句柄可以写；\nEPOLLPRI：表示对应的文件句柄有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件句柄发生错误；\nEPOLLHUP：表示对应的文件句柄被挂断；\nEPOLLET：将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。\n\ndata 用来保存用户自定义数据。\n</code></pre><p>epoll_ctl() 函数会调用 sys_epoll_ctl() 内核函数，sys_epoll_ctl() 内核函数的实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">asmlinkage <span class=\"keyword\">long</span> <span class=\"title\">sys_epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> fd, struct epoll_event __user *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    file = fget(epfd);</span><br><span class=\"line\">    tfile = fget(fd);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ep = file-&gt;private_data;</span><br><span class=\"line\"></span><br><span class=\"line\">    mutex_lock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    epi = ep_find(ep, tfile, fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    error = -EINVAL;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> EPOLL_CTL_ADD:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!epi) &#123;</span><br><span class=\"line\">            epds.events |= POLLERR | POLLHUP;</span><br><span class=\"line\"></span><br><span class=\"line\">            error = ep_insert(ep, &amp;epds, tfile, fd);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            error = -EEXIST;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>sys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。</p>\n<p>我们继续来分析添加操作 ep_insert() 函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">asmlinkage <span class=\"keyword\">long</span> <span class=\"title\">sys_epoll_ctl</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, <span class=\"keyword\">int</span> op, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> fd, struct epoll_event __user *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    file = fget(epfd);</span><br><span class=\"line\">    tfile = fget(fd);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ep = file-&gt;private_data;</span><br><span class=\"line\"></span><br><span class=\"line\">    mutex_lock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    epi = ep_find(ep, tfile, fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    error = -EINVAL;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> EPOLL_CTL_ADD:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!epi) &#123;</span><br><span class=\"line\">            epds.events |= POLLERR | POLLHUP;</span><br><span class=\"line\"></span><br><span class=\"line\">            error = ep_insert(ep, &amp;epds, tfile, fd);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            error = -EEXIST;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mutex_unlock(&amp;ep-&gt;mtx);</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>sys_epoll_ctl() 函数会根据传入不同 op 的值来进行不同操作，比如传入 EPOLL_CTL_ADD 表示要进行添加操作，那么就调用 ep_insert() 函数来进行添加操作。</p>\n<p>我们继续来分析添加操作 ep_insert() 函数的实现：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ep_insert</span><span class=\"params\">(struct eventpoll *ep, struct epoll_event *event,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             struct file *tfile, <span class=\"keyword\">int</span> fd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    error = -ENOMEM;</span><br><span class=\"line\">    <span class=\"comment\">// 申请一个 epitem 对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL)))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> error_return;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化 epitem 对象</span></span><br><span class=\"line\">    INIT_LIST_HEAD(&amp;epi-&gt;rdllink);</span><br><span class=\"line\">    INIT_LIST_HEAD(&amp;epi-&gt;fllink);</span><br><span class=\"line\">    INIT_LIST_HEAD(&amp;epi-&gt;pwqlist);</span><br><span class=\"line\">    epi-&gt;ep = ep;</span><br><span class=\"line\">    ep_set_ffd(&amp;epi-&gt;ffd, tfile, fd);</span><br><span class=\"line\">    epi-&gt;event = *event;</span><br><span class=\"line\">    epi-&gt;nwait = <span class=\"number\">0</span>;</span><br><span class=\"line\">    epi-&gt;next = EP_UNACTIVE_PTR;</span><br><span class=\"line\"></span><br><span class=\"line\">    epq.epi = epi;</span><br><span class=\"line\">    <span class=\"comment\">// 等价于: epq.pt-&gt;qproc = ep_ptable_queue_proc</span></span><br><span class=\"line\">    init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用被监听文件的 poll 接口. </span></span><br><span class=\"line\">    <span class=\"comment\">// 这个接口又各自文件系统实现, 如socket的话, 那么这个接口就是 tcp_poll().</span></span><br><span class=\"line\">    revents = tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ep_rbtree_insert(ep, epi); <span class=\"comment\">// 把 epitem 对象添加到epoll的红黑树中进行管理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果被监听的文件已经可以进行对应的读写操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么就把文件添加到epoll的就绪队列 rdllink 中, 并且唤醒调用 epoll_wait() 的进程.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((revents &amp; event-&gt;events) &amp;&amp; !ep_is_linked(&amp;epi-&gt;rdllink)) &#123;</span><br><span class=\"line\">        list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class=\"line\">            wake_up_locked(&amp;ep-&gt;wq);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class=\"line\">            pwake++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>被监听的文件是通过 epitem 对象进行管理的，也就是说被监听的文件会被封装成 epitem 对象，然后会被添加到 eventpoll 对象的红黑树中进行管理（如上述代码中的 ep_rbtree_insert(ep, epi)）。</p>\n<p>tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt) 这行代码的作用是调用被监听文件的 poll() 接口，如果被监听的文件是一个socket句柄，那么就会调用 tcp_poll()，我们来看看 tcp_poll() 做了什么操作：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">tcp_poll</span><span class=\"params\">(struct file *file, struct socket *sock, poll_table *wait)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sock</span> *<span class=\"title\">sk</span> = <span class=\"title\">sock</span>-&gt;<span class=\"title\">sk</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    poll_wait(file, sk-&gt;sk_sleep, wait);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每个 socket 对象都有个等待队列（waitqueue, ）,用于存放等待 socket 状态更改的进程。</p>\n<p>从上述代码可以知道，tcp_poll() 调用了 poll_wait() 函数，而 poll_wait() 最终会调用 ep_ptable_queue_proc() 函数，ep_ptable_queue_proc() 函数实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ep_ptable_queue_proc</span><span class=\"params\">(struct file *file, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">wait_queue_head_t</span> *whead, poll_table *pt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">epitem</span> *<span class=\"title\">epi</span> = <span class=\"title\">ep_item_from_epqueue</span>(<span class=\"title\">pt</span>);</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">eppoll_entry</span> *<span class=\"title\">pwq</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (epi-&gt;nwait &gt;= <span class=\"number\">0</span> &amp;&amp; (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) &#123;</span><br><span class=\"line\">        init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);</span><br><span class=\"line\">        pwq-&gt;whead = whead;</span><br><span class=\"line\">        pwq-&gt;base = epi;</span><br><span class=\"line\">        add_wait_queue(whead, &amp;pwq-&gt;wait);</span><br><span class=\"line\">        list_add_tail(&amp;pwq-&gt;llink, &amp;epi-&gt;pwqlist);</span><br><span class=\"line\">        epi-&gt;nwait++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        epi-&gt;nwait = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ep_ptable_queue_proc() 函数主要工作是把当前 epitem 对象添加到 socket 对象的等待队列中，并且设置唤醒函数为 ep_poll_callback()，也就是说，当socket状态发生变化时，会触发调用 ep_poll_callback() 函数。ep_poll_callback() 函数实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ep_poll_callback</span><span class=\"params\">(<span class=\"keyword\">wait_queue_t</span> *wait, <span class=\"keyword\">unsigned</span> mode, <span class=\"keyword\">int</span> sync, <span class=\"keyword\">void</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 把就绪的文件添加到就绪队列中</span></span><br><span class=\"line\">    list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class=\"line\"></span><br><span class=\"line\">is_linked:</span><br><span class=\"line\">    <span class=\"comment\">// 唤醒调用 epoll_wait() 而被阻塞的进程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class=\"line\">        wake_up_locked(&amp;ep-&gt;wq);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ep_poll_callback() 函数的主要工作是把就绪的文件添加到 eventepoll 对象的就绪队列中，然后唤醒调用 epoll_wait() 被阻塞的进程。</p>\n<h2 id=\"等待被监听的文件状态发生改变\"><a href=\"#等待被监听的文件状态发生改变\" class=\"headerlink\" title=\"等待被监听的文件状态发生改变\"></a>等待被监听的文件状态发生改变</h2><p>把被监听的文件句柄添加到epoll后，就可以通过调用 epoll_wait() 等待被监听的文件状态发生改变。epoll_wait() 调用会阻塞当前进程，当被监听的文件状态发生改变时，epoll_wait() 调用便会返回。</p>\n<p>epoll_wait() 系统调用的原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">epoll_wait</span><span class=\"params\">(<span class=\"keyword\">int</span> epfd, struct epoll_event *events, <span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>各个参数的意义：</p>\n<pre><code>epfd: 调用 epoll_create() 函数创建的epoll句柄。\nevents: 用来存放就绪文件列表。\nmaxevents: events 数组的大小。\ntimeout: 设置等待的超时时间。\n</code></pre><p>epoll_wait() 函数会调用 sys_epoll_wait() 内核函数，而 sys_epoll_wait() 函数最终会调用 ep_poll() 函数，我们来看看 ep_poll() 函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ep_poll</span><span class=\"params\">(struct eventpoll *ep, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    struct epoll_event __user *events, <span class=\"keyword\">int</span> maxevents, <span class=\"keyword\">long</span> timeout)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 如果就绪文件列表为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list_empty(&amp;ep-&gt;rdllist)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把当前进程添加到epoll的等待队列中</span></span><br><span class=\"line\">        init_waitqueue_entry(&amp;wait, current);</span><br><span class=\"line\">        wait.flags |= WQ_FLAG_EXCLUSIVE;</span><br><span class=\"line\">        __add_wait_queue(&amp;ep-&gt;wq, &amp;wait);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            set_current_state(TASK_INTERRUPTIBLE); <span class=\"comment\">// 把当前进程设置为睡眠状态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!list_empty(&amp;ep-&gt;rdllist) || !jtimeout) <span class=\"comment\">// 如果有就绪文件或者超时, 退出循环</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (signal_pending(current)) &#123; <span class=\"comment\">// 接收到信号也要退出</span></span><br><span class=\"line\">                res = -EINTR;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\">            jtimeout = schedule_timeout(jtimeout); <span class=\"comment\">// 让出CPU, 切换到其他进程进行执行</span></span><br><span class=\"line\">            spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 有3种情况会执行到这里:</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 被监听的文件集合中有就绪的文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 设置了超时时间并且超时了</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 接收到信号</span></span><br><span class=\"line\">        __remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);</span><br><span class=\"line\"></span><br><span class=\"line\">        set_current_state(TASK_RUNNING);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 是否有就绪的文件? */</span></span><br><span class=\"line\">    eavail = !list_empty(&amp;ep-&gt;rdllist);</span><br><span class=\"line\"></span><br><span class=\"line\">    spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res &amp;&amp; eavail </span><br><span class=\"line\">        &amp;&amp; !(res = ep_send_events(ep, events, maxevents)) &amp;&amp; jtimeout)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> retry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ep_poll() 函数主要做以下几件事：</p>\n<pre><code>判断被监听的文件集合中是否有就绪的文件，如果有就返回。\n如果没有就把当前进程添加到epoll的等待队列中，并且进入睡眠。\n进程会一直睡眠直到有以下几种情况发生：\n    被监听的文件集合中有就绪的文件\n    设置了超时时间并且超时了\n    接收到信号\n如果有就绪的文件，那么就调用 ep_send_events() 函数把就绪文件复制到 events 参数中。\n返回就绪文件的个数。\n</code></pre><p>最后，我们通过一张图来总结epoll的原理：<br><img src=\"008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg\" alt></p>\n<p>下面通过文字来描述一下这个过程：</p>\n<pre><code>通过调用 epoll_create() 函数创建并初始化一个 eventpoll 对象。\n通过调用 epoll_ctl() 函数把被监听的文件句柄 (如socket句柄) 封装成 epitem 对象并且添加到 eventpoll 对象的红黑树中进行管理。\n通过调用 epoll_wait() 函数等待被监听的文件状态发生改变。\n当被监听的文件状态发生改变时（如socket接收到数据），会把文件句柄对应 epitem 对象添加到 eventpoll 对象的就绪队列 rdllist 中。并且把就绪队列的文件列表复制到 epoll_wait() 函数的 events 参数中。\n唤醒调用 epoll_wait() 函数被阻塞（睡眠）的进程。\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/Android反编译与混淆技术完全解析/651.png","slug":"651.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","slug":"58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","post":"ckqjatol5000wqkl5nen2qdpp","modified":0,"renderable":0},{"_id":"source/_posts/第十章 项目质量管理/20161106230900.png","slug":"20161106230900.png","post":"ckqjaton4003gqkl5zglguliw","modified":0,"renderable":0},{"_id":"source/_posts/第十章 项目质量管理/20161106230813.png","slug":"20161106230813.png","post":"ckqjaton4003gqkl5zglguliw","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165124.png","slug":"20161109165124.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/MySQL+Keepalived实现双机热备/1.png","slug":"1.png","post":"ckqjatolb0015qkl582jcexle","modified":0,"renderable":0},{"_id":"source/_posts/Netty-4.1.4源码分析二之管道设计模式/20150502184145168.png","slug":"20150502184145168.png","post":"ckqjatoli001fqkl5taf4bm7o","modified":0,"renderable":0},{"_id":"source/_posts/Nginx+Tomcat集群/003vMReezy6OUXDo7kt61&690.jpg","slug":"003vMReezy6OUXDo7kt61&690.jpg","post":"ckqjatoln001mqkl55k246tw7","modified":0,"renderable":0},{"_id":"source/_posts/中间件远程调试设置/b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","slug":"b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","post":"ckqjatom30028qkl58yj0ikxp","modified":0,"renderable":0},{"_id":"source/_posts/企业体检开发框架培训/开发框架架构图.png","slug":"开发框架架构图.png","post":"ckqjatom8002fqkl5y10b0wyt","modified":0,"renderable":0},{"_id":"source/_posts/第十三章 项目合同管理/20161107215359.png","slug":"20161107215359.png","post":"ckqjatomu0038qkl5pch3yt9k","modified":0,"renderable":0},{"_id":"source/_posts/HTTP Keep-Alive/2013_12_20_02.png","slug":"2013_12_20_02.png","post":"ckqjatok00004qkl5sv95klzs","modified":0,"renderable":0},{"_id":"source/_posts/HTTP Keep-Alive/20161227112307.png","slug":"20161227112307.png","post":"ckqjatok00004qkl5sv95klzs","modified":0,"renderable":0},{"_id":"source/_posts/Java动态编程/43918004_1.png","slug":"43918004_1.png","post":"ckqjatol0000rqkl5stcrmpif","modified":0,"renderable":0},{"_id":"source/_posts/Java动态编程/43918004_2.png","slug":"43918004_2.png","post":"ckqjatol0000rqkl5stcrmpif","modified":0,"renderable":0},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/01.png","slug":"01.png","post":"ckqjatol1000sqkl5mmor3q7d","modified":0,"renderable":0},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/02.png","slug":"02.png","post":"ckqjatol1000sqkl5mmor3q7d","modified":0,"renderable":0},{"_id":"source/_posts/第一章 信息化知识/20161104112204.png","slug":"20161104112204.png","post":"ckqjatoml002xqkl5drw4pnds","modified":0,"renderable":0},{"_id":"source/_posts/第一章 信息化知识/20161105163604.png","slug":"20161105163604.png","post":"ckqjatoml002xqkl5drw4pnds","modified":0,"renderable":0},{"_id":"source/_posts/Netty-4.1.4源码分析一/components.png","slug":"components.png","post":"ckqjatolk001hqkl5n01bt9lo","modified":0,"renderable":0},{"_id":"source/_posts/Netty-4.1.4源码分析一/threadmodel.png","slug":"threadmodel.png","post":"ckqjatolk001hqkl5n01bt9lo","modified":0,"renderable":0},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsC8Oogc8&690.jpg","slug":"003vMReezy6OWsC8Oogc8&690.jpg","post":"ckqjatol6000xqkl5nlsjfn1z","modified":0,"renderable":0},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsKgs3pa3&690.jpg","slug":"003vMReezy6OWsKgs3pa3&690.jpg","post":"ckqjatol6000xqkl5nlsjfn1z","modified":0,"renderable":0},{"_id":"source/_posts/Java设计模式之观察者模式/class.jpg","slug":"class.jpg","post":"ckqjatol6000xqkl5nlsjfn1z","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/1.png","slug":"1.png","post":"ckqjatolg001cqkl5k5n4k9w0","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/2.png","slug":"2.png","post":"ckqjatolg001cqkl5k5n4k9w0","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/3.png","slug":"3.png","post":"ckqjatolg001cqkl5k5n4k9w0","modified":0,"renderable":0},{"_id":"source/_posts/漫谈工程师的三观/444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","slug":"444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","post":"ckqjatomj002uqkl5xdas8jmq","modified":0,"renderable":0},{"_id":"source/_posts/漫谈工程师的三观/604bf4b4226f180ff45fa8bce5874793_b.png","slug":"604bf4b4226f180ff45fa8bce5874793_b.png","post":"ckqjatomj002uqkl5xdas8jmq","modified":0,"renderable":0},{"_id":"source/_posts/漫谈工程师的三观/7e79f43fc4c4cfa8426a2008080842d6_b.jpg","slug":"7e79f43fc4c4cfa8426a2008080842d6_b.jpg","post":"ckqjatomj002uqkl5xdas8jmq","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/1.png","slug":"1.png","post":"ckqjatolc0017qkl582x8erdp","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/2.png","slug":"2.png","post":"ckqjatolc0017qkl582x8erdp","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/3.png","slug":"3.png","post":"ckqjatolc0017qkl582x8erdp","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/4.png","slug":"4.png","post":"ckqjatolc0017qkl582x8erdp","modified":0,"renderable":0},{"_id":"source/_posts/第八章 项目进度管理/20161106214152.png","slug":"20161106214152.png","post":"ckqjatomy003cqkl5gfxmr1qw","modified":0,"renderable":0},{"_id":"source/_posts/第八章 项目进度管理/20161106214322.png","slug":"20161106214322.png","post":"ckqjatomy003cqkl5gfxmr1qw","modified":0,"renderable":0},{"_id":"source/_posts/第八章 项目进度管理/20161106214712.png","slug":"20161106214712.png","post":"ckqjatomy003cqkl5gfxmr1qw","modified":0,"renderable":0},{"_id":"source/_posts/第八章 项目进度管理/20161106215655.png","slug":"20161106215655.png","post":"ckqjatomy003cqkl5gfxmr1qw","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","slug":"5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","post":"ckqjatol5000wqkl5nen2qdpp","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","slug":"7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","post":"ckqjatol5000wqkl5nen2qdpp","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/b03533fa828ba61e7fad2a384234970a304e5962.jpg","slug":"b03533fa828ba61e7fad2a384234970a304e5962.jpg","post":"ckqjatol5000wqkl5nen2qdpp","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","slug":"cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","post":"ckqjatol5000wqkl5nen2qdpp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KHLwtFe7&690.png","slug":"003vMReezy6P1KHLwtFe7&690.png","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KnAQkx19&690.png","slug":"003vMReezy6P1KnAQkx19&690.png","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1LyH3gqae&690.jpg","slug":"003vMReezy6P1LyH3gqae&690.jpg","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MG9JTO50&690.png","slug":"003vMReezy6P1MG9JTO50&690.png","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MlAy3H5d&690.jpg","slug":"003vMReezy6P1MlAy3H5d&690.jpg","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1Mzjamje7&690.jpg","slug":"003vMReezy6P1Mzjamje7&690.jpg","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1O1zJBg32&690.jpg","slug":"003vMReezy6P1O1zJBg32&690.jpg","post":"ckqjatoka0007qkl51zjuxq71","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109155449.png","slug":"20161109155449.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109163412.png","slug":"20161109163412.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109164006.png","slug":"20161109164006.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165451.png","slug":"20161109165451.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165613.png","slug":"20161109165613.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165818.png","slug":"20161109165818.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/第四章 项目管理一般知识/20161109165849.png","slug":"20161109165849.png","post":"ckqjaton8003jqkl5bnka3ejz","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","slug":"203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","slug":"241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","slug":"6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","slug":"a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/aec379310a55b31966f8dc0140a98226cffc1744.jpg","slug":"aec379310a55b31966f8dc0140a98226cffc1744.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","slug":"d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","slug":"d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","slug":"e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","post":"ckqjatone003nqkl5cm5qyvg9","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.gif","slug":"0.gif","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.jpg","slug":"0.jpg","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/1.png","slug":"1.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.gif","slug":"2.gif","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.png","slug":"2.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/5.png","slug":"5.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/640.png","slug":"640.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/641.png","slug":"641.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/642.png","slug":"642.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/643.png","slug":"643.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/644.jpg","slug":"644.jpg","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/645.png","slug":"645.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/646.png","slug":"646.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/647.png","slug":"647.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/648.png","slug":"648.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/650.png","slug":"650.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/653.png","slug":"653.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/655.png","slug":"655.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/656.png","slug":"656.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/657.png","slug":"657.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/658.png","slug":"658.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/659.png","slug":"659.png","post":"ckqjatojt0001qkl516kc5ito","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","slug":"023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","slug":"0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/1e30e924b899a90168ce99371f950a7b0208f53c.jpg","slug":"1e30e924b899a90168ce99371f950a7b0208f53c.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","slug":"2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","slug":"3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/42166d224f4a20a4063cf1c692529822720ed095.jpg","slug":"42166d224f4a20a4063cf1c692529822720ed095.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","slug":"4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","slug":"4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","slug":"4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","slug":"5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","slug":"7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/96dda144ad345982c72127930ef431adcbef840c.jpg","slug":"96dda144ad345982c72127930ef431adcbef840c.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/96dda144ad345982c7ab27930ef431adcbef848a.jpg","slug":"96dda144ad345982c7ab27930ef431adcbef848a.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","slug":"a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/ac6eddc451da81cbd80640cc5066d016082431cb.jpg","slug":"ac6eddc451da81cbd80640cc5066d016082431cb.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","slug":"b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","slug":"c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","slug":"c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","slug":"c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","slug":"c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","slug":"caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","slug":"d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","slug":"d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","slug":"e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","slug":"f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","post":"ckqjatoko000cqkl5wwgon2td","modified":0,"renderable":0},{"_id":"source/_posts/Epoll源码分析/008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg","slug":"008eGmZEly1gpc5c1gib3j30j30k5q4a.jpg","post":"cl1wubgyj0000fsl5u1oytmdb","modified":1,"renderable":0},{"_id":"source/_posts/Epoll源码分析/008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg","slug":"008eGmZEly1gpc5cdhrr0j310f0u0djf.jpg","post":"cl1wubgyj0000fsl5u1oytmdb","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ckqjatojm0000qkl5l9mn6mtz","category_id":"ckqjatojw0002qkl5cp0r6csd","_id":"ckqjatokf0009qkl5gorvibz8"},{"post_id":"ckqjatojt0001qkl516kc5ito","category_id":"ckqjatok70006qkl599b4city","_id":"ckqjatokq000eqkl53j90fk4k"},{"post_id":"ckqjatojy0003qkl50mqgbwwa","category_id":"ckqjatojw0002qkl5cp0r6csd","_id":"ckqjatokt000hqkl51uyyc04x"},{"post_id":"ckqjatok00004qkl5sv95klzs","category_id":"ckqjatokp000dqkl5z1m47etp","_id":"ckqjatokx000mqkl5bl1nbepl"},{"post_id":"ckqjatok60005qkl5lf5i345o","category_id":"ckqjatokp000dqkl5z1m47etp","_id":"ckqjatol0000pqkl5sy42oh0t"},{"post_id":"ckqjatoka0007qkl51zjuxq71","category_id":"ckqjatokw000lqkl5tqidm7te","_id":"ckqjatol3000tqkl5c2muy0zk"},{"post_id":"ckqjatol1000sqkl5mmor3q7d","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatol7000yqkl5rmqg6njb"},{"post_id":"ckqjatokd0008qkl57qsb8w77","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatol90011qkl5egoxmu18"},{"post_id":"ckqjatol3000uqkl5hr3uln8g","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatola0013qkl5m5xqt3lv"},{"post_id":"ckqjatol5000wqkl5nen2qdpp","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatolc0016qkl5d02elfz7"},{"post_id":"ckqjatokn000bqkl53rpjb7ze","category_id":"ckqjatol4000vqkl5crteztxg","_id":"ckqjatold0018qkl58z0n0sni"},{"post_id":"ckqjatol6000xqkl5nlsjfn1z","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatolf001bqkl5oxkuislt"},{"post_id":"ckqjatol80010qkl5g4xjjwyy","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatolh001dqkl5svg9pemx"},{"post_id":"ckqjatoko000cqkl5wwgon2td","category_id":"ckqjatol7000zqkl53cka393a","_id":"ckqjatolj001gqkl531muotd7"},{"post_id":"ckqjatokq000fqkl560xcrqe9","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatoll001iqkl5wm1740wg"},{"post_id":"ckqjatoks000gqkl58i9idqny","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatolm001lqkl53lq8guvs"},{"post_id":"ckqjatoli001fqkl5taf4bm7o","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatolo001nqkl50cznlss3"},{"post_id":"ckqjatoku000jqkl55diwd7x8","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatolq001qqkl5do7qspua"},{"post_id":"ckqjatolk001hqkl5n01bt9lo","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatols001sqkl53a5wvjey"},{"post_id":"ckqjatokv000kqkl58690hll2","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatolu001vqkl5sg36q72z"},{"post_id":"ckqjatokx000nqkl5vgwcb9eh","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatolw001yqkl5pg8qphpd"},{"post_id":"ckqjatolr001rqkl556hhh148","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatoly0020qkl5yk9bvmy1"},{"post_id":"ckqjatolt001uqkl5oojlhmjf","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatom00023qkl5r3h83vgm"},{"post_id":"ckqjatokz000oqkl5sn6ddmay","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatom10025qkl5wye5olpz"},{"post_id":"ckqjatolv001wqkl5bx7ijyjj","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatom20027qkl507l40ig6"},{"post_id":"ckqjatol0000rqkl5stcrmpif","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatom4002aqkl5k0fkf8ql"},{"post_id":"ckqjatom10026qkl5zqnmosnl","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatom7002dqkl5y7lwazeb"},{"post_id":"ckqjatol90012qkl5c3ocz4k4","category_id":"ckqjatolz0022qkl5fxxmj187","_id":"ckqjatom9002gqkl5llb1w1qb"},{"post_id":"ckqjatolb0015qkl582jcexle","category_id":"ckqjatom40029qkl5zwsq4x6h","_id":"ckqjatomb002jqkl5y8w0o9qa"},{"post_id":"ckqjatom6002cqkl5fyluatvn","category_id":"ckqjatol0000qqkl5bnnxq9ni","_id":"ckqjatomd002lqkl5jta1gogr"},{"post_id":"ckqjatolc0017qkl582x8erdp","category_id":"ckqjatom40029qkl5zwsq4x6h","_id":"ckqjatome002nqkl59tfyyx01"},{"post_id":"ckqjatole001aqkl5cwgzxlwm","category_id":"ckqjatoma002iqkl5gezf0bph","_id":"ckqjatomh002sqkl5x1w086ph"},{"post_id":"ckqjatomf002pqkl513ody5w4","category_id":"ckqjatolb0014qkl5tq6mqbv2","_id":"ckqjatomk002vqkl55agbfbpw"},{"post_id":"ckqjatolg001cqkl5k5n4k9w0","category_id":"ckqjatom40029qkl5zwsq4x6h","_id":"ckqjatomm002yqkl5znhtktgn"},{"post_id":"ckqjatolm001kqkl5bujwz9q6","category_id":"ckqjatomh002rqkl5nh2td1u7","_id":"ckqjatomp0031qkl5zbf99nvv"},{"post_id":"ckqjatoln001mqkl55k246tw7","category_id":"ckqjatomh002rqkl5nh2td1u7","_id":"ckqjatomr0034qkl5djs8n8m1"},{"post_id":"ckqjatolp001pqkl5s68sme96","category_id":"ckqjatomo0030qkl51460n165","_id":"ckqjatomw0039qkl5x700ckc0"},{"post_id":"ckqjatolx001zqkl5peogrtq0","category_id":"ckqjatoms0036qkl5r5ljmxld","_id":"ckqjaton1003dqkl5r8h3w9ba"},{"post_id":"ckqjatoly0021qkl5lw4hsvgq","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjaton7003iqkl5vf1mp0uq"},{"post_id":"ckqjatom00024qkl5jhwfh272","category_id":"ckqjatoma002iqkl5gezf0bph","_id":"ckqjatond003lqkl5tjipy2s1"},{"post_id":"ckqjatom30028qkl58yj0ikxp","category_id":"ckqjaton7003hqkl52wwz0czi","_id":"ckqjatoni003pqkl5ub7sfk6c"},{"post_id":"ckqjatona003kqkl55rx4lvb2","category_id":"ckqjatojw0002qkl5cp0r6csd","_id":"ckqjatonl003sqkl5u7mjja6z"},{"post_id":"ckqjatonh003oqkl53lfodp9s","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatonn003uqkl5zqda0ix7"},{"post_id":"ckqjatom5002bqkl52uy8aa4c","category_id":"ckqjatond003mqkl5piv5y9le","_id":"ckqjatonp003wqkl584kehrm8"},{"post_id":"ckqjatonj003qqkl5l8l119ag","category_id":"ckqjatol4000vqkl5crteztxg","_id":"ckqjatonp003xqkl5rzhgutaa"},{"post_id":"ckqjatonl003tqkl5f8nc3fa0","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatonr003zqkl5qj3s4orb"},{"post_id":"ckqjatom8002fqkl5y10b0wyt","category_id":"ckqjatonk003rqkl56lm897s0","_id":"ckqjatonr0040qkl522h2oq9u"},{"post_id":"ckqjatomb002kqkl55hmqv6x8","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatons0042qkl5vno4b3nt"},{"post_id":"ckqjatomd002mqkl5j6to1nk3","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatont0043qkl5azuzljpp"},{"post_id":"ckqjatomg002qqkl5ytbip3c7","category_id":"ckqjatonr0041qkl5bxb03jm0","_id":"ckqjatonu0046qkl5kbskeeq1"},{"post_id":"ckqjatomi002tqkl5hb0rmhw3","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatonw0048qkl5r8hpkcdd"},{"post_id":"ckqjatomj002uqkl5xdas8jmq","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatonw0049qkl5qstfnv48"},{"post_id":"ckqjatoml002xqkl5drw4pnds","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatonz004cqkl5kpvf2lzf"},{"post_id":"ckqjatomn002zqkl52vs5fpbr","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoo1004eqkl57lbzjb7g"},{"post_id":"ckqjatomp0032qkl5yhri9ey6","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoo2004gqkl5jp3sm7f4"},{"post_id":"ckqjatomq0033qkl5llqsb37a","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoo4004iqkl57r11isuw"},{"post_id":"ckqjatoms0035qkl5a6w6qjtl","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoo6004kqkl5c093acwp"},{"post_id":"ckqjatomt0037qkl5cfhwwphy","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoo7004mqkl5ucqa0lj0"},{"post_id":"ckqjatomu0038qkl5pch3yt9k","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoo9004oqkl5yx60ewim"},{"post_id":"ckqjatomx003bqkl561hzggaf","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoob004qqkl5lirf0z3q"},{"post_id":"ckqjatomy003cqkl5gfxmr1qw","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatood004sqkl5f35i67dz"},{"post_id":"ckqjaton2003fqkl5i1jzwaab","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatooe004uqkl5vx4g6qns"},{"post_id":"ckqjaton4003gqkl5zglguliw","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoog004wqkl5z8yxr6zb"},{"post_id":"ckqjaton8003jqkl5bnka3ejz","category_id":"ckqjatonv0047qkl508rz08aq","_id":"ckqjatoog004xqkl5ivq9hfku"},{"post_id":"ckqjatone003nqkl5cm5qyvg9","category_id":"ckqjatoof004vqkl5xmhv9dxp","_id":"ckqjatooh004yqkl5hltxj0r8"},{"post_id":"ckqjatooz004zqkl5se4g8wgb","category_id":"ckqjatomw003aqkl59fzlusba","_id":"ckqjatopm0050qkl5gzu7k8iy"},{"post_id":"cl1wubgyj0000fsl5u1oytmdb","category_id":"ckqjatoma002iqkl5gezf0bph","_id":"cl1wubh390001fsl5r7ggzni0"}],"PostTag":[],"Tag":[]}}