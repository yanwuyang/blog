{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/css.css","path":"css/css.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner1.jpg","path":"css/images/banner1.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"560730a19f9642c88514986021fd4fb234c54052","modified":1463661277190},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1462880652854},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1462880652854},{"_id":"themes/landscape/_config.yml","hash":"469405ea6b82160033b347380ea9146607b9f5f1","modified":1464520597964},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1462880652854},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1462880652856},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1462880652854},{"_id":"source/_posts/Jar转exe.md","hash":"bd15aa9c4b9a87881a50f72ae07b2887e5b969b5","modified":1463217841462},{"_id":"source/_posts/JavaScript常用脚本.md","hash":"f33d39deaa4dfed8580583abe77a5285957cef89","modified":1463215660145},{"_id":"source/_posts/Android反编译与混淆技术完全解析.md","hash":"130c6bd0903f9d69523ac5e5f1e0835d05d50cfb","modified":1463663266232},{"_id":"source/_posts/JavaScript函数.md","hash":"47a67911685717ec4000d8804c72217b0b342aa5","modified":1463218266162},{"_id":"source/_posts/JavaScript闭包.md","hash":"e43750144f6749c69e108413eac4497311b51a44","modified":1463218963527},{"_id":"source/_posts/JavaScript模仿块级作用域.md","hash":"711dc8ac195a6279632ef1b43dd1c1c05ac679be","modified":1463218759591},{"_id":"source/_posts/JavaScript面向对象编程.md","hash":"7c04d56c77a47a9b2bfc569ff4b12f95411aee53","modified":1464279182239},{"_id":"source/_posts/Java动态编程.md","hash":"a55199f49c5caa07bf5c06e9a493e3c0eaead069","modified":1465122321765},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO.md","hash":"b6e985a57962bca5e4312edb9794baafd5b162ab","modified":1470841886483},{"_id":"source/_posts/Java设计模式之观察者模式.md","hash":"07de8801d29fed50e52feca0865385222cf78a17","modified":1462970450499},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法.md","hash":"41d740a2200019264de05e3c885f873a08411dcd","modified":1463214636572},{"_id":"source/_posts/Linux常见问题解决方法.md","hash":"73c03e08109ffb3a1245a4387c31c47e86ce8a8b","modified":1462967643519},{"_id":"source/_posts/Hadoop集群完全分布式部署.md","hash":"ca0992a7749f2da863cbbe4aa0a38aa12c8f32ec","modified":1462974224383},{"_id":"source/_posts/MySQL+Keepalived实现双机热备.md","hash":"8b1fed9e4d6bc0464f0359b171cf1412458dd3d0","modified":1463224673544},{"_id":"source/_posts/Nginx+Tomcat+Memcached集群.md","hash":"3fdc845c9675b25482975f7ad458b36b64cf103b","modified":1463148257986},{"_id":"source/_posts/Oracle常用脚本.md","hash":"96ef1a5496e320d3195b11b3f33569a31886daea","modified":1463151171913},{"_id":"source/_posts/System.setOut.md","hash":"3166c5c55586aeb268d1de251f83a45e4f72174a","modified":1462967643519},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤.md","hash":"2f95653ee5a04d94c4554b71f669cf019341d551","modified":1463223349598},{"_id":"source/_posts/MySQL5.6.25主从复制.md","hash":"2dea764c378ed3cad3dad9fcc65d1d6f09e7bd6c","modified":1463223916180},{"_id":"source/_posts/Nginx+Tomcat集群.md","hash":"1142ca037fe728fcc241063958443a1322422e42","modified":1463147079914},{"_id":"source/_posts/Web应用组件化的权衡.md","hash":"c37f9c4561c1fa4a194599dcf32ec2b314e78903","modified":1463412875926},{"_id":"source/_posts/为什么寄存器比内存快.md","hash":"09418853acfe730b993fe33893cfaff023b8109d","modified":1463219165710},{"_id":"source/_posts/博客搭建.md","hash":"2faf92eec124cbd5f7e0d2d57f4a88b444bddf4a","modified":1463225287231},{"_id":"source/_posts/开发管理的一些建议.md","hash":"9673d3e156056f7eb59220c6ae766fa974aa631c","modified":1465530403353},{"_id":"source/_posts/企业体检开发框架培训.md","hash":"58ded8f40f5269a66c68611fe30a671f4a0e7a8a","modified":1463230433472},{"_id":"source/_posts/构建单页Web应用.md","hash":"9212350794d16e66857add59225d07c201453d4b","modified":1463414787975},{"_id":"source/_posts/epoll.md","hash":"0745f2802f043a7fa163fdf548311df16b957ac9","modified":1470841886483},{"_id":"source/_posts/框架那么多学习那个好.md","hash":"f515701eebc80b3e25a35a10edd0bf4e78747486","modified":1463413487377},{"_id":"source/_posts/浅谈BSF.md","hash":"302f626462266bc82fc7dbf001e1cc1e393d71c1","modified":1463154942065},{"_id":"source/_posts/漫谈工程师的三观.md","hash":"fdf623ba9d865d4574170958ae6d5adbbb75e822","modified":1463496909436},{"_id":"source/_posts/虚拟机联网方式设置.md","hash":"65cc0fdf383e98fba83dbbd0469ca92e6b0f4ba9","modified":1463213391942},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1462880652873},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1462880652875},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1462880652875},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1462880652875},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"1ef52d096f074d88399ef1fa80d2f78a81d4b83c","modified":1462894393323},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1462880652876},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1462880652876},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1462880652876},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1462880652876},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1462880652876},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1462880652877},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1462880652878},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1462880652877},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1462880652875},{"_id":"source/favicon.ico","hash":"f50f1228739e790380a195144d715886ea1961e0","modified":1337753982000},{"_id":"source/_posts/财务管理系统项目技术经验总结.md","hash":"a7eeb0664f1ef80a819008aca1ea0fdb57628065","modified":1463149614420},{"_id":"source/_posts/解决问题心得.md","hash":"afc366e81ab7f56d36050871973df570693be9e3","modified":1463148575520},{"_id":"source/_posts/中间件远程调试设置.md","hash":"72d7c4876868c7ecb1616f41189f77111028c317","modified":1463215178662},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.jpg","hash":"a06634c019d8f89cc61365e9d49c235ddb3c8636","modified":1463663158882},{"_id":"source/_posts/Android反编译与混淆技术完全解析/1.png","hash":"bb47ca53cfeec354cd18eb14c0702bb9bfd96081","modified":1463662941739},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.png","hash":"c403ea6f9b9a00dbb84980135e92cfe83a85cc75","modified":1463662963470},{"_id":"source/_posts/Android反编译与混淆技术完全解析/5.png","hash":"1409b6a2eaa309f7bcc2d339abcde13258e99e4b","modified":1463663118306},{"_id":"source/_posts/Android反编译与混淆技术完全解析/640.png","hash":"7890c65b880deda8fcaf4ad2908499dd0bb02b7c","modified":1463662006260},{"_id":"source/_posts/Android反编译与混淆技术完全解析/642.png","hash":"334a78f7522f3f2b7b57c4e9e3f70b274e042ccf","modified":1463662109158},{"_id":"source/_posts/Android反编译与混淆技术完全解析/645.png","hash":"26b17d0608638e80ebcf9e4c58dd7feb702b3566","modified":1463662261008},{"_id":"source/_posts/Android反编译与混淆技术完全解析/647.png","hash":"6b90925dcbf6313e9f398c9f29075c416dcc44c1","modified":1463662344047},{"_id":"source/_posts/Android反编译与混淆技术完全解析/643.png","hash":"bcc93b17fc8fede4bf5c1fa74cf960b9c0b1d1a3","modified":1463662179654},{"_id":"source/_posts/Android反编译与混淆技术完全解析/641.png","hash":"eecfef65c149e9ae61eff13451c4add431beac68","modified":1463662039004},{"_id":"source/_posts/Android反编译与混淆技术完全解析/648.png","hash":"f50c29b7a6e5e4b61ee5454ff973fbbd0d5fdae8","modified":1463662582078},{"_id":"source/_posts/Android反编译与混淆技术完全解析/646.png","hash":"e4cfa01fada3dcc993e8238f7ebd1e20a918ee2a","modified":1463662314516},{"_id":"source/_posts/Android反编译与混淆技术完全解析/644.jpg","hash":"d4a147dd0fcfbe3e04c18c006c4bd95cf254bbe8","modified":1463662219653},{"_id":"source/_posts/Android反编译与混淆技术完全解析/653.png","hash":"ad9b1e83175e8423fe4c2645c28dad8eb5aeb7a0","modified":1463662753058},{"_id":"source/_posts/Android反编译与混淆技术完全解析/650.png","hash":"a38f3549da2c2a70557218fde7a1fb0bf9a2c6cc","modified":1463662682093},{"_id":"source/_posts/Android反编译与混淆技术完全解析/655.png","hash":"e3fa927346a1659e6924ba4d207b515cc152d0e2","modified":1463662783040},{"_id":"source/_posts/Android反编译与混淆技术完全解析/658.png","hash":"8eceaff6e792bf573eb27e162671c37f45dc298d","modified":1463662874986},{"_id":"source/_posts/Android反编译与混淆技术完全解析/659.png","hash":"43d13e86813cbced7511460da48aefba9397b207","modified":1463662902162},{"_id":"source/_posts/Android反编译与混淆技术完全解析/656.png","hash":"54f498d3d5a77d85d4cd96f9fcd5cfd8311a2179","modified":1463662827266},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KnAQkx19&690.png","hash":"a735aa956f5d380c96e4175097904fc93a6fc91d","modified":1462972598533},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KHLwtFe7&690.png","hash":"7043bbc267e660a3a615e5818e92c357f1443521","modified":1462972857742},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MlAy3H5d&690.jpg","hash":"be5eb12da6ea72e0cf7d88228c74a0879ebea51d","modified":1462974125225},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1Mzjamje7&690.jpg","hash":"a75887f218506a0689004b4a5b46ac528e287d57","modified":1462974157741},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MG9JTO50&690.png","hash":"521acf61bbe9221bb399203d90d3679362fd7344","modified":1462971310892},{"_id":"source/_posts/Jar转exe/3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","hash":"be06a73e0408b58e0f47003a97eb1da894cce4ff","modified":1463216913490},{"_id":"source/_posts/Jar转exe/0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","hash":"d96a4aa6c2e4502b591654ea28871ec06544a980","modified":1463216384529},{"_id":"source/_posts/Jar转exe/2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","hash":"04973de684743286b16f91b3be506defc631fa35","modified":1463216405249},{"_id":"source/_posts/Jar转exe/42166d224f4a20a4063cf1c692529822720ed095.jpg","hash":"3b00acf2a9846d3c3503fddb3b9a9a9949185573","modified":1463216947250},{"_id":"source/_posts/Jar转exe/4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","hash":"6bde22b1c4e089395612e7520ff98af2b807babd","modified":1463216825550},{"_id":"source/_posts/Jar转exe/4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","hash":"e3c1d2db7d13601871af30d073e5458aad2a793c","modified":1463216432609},{"_id":"source/_posts/Jar转exe/5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","hash":"11d8c97117adddc34cae39c6811915f4881f3c60","modified":1463216651632},{"_id":"source/_posts/Jar转exe/1e30e924b899a90168ce99371f950a7b0208f53c.jpg","hash":"95b5359af718bf9a02e98a7c05a6c452e7f43848","modified":1463216683672},{"_id":"source/_posts/Jar转exe/7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","hash":"4cb49a0ee377e670b2154fce41ecb52272290995","modified":1463216476599},{"_id":"source/_posts/Jar转exe/96dda144ad345982c72127930ef431adcbef840c.jpg","hash":"efff7fc1b1c259617e0ce73fee76bd80e84c0ae5","modified":1463216523152},{"_id":"source/_posts/Jar转exe/96dda144ad345982c7ab27930ef431adcbef848a.jpg","hash":"6765efacb7a2d04e413f3ccdf4e088b4013acf5c","modified":1463216558902},{"_id":"source/_posts/Jar转exe/4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","hash":"90c8d3aa709f12e502897370a25617f97c4bda55","modified":1463216332339},{"_id":"source/_posts/Jar转exe/ac6eddc451da81cbd80640cc5066d016082431cb.jpg","hash":"d209f91210a7b2235d5bb874a0bd3757de6e2443","modified":1463216262096},{"_id":"source/_posts/Jar转exe/b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","hash":"d01fa8984206e949d7e0f2dd8b310a8328ae96fd","modified":1463216501652},{"_id":"source/_posts/Jar转exe/c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","hash":"726b7b33f8f8cc9c30a3802ad5feb6b502b28857","modified":1463216364349},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","hash":"e77c32c7da2d24ac230d291eb64ad3de75c490b3","modified":1463217749795},{"_id":"source/_posts/Jar转exe/a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","hash":"fbab0904eea4bf9e779d3cd5234e2ebe1fd428ee","modified":1463216176414},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","hash":"15651be01628a880a7df9528a71a963d8699cd74","modified":1463216133134},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","hash":"a4a39f43603af6c485ab8072cec2ac51c33cffc7","modified":1463216291686},{"_id":"source/_posts/Jar转exe/caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","hash":"cb24a77cda3b1638f59ced73547189da7224f7dd","modified":1463217691575},{"_id":"source/_posts/Jar转exe/f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","hash":"390e25a4058d0857b0e327ed65687944b3f26b35","modified":1463216204944},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","hash":"982ad9dae31d8af1675b5bf02ca723da7048da6d","modified":1463216581752},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","hash":"d179d688f38aafb8bd9b66eeeae0ee90898cf9bf","modified":1463216617402},{"_id":"source/_posts/Jar转exe/e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","hash":"bcaddb1d3f1ae975d5ee7257415b4579dc74aa7c","modified":1463216541632},{"_id":"source/_posts/Java动态编程/43918004_1.png","hash":"c6c354349b055407786d32c8e6f5fb7d24fdb730","modified":1465117738825},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/02.png","hash":"9eb511310a786c07843c0017e938901e15310d04","modified":1470841886483},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/01.png","hash":"88e170f6d0241548eb8f0e5ea84cee6b940dde73","modified":1470841886483},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","hash":"544ebd7e3c11c1fdcec502a21256a5de26120352","modified":1463213964061},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsC8Oogc8&690.jpg","hash":"3b2dab83187ba0e1975c7545c305ddf3f2bdd26b","modified":1462969737268},{"_id":"source/_posts/Java设计模式之观察者模式/class.jpg","hash":"79d8669aca398f54e6e49d3c0ee39c83903876f3","modified":1462969264623},{"_id":"source/_posts/MySQL+Keepalived实现双机热备/1.png","hash":"2d492582c64942c3f81ef7ff120f443fa98e10e1","modified":1463224656163},{"_id":"source/_posts/MySQL5.6.25主从复制/1.png","hash":"f0c20752784f04794f8b82572ad2a9fde04521c6","modified":1463223745353},{"_id":"source/_posts/MySQL5.6.25主从复制/3.png","hash":"19e4aac46c6af665e93905a2555d3462eb3d5e1d","modified":1463223881218},{"_id":"source/_posts/MySQL5.6.25主从复制/2.png","hash":"9b282ccada6b7ef72c21a2c7e57e1822c06f0e54","modified":1463223770467},{"_id":"source/_posts/MySQL5.6.25主从复制/4.png","hash":"cd386329fdd79b5082c4cce01f768ea43a158cfd","modified":1463223887342},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/3.png","hash":"28877db8668ec28035626c48a68666a1c7831b0c","modified":1463222935094},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/1.png","hash":"71b26646b6b4d7012d45979dc79e30246fd73638","modified":1463222261629},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/2.png","hash":"5b6778d76b94e2da64e9b90f30abab1a084e9280","modified":1463222878947},{"_id":"source/_posts/企业体检开发框架培训/开发框架架构图.png","hash":"f255c55f4615f250a96ced6db902478795728c01","modified":1446474395789},{"_id":"source/_posts/虚拟机联网方式设置/6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","hash":"1e0406b4457b541e0be60b4df04a2ff5240a2159","modified":1463212961391},{"_id":"source/_posts/虚拟机联网方式设置/aec379310a55b31966f8dc0140a98226cffc1744.jpg","hash":"a29fb4d84b8d820612f68e42f19ca2e3e960fba7","modified":1463213276892},{"_id":"source/_posts/虚拟机联网方式设置/a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","hash":"405d1db86abc8489cfc65ef738aa9d3241044df4","modified":1463213368182},{"_id":"source/_posts/虚拟机联网方式设置/d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","hash":"0add76eff6ca58267c1294209d110d1557d47a12","modified":1463213145902},{"_id":"source/_posts/虚拟机联网方式设置/d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","hash":"16979cb24298216624b6646261b1edc5336224b5","modified":1463213250512},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1462880652906},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"133e825b57ffb6ed1c5aa9602c7feacd38705539","modified":1463150609154},{"_id":"source/_posts/虚拟机联网方式设置/241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","hash":"43cf32137fcc419f147b0d049a032dad787a9604","modified":1463213081812},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1462880652906},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"cbbf324a470d03de9f8cc4927ba7e766b17fb060","modified":1463152992746},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"ab63cb0728c18d9cda9a5d1c9ea76614564a941f","modified":1463280310037},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1462880652907},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1462880652907},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1462880652905},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1462880652908},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1462880652908},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1462880652908},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1462880652908},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"482cf2ab89581e8c08428862763b8ce034bf528f","modified":1462891266693},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1462880652918},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"63bc4f8802967697a9a1096937384bafff0ecd62","modified":1462967643520},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"4f2c8dc5020d3b17975cdcf52e4fbe69f4a6636f","modified":1463280345237},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462880652926},{"_id":"themes/landscape/source/css/css.css","hash":"9c4c9aae05ffd5a38082080efb3ddefbd8772cb2","modified":1462891041861},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1462880652918},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1462880652919},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462880652927},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462880652927},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462880652927},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462880652928},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1462880652929},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.gif","hash":"a7c195eed6d33a5d1a8ec181b7f6c2b9a18cdd4b","modified":1463663136199},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.gif","hash":"e66ec9f6ff93f138c6e13f40916f7a87525b8991","modified":1463661762275},{"_id":"source/_posts/Android反编译与混淆技术完全解析/657.png","hash":"0d77f8761198e7050277b5c33564a1fdb36eba20","modified":1463662853958},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462880652927},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1LyH3gqae&690.jpg","hash":"ad604ae5be66bdcc06aaa1bf626f4303a05ac558","modified":1462974005188},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1O1zJBg32&690.jpg","hash":"a3a2c32631f0c7ab624041e591f17d760f910bcb","modified":1462974183242},{"_id":"source/_posts/Jar转exe/023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","hash":"c8d5a13e4654137460328513aa9cf7dd8665ed61","modified":1463217725175},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","hash":"60241276433a3c1e127eb73cdee8dab31683e66c","modified":1463214366712},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/b03533fa828ba61e7fad2a384234970a304e5962.jpg","hash":"2b844c6fe1379ca077ae6d4af88fddf2bc44ebb2","modified":1463213887901},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsKgs3pa3&690.jpg","hash":"6616e5940a254b19bbe47b2967188cbf0ea6172e","modified":1462969606358},{"_id":"source/_posts/Java动态编程/43918004_2.png","hash":"7a2586081a717d13a675ece60bb9e45d1e884b86","modified":1465118149507},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","hash":"69cb430bdfd7ca9e049d754a600a56b4f97d840d","modified":1463213723201},{"_id":"source/_posts/漫谈工程师的三观/444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","hash":"4cb432f13c4398d2ab1fba7d8026117eac3dcf11","modified":1463496804505},{"_id":"source/_posts/中间件远程调试设置/b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","hash":"b9d501fb21f41a4b541537af536c8ae86b59b763","modified":1463215160002},{"_id":"source/_posts/Nginx+Tomcat集群/003vMReezy6OUXDo7kt61&690.jpg","hash":"b7a15e619f8e962958b99ebd38555b84b82ee81e","modified":1463146694171},{"_id":"source/_posts/漫谈工程师的三观/604bf4b4226f180ff45fa8bce5874793_b.png","hash":"b0f1369363a536e77cf92ff4f8c1631f251c2ce0","modified":1463496759171},{"_id":"source/_posts/虚拟机联网方式设置/203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","hash":"4cdcf9272c1b12b0fa82263420501869f71f49dd","modified":1463213175712},{"_id":"source/_posts/虚拟机联网方式设置/e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","hash":"f5474345f64ced1060d8dcfd327468b8ce42fb69","modified":1463213234472},{"_id":"themes/landscape/source/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1462891162286},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1462880652929},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","hash":"38f2a87ff83248993d89e4773f23ce3c4572f373","modified":1463214461723},{"_id":"source/_posts/Android反编译与混淆技术完全解析/651.png","hash":"fe7f4fa917058f9996f9a9cc589305f9a6c13fcb","modified":1463662715602},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1462880652926},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1462880652929},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1463150392858},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1462880652938},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1462880652938},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1462880652938},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1462880652938},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1462880652938},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1462880652942},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1462880652944},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1462880652944},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"77d2a41321a2734a8007548e582184fad4ff247e","modified":1462975166201},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1462880652944},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1462880652944},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1462880652944},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1462880652944},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1462880652944},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1462880652943},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1462880652942},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1462880652942},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1462880652945},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1462880652946},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1462880652946},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1462880652948},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462880652947},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1462880652948},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462880652948},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462880652948},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1462880652948},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1462880652948},{"_id":"source/_posts/漫谈工程师的三观/7e79f43fc4c4cfa8426a2008080842d6_b.jpg","hash":"782e9ff0c444c4eafc56ca29acce8c4d20fe12ab","modified":1463496878402},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1462880652948},{"_id":"themes/landscape/source/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1462880652948},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"40908fd3660a61d4e632507dca79cc06d304ed39","modified":1463226544166},{"_id":"public/2016/05/10/博客搭建/index.html","hash":"c5eaa674b5dc5694e3c1a0f7589f6a834ea62f39","modified":1478184676186},{"_id":"public/2014/09/04/中间件远程调试设置/index.html","hash":"feb20f32ede7589981bc21fa10aba8a1eff39684","modified":1478184676206},{"_id":"public/archives/index.html","hash":"1c34ab9728c8fb4a60e324c60457ea104ec63574","modified":1478184676266},{"_id":"public/archives/page/2/index.html","hash":"f63b7821d07ddf1b8de3cb935e700bb423b182e3","modified":1478184676276},{"_id":"public/archives/page/3/index.html","hash":"2ba7dfa1a1c8e63b408812969b833f58096954e6","modified":1478184676276},{"_id":"public/archives/page/4/index.html","hash":"10247855697d727c68f8d0e8444a42532c4fa068","modified":1478184676276},{"_id":"public/archives/2012/index.html","hash":"73b1f8472f231819c845648fe5e61b4830a961c3","modified":1478184676276},{"_id":"public/archives/2012/12/index.html","hash":"12d1cb93cc4fea2c090891f8b196b87db29142dc","modified":1478184676276},{"_id":"public/archives/2013/index.html","hash":"d8cd9d9c5a09abc6788aa18997ec2ac8892147f8","modified":1478184676276},{"_id":"public/archives/2013/01/index.html","hash":"ef0cf54716c222d04dc05c7c1d68c9428e677589","modified":1478184676276},{"_id":"public/archives/2013/07/index.html","hash":"b2f8a28d1436203a97f89c479b5d37c028698e19","modified":1478184676276},{"_id":"public/archives/2013/10/index.html","hash":"cdad98239a85ca56d545ffeb434ed4cb11011757","modified":1478184676276},{"_id":"public/archives/2013/11/index.html","hash":"2044cd91f9db550377a7708677307eab794d5d3a","modified":1478184676276},{"_id":"public/archives/2014/index.html","hash":"87c85db1df7dff61d235e2b2e12b7eaf44251915","modified":1478184676276},{"_id":"public/archives/2014/02/index.html","hash":"b88a267ae0cce9f3cb4206153f4bc692a022ff8c","modified":1478184676276},{"_id":"public/archives/2014/04/index.html","hash":"e5e9ed64a9ca37f0a2e81e55fa02af7bd77dbf84","modified":1478184676276},{"_id":"public/archives/2014/09/index.html","hash":"85e42df24331680f2090c7b8933072b1dae9b670","modified":1478184676276},{"_id":"public/archives/2014/10/index.html","hash":"969dc5d927781d1fc3e8bef6146d4a3cfc8ea022","modified":1478184676276},{"_id":"public/archives/2014/12/index.html","hash":"4f411f1b2d34c1d58c312d8ff50be024bd3c9acc","modified":1478184676276},{"_id":"public/archives/2015/index.html","hash":"cb1b061e84bd1d7f906f1cf40015c1f33229cab2","modified":1478184676276},{"_id":"public/archives/2015/01/index.html","hash":"5248576bdb9cea4b1a44c34b31cebb150ebff8d0","modified":1478184676276},{"_id":"public/archives/2015/07/index.html","hash":"426aae0aff1b87ff863e3152ad16ca72b303d929","modified":1478184676276},{"_id":"public/archives/2015/11/index.html","hash":"ce9e3f60ac3dfa4e35c04fc2fab59f6c0de63578","modified":1478184676276},{"_id":"public/archives/2016/index.html","hash":"5d25b44895080a1bc832fb39bb0f32db414f0fd9","modified":1478184676276},{"_id":"public/archives/2016/page/2/index.html","hash":"ab23600fad9b1b67ed888b52f81d889e779ce243","modified":1478184676276},{"_id":"public/archives/2016/05/index.html","hash":"6e64c1e48b029d8f93968ee1e5708d1f4675e855","modified":1478184676276},{"_id":"public/archives/2016/06/index.html","hash":"4b133f39647c4fb7499c8907d9acee84930af0cf","modified":1478184676276},{"_id":"public/2016/06/05/Java动态编程/index.html","hash":"1a0b81c640aca2fea14427c6f05fa26a3a4066a0","modified":1478184676276},{"_id":"public/2016/05/30/开发管理的一些建议/index.html","hash":"a950fac79ee01a389b7fa82c7addc5e73e3df683","modified":1478184676276},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/index.html","hash":"352bff0c148c2413287ef0a412270a3b8edf524a","modified":1478184676276},{"_id":"public/2016/05/17/漫谈工程师的三观/index.html","hash":"b662097fb9ac1b36ff99d02b2069493367100ed0","modified":1478184676276},{"_id":"public/2016/05/11/JavaScript面向对象编程/index.html","hash":"b95fecd3baa16bd89df896077e4c6811e0e17a38","modified":1478184676276},{"_id":"public/2016/05/10/System.setOut/index.html","hash":"2b140dbfffc101bf6b8993d10d30a653eab73f10","modified":1478184676276},{"_id":"public/2016/05/10/Linux常见问题解决方法/index.html","hash":"e5bb079466eea353fc282a28e75fa6f6fe79282b","modified":1478184676276},{"_id":"public/2015/11/03/企业体检开发框架培训/index.html","hash":"65fcd5721770b277f110af3cf603213a2e309920","modified":1478184676276},{"_id":"public/2015/07/27/MySQL+Keepalived实现双机热备/index.html","hash":"f4d80f58e74c94df33588aae66d5ab161f6cc3bc","modified":1478184676276},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/index.html","hash":"a7c9fc1c9a98e25db0e9415239b9403072a2d87d","modified":1478184676276},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/index.html","hash":"ec568ce56055c41b12f082eb0561698c578847b3","modified":1478184676276},{"_id":"public/2015/01/26/解决问题心得/index.html","hash":"32112d6cb2ca4418fe69ce6cd9ba7f2484e4920e","modified":1478184676276},{"_id":"public/2015/01/14/Nginx+Tomcat+Memcached集群/index.html","hash":"35ce686fe4a8c493d653224cb1438f32e69807a0","modified":1478184676276},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/index.html","hash":"b511608b48749b79296ed4d56dc1dda6b10e64a3","modified":1478184676276},{"_id":"public/2015/01/05/Java设计模式之观察者模式/index.html","hash":"41b17f4e5e312ce3ac18356219fcb0049b7614c6","modified":1478184676276},{"_id":"public/2014/12/10/Nginx+Tomcat集群/index.html","hash":"dfb17a753d0417a757fe7e4fe3718da1265b86e4","modified":1478184676276},{"_id":"public/2014/10/08/虚拟机联网方式设置/index.html","hash":"57a9958f83d3bbaf20ebbc7c948dae68944b6e78","modified":1478184676276},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/index.html","hash":"88acbb0f732e777e0c22d5118016b939160977bb","modified":1478184676276},{"_id":"public/2014/04/30/Oracle常用脚本/index.html","hash":"a7b385b7edfea054ea62be34d4d4f4e367fdf798","modified":1478184676276},{"_id":"public/2014/02/13/JavaScript常用脚本/index.html","hash":"212fecb26d960223013a6f568892872a22387c1b","modified":1478184676276},{"_id":"public/2013/11/24/Jar转exe/index.html","hash":"31711b717b8832d55c6c0ec3401165279a51a70e","modified":1478184676276},{"_id":"public/2013/10/15/为什么寄存器比内存快/index.html","hash":"1fb9efdbe184dc1aa4d6d6fc37b51038bca32592","modified":1478184676276},{"_id":"public/2013/07/18/JavaScript函数/index.html","hash":"fe498603e1d0be834cf37d8c9791af996e17df02","modified":1478184676276},{"_id":"public/2013/07/17/JavaScript模仿块级作用域/index.html","hash":"1812660498b60e9012c071da070ef0fb6ce42aa4","modified":1478184676276},{"_id":"public/2013/07/17/JavaScript闭包/index.html","hash":"1356c04b0f7eae682920efb03791f57b71fdc31b","modified":1478184676276},{"_id":"public/2013/01/30/浅谈BSF/index.html","hash":"66926fdde922dfd20e71c5f8292418984701b7a8","modified":1478184676276},{"_id":"public/2012/12/03/财务管理系统项目技术经验总结/index.html","hash":"f7d0afa017db5b76da38472be51df27986745ea3","modified":1478184676276},{"_id":"public/archives/2016/08/index.html","hash":"ecadd1967b568cbc5e5409f819aac7630ec72011","modified":1478184676286},{"_id":"public/categories/EXE4J/index.html","hash":"e3bf48fd9e8634c2d0ee276dadea5fe06d02a5df","modified":1478184676286},{"_id":"public/categories/Android/index.html","hash":"8f080fdf68452403e7ed6fd136fedadc3cf0d2cc","modified":1478184676286},{"_id":"public/categories/JavaScript/index.html","hash":"f24f1e40b427673e77d16534f4acc18227ff40fb","modified":1478184676286},{"_id":"public/categories/Java/index.html","hash":"8672efd153bda77acb337ea59a71eb8391802e20","modified":1478184676286},{"_id":"public/categories/Oracle/index.html","hash":"747bac0389d697fe7df68a0602ee07cba4a575c0","modified":1478184676286},{"_id":"public/categories/Tomcat/index.html","hash":"5c29537e0d8f359c0eb65beaf360d35e6408ff8f","modified":1478184676286},{"_id":"public/categories/心得体会/index.html","hash":"bdb1625923d2a07e695f969832bb8ad9d6726c12","modified":1478184676286},{"_id":"public/categories/MySQL/index.html","hash":"922e377f5f13fae2a6b777081bb06dea7b14eb48","modified":1478184676286},{"_id":"public/categories/Other/index.html","hash":"ab403c91c0779cf80f58761378fa9288ff994aad","modified":1478184676286},{"_id":"public/categories/培训文档/index.html","hash":"a80559dbb7db933f13bb91dca2acf938c2907b02","modified":1478184676286},{"_id":"public/categories/BSF/index.html","hash":"bb819a745c6f45550c7917a2b46b59827ec5382f","modified":1478184676286},{"_id":"public/categories/Eclipse/index.html","hash":"1f8a368d71a0e0535c5690ef4e060fab3dcc9ecd","modified":1478184676286},{"_id":"public/categories/VMware/index.html","hash":"32e81b01a7acbc3a6a7f7b3a2ab5b234fdac3227","modified":1478184676286},{"_id":"public/categories/Hadoop/index.html","hash":"1ce792e0ad3db155767b0787b565028f13ff0564","modified":1478184676286},{"_id":"public/categories/Linux/index.html","hash":"19cd946d002e945d2fdb4e95106ece579ecd30aa","modified":1478184676286},{"_id":"public/2016/08/10/epoll/index.html","hash":"65b24e0f0c52ea27e0a3f1473a7ab98037aaf19e","modified":1478184676286},{"_id":"public/2016/08/10/Java中的IO技术：BIO,NIO,AIO/index.html","hash":"92b2596302ba9ea6d106beb940d8822ef63de518","modified":1478184676286},{"_id":"public/2016/05/16/框架那么多学习那个好/index.html","hash":"66516c3a750e5f77030400aed7a8f03f8755490a","modified":1478184676286},{"_id":"public/2016/05/16/Web应用组件化的权衡/index.html","hash":"ef4d2fa3b535106819c3fc5f12cb6cd459203b65","modified":1478184676286},{"_id":"public/2016/05/16/构建单页Web应用/index.html","hash":"9c43ba88b197ccb001e52f087994b28a1bb4542d","modified":1478184676286},{"_id":"public/index.html","hash":"012860711576ee3b09bbe3518cf5ca50a8164bd3","modified":1478184676286},{"_id":"public/page/3/index.html","hash":"f150f3ea625d0654b979655f3fe8e648c400d3cf","modified":1478184676286},{"_id":"public/page/4/index.html","hash":"ce5d5fe684356748bc9ed70a396417c8ca0e0a61","modified":1478184676286},{"_id":"public/page/2/index.html","hash":"2218a056d233d8ed897d1166c80cae25e9597d83","modified":1478184676286},{"_id":"public/robots.txt","hash":"560730a19f9642c88514986021fd4fb234c54052","modified":1478184677386},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478184677386},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478184677426},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478184677446},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478184677456},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478184677456},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1478184677456},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478184677466},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1478184677476},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","hash":"d96a4aa6c2e4502b591654ea28871ec06544a980","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","hash":"90c8d3aa709f12e502897370a25617f97c4bda55","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/42166d224f4a20a4063cf1c692529822720ed095.jpg","hash":"3b00acf2a9846d3c3503fddb3b9a9a9949185573","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","hash":"04973de684743286b16f91b3be506defc631fa35","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","hash":"e3c1d2db7d13601871af30d073e5458aad2a793c","modified":1478184677536},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","hash":"11d8c97117adddc34cae39c6811915f4881f3c60","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/1e30e924b899a90168ce99371f950a7b0208f53c.jpg","hash":"95b5359af718bf9a02e98a7c05a6c452e7f43848","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","hash":"be06a73e0408b58e0f47003a97eb1da894cce4ff","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/ac6eddc451da81cbd80640cc5066d016082431cb.jpg","hash":"d209f91210a7b2235d5bb874a0bd3757de6e2443","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","hash":"726b7b33f8f8cc9c30a3802ad5feb6b502b28857","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","hash":"6bde22b1c4e089395612e7520ff98af2b807babd","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","hash":"4cb49a0ee377e670b2154fce41ecb52272290995","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/96dda144ad345982c72127930ef431adcbef840c.jpg","hash":"efff7fc1b1c259617e0ce73fee76bd80e84c0ae5","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","hash":"e77c32c7da2d24ac230d291eb64ad3de75c490b3","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","hash":"fbab0904eea4bf9e779d3cd5234e2ebe1fd428ee","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","hash":"15651be01628a880a7df9528a71a963d8699cd74","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/96dda144ad345982c7ab27930ef431adcbef848a.jpg","hash":"6765efacb7a2d04e413f3ccdf4e088b4013acf5c","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","hash":"d01fa8984206e949d7e0f2dd8b310a8328ae96fd","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","hash":"cb24a77cda3b1638f59ced73547189da7224f7dd","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","hash":"a4a39f43603af6c485ab8072cec2ac51c33cffc7","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","hash":"bcaddb1d3f1ae975d5ee7257415b4579dc74aa7c","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","hash":"390e25a4058d0857b0e327ed65687944b3f26b35","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","hash":"982ad9dae31d8af1675b5bf02ca723da7048da6d","modified":1478184677536},{"_id":"public/2013/11/24/Jar转exe/c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","hash":"d179d688f38aafb8bd9b66eeeae0ee90898cf9bf","modified":1478184677536},{"_id":"public/2015/11/03/企业体检开发框架培训/开发框架架构图.png","hash":"f255c55f4615f250a96ced6db902478795728c01","modified":1478184677536},{"_id":"public/2015/07/27/MySQL+Keepalived实现双机热备/1.png","hash":"2d492582c64942c3f81ef7ff120f443fa98e10e1","modified":1478184677536},{"_id":"public/2015/01/05/Java设计模式之观察者模式/003vMReezy6OWsC8Oogc8&690.jpg","hash":"3b2dab83187ba0e1975c7545c305ddf3f2bdd26b","modified":1478184677536},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/1.png","hash":"71b26646b6b4d7012d45979dc79e30246fd73638","modified":1478184677536},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/2.png","hash":"5b6778d76b94e2da64e9b90f30abab1a084e9280","modified":1478184677536},{"_id":"public/2016/08/10/Java中的IO技术：BIO,NIO,AIO/01.png","hash":"88e170f6d0241548eb8f0e5ea84cee6b940dde73","modified":1478184677536},{"_id":"public/2016/08/10/Java中的IO技术：BIO,NIO,AIO/02.png","hash":"9eb511310a786c07843c0017e938901e15310d04","modified":1478184677536},{"_id":"public/2015/01/05/Java设计模式之观察者模式/class.jpg","hash":"79d8669aca398f54e6e49d3c0ee39c83903876f3","modified":1478184677536},{"_id":"public/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/3.png","hash":"28877db8668ec28035626c48a68666a1c7831b0c","modified":1478184677536},{"_id":"public/2016/06/05/Java动态编程/43918004_1.png","hash":"c6c354349b055407786d32c8e6f5fb7d24fdb730","modified":1478184677536},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/1.png","hash":"f0c20752784f04794f8b82572ad2a9fde04521c6","modified":1478184677536},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/4.png","hash":"cd386329fdd79b5082c4cce01f768ea43a158cfd","modified":1478184677536},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","hash":"544ebd7e3c11c1fdcec502a21256a5de26120352","modified":1478184677536},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1KHLwtFe7&690.png","hash":"7043bbc267e660a3a615e5818e92c357f1443521","modified":1478184677536},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1KnAQkx19&690.png","hash":"a735aa956f5d380c96e4175097904fc93a6fc91d","modified":1478184677536},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/2.png","hash":"9b282ccada6b7ef72c21a2c7e57e1822c06f0e54","modified":1478184677536},{"_id":"public/2015/07/26/MySQL5.6.25主从复制/3.png","hash":"19e4aac46c6af665e93905a2555d3462eb3d5e1d","modified":1478184677536},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1MG9JTO50&690.png","hash":"521acf61bbe9221bb399203d90d3679362fd7344","modified":1478184677536},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1MlAy3H5d&690.jpg","hash":"be5eb12da6ea72e0cf7d88228c74a0879ebea51d","modified":1478184677536},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1Mzjamje7&690.jpg","hash":"a75887f218506a0689004b4a5b46ac528e287d57","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/1.png","hash":"bb47ca53cfeec354cd18eb14c0702bb9bfd96081","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/2.png","hash":"c403ea6f9b9a00dbb84980135e92cfe83a85cc75","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/640.png","hash":"7890c65b880deda8fcaf4ad2908499dd0bb02b7c","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/0.jpg","hash":"a06634c019d8f89cc61365e9d49c235ddb3c8636","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/644.jpg","hash":"d4a147dd0fcfbe3e04c18c006c4bd95cf254bbe8","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/5.png","hash":"1409b6a2eaa309f7bcc2d339abcde13258e99e4b","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/648.png","hash":"f50c29b7a6e5e4b61ee5454ff973fbbd0d5fdae8","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/642.png","hash":"334a78f7522f3f2b7b57c4e9e3f70b274e042ccf","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/641.png","hash":"eecfef65c149e9ae61eff13451c4add431beac68","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/646.png","hash":"e4cfa01fada3dcc993e8238f7ebd1e20a918ee2a","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/643.png","hash":"bcc93b17fc8fede4bf5c1fa74cf960b9c0b1d1a3","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/645.png","hash":"26b17d0608638e80ebcf9e4c58dd7feb702b3566","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/656.png","hash":"54f498d3d5a77d85d4cd96f9fcd5cfd8311a2179","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/647.png","hash":"6b90925dcbf6313e9f398c9f29075c416dcc44c1","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/650.png","hash":"a38f3549da2c2a70557218fde7a1fb0bf9a2c6cc","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/659.png","hash":"43d13e86813cbced7511460da48aefba9397b207","modified":1478184677536},{"_id":"public/2014/10/08/虚拟机联网方式设置/241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","hash":"43cf32137fcc419f147b0d049a032dad787a9604","modified":1478184677536},{"_id":"public/2014/10/08/虚拟机联网方式设置/6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","hash":"1e0406b4457b541e0be60b4df04a2ff5240a2159","modified":1478184677536},{"_id":"public/2014/10/08/虚拟机联网方式设置/a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","hash":"405d1db86abc8489cfc65ef738aa9d3241044df4","modified":1478184677536},{"_id":"public/2014/10/08/虚拟机联网方式设置/aec379310a55b31966f8dc0140a98226cffc1744.jpg","hash":"a29fb4d84b8d820612f68e42f19ca2e3e960fba7","modified":1478184677536},{"_id":"public/2014/10/08/虚拟机联网方式设置/d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","hash":"0add76eff6ca58267c1294209d110d1557d47a12","modified":1478184677536},{"_id":"public/2014/10/08/虚拟机联网方式设置/d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","hash":"16979cb24298216624b6646261b1edc5336224b5","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/655.png","hash":"e3fa927346a1659e6924ba4d207b515cc152d0e2","modified":1478184677536},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/653.png","hash":"ad9b1e83175e8423fe4c2645c28dad8eb5aeb7a0","modified":1478184681056},{"_id":"public/favicon.ico","hash":"f50f1228739e790380a195144d715886ea1961e0","modified":1478184681056},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/658.png","hash":"8eceaff6e792bf573eb27e162671c37f45dc298d","modified":1478184681056},{"_id":"public/css/css.css","hash":"9c4c9aae05ffd5a38082080efb3ddefbd8772cb2","modified":1478184681066},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1478184681066},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1478184681066},{"_id":"public/js/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1478184681066},{"_id":"public/css/style.css","hash":"0c715c997f367c24d09fea5e6ce145909839f9d5","modified":1478184681066},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1478184681066},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1478184681066},{"_id":"public/2013/11/24/Jar转exe/023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","hash":"c8d5a13e4654137460328513aa9cf7dd8665ed61","modified":1478184681066},{"_id":"public/2015/01/05/Java设计模式之观察者模式/003vMReezy6OWsKgs3pa3&690.jpg","hash":"6616e5940a254b19bbe47b2967188cbf0ea6172e","modified":1478184681066},{"_id":"public/2014/12/10/Nginx+Tomcat集群/003vMReezy6OUXDo7kt61&690.jpg","hash":"b7a15e619f8e962958b99ebd38555b84b82ee81e","modified":1478184681066},{"_id":"public/2016/05/17/漫谈工程师的三观/604bf4b4226f180ff45fa8bce5874793_b.png","hash":"b0f1369363a536e77cf92ff4f8c1631f251c2ce0","modified":1478184681066},{"_id":"public/2016/06/05/Java动态编程/43918004_2.png","hash":"7a2586081a717d13a675ece60bb9e45d1e884b86","modified":1478184681066},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","hash":"69cb430bdfd7ca9e049d754a600a56b4f97d840d","modified":1478184681066},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1LyH3gqae&690.jpg","hash":"ad604ae5be66bdcc06aaa1bf626f4303a05ac558","modified":1478184681066},{"_id":"public/2015/01/08/Hadoop集群完全分布式部署/003vMReezy6P1O1zJBg32&690.jpg","hash":"a3a2c32631f0c7ab624041e591f17d760f910bcb","modified":1478184681066},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","hash":"60241276433a3c1e127eb73cdee8dab31683e66c","modified":1478184681066},{"_id":"public/2016/05/17/漫谈工程师的三观/444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","hash":"4cb432f13c4398d2ab1fba7d8026117eac3dcf11","modified":1478184681066},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/2.gif","hash":"a7c195eed6d33a5d1a8ec181b7f6c2b9a18cdd4b","modified":1478184681066},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/b03533fa828ba61e7fad2a384234970a304e5962.jpg","hash":"2b844c6fe1379ca077ae6d4af88fddf2bc44ebb2","modified":1478184681066},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/0.gif","hash":"e66ec9f6ff93f138c6e13f40916f7a87525b8991","modified":1478184681066},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/657.png","hash":"0d77f8761198e7050277b5c33564a1fdb36eba20","modified":1478184681066},{"_id":"public/2014/10/08/虚拟机联网方式设置/203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","hash":"4cdcf9272c1b12b0fa82263420501869f71f49dd","modified":1478184681076},{"_id":"public/2014/10/08/虚拟机联网方式设置/e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","hash":"f5474345f64ced1060d8dcfd327468b8ce42fb69","modified":1478184681076},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1478184681076},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1478184681076},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1478184681076},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478184681076},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478184681076},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1478184681076},{"_id":"public/2014/09/04/中间件远程调试设置/b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","hash":"b9d501fb21f41a4b541537af536c8ae86b59b763","modified":1478184681076},{"_id":"public/2014/09/04/Java开发过程中异常汇总及解决办法/58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","hash":"38f2a87ff83248993d89e4773f23ce3c4572f373","modified":1478184681106},{"_id":"public/2016/05/19/Android反编译与混淆技术完全解析/651.png","hash":"fe7f4fa917058f9996f9a9cc589305f9a6c13fcb","modified":1478184681126},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1478184681296},{"_id":"public/css/images/banner1.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1478184681296},{"_id":"public/2016/05/17/漫谈工程师的三观/7e79f43fc4c4cfa8426a2008080842d6_b.jpg","hash":"782e9ff0c444c4eafc56ca29acce8c4d20fe12ab","modified":1478184681536},{"_id":"public/css/images/banner.jpg","hash":"40908fd3660a61d4e632507dca79cc06d304ed39","modified":1478184681626}],"Category":[{"name":"EXE4J","_id":"civ2gzlki000250ybdbzgg956"},{"name":"JavaScript","_id":"civ2gzlks000350ybiaoeetl5"},{"name":"Java","_id":"civ2gzllw000d50ybfug610m8"},{"name":"Android","_id":"civ2gzlm6000j50ybm6la3iyt"},{"name":"Linux","_id":"civ2gzlmg000p50yb33vyiigg"},{"name":"Oracle","_id":"civ2gzlmq000w50ybc0zetwvh"},{"name":"Tomcat","_id":"civ2gzlmq001150yb5tfti9n9"},{"name":"Hadoop","_id":"civ2gzlna001550ybnpd7vwvy"},{"name":"心得体会","_id":"civ2gzlnk001d50yba18fihgw"},{"name":"MySQL","_id":"civ2gzlnu001i50ybzgjieuda"},{"name":"Other","_id":"civ2gzlnu001r50ybnt9rfkik"},{"name":"培训文档","_id":"civ2gzlo4001x50ybjl0w6jn6"},{"name":"BSF","_id":"civ2gzloo002550ybqwjxg3pn"},{"name":"Eclipse","_id":"civ2gzloo002950yb8w1oplrp"},{"name":"VMware","_id":"civ2gzloo002c50ybf3wrw5ww"}],"Data":[],"Page":[],"Post":[{"title":"Jar转exe","date":"2013-11-24T13:28:01.000Z","comments":1,"toc":true,"_content":"\n最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。\n<!--more-->\n\n## 前言\n***为什么要将Jar转成exe执行文件***\n1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。\n\n2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装\n\n3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。\n\n## 安装exe4j\n\n1、  下载exe4j并进行安装\n[exe4j下载路径](http://www.ej-technologies.com/download/exe4j/files)选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。\n\n## Jar转exe\n1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包\n2、运行exe4j打开的界面如下图\n![exe4j](d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg)\n3、获取license\n![获取license](a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg)\n4、点击Next进入下一步\n![exe4j](f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg)\n在这个界面中我们将选择“JAR”in“EXE”mode选项\n5、点击Next进入下一步\n![exe4j](ac6eddc451da81cbd80640cc5066d016082431cb.jpg)\n6、点击Next继续下一步\n![exe4j](d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg)\nIcon File是选择应用程序的图标\nExecutable name 是应用程序的名称\n在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面\n![exe4j](4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg)\n7、点击Next继续下一步\n![exe4j](c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg)\n8、点击Next继续下一步\n![exe4j](0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg)\n点击界面中的“＋”号选择目标Jar文件\n![exe4j](2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg)\n选择Main函数所在的class类文件\n![exe4j](4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg)\nVM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next\n9、点击Next继续下一步\n![exe4j](7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg)\n在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本\n10、点击Next继续下一步\n![exe4j](b151f8198618367acea2bddc2c738bd4b31ce58c.jpg)\n11、点击Next继续下一步\n![exe4j](96dda144ad345982c72127930ef431adcbef840c.jpg)\n12、点击Next继续下一步\n![exe4j](e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg)\n稍等片刻就到了下个界面\n![exe4j](96dda144ad345982c7ab27930ef431adcbef848a.jpg)\n点击Click Here to Start the Application 进行测试\n![exe4j](c8ea15ce36d3d539d610c2c23887e950352ab086.jpg)\n测试运行\n![exe4j](c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg)\n测试成功。\n\n我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了\n![win.exe](5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg)\n点击win.exe\n![win.exe](1e30e924b899a90168ce99371f950a7b0208f53c.jpg)\n\n## Ant自动构建EXE\n### 新建项目\n创建好工程目录并写Mian函数类\n![java工程](4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg)\n### 获取exe4j的配置文件\n运行exe4j\n![运行exe4j](3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg)\n点击Open选择exe4j的配置文件\n我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭\n![运行exe4j](42166d224f4a20a4063cf1c692529822720ed095.jpg)\n弹出对话框我们选择保存\n在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。\n\n我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<exe4j version=\"4.5.2\" transformSequenceNumber=\"1\">\n  <directoryPresets config=\"H:/Program Files (x86)/Java\" />\n  <application name=\"PMS\" distributionSourceDir=\"@distributionSourceDir@\">\n    <languages>\n      <principalLanguage id=\"en\" customLocalizationFile=\"\" />\n    </languages>\n  </application>\n  <executable name=\"@app.name@\" type=\"2\" iconSet=\"true\" iconFile=\"@iconFile@\" executableDir=\"\" redirectStderr=\"true\" stderrFile=\"error.log\" stderrMode=\"overwrite\" redirectStdout=\"false\" stdoutFile=\"output.log\" stdoutMode=\"overwrite\" failOnStderrOutput=\"true\" executableMode=\"1\" changeWorkingDirectory=\"true\" workingDirectory=\".\" singleInstance=\"false\" serviceStartType=\"2\" serviceDependencies=\"\" serviceDescription=\"\" jreLocation=\"\" executionLevel=\"asInvoker\" checkConsoleParameter=\"false\" globalSingleInstance=\"false\" amd64=\"true\">\n    <messageSet />\n    <versionInfo include=\"false\" fileVersion=\"\" fileDescription=\"\" legalCopyright=\"\" internalName=\"\" productName=\"\" companyName=\"\" productVersion=\"\" />\n  </executable>\n  <splashScreen show=\"false\" autoOff=\"true\" alwaysOnTop=\"true\" width=\"0\" height=\"0\" bitmapFile=\"\" java6SplashScreen=\"false\">\n    <text>\n      <statusLine x=\"20\" y=\"20\" text=\"\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n      <versionLine x=\"20\" y=\"40\" text=\"version %VERSION%\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n    </text>\n  </splashScreen>\n  <java mainClass=\"@mianclass@\" vmParameters=\"\" arguments=\"\" allowVMPassthroughParameters=\"true\" preferredVM=\"client\" bundleRuntime=\"true\" minVersion=\"1.4\" maxVersion=\"1.7\" allowBetaVM=\"false\" jdkOnly=\"false\">\n    <searchSequence>\n      <registry />\n      <envVar name=\"JAVA_HOME\" />\n      <envVar name=\"JDK_HOME\" />\n      <directory location=\"H:/Program Files (x86)/Java/jre7\" />\n    </searchSequence>\n    <classPath>\n      <archive location=\"@todir@\" failOnError=\"false\" />\n    </classPath>\n    <nativeLibraryDirectories />\n  </java>\n  <includedFiles />\n  <unextractableFiles />\n</exe4j>\n```\n\n### build.xml\n```xml\n<?xml version=\"1.0\" encoding=\"GBK\"?>\n<project name=\"jar2exe\" basedir=\".\">\n\t<property file=\"build.properties\"/>\n\t<property name=\"lib.dir\" location=\"lib\"/>\n\t<property name=\"src.dir\" location=\"src\"/>\n\t<property name=\"dist.dir\" location=\"dist\"/>\n\t<property name=\"build.dir\" location=\"build\"/>\n\t<property name=\"config.dir\" location=\"config\"/>\n\t<property name=\"build.source\" value=\"1.5\" />\n\t<property name=\"build.target\" value=\"1.5\" />\n\t<property name=\"app.dir\" location=\"app\" />\n\t<property name=\"exe4j.template.dir\" location=\"config/template\"/>\n\t<path id=\"exe4j.path\">\n\t\t<pathelement path=\"${exe4j.ant.jar}\"/>\n\t</path>\n\t<target name=\"init\">\n\t\t<echo message=\"init\"/>\n\t\t<path id=\"base.path\"/>\n\t</target>\n    <target name=\"clean\" depends=\"init\">\n\t    <echo message=\"clean\"/>\n\t    <delete dir=\"${build.dir}\"/>\n\t    <delete dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"prepare\" depends=\"init,clean\">\n\t    <echo message=\"prepare\"/>\n\t    <mkdir dir=\"${build.dir}\"/>\n\t    <mkdir dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"build.exe4j\">\n\t\t<copy todir=\"${config.dir}\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${exe4j.template.dir}\" includes=\"template.exe4j\" />\n\t\t</copy>\n\t\t<replace file=\"${config.dir}/template.exe4j\">\n\t\t\t<replacefilter token=\"@distributionSourceDir@\" value=\"${distributionSourceDir}\" />\n\t\t\t<replacefilter token=\"@app.name@\" value=\"${app.name}\" />\n\t\t\t<replacefilter token=\"@amd64@\" value=\"${amd64}\" />\n\t\t\t<replacefilter token=\"@iconFile@\" value=\"${iconFile}\" />\n\t\t\t<replacefilter token=\"@mianclass@\" value=\"${mianclass}\" />\n\t\t\t<replacefilter token=\"@todir@\" value=\"${todir}\" />\n \t\t</replace>\n    </target>\n\t\n\t <target name=\"copy-file\">\n\t \t<copy todir=\"${distributionSourceDir}/app\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${app.dir}\">\n\t\t\t\t<include name=\"**/*\" />\n\t\t\t</fileset>\n  \t\t</copy>\n\t </target>\n\t  \n  <target name=\"javac-project\" depends=\"prepare,copy-file\">\n\t   <echo message=\"javac\"/>\n\t   <javac srcdir=\"${src.dir}\" verbose=\"true\" destdir=\"${build.dir}\" classpathref=\"base.path\"  optimize=\"true\" target=\"${build.target}\" source=\"${build.source}\" debuglevel=\"none\">\n\t\t\t<classpath>\n\t\t\t\t<fileset dir=\"${lib.dir}\">\n\t\t\t\t\t<include name=\"**/*jar\" />\n\t\t\t\t</fileset>\n\t\t\t\t<pathelement location=\"bin\" />\n\t\t\t</classpath>\n\t\t</javac>\n  </target>\n\t\n\t <target name=\"unjar\">\n\t\t<unjar src=\"${lib.dir}/DJNativeSwing-SWT.jar\" dest=\"${build.dir}\"/>\n\t \t<unjar src=\"${lib.dir}/DJNativeSwing.jar\" dest=\"${build.dir}\"/>\n\t\t<unjar src=\"${lib.dir}/swt.zip\" dest=\"${build.dir}\"/>\n\t </target>\n\t\n\t  <target name=\"jar-project\"  depends=\"javac-project,unjar\">\n\t\t   <echo message=\"jar-project\"/>\n\t\t   <jar jarfile=\"${dist.dir}/FileManager.jar\">\n\t\t\t    <fileset dir=\"${build.dir}\">\n\t\t\t\t     <include name=\"**/*.class\"/>\n\t\t\t\t     <include name=\"**/*.t\"/>\n\t\t\t    \t <include name=\"**/*.gif\"/>\n\t\t\t    \t <include name=\"**/*.png\"/>\n\t\t\t    \t <include name=\"**/*.jpg\"/>\n\t\t\t    \t <include name=\"**/*.dll\"/>\n\t\t\t\t     <!-- msutil.jar中的*.properties必须包含进来，否则运行时出错-->\n\t\t\t\t     <include name=\"**/*.properties\"/>\n\t\t\t    </fileset>\n\t\t  \t \t<manifest>\n\t                <attribute name=\"Class-Path\" value=\".\"/>\n\t                <attribute name=\"Main-Class\" value=\"${mianclass}\"/>\n\t            </manifest>\n\t\t   </jar>\n\t  </target>\n\t\n\t  <taskdef name=\"exe4j\" classname=\"com.exe4j.Exe4JTask\">\n\t   \t\t<classpath refid=\"exe4j.path\"/>\n\t  </taskdef>\n\t\n\t  <target name=\"jar2exe\" depends=\"build.exe4j,jar-project\">\n\t  \t \t<exe4j projectfile=\"${app.exe4j}\"/>\n\t  </target>\n\t\n\t  <target name=\"finish\" depends=\"jar2exe\">\n\t   \t\t<echo message=\"finish\"/>\n\t  </target>\n</project>\n```\n### build.properties\n文件内容已经参数说明\n```properties\n#exe4j ant jar包路径\nexe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar\n#文件保存路径\ndistributionSourceDir=C:/Users/yanwuyang/Desktop/test\n#exe4j模板配置文件路径\napp.template.exe4j=config/template/template.exe4j\n#exe4j配置文件路径\napp.exe4j=config/template.exe4j\n#应用程序main函数类路径\nmianclass=cn.com.win.Main\n#应用程序名称\napp.name=PMS\n#应用程序图标\niconFile=G:/image/ICO/4594/200.ico\n#jar输出路径\ntodir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar\n```\n经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下\n![finish](caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg)\n点击finish\n![finish](023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg)\n呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在\n![finish](c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg)\n","source":"_posts/Jar转exe.md","raw":"---\ntitle: Jar转exe\ndate: 2013-11-24 21:28:01\ncomments: true\ncategories: EXE4J\ntoc: true \n---\n\n最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。\n<!--more-->\n\n## 前言\n***为什么要将Jar转成exe执行文件***\n1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。\n\n2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装\n\n3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。\n\n## 安装exe4j\n\n1、  下载exe4j并进行安装\n[exe4j下载路径](http://www.ej-technologies.com/download/exe4j/files)选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。\n\n## Jar转exe\n1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包\n2、运行exe4j打开的界面如下图\n![exe4j](d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg)\n3、获取license\n![获取license](a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg)\n4、点击Next进入下一步\n![exe4j](f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg)\n在这个界面中我们将选择“JAR”in“EXE”mode选项\n5、点击Next进入下一步\n![exe4j](ac6eddc451da81cbd80640cc5066d016082431cb.jpg)\n6、点击Next继续下一步\n![exe4j](d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg)\nIcon File是选择应用程序的图标\nExecutable name 是应用程序的名称\n在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面\n![exe4j](4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg)\n7、点击Next继续下一步\n![exe4j](c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg)\n8、点击Next继续下一步\n![exe4j](0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg)\n点击界面中的“＋”号选择目标Jar文件\n![exe4j](2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg)\n选择Main函数所在的class类文件\n![exe4j](4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg)\nVM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next\n9、点击Next继续下一步\n![exe4j](7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg)\n在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本\n10、点击Next继续下一步\n![exe4j](b151f8198618367acea2bddc2c738bd4b31ce58c.jpg)\n11、点击Next继续下一步\n![exe4j](96dda144ad345982c72127930ef431adcbef840c.jpg)\n12、点击Next继续下一步\n![exe4j](e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg)\n稍等片刻就到了下个界面\n![exe4j](96dda144ad345982c7ab27930ef431adcbef848a.jpg)\n点击Click Here to Start the Application 进行测试\n![exe4j](c8ea15ce36d3d539d610c2c23887e950352ab086.jpg)\n测试运行\n![exe4j](c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg)\n测试成功。\n\n我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了\n![win.exe](5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg)\n点击win.exe\n![win.exe](1e30e924b899a90168ce99371f950a7b0208f53c.jpg)\n\n## Ant自动构建EXE\n### 新建项目\n创建好工程目录并写Mian函数类\n![java工程](4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg)\n### 获取exe4j的配置文件\n运行exe4j\n![运行exe4j](3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg)\n点击Open选择exe4j的配置文件\n我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭\n![运行exe4j](42166d224f4a20a4063cf1c692529822720ed095.jpg)\n弹出对话框我们选择保存\n在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。\n\n我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<exe4j version=\"4.5.2\" transformSequenceNumber=\"1\">\n  <directoryPresets config=\"H:/Program Files (x86)/Java\" />\n  <application name=\"PMS\" distributionSourceDir=\"@distributionSourceDir@\">\n    <languages>\n      <principalLanguage id=\"en\" customLocalizationFile=\"\" />\n    </languages>\n  </application>\n  <executable name=\"@app.name@\" type=\"2\" iconSet=\"true\" iconFile=\"@iconFile@\" executableDir=\"\" redirectStderr=\"true\" stderrFile=\"error.log\" stderrMode=\"overwrite\" redirectStdout=\"false\" stdoutFile=\"output.log\" stdoutMode=\"overwrite\" failOnStderrOutput=\"true\" executableMode=\"1\" changeWorkingDirectory=\"true\" workingDirectory=\".\" singleInstance=\"false\" serviceStartType=\"2\" serviceDependencies=\"\" serviceDescription=\"\" jreLocation=\"\" executionLevel=\"asInvoker\" checkConsoleParameter=\"false\" globalSingleInstance=\"false\" amd64=\"true\">\n    <messageSet />\n    <versionInfo include=\"false\" fileVersion=\"\" fileDescription=\"\" legalCopyright=\"\" internalName=\"\" productName=\"\" companyName=\"\" productVersion=\"\" />\n  </executable>\n  <splashScreen show=\"false\" autoOff=\"true\" alwaysOnTop=\"true\" width=\"0\" height=\"0\" bitmapFile=\"\" java6SplashScreen=\"false\">\n    <text>\n      <statusLine x=\"20\" y=\"20\" text=\"\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n      <versionLine x=\"20\" y=\"40\" text=\"version %VERSION%\" font=\"Arial\" fontSize=\"8\" fontColor=\"0,0,0\" fontWeight=\"500\" />\n    </text>\n  </splashScreen>\n  <java mainClass=\"@mianclass@\" vmParameters=\"\" arguments=\"\" allowVMPassthroughParameters=\"true\" preferredVM=\"client\" bundleRuntime=\"true\" minVersion=\"1.4\" maxVersion=\"1.7\" allowBetaVM=\"false\" jdkOnly=\"false\">\n    <searchSequence>\n      <registry />\n      <envVar name=\"JAVA_HOME\" />\n      <envVar name=\"JDK_HOME\" />\n      <directory location=\"H:/Program Files (x86)/Java/jre7\" />\n    </searchSequence>\n    <classPath>\n      <archive location=\"@todir@\" failOnError=\"false\" />\n    </classPath>\n    <nativeLibraryDirectories />\n  </java>\n  <includedFiles />\n  <unextractableFiles />\n</exe4j>\n```\n\n### build.xml\n```xml\n<?xml version=\"1.0\" encoding=\"GBK\"?>\n<project name=\"jar2exe\" basedir=\".\">\n\t<property file=\"build.properties\"/>\n\t<property name=\"lib.dir\" location=\"lib\"/>\n\t<property name=\"src.dir\" location=\"src\"/>\n\t<property name=\"dist.dir\" location=\"dist\"/>\n\t<property name=\"build.dir\" location=\"build\"/>\n\t<property name=\"config.dir\" location=\"config\"/>\n\t<property name=\"build.source\" value=\"1.5\" />\n\t<property name=\"build.target\" value=\"1.5\" />\n\t<property name=\"app.dir\" location=\"app\" />\n\t<property name=\"exe4j.template.dir\" location=\"config/template\"/>\n\t<path id=\"exe4j.path\">\n\t\t<pathelement path=\"${exe4j.ant.jar}\"/>\n\t</path>\n\t<target name=\"init\">\n\t\t<echo message=\"init\"/>\n\t\t<path id=\"base.path\"/>\n\t</target>\n    <target name=\"clean\" depends=\"init\">\n\t    <echo message=\"clean\"/>\n\t    <delete dir=\"${build.dir}\"/>\n\t    <delete dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"prepare\" depends=\"init,clean\">\n\t    <echo message=\"prepare\"/>\n\t    <mkdir dir=\"${build.dir}\"/>\n\t    <mkdir dir=\"${dist.dir}\"/>\n    </target>\n    <target name=\"build.exe4j\">\n\t\t<copy todir=\"${config.dir}\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${exe4j.template.dir}\" includes=\"template.exe4j\" />\n\t\t</copy>\n\t\t<replace file=\"${config.dir}/template.exe4j\">\n\t\t\t<replacefilter token=\"@distributionSourceDir@\" value=\"${distributionSourceDir}\" />\n\t\t\t<replacefilter token=\"@app.name@\" value=\"${app.name}\" />\n\t\t\t<replacefilter token=\"@amd64@\" value=\"${amd64}\" />\n\t\t\t<replacefilter token=\"@iconFile@\" value=\"${iconFile}\" />\n\t\t\t<replacefilter token=\"@mianclass@\" value=\"${mianclass}\" />\n\t\t\t<replacefilter token=\"@todir@\" value=\"${todir}\" />\n \t\t</replace>\n    </target>\n\t\n\t <target name=\"copy-file\">\n\t \t<copy todir=\"${distributionSourceDir}/app\" overwrite=\"true\">\n\t\t\t<fileset dir=\"${app.dir}\">\n\t\t\t\t<include name=\"**/*\" />\n\t\t\t</fileset>\n  \t\t</copy>\n\t </target>\n\t  \n  <target name=\"javac-project\" depends=\"prepare,copy-file\">\n\t   <echo message=\"javac\"/>\n\t   <javac srcdir=\"${src.dir}\" verbose=\"true\" destdir=\"${build.dir}\" classpathref=\"base.path\"  optimize=\"true\" target=\"${build.target}\" source=\"${build.source}\" debuglevel=\"none\">\n\t\t\t<classpath>\n\t\t\t\t<fileset dir=\"${lib.dir}\">\n\t\t\t\t\t<include name=\"**/*jar\" />\n\t\t\t\t</fileset>\n\t\t\t\t<pathelement location=\"bin\" />\n\t\t\t</classpath>\n\t\t</javac>\n  </target>\n\t\n\t <target name=\"unjar\">\n\t\t<unjar src=\"${lib.dir}/DJNativeSwing-SWT.jar\" dest=\"${build.dir}\"/>\n\t \t<unjar src=\"${lib.dir}/DJNativeSwing.jar\" dest=\"${build.dir}\"/>\n\t\t<unjar src=\"${lib.dir}/swt.zip\" dest=\"${build.dir}\"/>\n\t </target>\n\t\n\t  <target name=\"jar-project\"  depends=\"javac-project,unjar\">\n\t\t   <echo message=\"jar-project\"/>\n\t\t   <jar jarfile=\"${dist.dir}/FileManager.jar\">\n\t\t\t    <fileset dir=\"${build.dir}\">\n\t\t\t\t     <include name=\"**/*.class\"/>\n\t\t\t\t     <include name=\"**/*.t\"/>\n\t\t\t    \t <include name=\"**/*.gif\"/>\n\t\t\t    \t <include name=\"**/*.png\"/>\n\t\t\t    \t <include name=\"**/*.jpg\"/>\n\t\t\t    \t <include name=\"**/*.dll\"/>\n\t\t\t\t     <!-- msutil.jar中的*.properties必须包含进来，否则运行时出错-->\n\t\t\t\t     <include name=\"**/*.properties\"/>\n\t\t\t    </fileset>\n\t\t  \t \t<manifest>\n\t                <attribute name=\"Class-Path\" value=\".\"/>\n\t                <attribute name=\"Main-Class\" value=\"${mianclass}\"/>\n\t            </manifest>\n\t\t   </jar>\n\t  </target>\n\t\n\t  <taskdef name=\"exe4j\" classname=\"com.exe4j.Exe4JTask\">\n\t   \t\t<classpath refid=\"exe4j.path\"/>\n\t  </taskdef>\n\t\n\t  <target name=\"jar2exe\" depends=\"build.exe4j,jar-project\">\n\t  \t \t<exe4j projectfile=\"${app.exe4j}\"/>\n\t  </target>\n\t\n\t  <target name=\"finish\" depends=\"jar2exe\">\n\t   \t\t<echo message=\"finish\"/>\n\t  </target>\n</project>\n```\n### build.properties\n文件内容已经参数说明\n```properties\n#exe4j ant jar包路径\nexe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar\n#文件保存路径\ndistributionSourceDir=C:/Users/yanwuyang/Desktop/test\n#exe4j模板配置文件路径\napp.template.exe4j=config/template/template.exe4j\n#exe4j配置文件路径\napp.exe4j=config/template.exe4j\n#应用程序main函数类路径\nmianclass=cn.com.win.Main\n#应用程序名称\napp.name=PMS\n#应用程序图标\niconFile=G:/image/ICO/4594/200.ico\n#jar输出路径\ntodir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar\n```\n经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下\n![finish](caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg)\n点击finish\n![finish](023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg)\n呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在\n![finish](c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg)\n","slug":"Jar转exe","published":1,"updated":"2016-05-14T09:24:01.462Z","layout":"post","photos":[],"link":"","_id":"civ2gzljo000050ybha08fo9z","content":"<p>最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。<br><a id=\"more\"></a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong><em>为什么要将Jar转成exe执行文件</em></strong><br>1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。</p>\n<p>2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装</p>\n<p>3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。</p>\n<h2 id=\"安装exe4j\"><a href=\"#安装exe4j\" class=\"headerlink\" title=\"安装exe4j\"></a>安装exe4j</h2><p>1、  下载exe4j并进行安装<br><a href=\"http://www.ej-technologies.com/download/exe4j/files\" target=\"_blank\" rel=\"external\">exe4j下载路径</a>选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。</p>\n<h2 id=\"Jar转exe\"><a href=\"#Jar转exe\" class=\"headerlink\" title=\"Jar转exe\"></a>Jar转exe</h2><p>1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包<br>2、运行exe4j打开的界面如下图<br><img src=\"d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg\" alt=\"exe4j\"><br>3、获取license<br><img src=\"a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg\" alt=\"获取license\"><br>4、点击Next进入下一步<br><img src=\"f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg\" alt=\"exe4j\"><br>在这个界面中我们将选择“JAR”in“EXE”mode选项<br>5、点击Next进入下一步<br><img src=\"ac6eddc451da81cbd80640cc5066d016082431cb.jpg\" alt=\"exe4j\"><br>6、点击Next继续下一步<br><img src=\"d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg\" alt=\"exe4j\"><br>Icon File是选择应用程序的图标<br>Executable name 是应用程序的名称<br>在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面<br><img src=\"4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg\" alt=\"exe4j\"><br>7、点击Next继续下一步<br><img src=\"c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg\" alt=\"exe4j\"><br>8、点击Next继续下一步<br><img src=\"0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg\" alt=\"exe4j\"><br>点击界面中的“＋”号选择目标Jar文件<br><img src=\"2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg\" alt=\"exe4j\"><br>选择Main函数所在的class类文件<br><img src=\"4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg\" alt=\"exe4j\"><br>VM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next<br>9、点击Next继续下一步<br><img src=\"7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg\" alt=\"exe4j\"><br>在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本<br>10、点击Next继续下一步<br><img src=\"b151f8198618367acea2bddc2c738bd4b31ce58c.jpg\" alt=\"exe4j\"><br>11、点击Next继续下一步<br><img src=\"96dda144ad345982c72127930ef431adcbef840c.jpg\" alt=\"exe4j\"><br>12、点击Next继续下一步<br><img src=\"e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg\" alt=\"exe4j\"><br>稍等片刻就到了下个界面<br><img src=\"96dda144ad345982c7ab27930ef431adcbef848a.jpg\" alt=\"exe4j\"><br>点击Click Here to Start the Application 进行测试<br><img src=\"c8ea15ce36d3d539d610c2c23887e950352ab086.jpg\" alt=\"exe4j\"><br>测试运行<br><img src=\"c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg\" alt=\"exe4j\"><br>测试成功。</p>\n<p>我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了<br><img src=\"5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg\" alt=\"win.exe\"><br>点击win.exe<br><img src=\"1e30e924b899a90168ce99371f950a7b0208f53c.jpg\" alt=\"win.exe\"></p>\n<h2 id=\"Ant自动构建EXE\"><a href=\"#Ant自动构建EXE\" class=\"headerlink\" title=\"Ant自动构建EXE\"></a>Ant自动构建EXE</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>创建好工程目录并写Mian函数类<br><img src=\"4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg\" alt=\"java工程\"></p>\n<h3 id=\"获取exe4j的配置文件\"><a href=\"#获取exe4j的配置文件\" class=\"headerlink\" title=\"获取exe4j的配置文件\"></a>获取exe4j的配置文件</h3><p>运行exe4j<br><img src=\"3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg\" alt=\"运行exe4j\"><br>点击Open选择exe4j的配置文件<br>我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭<br><img src=\"42166d224f4a20a4063cf1c692529822720ed095.jpg\" alt=\"运行exe4j\"><br>弹出对话框我们选择保存<br>在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。</p>\n<p>我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">version</span>=<span class=\"string\">\"4.5.2\"</span> <span class=\"attr\">transformSequenceNumber</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">directoryPresets</span> <span class=\"attr\">config</span>=<span class=\"string\">\"H:/Program Files (x86)/Java\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">name</span>=<span class=\"string\">\"PMS\"</span> <span class=\"attr\">distributionSourceDir</span>=<span class=\"string\">\"@distributionSourceDir@\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">principalLanguage</span> <span class=\"attr\">id</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">customLocalizationFile</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">iconSet</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">iconFile</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">executableDir</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">redirectStderr</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">stderrFile</span>=<span class=\"string\">\"error.log\"</span> <span class=\"attr\">stderrMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">redirectStdout</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">stdoutFile</span>=<span class=\"string\">\"output.log\"</span> <span class=\"attr\">stdoutMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">failOnStderrOutput</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">executableMode</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">changeWorkingDirectory</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">workingDirectory</span>=<span class=\"string\">\".\"</span> <span class=\"attr\">singleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">serviceStartType</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">serviceDependencies</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">serviceDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">jreLocation</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">executionLevel</span>=<span class=\"string\">\"asInvoker\"</span> <span class=\"attr\">checkConsoleParameter</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">globalSingleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">amd64</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">messageSet</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">versionInfo</span> <span class=\"attr\">include</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">fileVersion</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">fileDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">legalCopyright</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">internalName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">companyName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productVersion</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">splashScreen</span> <span class=\"attr\">show</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autoOff</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">alwaysOnTop</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">bitmapFile</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">java6SplashScreen</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">statusLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">versionLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"version %VERSION%\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">splashScreen</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">java</span> <span class=\"attr\">mainClass</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">vmParameters</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">arguments</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">allowVMPassthroughParameters</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">preferredVM</span>=<span class=\"string\">\"client\"</span> <span class=\"attr\">bundleRuntime</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">minVersion</span>=<span class=\"string\">\"1.4\"</span> <span class=\"attr\">maxVersion</span>=<span class=\"string\">\"1.7\"</span> <span class=\"attr\">allowBetaVM</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">jdkOnly</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">registry</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JAVA_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JDK_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span> <span class=\"attr\">location</span>=<span class=\"string\">\"H:/Program Files (x86)/Java/jre7\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">archive</span> <span class=\"attr\">location</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">failOnError</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nativeLibraryDirectories</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">java</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">includedFiles</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">unextractableFiles</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">exe4j</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"build-xml\"><a href=\"#build-xml\" class=\"headerlink\" title=\"build.xml\"></a>build.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"GBK\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">basedir</span>=<span class=\"string\">\".\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">file</span>=<span class=\"string\">\"build.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lib.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"lib\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"src.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"src\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dist.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"dist\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"config.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.source\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.target\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"app\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j.template.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config/template\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exe4j.path\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">path</span>=<span class=\"string\">\"$&#123;exe4j.ant.jar&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"init\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"base.path\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clean\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"clean\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prepare\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init,clean\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"prepare\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;config.dir&#125;\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;exe4j.template.dir&#125;\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"template.exe4j\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">replace</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$&#123;config.dir&#125;/template.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@distributionSourceDir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;app.name&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@amd64@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;amd64&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;iconFile&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;todir&#125;\"</span> /&gt;</span></span><br><span class=\"line\"> \t\t<span class=\"tag\">&lt;/<span class=\"name\">replace</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;/app\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;app.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"javac-project\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"prepare,copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"javac\"</span>/&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">javac</span> <span class=\"attr\">srcdir</span>=<span class=\"string\">\"$&#123;src.dir&#125;\"</span> <span class=\"attr\">verbose</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">destdir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span> <span class=\"attr\">classpathref</span>=<span class=\"string\">\"base.path\"</span>  <span class=\"attr\">optimize</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"$&#123;build.target&#125;\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"$&#123;build.source&#125;\"</span> <span class=\"attr\">debuglevel</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;lib.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*jar\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"bin\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javac</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing-SWT.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/swt.zip\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar-project\"</span>  <span class=\"attr\">depends</span>=<span class=\"string\">\"javac-project,unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"jar-project\"</span>/&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">jar</span> <span class=\"attr\">jarfile</span>=<span class=\"string\">\"$&#123;dist.dir&#125;/FileManager.jar\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.class\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.t\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.gif\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.png\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.jpg\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.dll\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"comment\">&lt;!-- msutil.jar中的*.properties必须包含进来，否则运行时出错--&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Class-Path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".\"</span>/&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Main-Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">jar</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">taskdef</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j\"</span> <span class=\"attr\">classname</span>=<span class=\"string\">\"com.exe4j.Exe4JTask\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"exe4j.path\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">taskdef</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"build.exe4j,jar-project\"</span>&gt;</span></span><br><span class=\"line\">\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">projectfile</span>=<span class=\"string\">\"$&#123;app.exe4j&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"finish\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"jar2exe\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"finish\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"build-properties\"><a href=\"#build-properties\" class=\"headerlink\" title=\"build.properties\"></a>build.properties</h3><p>文件内容已经参数说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#exe4j ant jar包路径</span><br><span class=\"line\">exe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar</span><br><span class=\"line\">#文件保存路径</span><br><span class=\"line\">distributionSourceDir=C:/Users/yanwuyang/Desktop/test</span><br><span class=\"line\">#exe4j模板配置文件路径</span><br><span class=\"line\">app.template.exe4j=config/template/template.exe4j</span><br><span class=\"line\">#exe4j配置文件路径</span><br><span class=\"line\">app.exe4j=config/template.exe4j</span><br><span class=\"line\">#应用程序main函数类路径</span><br><span class=\"line\">mianclass=cn.com.win.Main</span><br><span class=\"line\">#应用程序名称</span><br><span class=\"line\">app.name=PMS</span><br><span class=\"line\">#应用程序图标</span><br><span class=\"line\">iconFile=G:/image/ICO/4594/200.ico</span><br><span class=\"line\">#jar输出路径</span><br><span class=\"line\">todir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar</span><br></pre></td></tr></table></figure></p>\n<p>经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下<br><img src=\"caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg\" alt=\"finish\"><br>点击finish<br><img src=\"023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg\" alt=\"finish\"><br>呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在<br><img src=\"c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg\" alt=\"finish\"></p>\n","excerpt":"<p>最近使用exe4j将java执行文件“jar”转为“exe”执行文件收获良多。在网上有关这反面的资料还是相对比较少，尤其是通过在Eclipse中通过ANT构建那更是少之又少而且起不到实际的帮助作用。通过一晚上的研究颇有成功和心得，现在记录下来以备以后忘记也和大家一起共享下。<br>","more":"</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong><em>为什么要将Jar转成exe执行文件</em></strong><br>1、  开发人员开发出来的软件一般都是给普通用户使用，而普通用户一般都是使用的window系统。而exe是window系统上的可执行文件，根据符合大众的习惯和常识。</p>\n<p>2、从商业软件的角度来说 对于普通用户而言 jar还是有很多不方便的地方比如说用户的机器.jar格式文件是默认以其它方式打开(如rar), 那么双击jar文件时就不能正常运行再比如说用户没有装jre, 那么程序不能运行，且不能给出友好的提示而如果是exe的话，由于没装jre而不能运行的话，则可以友好的告诉用户还没安装jre 提示安装</p>\n<p>3、  引用程序图标问题jar执行文件不能更改图标而exe是可以的。</p>\n<h2 id=\"安装exe4j\"><a href=\"#安装exe4j\" class=\"headerlink\" title=\"安装exe4j\"></a>安装exe4j</h2><p>1、  下载exe4j并进行安装<br><a href=\"http://www.ej-technologies.com/download/exe4j/files\">exe4j下载路径</a>选择符合自己操作系统的安装程序。如何安装在这就不多说了直接一直按next就ok了。</p>\n<h2 id=\"Jar转exe\"><a href=\"#Jar转exe\" class=\"headerlink\" title=\"Jar转exe\"></a>Jar转exe</h2><p>1、准备好需要转换成exe的jar前提条件就是要保证jar值可执行的文件不能是一个错误的jar包<br>2、运行exe4j打开的界面如下图<br><img src=\"d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg\" alt=\"exe4j\"><br>3、获取license<br><img src=\"a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg\" alt=\"获取license\"><br>4、点击Next进入下一步<br><img src=\"f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg\" alt=\"exe4j\"><br>在这个界面中我们将选择“JAR”in“EXE”mode选项<br>5、点击Next进入下一步<br><img src=\"ac6eddc451da81cbd80640cc5066d016082431cb.jpg\" alt=\"exe4j\"><br>6、点击Next继续下一步<br><img src=\"d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg\" alt=\"exe4j\"><br>Icon File是选择应用程序的图标<br>Executable name 是应用程序的名称<br>在Advanced Options选项中我们选择32-bit or 64-bit这样更好的兼容的兼容系统，选择32-bit or 64-bit后进来界面<br><img src=\"4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg\" alt=\"exe4j\"><br>7、点击Next继续下一步<br><img src=\"c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg\" alt=\"exe4j\"><br>8、点击Next继续下一步<br><img src=\"0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg\" alt=\"exe4j\"><br>点击界面中的“＋”号选择目标Jar文件<br><img src=\"2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg\" alt=\"exe4j\"><br>选择Main函数所在的class类文件<br><img src=\"4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg\" alt=\"exe4j\"><br>VM Parameters是有关虚拟机的一些设置参数在这里我们可以不填直接按Next<br>9、点击Next继续下一步<br><img src=\"7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg\" alt=\"exe4j\"><br>在这里 Minimum version 和Maximum version 是输入的Jre的最小和最大版本<br>10、点击Next继续下一步<br><img src=\"b151f8198618367acea2bddc2c738bd4b31ce58c.jpg\" alt=\"exe4j\"><br>11、点击Next继续下一步<br><img src=\"96dda144ad345982c72127930ef431adcbef840c.jpg\" alt=\"exe4j\"><br>12、点击Next继续下一步<br><img src=\"e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg\" alt=\"exe4j\"><br>稍等片刻就到了下个界面<br><img src=\"96dda144ad345982c7ab27930ef431adcbef848a.jpg\" alt=\"exe4j\"><br>点击Click Here to Start the Application 进行测试<br><img src=\"c8ea15ce36d3d539d610c2c23887e950352ab086.jpg\" alt=\"exe4j\"><br>测试运行<br><img src=\"c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg\" alt=\"exe4j\"><br>测试成功。</p>\n<p>我们在来看看我们设置的输出路径看看我们的文件有没有生成，呵呵文件果然生成了<br><img src=\"5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg\" alt=\"win.exe\"><br>点击win.exe<br><img src=\"1e30e924b899a90168ce99371f950a7b0208f53c.jpg\" alt=\"win.exe\"></p>\n<h2 id=\"Ant自动构建EXE\"><a href=\"#Ant自动构建EXE\" class=\"headerlink\" title=\"Ant自动构建EXE\"></a>Ant自动构建EXE</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>创建好工程目录并写Mian函数类<br><img src=\"4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg\" alt=\"java工程\"></p>\n<h3 id=\"获取exe4j的配置文件\"><a href=\"#获取exe4j的配置文件\" class=\"headerlink\" title=\"获取exe4j的配置文件\"></a>获取exe4j的配置文件</h3><p>运行exe4j<br><img src=\"3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg\" alt=\"运行exe4j\"><br>点击Open选择exe4j的配置文件<br>我们选择exe4j安装目录下的/config/template.exe4j，一直按照上面的操作重新做一遍这里就不做重复最后点击关闭<br><img src=\"42166d224f4a20a4063cf1c692529822720ed095.jpg\" alt=\"运行exe4j\"><br>弹出对话框我们选择保存<br>在到template.exe4j所在目录复制template.exe4j到Eclipse工程config/template/目录下，我们也可以看看template.exe4j文件的内容选择文件右键文本文件打开。如下图就是我们刚才设置的一写参数，如果你对这些很熟当然也可直接在这里进行编辑。下面我们就会说到这这个文件里对参数进行编辑。</p>\n<p>我们需要对得到的配置文件进行先修改修改成如下，将修改好的文件放到Eclipse工程config/template目录下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">version</span>=<span class=\"string\">\"4.5.2\"</span> <span class=\"attr\">transformSequenceNumber</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">directoryPresets</span> <span class=\"attr\">config</span>=<span class=\"string\">\"H:/Program Files (x86)/Java\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">name</span>=<span class=\"string\">\"PMS\"</span> <span class=\"attr\">distributionSourceDir</span>=<span class=\"string\">\"@distributionSourceDir@\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">principalLanguage</span> <span class=\"attr\">id</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">customLocalizationFile</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">languages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">iconSet</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">iconFile</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">executableDir</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">redirectStderr</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">stderrFile</span>=<span class=\"string\">\"error.log\"</span> <span class=\"attr\">stderrMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">redirectStdout</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">stdoutFile</span>=<span class=\"string\">\"output.log\"</span> <span class=\"attr\">stdoutMode</span>=<span class=\"string\">\"overwrite\"</span> <span class=\"attr\">failOnStderrOutput</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">executableMode</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">changeWorkingDirectory</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">workingDirectory</span>=<span class=\"string\">\".\"</span> <span class=\"attr\">singleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">serviceStartType</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">serviceDependencies</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">serviceDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">jreLocation</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">executionLevel</span>=<span class=\"string\">\"asInvoker\"</span> <span class=\"attr\">checkConsoleParameter</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">globalSingleInstance</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">amd64</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">messageSet</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">versionInfo</span> <span class=\"attr\">include</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">fileVersion</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">fileDescription</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">legalCopyright</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">internalName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">companyName</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">productVersion</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">splashScreen</span> <span class=\"attr\">show</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">autoOff</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">alwaysOnTop</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">bitmapFile</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">java6SplashScreen</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">statusLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">versionLine</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">text</span>=<span class=\"string\">\"version %VERSION%\"</span> <span class=\"attr\">font</span>=<span class=\"string\">\"Arial\"</span> <span class=\"attr\">fontSize</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">fontColor</span>=<span class=\"string\">\"0,0,0\"</span> <span class=\"attr\">fontWeight</span>=<span class=\"string\">\"500\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">splashScreen</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">java</span> <span class=\"attr\">mainClass</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">vmParameters</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">arguments</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">allowVMPassthroughParameters</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">preferredVM</span>=<span class=\"string\">\"client\"</span> <span class=\"attr\">bundleRuntime</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">minVersion</span>=<span class=\"string\">\"1.4\"</span> <span class=\"attr\">maxVersion</span>=<span class=\"string\">\"1.7\"</span> <span class=\"attr\">allowBetaVM</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">jdkOnly</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">registry</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JAVA_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">envVar</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JDK_HOME\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span> <span class=\"attr\">location</span>=<span class=\"string\">\"H:/Program Files (x86)/Java/jre7\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">searchSequence</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">archive</span> <span class=\"attr\">location</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">failOnError</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">classPath</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nativeLibraryDirectories</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">java</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">includedFiles</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">unextractableFiles</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">exe4j</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"build-xml\"><a href=\"#build-xml\" class=\"headerlink\" title=\"build.xml\"></a>build.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"GBK\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">basedir</span>=<span class=\"string\">\".\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">file</span>=<span class=\"string\">\"build.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lib.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"lib\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"src.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"src\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dist.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"dist\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"build\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"config.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.source\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.target\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1.5\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"app\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j.template.dir\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"config/template\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exe4j.path\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">path</span>=<span class=\"string\">\"$&#123;exe4j.ant.jar&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"init\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"base.path\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clean\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"clean\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prepare\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"init,clean\"</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"prepare\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;dist.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"build.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;config.dir&#125;\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;exe4j.template.dir&#125;\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"template.exe4j\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">replace</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$&#123;config.dir&#125;/template.exe4j\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@distributionSourceDir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@app.name@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;app.name&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@amd64@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;amd64&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@iconFile@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;iconFile&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@mianclass@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">replacefilter</span> <span class=\"attr\">token</span>=<span class=\"string\">\"@todir@\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;todir&#125;\"</span> /&gt;</span></span><br><span class=\"line\"> \t\t<span class=\"tag\">&lt;/<span class=\"name\">replace</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;distributionSourceDir&#125;/app\"</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;app.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"javac-project\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"prepare,copy-file\"</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"javac\"</span>/&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">javac</span> <span class=\"attr\">srcdir</span>=<span class=\"string\">\"$&#123;src.dir&#125;\"</span> <span class=\"attr\">verbose</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">destdir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span> <span class=\"attr\">classpathref</span>=<span class=\"string\">\"base.path\"</span>  <span class=\"attr\">optimize</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"$&#123;build.target&#125;\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"$&#123;build.source&#125;\"</span> <span class=\"attr\">debuglevel</span>=<span class=\"string\">\"none\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;lib.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*jar\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">pathelement</span> <span class=\"attr\">location</span>=<span class=\"string\">\"bin\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">classpath</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">javac</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing-SWT.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/DJNativeSwing.jar\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">unjar</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;lib.dir&#125;/swt.zip\"</span> <span class=\"attr\">dest</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar-project\"</span>  <span class=\"attr\">depends</span>=<span class=\"string\">\"javac-project,unjar\"</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"jar-project\"</span>/&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">jar</span> <span class=\"attr\">jarfile</span>=<span class=\"string\">\"$&#123;dist.dir&#125;/FileManager.jar\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;build.dir&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.class\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.t\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.gif\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.png\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.jpg\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    \t <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.dll\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"comment\">&lt;!-- msutil.jar中的*.properties必须包含进来，否则运行时出错--&gt;</span></span><br><span class=\"line\">\t\t\t\t     <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">name</span>=<span class=\"string\">\"**/*.properties\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">fileset</span>&gt;</span></span><br><span class=\"line\">\t\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Class-Path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".\"</span>/&gt;</span></span><br><span class=\"line\">\t                <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Main-Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mianclass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">jar</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">taskdef</span> <span class=\"attr\">name</span>=<span class=\"string\">\"exe4j\"</span> <span class=\"attr\">classname</span>=<span class=\"string\">\"com.exe4j.Exe4JTask\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">classpath</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"exe4j.path\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">taskdef</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jar2exe\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"build.exe4j,jar-project\"</span>&gt;</span></span><br><span class=\"line\">\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">exe4j</span> <span class=\"attr\">projectfile</span>=<span class=\"string\">\"$&#123;app.exe4j&#125;\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"finish\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"jar2exe\"</span>&gt;</span></span><br><span class=\"line\">\t   \t\t<span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"finish\"</span>/&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"build-properties\"><a href=\"#build-properties\" class=\"headerlink\" title=\"build.properties\"></a>build.properties</h3><p>文件内容已经参数说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#exe4j ant jar包路径</span><br><span class=\"line\">exe4j.ant.jar=H:/ProgramFiles(x86)/exe4j/bin/ant.jar</span><br><span class=\"line\">#文件保存路径</span><br><span class=\"line\">distributionSourceDir=C:/Users/yanwuyang/Desktop/test</span><br><span class=\"line\">#exe4j模板配置文件路径</span><br><span class=\"line\">app.template.exe4j=config/template/template.exe4j</span><br><span class=\"line\">#exe4j配置文件路径</span><br><span class=\"line\">app.exe4j=config/template.exe4j</span><br><span class=\"line\">#应用程序main函数类路径</span><br><span class=\"line\">mianclass=cn.com.win.Main</span><br><span class=\"line\">#应用程序名称</span><br><span class=\"line\">app.name=PMS</span><br><span class=\"line\">#应用程序图标</span><br><span class=\"line\">iconFile=G:/image/ICO/4594/200.ico</span><br><span class=\"line\">#jar输出路径</span><br><span class=\"line\">todir=F:/Users/yanwuyang/workspace/WinExample/res/PMS.jar</span><br></pre></td></tr></table></figure></p>\n<p>经过上面这几个步骤ANT自动构建算是完成了下面我们就运行下<br><img src=\"caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg\" alt=\"finish\"><br>点击finish<br><img src=\"023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg\" alt=\"finish\"><br>呵呵成功了到我们配置输出的目录看看生成exe的文件是否存在<br><img src=\"c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg\" alt=\"finish\"></p>"},{"title":"JavaScript常用脚本","date":"2014-02-13T13:28:01.000Z","comments":1,"toc":true,"_content":"\n## 字符串函数\n\n### 是否包含\n```javascript\nString.prototype.Contains = function (A) {\n    return (this.indexOf(A) > -1);\n};\n```\n<!--more-->\n### 是否相等\n```javascript\nString.prototype.Equals = function () {\n    var A = arguments;\n    if (A.length == 1 && A[0].pop)\n        A = A[0];\n    for (var i = 0; i < A.length; i++) {\n        if (this == A[i])\n            return true;\n    };\n    return false;\n};\n```\n\n### 是否相等(不区分大小写)\n```javascript\nString.prototype.IEquals = function () {\n    var A = this.toUpperCase();\n    var B = arguments;\n    if (B.length == 1 && B[0].pop)\n        B = B[0];\n    for (var i = 0; i < B.length; i++) {\n        if (A == B[i].toUpperCase())\n            return true;\n    };\n    return false;\n};\n```\n\n### 替换所有\n```javascript\nString.prototype.ReplaceAll = function (A, B) {\n    var C = this;\n    for (var i = 0; i < A.length; i++) {\n        C = C.replace(A[i], B[i]);\n    };\n    return C;\n}; \n或\nString.prototype.ReplaceAll = function(A,B){\n       var C = this;\n       C=C.replace(/A/g,B);\n       return C;  \n}\n```\n\n### StartsWith\n```javascript\nString.prototype.StartsWith = function (A) {\n    return (this.substr(0, A.length) == A);\n};\n```\n\n### EndsWith\n```javascript\nString.prototype.EndsWith = function (A, B) {\n    var C = this.length;\n    var D = A.length;\n    if (D > C)\n        return false;\n    if (B) {\n        var E = new RegExp(A + '$', 'i');\n        return E.test(this);\n    } else\n        return (D == 0 || this.substr(C - D, D) == A);\n};\n```\n\n### Remove\n```javascript\nString.prototype.Remove = function (A, B) {\n    var s = '';\n    if (A > 0)\n        s = this.substring(0, A);\n    if (A + B < this.length)\n        s += this.substring(A + B, this.length);\n    return s;\n};\n```\n\n### Trim\n```javascript\nString.prototype.Trim = function () {\n    return this.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '');\n};\n```\n\n### LTrim\n```javascript\nString.prototype.LTrim = function () {\n    return this.replace(/^[ \\t\\n\\r]*/g, '');\n};\n```\n\n### RTrim\n```javascript\nString.prototype.RTrim = function () {\n    return this.replace(/[ \\t\\n\\r]*$/g, '');\n}\n```\n\n### ReplaceNewLineChars\n```javascript\nString.prototype.ReplaceNewLineChars = function (A) {\n    return this.replace(/\\n/g, A);\n};\n```\n\n### Replace\n```javascript\nString.prototype.Replace = function (A, B, C) {\n    if (typeof B == 'function') {\n        return this.replace(A, function () {\n            return B.apply(C || this, arguments);\n        });\n    } else\n        return this.replace(A, B);\n};\n```\n\n## 获取浏览器信息\n```javascript\n var gecko = /gecko\\/\\d/i.test(navigator.userAgent);\n var ie = /MSIE \\d/.test(navigator.userAgent);\n var ie_lt8 = ie && (document.documentMode == null || document.documentMode < 8);\n var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n var webkit = /WebKit\\//.test(navigator.userAgent);\n var qtwebkit = webkit && /Qt\\/\\d+\\.\\d+/.test(navigator.userAgent);\n var chrome = /Chrome\\//.test(navigator.userAgent);\n var opera = /Opera\\//.test(navigator.userAgent);\n var safari = /Apple Computer/.test(navigator.vendor);\n var khtml = /KHTML\\//.test(navigator.userAgent);\n var mac_geLion = /Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var mac_geMountainLion = /Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var phantom = /PhantomJS/.test(navigator.userAgent);\n ```\n \n ## 获取操作系统信息\n ```javascript\n var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\n // This is woefully incomplete. Suggestions for alternative methods welcome.\n var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);\n var mac = ios || /Mac/.test(navigator.platform);\n var windows = /win/i.test(navigator.platform);\n ```","source":"_posts/JavaScript常用脚本.md","raw":"---\ntitle: JavaScript常用脚本\ndate: 2014-02-13 21:28:01\ncomments: true\ncategories: JavaScript\ntoc: true \n---\n\n## 字符串函数\n\n### 是否包含\n```javascript\nString.prototype.Contains = function (A) {\n    return (this.indexOf(A) > -1);\n};\n```\n<!--more-->\n### 是否相等\n```javascript\nString.prototype.Equals = function () {\n    var A = arguments;\n    if (A.length == 1 && A[0].pop)\n        A = A[0];\n    for (var i = 0; i < A.length; i++) {\n        if (this == A[i])\n            return true;\n    };\n    return false;\n};\n```\n\n### 是否相等(不区分大小写)\n```javascript\nString.prototype.IEquals = function () {\n    var A = this.toUpperCase();\n    var B = arguments;\n    if (B.length == 1 && B[0].pop)\n        B = B[0];\n    for (var i = 0; i < B.length; i++) {\n        if (A == B[i].toUpperCase())\n            return true;\n    };\n    return false;\n};\n```\n\n### 替换所有\n```javascript\nString.prototype.ReplaceAll = function (A, B) {\n    var C = this;\n    for (var i = 0; i < A.length; i++) {\n        C = C.replace(A[i], B[i]);\n    };\n    return C;\n}; \n或\nString.prototype.ReplaceAll = function(A,B){\n       var C = this;\n       C=C.replace(/A/g,B);\n       return C;  \n}\n```\n\n### StartsWith\n```javascript\nString.prototype.StartsWith = function (A) {\n    return (this.substr(0, A.length) == A);\n};\n```\n\n### EndsWith\n```javascript\nString.prototype.EndsWith = function (A, B) {\n    var C = this.length;\n    var D = A.length;\n    if (D > C)\n        return false;\n    if (B) {\n        var E = new RegExp(A + '$', 'i');\n        return E.test(this);\n    } else\n        return (D == 0 || this.substr(C - D, D) == A);\n};\n```\n\n### Remove\n```javascript\nString.prototype.Remove = function (A, B) {\n    var s = '';\n    if (A > 0)\n        s = this.substring(0, A);\n    if (A + B < this.length)\n        s += this.substring(A + B, this.length);\n    return s;\n};\n```\n\n### Trim\n```javascript\nString.prototype.Trim = function () {\n    return this.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '');\n};\n```\n\n### LTrim\n```javascript\nString.prototype.LTrim = function () {\n    return this.replace(/^[ \\t\\n\\r]*/g, '');\n};\n```\n\n### RTrim\n```javascript\nString.prototype.RTrim = function () {\n    return this.replace(/[ \\t\\n\\r]*$/g, '');\n}\n```\n\n### ReplaceNewLineChars\n```javascript\nString.prototype.ReplaceNewLineChars = function (A) {\n    return this.replace(/\\n/g, A);\n};\n```\n\n### Replace\n```javascript\nString.prototype.Replace = function (A, B, C) {\n    if (typeof B == 'function') {\n        return this.replace(A, function () {\n            return B.apply(C || this, arguments);\n        });\n    } else\n        return this.replace(A, B);\n};\n```\n\n## 获取浏览器信息\n```javascript\n var gecko = /gecko\\/\\d/i.test(navigator.userAgent);\n var ie = /MSIE \\d/.test(navigator.userAgent);\n var ie_lt8 = ie && (document.documentMode == null || document.documentMode < 8);\n var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n var webkit = /WebKit\\//.test(navigator.userAgent);\n var qtwebkit = webkit && /Qt\\/\\d+\\.\\d+/.test(navigator.userAgent);\n var chrome = /Chrome\\//.test(navigator.userAgent);\n var opera = /Opera\\//.test(navigator.userAgent);\n var safari = /Apple Computer/.test(navigator.vendor);\n var khtml = /KHTML\\//.test(navigator.userAgent);\n var mac_geLion = /Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var mac_geMountainLion = /Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/.test(navigator.userAgent);\n var phantom = /PhantomJS/.test(navigator.userAgent);\n ```\n \n ## 获取操作系统信息\n ```javascript\n var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\n // This is woefully incomplete. Suggestions for alternative methods welcome.\n var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);\n var mac = ios || /Mac/.test(navigator.platform);\n var windows = /win/i.test(navigator.platform);\n ```","slug":"JavaScript常用脚本","published":1,"updated":"2016-05-14T08:47:40.145Z","layout":"post","photos":[],"link":"","_id":"civ2gzlki000150ybah6memz4","content":"<h2 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h2><h3 id=\"是否包含\"><a href=\"#是否包含\" class=\"headerlink\" title=\"是否包含\"></a>是否包含</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Contains = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.indexOf(A) &gt; <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"是否相等\"><a href=\"#是否相等\" class=\"headerlink\" title=\"是否相等\"></a>是否相等</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.length == <span class=\"number\">1</span> &amp;&amp; A[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        A = A[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == A[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"是否相等-不区分大小写\"><a href=\"#是否相等-不区分大小写\" class=\"headerlink\" title=\"是否相等(不区分大小写)\"></a>是否相等(不区分大小写)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.IEquals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"keyword\">this</span>.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> B = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B.length == <span class=\"number\">1</span> &amp;&amp; B[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        B = B[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; B.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A == B[i].toUpperCase())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"替换所有\"><a href=\"#替换所有\" class=\"headerlink\" title=\"替换所有\"></a>替换所有</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        C = C.replace(A[i], B[i]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A,B</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       C=C.replace(<span class=\"regexp\">/A/g</span>,B);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> C;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StartsWith\"><a href=\"#StartsWith\" class=\"headerlink\" title=\"StartsWith\"></a>StartsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.StartsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.substr(<span class=\"number\">0</span>, A.length) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"EndsWith\"><a href=\"#EndsWith\" class=\"headerlink\" title=\"EndsWith\"></a>EndsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.EndsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> D = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (D &gt; C)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> E = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(A + <span class=\"string\">'$'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> E.test(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (D == <span class=\"number\">0</span> || <span class=\"keyword\">this</span>.substr(C - D, D) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Remove\"><a href=\"#Remove\" class=\"headerlink\" title=\"Remove\"></a>Remove</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        s = <span class=\"keyword\">this</span>.substring(<span class=\"number\">0</span>, A);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A + B &lt; <span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">        s += <span class=\"keyword\">this</span>.substring(A + B, <span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Trim\"><a href=\"#Trim\" class=\"headerlink\" title=\"Trim\"></a>Trim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LTrim\"><a href=\"#LTrim\" class=\"headerlink\" title=\"LTrim\"></a>LTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.LTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^[ \\t\\n\\r]*/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RTrim\"><a href=\"#RTrim\" class=\"headerlink\" title=\"RTrim\"></a>RTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.RTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/[ \\t\\n\\r]*$/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReplaceNewLineChars\"><a href=\"#ReplaceNewLineChars\" class=\"headerlink\" title=\"ReplaceNewLineChars\"></a>ReplaceNewLineChars</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceNewLineChars = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\n/g</span>, A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Replace\"><a href=\"#Replace\" class=\"headerlink\" title=\"Replace\"></a>Replace</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Replace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B, C</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> B == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> B.apply(C || <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, B);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取浏览器信息\"><a href=\"#获取浏览器信息\" class=\"headerlink\" title=\"获取浏览器信息\"></a>获取浏览器信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gecko = <span class=\"regexp\">/gecko\\/\\d/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie = <span class=\"regexp\">/MSIE \\d/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt8 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt9 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webkit = <span class=\"regexp\">/WebKit\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qtwebkit = webkit &amp;&amp; <span class=\"regexp\">/Qt\\/\\d+\\.\\d+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chrome = <span class=\"regexp\">/Chrome\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> opera = <span class=\"regexp\">/Opera\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> safari = <span class=\"regexp\">/Apple Computer/</span>.test(navigator.vendor);</span><br><span class=\"line\"><span class=\"keyword\">var</span> khtml = <span class=\"regexp\">/KHTML\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geMountainLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> phantom = <span class=\"regexp\">/PhantomJS/</span>.test(navigator.userAgent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取操作系统信息\"><a href=\"#获取操作系统信息\" class=\"headerlink\" title=\"获取操作系统信息\"></a>获取操作系统信息</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ios = <span class=\"regexp\">/AppleWebKit/</span>.test(navigator.userAgent) &amp;&amp; <span class=\"regexp\">/Mobile\\/\\w+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"comment\">// This is woefully incomplete. Suggestions for alternative methods welcome.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobile = ios || <span class=\"regexp\">/Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac = ios || <span class=\"regexp\">/Mac/</span>.test(navigator.platform);</span><br><span class=\"line\"><span class=\"keyword\">var</span> windows = <span class=\"regexp\">/win/i</span>.test(navigator.platform);</span><br></pre></td></tr></table></figure>","excerpt":"<h2 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h2><h3 id=\"是否包含\"><a href=\"#是否包含\" class=\"headerlink\" title=\"是否包含\"></a>是否包含</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Contains = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.indexOf(A) &gt; <span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"是否相等\"><a href=\"#是否相等\" class=\"headerlink\" title=\"是否相等\"></a>是否相等</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.length == <span class=\"number\">1</span> &amp;&amp; A[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        A = A[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == A[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"是否相等-不区分大小写\"><a href=\"#是否相等-不区分大小写\" class=\"headerlink\" title=\"是否相等(不区分大小写)\"></a>是否相等(不区分大小写)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.IEquals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"keyword\">this</span>.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> B = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B.length == <span class=\"number\">1</span> &amp;&amp; B[<span class=\"number\">0</span>].pop)</span><br><span class=\"line\">        B = B[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; B.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A == B[i].toUpperCase())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"替换所有\"><a href=\"#替换所有\" class=\"headerlink\" title=\"替换所有\"></a>替换所有</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">        C = C.replace(A[i], B[i]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A,B</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       C=C.replace(<span class=\"regexp\">/A/g</span>,B);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> C;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StartsWith\"><a href=\"#StartsWith\" class=\"headerlink\" title=\"StartsWith\"></a>StartsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.StartsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.substr(<span class=\"number\">0</span>, A.length) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"EndsWith\"><a href=\"#EndsWith\" class=\"headerlink\" title=\"EndsWith\"></a>EndsWith</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.EndsWith = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> D = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (D &gt; C)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (B) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> E = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(A + <span class=\"string\">'$'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> E.test(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (D == <span class=\"number\">0</span> || <span class=\"keyword\">this</span>.substr(C - D, D) == A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Remove\"><a href=\"#Remove\" class=\"headerlink\" title=\"Remove\"></a>Remove</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        s = <span class=\"keyword\">this</span>.substring(<span class=\"number\">0</span>, A);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A + B &lt; <span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">        s += <span class=\"keyword\">this</span>.substring(A + B, <span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Trim\"><a href=\"#Trim\" class=\"headerlink\" title=\"Trim\"></a>Trim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LTrim\"><a href=\"#LTrim\" class=\"headerlink\" title=\"LTrim\"></a>LTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.LTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^[ \\t\\n\\r]*/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RTrim\"><a href=\"#RTrim\" class=\"headerlink\" title=\"RTrim\"></a>RTrim</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.RTrim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/[ \\t\\n\\r]*$/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReplaceNewLineChars\"><a href=\"#ReplaceNewLineChars\" class=\"headerlink\" title=\"ReplaceNewLineChars\"></a>ReplaceNewLineChars</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.ReplaceNewLineChars = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\n/g</span>, A);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Replace\"><a href=\"#Replace\" class=\"headerlink\" title=\"Replace\"></a>Replace</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.prototype.Replace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B, C</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> B == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> B.apply(C || <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(A, B);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取浏览器信息\"><a href=\"#获取浏览器信息\" class=\"headerlink\" title=\"获取浏览器信息\"></a>获取浏览器信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gecko = <span class=\"regexp\">/gecko\\/\\d/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie = <span class=\"regexp\">/MSIE \\d/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt8 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ie_lt9 = ie &amp;&amp; (<span class=\"built_in\">document</span>.documentMode == <span class=\"literal\">null</span> || <span class=\"built_in\">document</span>.documentMode &lt; <span class=\"number\">9</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> webkit = <span class=\"regexp\">/WebKit\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qtwebkit = webkit &amp;&amp; <span class=\"regexp\">/Qt\\/\\d+\\.\\d+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> chrome = <span class=\"regexp\">/Chrome\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> opera = <span class=\"regexp\">/Opera\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> safari = <span class=\"regexp\">/Apple Computer/</span>.test(navigator.vendor);</span><br><span class=\"line\"><span class=\"keyword\">var</span> khtml = <span class=\"regexp\">/KHTML\\//</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([7-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac_geMountainLion = <span class=\"regexp\">/Mac OS X 1\\d\\D([8-9]|\\d\\d)\\D/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> phantom = <span class=\"regexp\">/PhantomJS/</span>.test(navigator.userAgent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取操作系统信息\"><a href=\"#获取操作系统信息\" class=\"headerlink\" title=\"获取操作系统信息\"></a>获取操作系统信息</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ios = <span class=\"regexp\">/AppleWebKit/</span>.test(navigator.userAgent) &amp;&amp; <span class=\"regexp\">/Mobile\\/\\w+/</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"comment\">// This is woefully incomplete. Suggestions for alternative methods welcome.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobile = ios || <span class=\"regexp\">/Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i</span>.test(navigator.userAgent);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mac = ios || <span class=\"regexp\">/Mac/</span>.test(navigator.platform);</span><br><span class=\"line\"><span class=\"keyword\">var</span> windows = <span class=\"regexp\">/win/i</span>.test(navigator.platform);</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript闭包","date":"2013-07-16T16:00:00.000Z","comments":1,"toc":false,"_content":"\n有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。\n```javascript\nfunction createComparisonFunction(name){\n  return function(object1){\n       return object1[name];\n  }\n}\n```\n<!--more-->\n变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。\n有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，......直至作为作用域链终点的全局执行环境。\n在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。\n\n```javascript\nfunction compare(value1,value2){\n  if(value1<value2){\n     return -1;\n  }else if(value1>value2){\n     return 1;\n  }else{\n     return 0;\n  }  \n}\nvar result = compare(5,10);\n```\n以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。\n\n后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。\n\n无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。\n\n由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。","source":"_posts/JavaScript闭包.md","raw":"---\ntitle: JavaScript闭包\ndate: 2013-07-17\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\n有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。\n```javascript\nfunction createComparisonFunction(name){\n  return function(object1){\n       return object1[name];\n  }\n}\n```\n<!--more-->\n变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。\n有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，......直至作为作用域链终点的全局执行环境。\n在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。\n\n```javascript\nfunction compare(value1,value2){\n  if(value1<value2){\n     return -1;\n  }else if(value1>value2){\n     return 1;\n  }else{\n     return 0;\n  }  \n}\nvar result = compare(5,10);\n```\n以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。\n\n后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。\n\n无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。\n\n在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。\n\n由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。","slug":"JavaScript闭包","published":1,"updated":"2016-05-14T09:42:43.527Z","layout":"post","photos":[],"link":"","_id":"civ2gzllc000650ybgfb898c1","content":"<p>有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> object1[name];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。<br>有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，……直至作为作用域链终点的全局执行环境。<br>在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value1&lt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1&gt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = compare(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。</p>\n<p>后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。</p>\n<p>无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。</p>\n<p>由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。</p>\n","excerpt":"<p>有很多开发人员总数搞不清匿名函数和闭包这两个概念，因此经常混合使用。闭包是指有权访问另一个匿名函数作用域中的变量函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object1</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> object1[name];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>变量name即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量name，之所以还能够访问这个变量，是因为内部函数的作用域链中包含了createComparisonFunction的作用域。要彻底搞清楚其中的细节，必须要从理解函数第一次被调用的时候都发生什么入手。<br>有关如何创建作用域链以及作用域链有什么作用细节，对彻底理解闭包至关重要。当某个函数被调用时，会创建一个执行环境以及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，……直至作为作用域链终点的全局执行环境。<br>在函数执行过程中，为读取和写入变量的值，就需要在作用域中查找变量。来看下下面的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value1&lt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1&gt;value2)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = compare(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>以上代码先定义了compare()函数，然后又在全局作用域中调用了它，当第一次调用compare()时，会创建一个包含this、arguments、value1、value2的活动对象。全局执行环境的变量对象（包含this、result、和compare）在compare()执行环境的作用域链中则处于第二位。</p>\n<p>后台的每一个执行环境都有一个表示变量的对象——变量对象。全局的变量对象始终存在，而像compare()函数这样的局部环境中的变量对象，则只是在函数执行过程中存在。在创建compare()函数时，会创建一个预先包含全局变量对象的作用域链，这个作用域链被保存在内部的[[Scope]]属性中。当调用compare()函数时，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。此后，又有一个活动对象（在此作为变量对象使用）被创建并被推入执行环境作用域链的前端。对于这个例子中的compare()函数的执行环境而言，其作用域链中包含两个变量对象：本地活动对象和全局变量对象。显然，作用域链本质上是一个指向变量对象的指针列表，他只是引用但不时间包含变量对象。</p>\n<p>无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。</p>\n<p>在另一个函数内部定义的函数会将包含函数（及外部函数）的活动对象添加到他的作用域链中。因此，在createCompareFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createCompareFunction()的活动对象。</p>\n<p>由于闭包会携带包含的函数作用域，因此会比其他函数占用更多的内存资源。过度使用闭包可能会导致内存占用过多，我们建议只有在绝对必要时在考虑使用闭包。</p>"},{"title":"JavaScript函数","date":"2013-07-17T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## 函数概念\n函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示\n<!--more-->\n```javascript\nfunction funName(arg0,arg1,.....argN){\n    statements\n} \n//以下是函数示例\nfunction syaHi(name,message){\n    alert(\"hello \"+ name + \" ,\"+ message);\n}\n```\n这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：\n```javascript\nsayHi(\"Nicholas\",\"how are you today?\");\n```\nECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值\n```javascript\nfunction sum(num1,num2){\n    return num1+num2;\n}\n```\n这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：\n```javascript\nvar result = sum(5,10);\n```\n这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。\n推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。\n\n## 理解参数\nECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。\n其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。\n```javascript\nfunction doAdd(num1,num2){\n    if(arguments[0]==num1){\n        alert(true);\n    }\n    if(argumengs[1]==num2){\n        alert(true);\n    }\n}\n```\n结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。\n关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。\n```javascript\nfunction doAdd(num1,num2){\n    arguments[1]=10;\n    alert(arguments[0]+num2)；\n}\n```\n每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。\n\n##  没有重载\nECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。\n关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，","source":"_posts/JavaScript函数.md","raw":"---\ntitle: JavaScript函数\ndate: 2013-07-18\ncomments: true\ncategories: JavaScript\ntoc: true \n---\n\n## 函数概念\n函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示\n<!--more-->\n```javascript\nfunction funName(arg0,arg1,.....argN){\n    statements\n} \n//以下是函数示例\nfunction syaHi(name,message){\n    alert(\"hello \"+ name + \" ,\"+ message);\n}\n```\n这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：\n```javascript\nsayHi(\"Nicholas\",\"how are you today?\");\n```\nECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值\n```javascript\nfunction sum(num1,num2){\n    return num1+num2;\n}\n```\n这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：\n```javascript\nvar result = sum(5,10);\n```\n这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。\n推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。\n\n## 理解参数\nECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。\n其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。\n```javascript\nfunction doAdd(num1,num2){\n    if(arguments[0]==num1){\n        alert(true);\n    }\n    if(argumengs[1]==num2){\n        alert(true);\n    }\n}\n```\n结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。\n关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。\n```javascript\nfunction doAdd(num1,num2){\n    arguments[1]=10;\n    alert(arguments[0]+num2)；\n}\n```\n每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。\n\n##  没有重载\nECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。\n关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，","slug":"JavaScript函数","published":1,"updated":"2016-05-14T09:31:06.162Z","layout":"post","photos":[],"link":"","_id":"civ2gzllc000750ybg6d3oog8","content":"<h2 id=\"函数概念\"><a href=\"#函数概念\" class=\"headerlink\" title=\"函数概念\"></a>函数概念</h2><p>函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\">arg0,arg1,.....argN</span>)</span>&#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//以下是函数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syaHi</span>(<span class=\"params\">name,message</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hello \"</span>+ name + <span class=\"string\">\" ,\"</span>+ message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sayHi(<span class=\"string\">\"Nicholas\"</span>,<span class=\"string\">\"how are you today?\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>ECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = sum(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。<br>推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。</p>\n<h2 id=\"理解参数\"><a href=\"#理解参数\" class=\"headerlink\" title=\"理解参数\"></a>理解参数</h2><p>ECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。<br>其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]==num1)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argumengs[<span class=\"number\">1</span>]==num2)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。<br>关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+num2)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。</p>\n<h2 id=\"没有重载\"><a href=\"#没有重载\" class=\"headerlink\" title=\"没有重载\"></a>没有重载</h2><p>ECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。<br>关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，</p>\n","excerpt":"<h2 id=\"函数概念\"><a href=\"#函数概念\" class=\"headerlink\" title=\"函数概念\"></a>函数概念</h2><p>函数对任何语言来说都是一个核心的概念。通过函数可以封装任何多条语句，而且可以在任何地方任何时候调用执行，ECMAScript中的函数使用function关键字来声明，后跟一组参数以及函数体。函数的基本语法如下所示<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funName</span>(<span class=\"params\">arg0,arg1,.....argN</span>)</span>&#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//以下是函数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syaHi</span>(<span class=\"params\">name,message</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"hello \"</span>+ name + <span class=\"string\">\" ,\"</span>+ message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个函数可以通过其函数名来调用，后面还要加上一对括号和参数（圆括号中的参数如果有多个，可以用逗号隔开）。调用sayHi()函数代码如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sayHi(<span class=\"string\">\"Nicholas\"</span>,<span class=\"string\">\"how are you today?\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>ECMAScript 中的函数在定义时不必指定是否返回值，实际上，任何函数在任何时候都可以通过return语句后跟要返回值来实现返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个sum()函数的作用是把两个值加起来返回一个结果。我们注意到，除了return语句之外，没有任何声明表示该函数会返回一个值。调用这个函数的示例代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = sum(<span class=\"number\">5</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个函数会再执行完return语句之后停止并立即退出。因此，位于return语句之后的任何代码都永远不会执行。<br>推荐的做法是要么让函数始终返回一个值，要么永远都不要返回值。否则，如果函数有时返回值，有时不返回值，会给调试代码带来不便。</p>\n<h2 id=\"理解参数\"><a href=\"#理解参数\" class=\"headerlink\" title=\"理解参数\"></a>理解参数</h2><p>ECMAScript 函数的参数与大多数其他语言中的函数参数有所不同。ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传，而解析器永远不会有什么怨言。只所以会这样，因为是ECMAScript中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数，在函数体内可以通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。<br>其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以用使用方括号语法访问它的每一个元素（即第一个元素是arguments[0],第二个元素是arguments[1],依次类推），使用length属性来确定传递进来多少个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]==num1)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argumengs[<span class=\"number\">1</span>]==num2)&#123;</span><br><span class=\"line\">        alert(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果会弹出两个alert这说明 arguments[0]的值等于num1，因此他们可以互换使用。<br>关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAdd</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]=<span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+num2)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值改为10.因为arguments对象中的值会自动反映到对应的命名参数，所以修改了arguments[1],也就是修改了num2，结果他们的值都会变成10。不过，这并不是说明读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但他们的值是同步的。另外只传入一个参数，那么为arguments[1]设置的值不会反应到命名参数中。这是因为arguments对象的长度是由传入的参数个数决定，不是由定义函数时的命名参数的个数决定的。</p>\n<h2 id=\"没有重载\"><a href=\"#没有重载\" class=\"headerlink\" title=\"没有重载\"></a>没有重载</h2><p>ECMAScript函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个函数的签名（接受的参数的类型和数量）不同即可。ECMAScript函数没有签名，因为其参数是由包含零或多个值得数组来表示。而没有函数签名，真正的重载是不可能做到的。如果再ECMAScript中定义了两个名字相同的函数，则改名字只属于后定义的函数。<br>关于参数还要记住最后一点：没有传递值得命名参数将自动赋予undefined值。这跟定义了变量但又没有初始化一样，</p>"},{"title":"JavaScript模仿块级作用域","date":"2013-07-16T16:00:00.000Z","comments":1,"toc":false,"_content":"\nJavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。\n```javascript\nfunction ouputNumbers(count){\n     for(var i=0;i<count;i++){\n                ...\n     }\n     alert(i);//i==count\n}\n```\n<!--more-->\n这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。\n\n```javascript\nfunction outputNumbers(count){\n    for(var i=0;i<count;i++){\n        alert(i);\n    }\n    var i;//重新声明变量\n    alert(i);//i==count\n}\n```\nJavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。\n用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。\n```javascript\nvar count =5;\noutputNumbers(count);\n```\n这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。\n```javascript\noutputNumbers(5);\n```\n这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。\n```javascript\nvar someFunction = function(){\n    //这里是块级作用域\n};\nsomeFunction();\n```\n这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。\n```javascript\nfunction(){\n    //这里是块级作用域\n}();//出错\n```\n这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：\n```javascript\nfunction outputNumbers(count){\n    (function(){\n        for(var i=0;i<count;i++){\n            alert(i);\n        }\n    })();\n    alert(i);//导致一个错误！\n}\n```\n在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。\n这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：\n```javascript\n(function(){\n    var now = new Date();\n    if(now.getMont()==0 && now.getDate() ==1){\n        alert(\"Happy new year\");\n    }\n})();\n```\n把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。\n\n***注意：***\n这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。","source":"_posts/JavaScript模仿块级作用域.md","raw":"---\ntitle: JavaScript模仿块级作用域\ndate: 2013-07-17\ncomments: true\ncategories: JavaScript\ntoc: false \n---\n\nJavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。\n```javascript\nfunction ouputNumbers(count){\n     for(var i=0;i<count;i++){\n                ...\n     }\n     alert(i);//i==count\n}\n```\n<!--more-->\n这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。\n\n```javascript\nfunction outputNumbers(count){\n    for(var i=0;i<count;i++){\n        alert(i);\n    }\n    var i;//重新声明变量\n    alert(i);//i==count\n}\n```\nJavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。\n用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。\n```javascript\nvar count =5;\noutputNumbers(count);\n```\n这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。\n```javascript\noutputNumbers(5);\n```\n这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。\n```javascript\nvar someFunction = function(){\n    //这里是块级作用域\n};\nsomeFunction();\n```\n这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。\n```javascript\nfunction(){\n    //这里是块级作用域\n}();//出错\n```\n这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。\n```javascript\n(function(){\n    //这里是块级作用域\n})();\n```\n无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：\n```javascript\nfunction outputNumbers(count){\n    (function(){\n        for(var i=0;i<count;i++){\n            alert(i);\n        }\n    })();\n    alert(i);//导致一个错误！\n}\n```\n在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。\n这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：\n```javascript\n(function(){\n    var now = new Date();\n    if(now.getMont()==0 && now.getDate() ==1){\n        alert(\"Happy new year\");\n    }\n})();\n```\n把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。\n\n***注意：***\n这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。","slug":"JavaScript模仿块级作用域","published":1,"updated":"2016-05-14T09:39:19.591Z","layout":"post","photos":[],"link":"","_id":"civ2gzllc000850yb9b82ogg9","content":"<p>JavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ouputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">        alert(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;<span class=\"comment\">//重新声明变量</span></span><br><span class=\"line\">    alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。<br>用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">5</span>;</span><br><span class=\"line\">outputNumbers(count);</span><br></pre></td></tr></table></figure></p>\n<p>这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputNumbers(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">someFunction();</span><br></pre></td></tr></table></figure></p>\n<p>这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//出错</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">            alert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    alert(i);<span class=\"comment\">//导致一个错误！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。<br>这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now.getMont()==<span class=\"number\">0</span> &amp;&amp; now.getDate() ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Happy new year\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。</p>\n<p><strong><em>注意：</em></strong><br>这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。</p>\n","excerpt":"<p>JavaScript没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含函数中而非语句中创建的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ouputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>这个函数中定义了一个for函数，而变量i的初始值被设置为了0。在Java、C++等语言中，变量i只会在for循环的语句块中有定义，循环一旦结束，变量i就会别销毁。可是在JavaScript中，变量是定义在outputNumbers()的活动对象中的，因此从它定义开始，就可以在函数内部随处访问它，即使下面这样错误地声明同一个变量，也不会改变他的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">        alert(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;<span class=\"comment\">//重新声明变量</span></span><br><span class=\"line\">    alert(i);<span class=\"comment\">//i==count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript从来不会告诉你是否多次声明了同一个变量；遇到这种情况，它只会对后续的声明视而不见（不过，它会执行后续声明中的变量初始化）。匿名函数可以用来模仿块级作用域并避免这个问题。<br>用作块级作用域（通常称为私有作用域）的匿名函数语法如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>以上代码定义并立即调用了一个匿名函数。将函数声明包含在一对括号中，表示它实际上是一个函数表达式。而紧随其后的另一对括号会立即调用这个函数。如果有读者感觉这种语法不太好理解，可以在看看下面这个例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">5</span>;</span><br><span class=\"line\">outputNumbers(count);</span><br></pre></td></tr></table></figure></p>\n<p>这里初始化了变量count，将其值设为5，当然，这里的变量是没有这个必要的，因为可以把值直接传给函数。为了让代码更加简洁，我们在调用函数的时用5来代替变量count，如下所示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputNumbers(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样做之所以可行，是因为变量只不过是值得另一种表达式，因此用实际的值替换变量没有问题，在看下面的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">someFunction();</span><br></pre></td></tr></table></figure></p>\n<p>这个例子先定义了一个函数，然后立即调用了它，定义函数的方式是创建一个匿名函数，并吧匿名的函数赋值给变量someFunction。而调用函数的方式是在函数名称后面添加一对括号，即someFunction()。通过前面的例子我们知道，可以使用实际的值来取代变量count，那在这里是不是也可以用函数的值直接取代函数名呢？下面的代码却会导致错误。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;();<span class=\"comment\">//出错</span></span><br></pre></td></tr></table></figure></p>\n<p>这段代码会导致语言错误，是因为JavaScript将function关键字当作一个函数声明的开始，而函数声明后面不能跟园括号。然后，函数表达式的后面可以跟圆括号。要将函数声明转发转换成函数表达式。只要像下面这样的给他加上一对括号即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">            alert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    alert(i);<span class=\"comment\">//导致一个错误！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在这个重写的outputNumbers()函数中。我们在for循环外部插入了一个私有作用域。在匿名函数中定义的任何变量，都会在执行结束时被销毁。因此，变量i只能在循环中使用，使用后即销毁。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域中的所有变量。<br>这种技术经常在全局作用域中被用在函数外部，从而限制向全局作用域添加过多的变量和函数。一般来说，我们都应该尽量少向全局作用域中添加变量和函数。在一个由很多开发人员共同参与的大型应用程序中，过多的全局变量和函数很容易导致命名冲突，而通过创建私有作用域，每个开发人员即可以实用自己的变量，又不必担心搞乱全局作用域。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now.getMont()==<span class=\"number\">0</span> &amp;&amp; now.getDate() ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"Happy new year\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>把上面这段代码放在全局作用域中，可以用来确定那一天是1月1日；如果到了这一天，就会向用户显示一条祝贺新年的消息。其中的变量now现在是在匿名函数中的局部变量，而我们不必再全局作用域中创建他。</p>\n<p><strong><em>注意：</em></strong><br>这种做法可以减少闭包占用的内存问题，因为没有指向匿名函数的引用。只要函数指向完毕，就可以理解销毁其作用域链了。</p>"},{"title":"Java动态编程","date":"2016-06-05T08:55:01.000Z","comments":1,"toc":true,"_content":"\n动态编程指的是在运行时动态修改代码逻辑。\n\n## java运行原理\njava的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。\nclass字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。\n<!--more-->\n![](43918004_1.png)\n由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。\n![](43918004_2.png)\n## 动态修改字节码\n***能实现java动态编程的框架有三种分别是 asm、cglib、javassist***\nasm性能最佳、技术难度大\ncglib是对asm的封装,技术难度低\nJavassist 性能弱于asm、技术难度低\n### asm\n\n### cglib\n\n### javassist\n```java\n//Demo.java\npackage com.dynamic.demo;\n  public class Demo {\n  \n  }\n}\n//DemoSuper.java\npackage com.dynamic.demo.supers;\npublic class DemoSuper {\n  public void sysHello(){\n\tSystem.out.println(\"hello world\");\n  }\n\n}\n//JavassistTest.java\npackage com.dynamic.test;\nimport java.lang.reflect.Method;\nimport com.dynamic.demo.Demo;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\nimport javassist.CtNewMethod;\n\npublic class JavassistTest {\n\n  /**\n  * @param args\n  * @throws Exception \n  */\n  public static void main(String[] args) throws Exception {\n\tClassPool pool = ClassPool.getDefault();\n\tCtClass cc = pool.get(\"com.dynamic.demo.Demo\");\n\tcc.setSuperclass(pool.get(\"com.dynamic.demo.supers.DemoSuper\"));//添加父类\n\tCtMethod mthd = CtNewMethod.make(\"public void sysHello() { }\", cc);//创建方法\n\tcc.addMethod(mthd);//添加方法\n\tCtMethod m = cc.getDeclaredMethod(\"sysHello\");\n\tm.insertBefore(\"{ super.sysHello(); }\");\n\tcc.writeFile();//保存class文件\n\tClass c = cc.toClass();\n\tMethod method = c.getMethod(\"sysHello\", null);\n\tmethod.invoke(c.newInstance(), null);\n\t\n\tDemo e = new Demo();\n\tClass cl = Class.forName(\"com.dynamic.demo.Demo\");\n\tMethod mm = cl.getMethod(\"sysHello\", null);\n\tmm.invoke(e, null);\n  }\n}\n```\n最后控制台打印结果分别是\n```\nhello world\nhello world\n```\n","source":"_posts/Java动态编程.md","raw":"---\ntitle: Java动态编程\ndate: 2016-06-05 16:55:01\ncomments: true\ncategories: Java\ntoc: true \n---\n\n动态编程指的是在运行时动态修改代码逻辑。\n\n## java运行原理\njava的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。\nclass字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。\n<!--more-->\n![](43918004_1.png)\n由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。\n![](43918004_2.png)\n## 动态修改字节码\n***能实现java动态编程的框架有三种分别是 asm、cglib、javassist***\nasm性能最佳、技术难度大\ncglib是对asm的封装,技术难度低\nJavassist 性能弱于asm、技术难度低\n### asm\n\n### cglib\n\n### javassist\n```java\n//Demo.java\npackage com.dynamic.demo;\n  public class Demo {\n  \n  }\n}\n//DemoSuper.java\npackage com.dynamic.demo.supers;\npublic class DemoSuper {\n  public void sysHello(){\n\tSystem.out.println(\"hello world\");\n  }\n\n}\n//JavassistTest.java\npackage com.dynamic.test;\nimport java.lang.reflect.Method;\nimport com.dynamic.demo.Demo;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\nimport javassist.CtNewMethod;\n\npublic class JavassistTest {\n\n  /**\n  * @param args\n  * @throws Exception \n  */\n  public static void main(String[] args) throws Exception {\n\tClassPool pool = ClassPool.getDefault();\n\tCtClass cc = pool.get(\"com.dynamic.demo.Demo\");\n\tcc.setSuperclass(pool.get(\"com.dynamic.demo.supers.DemoSuper\"));//添加父类\n\tCtMethod mthd = CtNewMethod.make(\"public void sysHello() { }\", cc);//创建方法\n\tcc.addMethod(mthd);//添加方法\n\tCtMethod m = cc.getDeclaredMethod(\"sysHello\");\n\tm.insertBefore(\"{ super.sysHello(); }\");\n\tcc.writeFile();//保存class文件\n\tClass c = cc.toClass();\n\tMethod method = c.getMethod(\"sysHello\", null);\n\tmethod.invoke(c.newInstance(), null);\n\t\n\tDemo e = new Demo();\n\tClass cl = Class.forName(\"com.dynamic.demo.Demo\");\n\tMethod mm = cl.getMethod(\"sysHello\", null);\n\tmm.invoke(e, null);\n  }\n}\n```\n最后控制台打印结果分别是\n```\nhello world\nhello world\n```\n","slug":"Java动态编程","published":1,"updated":"2016-06-05T10:25:21.765Z","layout":"post","photos":[],"link":"","_id":"civ2gzllw000a50ybfl4kmlts","content":"<p>动态编程指的是在运行时动态修改代码逻辑。</p>\n<h2 id=\"java运行原理\"><a href=\"#java运行原理\" class=\"headerlink\" title=\"java运行原理\"></a>java运行原理</h2><p>java的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。<br>class字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。<br><a id=\"more\"></a><br><img src=\"43918004_1.png\" alt=\"\"><br>由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。<br><img src=\"43918004_2.png\" alt=\"\"></p>\n<h2 id=\"动态修改字节码\"><a href=\"#动态修改字节码\" class=\"headerlink\" title=\"动态修改字节码\"></a>动态修改字节码</h2><p><strong><em>能实现java动态编程的框架有三种分别是 asm、cglib、javassist</em></strong><br>asm性能最佳、技术难度大<br>cglib是对asm的封装,技术难度低<br>Javassist 性能弱于asm、技术难度低</p>\n<h3 id=\"asm\"><a href=\"#asm\" class=\"headerlink\" title=\"asm\"></a>asm</h3><h3 id=\"cglib\"><a href=\"#cglib\" class=\"headerlink\" title=\"cglib\"></a>cglib</h3><h3 id=\"javassist\"><a href=\"#javassist\" class=\"headerlink\" title=\"javassist\"></a>javassist</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Demo.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//DemoSuper.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo.supers;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoSuper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sysHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//JavassistTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.dynamic.demo.Demo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtNewMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavassistTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span><br><span class=\"line\">  * <span class=\"doctag\">@param</span> args</span><br><span class=\"line\">  * <span class=\"doctag\">@throws</span> Exception </span><br><span class=\"line\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">\tCtClass cc = pool.get(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tcc.setSuperclass(pool.get(<span class=\"string\">\"com.dynamic.demo.supers.DemoSuper\"</span>));<span class=\"comment\">//添加父类</span></span><br><span class=\"line\">\tCtMethod mthd = CtNewMethod.make(<span class=\"string\">\"public void sysHello() &#123; &#125;\"</span>, cc);<span class=\"comment\">//创建方法</span></span><br><span class=\"line\">\tcc.addMethod(mthd);<span class=\"comment\">//添加方法</span></span><br><span class=\"line\">\tCtMethod m = cc.getDeclaredMethod(<span class=\"string\">\"sysHello\"</span>);</span><br><span class=\"line\">\tm.insertBefore(<span class=\"string\">\"&#123; super.sysHello(); &#125;\"</span>);</span><br><span class=\"line\">\tcc.writeFile();<span class=\"comment\">//保存class文件</span></span><br><span class=\"line\">\tClass c = cc.toClass();</span><br><span class=\"line\">\tMethod method = c.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmethod.invoke(c.newInstance(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDemo e = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">\tClass cl = Class.forName(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tMethod mm = cl.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmm.invoke(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后控制台打印结果分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>动态编程指的是在运行时动态修改代码逻辑。</p>\n<h2 id=\"java运行原理\"><a href=\"#java运行原理\" class=\"headerlink\" title=\"java运行原理\"></a>java运行原理</h2><p>java的运行机制是开发工程师编写java源代码通过javac（java编译器）生产class文件，然后在通过java类加载器装载到jvm（java虚拟机）中，解析Class文件内的信息，生产对应的Class对象。<br>class字节码文件是根据jvm虚拟机规范中规定的字节码组织规则生产。<br>","more":"<br><img src=\"43918004_1.png\" alt=\"\"><br>由于jvm通过字节码的二进制信息加载类，那么，如果我们在运行期系统中，遵循java编译系统组织.class文件的格式和结构，生产相应的二进制数据，然后在吧这个二进制数据加载转换成对应的类，这样，就完成了在代码中，动态创建、修改一个类的能力了。<br><img src=\"43918004_2.png\" alt=\"\"></p>\n<h2 id=\"动态修改字节码\"><a href=\"#动态修改字节码\" class=\"headerlink\" title=\"动态修改字节码\"></a>动态修改字节码</h2><p><strong><em>能实现java动态编程的框架有三种分别是 asm、cglib、javassist</em></strong><br>asm性能最佳、技术难度大<br>cglib是对asm的封装,技术难度低<br>Javassist 性能弱于asm、技术难度低</p>\n<h3 id=\"asm\"><a href=\"#asm\" class=\"headerlink\" title=\"asm\"></a>asm</h3><h3 id=\"cglib\"><a href=\"#cglib\" class=\"headerlink\" title=\"cglib\"></a>cglib</h3><h3 id=\"javassist\"><a href=\"#javassist\" class=\"headerlink\" title=\"javassist\"></a>javassist</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Demo.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//DemoSuper.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.demo.supers;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoSuper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sysHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//JavassistTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.dynamic.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.dynamic.demo.Demo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtNewMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavassistTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span><br><span class=\"line\">  * <span class=\"doctag\">@param</span> args</span><br><span class=\"line\">  * <span class=\"doctag\">@throws</span> Exception </span><br><span class=\"line\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">\tCtClass cc = pool.get(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tcc.setSuperclass(pool.get(<span class=\"string\">\"com.dynamic.demo.supers.DemoSuper\"</span>));<span class=\"comment\">//添加父类</span></span><br><span class=\"line\">\tCtMethod mthd = CtNewMethod.make(<span class=\"string\">\"public void sysHello() &#123; &#125;\"</span>, cc);<span class=\"comment\">//创建方法</span></span><br><span class=\"line\">\tcc.addMethod(mthd);<span class=\"comment\">//添加方法</span></span><br><span class=\"line\">\tCtMethod m = cc.getDeclaredMethod(<span class=\"string\">\"sysHello\"</span>);</span><br><span class=\"line\">\tm.insertBefore(<span class=\"string\">\"&#123; super.sysHello(); &#125;\"</span>);</span><br><span class=\"line\">\tcc.writeFile();<span class=\"comment\">//保存class文件</span></span><br><span class=\"line\">\tClass c = cc.toClass();</span><br><span class=\"line\">\tMethod method = c.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmethod.invoke(c.newInstance(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDemo e = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">\tClass cl = Class.forName(<span class=\"string\">\"com.dynamic.demo.Demo\"</span>);</span><br><span class=\"line\">\tMethod mm = cl.getMethod(<span class=\"string\">\"sysHello\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tmm.invoke(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后控制台打印结果分别是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>"},{"title":"JavaScript面向对象编程","date":"2016-05-11T03:05:20.000Z","comments":1,"toc":true,"_content":"\n## this\njavascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：\n\n```javascript\nfunction Test(){\n  alert(this);\n}\n//此时的this，是window弹出[object Window]\nTest();\n//此时的this，是当前对象的的object 弹出[object Object]\nvar t = new Test();\n```\n<!-- more -->\n会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。\n由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。\n### apply、call\n\ncall, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.\n\n区分apply,call就一句话,\n```javascript\nfoo.call(this, arg1,arg2,arg3) == foo.apply(this, arguments)==this.foo(arg1, arg2, arg3)\n```\n***相同点:两个方法产生的作用是完全一样的***\n***不同点:方法传递的参数不同***\n***call, apply作用就是借用别人的方法来调用,就像调用自己的一样.***\n```javascript\n//声明人类 人类含有属性、name、age、sex\nfunction person(name,age,sex){\n   this.name = name;\n   this.age=age;\n   this.sex=sex;\n}\n//声明中国人  \nfunction chinese(name,age,sex){\n  this.colour=\"yellow\";\n  //用call方式借用person,参数显式打散传递\n  person.call(this, name, age, sex);\n  //用apply方式借用person, 参数作为一个数组传递,\n  //这里直接用JavaScript方法内本身有的arguments数组\n  person.apply(this, arguments);\n  //或者封装成数组\n  person.apply(this, [name,age,sex]);\n  \n  this.sayHello=function(){\n    alert(\"大家好我叫：\"+this.name+\" 性别：\"+this.sex+\" 年龄：\"+this.age+\" 肤色：\"+this.colour);\n  }\n}\nvar p =new chinese(\"张三\",18,\"男\");\np.sayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\nchinese(\"张三\",18,\"男\");\nsayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\n```\n在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,\n23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错\n\n***应用场景:***\n当参数明确时可用call, 当参数不明确时可用apply给合arguments\n\n***总结：***通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的***继承***\n## Prototype\njavascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。\n\n## 对于对象常用的操作\n\n### constructor\n每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object\n### instanceof\n用于验证原型对象与实例对象之间的关系 obj  instanceof Object\n\n### isPrototypeOf \n判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)\n\n### hasOwnProperty\n用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(\"name\")\n\n\n ### in\n某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj\nin运算符还可以用来遍历某个对象的所有属性\n```javascript\nfor(var prop in cat1) {\n  alert(\"cat1[\"+prop+\"]=\"+cat1[prop]); \n}\n```\n\n","source":"_posts/JavaScript面向对象编程.md","raw":"---\ntitle: JavaScript面向对象编程\ndate: 2016-05-11 11:05:20\ncomments: true \ncategories: JavaScript\ntoc: true\n---\n\n## this\njavascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：\n\n```javascript\nfunction Test(){\n  alert(this);\n}\n//此时的this，是window弹出[object Window]\nTest();\n//此时的this，是当前对象的的object 弹出[object Object]\nvar t = new Test();\n```\n<!-- more -->\n会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。\n由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。\n### apply、call\n\ncall, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.\n\n区分apply,call就一句话,\n```javascript\nfoo.call(this, arg1,arg2,arg3) == foo.apply(this, arguments)==this.foo(arg1, arg2, arg3)\n```\n***相同点:两个方法产生的作用是完全一样的***\n***不同点:方法传递的参数不同***\n***call, apply作用就是借用别人的方法来调用,就像调用自己的一样.***\n```javascript\n//声明人类 人类含有属性、name、age、sex\nfunction person(name,age,sex){\n   this.name = name;\n   this.age=age;\n   this.sex=sex;\n}\n//声明中国人  \nfunction chinese(name,age,sex){\n  this.colour=\"yellow\";\n  //用call方式借用person,参数显式打散传递\n  person.call(this, name, age, sex);\n  //用apply方式借用person, 参数作为一个数组传递,\n  //这里直接用JavaScript方法内本身有的arguments数组\n  person.apply(this, arguments);\n  //或者封装成数组\n  person.apply(this, [name,age,sex]);\n  \n  this.sayHello=function(){\n    alert(\"大家好我叫：\"+this.name+\" 性别：\"+this.sex+\" 年龄：\"+this.age+\" 肤色：\"+this.colour);\n  }\n}\nvar p =new chinese(\"张三\",18,\"男\");\np.sayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\nchinese(\"张三\",18,\"男\");\nsayHello();\n//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow\n```\n在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,\n23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错\n\n***应用场景:***\n当参数明确时可用call, 当参数不明确时可用apply给合arguments\n\n***总结：***通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的***继承***\n## Prototype\njavascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。\n\n## 对于对象常用的操作\n\n### constructor\n每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object\n### instanceof\n用于验证原型对象与实例对象之间的关系 obj  instanceof Object\n\n### isPrototypeOf \n判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)\n\n### hasOwnProperty\n用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(\"name\")\n\n\n ### in\n某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj\nin运算符还可以用来遍历某个对象的所有属性\n```javascript\nfor(var prop in cat1) {\n  alert(\"cat1[\"+prop+\"]=\"+cat1[prop]); \n}\n```\n\n","slug":"JavaScript面向对象编程","published":1,"updated":"2016-05-26T16:13:02.239Z","layout":"post","photos":[],"link":"","_id":"civ2gzllw000c50yba0pv4bsl","content":"<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>javascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是window弹出[object Window]</span></span><br><span class=\"line\">Test();</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是当前对象的的object 弹出[object Object]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。<br>由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。</p>\n<h3 id=\"apply、call\"><a href=\"#apply、call\" class=\"headerlink\" title=\"apply、call\"></a>apply、call</h3><p>call, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.</p>\n<p>区分apply,call就一句话,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.call(<span class=\"keyword\">this</span>, arg1,arg2,arg3) == foo.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)==<span class=\"keyword\">this</span>.foo(arg1, arg2, arg3)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>相同点:两个方法产生的作用是完全一样的</em></strong><br><strong><em>不同点:方法传递的参数不同</em></strong><br><strong><em>call, apply作用就是借用别人的方法来调用,就像调用自己的一样.</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明人类 人类含有属性、name、age、sex</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sex=sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明中国人  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chinese</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colour=<span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用call方式借用person,参数显式打散传递</span></span><br><span class=\"line\">  person.call(<span class=\"keyword\">this</span>, name, age, sex);</span><br><span class=\"line\">  <span class=\"comment\">//用apply方式借用person, 参数作为一个数组传递,</span></span><br><span class=\"line\">  <span class=\"comment\">//这里直接用JavaScript方法内本身有的arguments数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">//或者封装成数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, [name,age,sex]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"大家好我叫：\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\" 性别：\"</span>+<span class=\"keyword\">this</span>.sex+<span class=\"string\">\" 年龄：\"</span>+<span class=\"keyword\">this</span>.age+<span class=\"string\">\" 肤色：\"</span>+<span class=\"keyword\">this</span>.colour);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p =<span class=\"keyword\">new</span> chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br><span class=\"line\">chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br></pre></td></tr></table></figure></p>\n<p>在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,<br>23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错</p>\n<p><strong><em>应用场景:</em></strong><br>当参数明确时可用call, 当参数不明确时可用apply给合arguments</p>\n<p><strong><em>总结：</em></strong>通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的<strong><em>继承</em></strong></p>\n<h2 id=\"Prototype\"><a href=\"#Prototype\" class=\"headerlink\" title=\"Prototype\"></a>Prototype</h2><p>javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。</p>\n<h2 id=\"对于对象常用的操作\"><a href=\"#对于对象常用的操作\" class=\"headerlink\" title=\"对于对象常用的操作\"></a>对于对象常用的操作</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p>每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于验证原型对象与实例对象之间的关系 obj  instanceof Object</p>\n<h3 id=\"isPrototypeOf-NaN\"><a href=\"#isPrototypeOf-NaN\" class=\"headerlink\" title=\"isPrototypeOf\"></a>isPrototypeOf</h3><p>判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)</p>\n<h3 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h3><p>用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(“name”)</p>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><p>某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj<br>in运算符还可以用来遍历某个对象的所有属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> cat1) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"cat1[\"</span>+prop+<span class=\"string\">\"]=\"</span>+cat1[prop]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>javascript中的this和java一样都是表示当前对象，它用在对象的方法中。关键字 this 总是指向调用该方法的对象，但需要注意的是同一个函数调用的方式不一样this指向的对象也不一样如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  alert(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是window弹出[object Window]</span></span><br><span class=\"line\">Test();</span><br><span class=\"line\"><span class=\"comment\">//此时的this，是当前对象的的object 弹出[object Object]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();</span><br></pre></td></tr></table></figure>","more":"<p>会出现前后不一样的原因其实很简单，因为我们直接在调用Test函数浏览器会把这个函数当成window中的一个函数，此时的this当然指向的是window。在后面我们通过new 实例化了Test此时浏览器会吧Test当做成了一个对象此时的this肯定是指向当前对象。<br>由此可以总结：函数在不同的环境下执行，this的指向也不同，谁调用了这个函数，this就指向谁。</p>\n<h3 id=\"apply、call\"><a href=\"#apply、call\" class=\"headerlink\" title=\"apply、call\"></a>apply、call</h3><p>call, apply都属于Function.prototype的一个方法,它是JavaScript引擎内在实现的,因为属于Function.prototype,所以每个Function对象实例,也就是每个方法都有call, apply属性.既然作为方法的属性,那它们的使用就当然是针对方法的了.这两个方法是容易混淆的,因为它们的作用一样,只是使用方式不同.</p>\n<p>区分apply,call就一句话,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.call(<span class=\"keyword\">this</span>, arg1,arg2,arg3) == foo.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)==<span class=\"keyword\">this</span>.foo(arg1, arg2, arg3)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>相同点:两个方法产生的作用是完全一样的</em></strong><br><strong><em>不同点:方法传递的参数不同</em></strong><br><strong><em>call, apply作用就是借用别人的方法来调用,就像调用自己的一样.</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明人类 人类含有属性、name、age、sex</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.sex=sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明中国人  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chinese</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colour=<span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用call方式借用person,参数显式打散传递</span></span><br><span class=\"line\">  person.call(<span class=\"keyword\">this</span>, name, age, sex);</span><br><span class=\"line\">  <span class=\"comment\">//用apply方式借用person, 参数作为一个数组传递,</span></span><br><span class=\"line\">  <span class=\"comment\">//这里直接用JavaScript方法内本身有的arguments数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">//或者封装成数组</span></span><br><span class=\"line\">  person.apply(<span class=\"keyword\">this</span>, [name,age,sex]);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"大家好我叫：\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\" 性别：\"</span>+<span class=\"keyword\">this</span>.sex+<span class=\"string\">\" 年龄：\"</span>+<span class=\"keyword\">this</span>.age+<span class=\"string\">\" 肤色：\"</span>+<span class=\"keyword\">this</span>.colour);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p =<span class=\"keyword\">new</span> chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">p.sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br><span class=\"line\">chinese(<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">sayHello();</span><br><span class=\"line\"><span class=\"comment\">//弹出  大家好我叫：张三 性别：男 年龄：18 肤色：yellow</span></span><br></pre></td></tr></table></figure></p>\n<p>在这场景中, chinese方法内,name,age,sex作为方法传递的参数, 方法分别运用了apply, call去借person方法来调用,<br>23行由于直接调用chinese方法, 所以在该方法中的上下文对象this就是window对象.在chinese方法中 通过this.sayHello=function(){}等价于 windows.sayHello=function(){}所以最后一行syaHello调用不会报错</p>\n<p><strong><em>应用场景:</em></strong><br>当参数明确时可用call, 当参数不明确时可用apply给合arguments</p>\n<p><strong><em>总结：</em></strong>通过call、apply可以改变一个函数内的this引用，使用这个特性可以实现JavaScript面向对象编程的三大特性其中的<strong><em>继承</em></strong></p>\n<h2 id=\"Prototype\"><a href=\"#Prototype\" class=\"headerlink\" title=\"Prototype\"></a>Prototype</h2><p>javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这意味着。我们可以把那些不变的属性和方法，直接定义在prototype对象上。这样带来的好处就是再实例多一个对象的时候减少了内存开销，因为多个对象指向的是同一个内存地址，提高了允许的效率。类似于java中的静态方法（被static修饰的变量和方法）。</p>\n<h2 id=\"对于对象常用的操作\"><a href=\"#对于对象常用的操作\" class=\"headerlink\" title=\"对于对象常用的操作\"></a>对于对象常用的操作</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><p>每一个对象都会自动包含一个constructor属性，指向他们的构造函数。obj.constructor == Object</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于验证原型对象与实例对象之间的关系 obj  instanceof Object</p>\n<h3 id=\"isPrototypeOf-NaN\"><a href=\"#isPrototypeOf-NaN\" class=\"headerlink\" title=\"isPrototypeOf\"></a>isPrototypeOf</h3><p>判断某个prototype对象和某个实例之间的关系 Object.prototype.isPrototypeOf(obj)</p>\n<h3 id=\"hasOwnProperty-NaN\"><a href=\"#hasOwnProperty-NaN\" class=\"headerlink\" title=\"hasOwnProperty\"></a>hasOwnProperty</h3><p>用于判断某一个属性到底是本地属性，还是继承自prototype对象的属性  obj.hasOwnProerty(“name”)</p>\n<h3 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h3><p>某个实例是否含有某个属性，不管是不是本地属性。 “name” in Obj<br>in运算符还可以用来遍历某个对象的所有属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> cat1) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"cat1[\"</span>+prop+<span class=\"string\">\"]=\"</span>+cat1[prop]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Android反编译与混淆技术完全解析","date":"2016-05-18T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 反编译\n\n我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。 \n在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。 \n<!--more-->\n\n这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：\n```java\npublic class MainActivity extends AppCompatActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {        \n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.activity_main);\n\tButton button = (Button) findViewById(R.id.button);\n\tbutton.setOnClickListener(new View.OnClickListener() {            \n\t  @Override\n\t  public void onClick(View v) {\n\t    Toast.makeText(MainActivity.this, \"you clicked button\", Toast.LENGTH_SHORT).show();\n\t  }\n\t});\n  }\n}\n```\nactivity_main.xml中的资源如下所示：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><RelativeLayout    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\"\n\tandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\n\tandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingTop=\"@dimen/activity_vertical_margin\">\n\n\t<Button        android:id=\"@+id/button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:text=\"Button\"/></RelativeLayout>\n```\n然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：\n![](0.gif)\n好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。\n反编译代码\n要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：\ndex2jar 这个工具用于将dex文件转换成jar文件 \n下载地址：[dex2jar](http://sourceforge.net/projects/dex2jar/files/)\njd-gui 这个工具用于将jar文件转换成java代码 \n下载地址：[jd-gui](http://jd.benow.ca/)\n将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：\n![](640.png)\n其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。 \n然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示： \n![](641.png)\n这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：\n```\nd2j-dex2jar classes.dex\n```\n执行结果如下图所示：\n![dex2jar](642.png)\n没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：\n![dex2jar](643.png)\n可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。 \n下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示： \n![classes-dex2jar.jar](644.jpg)\nOK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。 \n另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。 \n好的，学完了反编译代码，接下来我们看一下如何反编译资源。\n反编译资源\n其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示： \n![](645.png)\n这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示： \n![](646.png)\n可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去： \n![](647.png)\n由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。 \n要想将APK文件中的资源反编译出来，又要用到另外一个工具了：\napktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。 \n下载地址：[http://ibotpeaches.github.io/Apktool/install/](http://ibotpeaches.github.io/Apktool/install/)\n关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示： \n![](648.png)\n接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：\n```\napktool d Demo.apk\n```\n其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：\n\n-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。\n\n-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。\n\n-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。\n\n-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。\n常用用法就这么多了，那么上述命令的执行结果如下图所示：\n![](650.png)\n这就说明反编译资源已经成功了。 \n当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：\n![](651.png)\n出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。 \n现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：\n![](653.png)\n怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：\n![](655.png)\n可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。\n### 重新打包\n那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 \n\n首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：\n![](656.png)\n其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示： \n![](657.png)\n看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ \n\n不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：\n![](658.png)\n虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。 \n关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。\n改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：\n![](659.png)\n然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。 \n在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：\n```\napktool b Demo -o New_Demo.apk \n```\n其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示： \n![](1.png)\n现在你会发现在同级目录下面生成了一个新的APK文件：\n![](2.png)\n不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。 \n那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。 \n```\nkeytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore\n```\n有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下： \njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名\n```\njarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore\n```\n其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。 \n签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<Android SDK>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下： \n```\nzipalign 4 New_Demo.apk New_Demo_aligned.apk\n```\n其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示： \n![](5.png)\n这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示： \n![](2.gif)\n可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。\n\n好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。\n![](0.jpg)","source":"_posts/Android反编译与混淆技术完全解析.md","raw":"---\ntitle: Android反编译与混淆技术完全解析\ndate: 2016-05-19\ncomments: true\ncategories: Android\ntoc: true \n---\n\n### 反编译\n\n我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。 \n在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。 \n<!--more-->\n\n这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：\n```java\npublic class MainActivity extends AppCompatActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {        \n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.activity_main);\n\tButton button = (Button) findViewById(R.id.button);\n\tbutton.setOnClickListener(new View.OnClickListener() {            \n\t  @Override\n\t  public void onClick(View v) {\n\t    Toast.makeText(MainActivity.this, \"you clicked button\", Toast.LENGTH_SHORT).show();\n\t  }\n\t});\n  }\n}\n```\nactivity_main.xml中的资源如下所示：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><RelativeLayout    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\"\n\tandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\n\tandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\n\tandroid:paddingTop=\"@dimen/activity_vertical_margin\">\n\n\t<Button        android:id=\"@+id/button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:text=\"Button\"/></RelativeLayout>\n```\n然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：\n![](0.gif)\n好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。\n反编译代码\n要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：\ndex2jar 这个工具用于将dex文件转换成jar文件 \n下载地址：[dex2jar](http://sourceforge.net/projects/dex2jar/files/)\njd-gui 这个工具用于将jar文件转换成java代码 \n下载地址：[jd-gui](http://jd.benow.ca/)\n将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：\n![](640.png)\n其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。 \n然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示： \n![](641.png)\n这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：\n```\nd2j-dex2jar classes.dex\n```\n执行结果如下图所示：\n![dex2jar](642.png)\n没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：\n![dex2jar](643.png)\n可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。 \n下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示： \n![classes-dex2jar.jar](644.jpg)\nOK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。 \n另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。 \n好的，学完了反编译代码，接下来我们看一下如何反编译资源。\n反编译资源\n其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示： \n![](645.png)\n这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示： \n![](646.png)\n可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去： \n![](647.png)\n由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。 \n要想将APK文件中的资源反编译出来，又要用到另外一个工具了：\napktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。 \n下载地址：[http://ibotpeaches.github.io/Apktool/install/](http://ibotpeaches.github.io/Apktool/install/)\n关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示： \n![](648.png)\n接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：\n```\napktool d Demo.apk\n```\n其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：\n\n-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。\n\n-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。\n\n-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。\n\n-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。\n常用用法就这么多了，那么上述命令的执行结果如下图所示：\n![](650.png)\n这就说明反编译资源已经成功了。 \n当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：\n![](651.png)\n出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。 \n现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：\n![](653.png)\n怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：\n![](655.png)\n可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。\n### 重新打包\n那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 \n\n首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：\n![](656.png)\n其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示： \n![](657.png)\n看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ \n\n不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：\n![](658.png)\n虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。 \n关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。\n改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：\n![](659.png)\n然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。 \n在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：\n```\napktool b Demo -o New_Demo.apk \n```\n其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示： \n![](1.png)\n现在你会发现在同级目录下面生成了一个新的APK文件：\n![](2.png)\n不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。 \n那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。 \n```\nkeytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore\n```\n有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下： \njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名\n```\njarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore\n```\n其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。 \n签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<Android SDK>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下： \n```\nzipalign 4 New_Demo.apk New_Demo_aligned.apk\n```\n其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示： \n![](5.png)\n这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示： \n![](2.gif)\n可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。\n\n好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。\n![](0.jpg)","slug":"Android反编译与混淆技术完全解析","published":1,"updated":"2016-05-19T13:07:46.232Z","layout":"post","photos":[],"link":"","_id":"civ2gzllw000f50yb904c8e2v","content":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。<br>在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。<br><a id=\"more\"></a></p>\n<p>这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;        </span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\tsetContentView(R.layout.activity_main);</span><br><span class=\"line\">\tButton button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">\tbutton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;            </span><br><span class=\"line\">\t  <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"you clicked button\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>activity_main.xml中的资源如下所示：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span>    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Button</span>        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"Button\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：<br><img src=\"0.gif\" alt=\"\"><br>好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。<br>反编译代码<br>要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：<br>dex2jar 这个工具用于将dex文件转换成jar文件<br>下载地址：<a href=\"http://sourceforge.net/projects/dex2jar/files/\" target=\"_blank\" rel=\"external\">dex2jar</a><br>jd-gui 这个工具用于将jar文件转换成java代码<br>下载地址：<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"external\">jd-gui</a><br>将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：<br><img src=\"640.png\" alt=\"\"><br>其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。<br>然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示：<br><img src=\"641.png\" alt=\"\"><br>这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d2j-dex2jar classes.dex</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下图所示：<br><img src=\"642.png\" alt=\"dex2jar\"><br>没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：<br><img src=\"643.png\" alt=\"dex2jar\"><br>可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。<br>下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示：<br><img src=\"644.jpg\" alt=\"classes-dex2jar.jar\"><br>OK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。<br>另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。<br>好的，学完了反编译代码，接下来我们看一下如何反编译资源。<br>反编译资源<br>其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示：<br><img src=\"645.png\" alt=\"\"><br>这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示：<br><img src=\"646.png\" alt=\"\"><br>可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去：<br><img src=\"647.png\" alt=\"\"><br>由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。<br>要想将APK文件中的资源反编译出来，又要用到另外一个工具了：<br>apktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。<br>下载地址：<a href=\"http://ibotpeaches.github.io/Apktool/install/\" target=\"_blank\" rel=\"external\">http://ibotpeaches.github.io/Apktool/install/</a><br>关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示：<br><img src=\"648.png\" alt=\"\"><br>接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：</p>\n<p>-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。</p>\n<p>-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。</p>\n<p>-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。</p>\n<p>-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br><img src=\"650.png\" alt=\"\"><br>这就说明反编译资源已经成功了。<br>当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：<br><img src=\"651.png\" alt=\"\"><br>出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。<br>现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：<br><img src=\"653.png\" alt=\"\"><br>怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：<br><img src=\"655.png\" alt=\"\"><br>可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。</p>\n<h3 id=\"重新打包\"><a href=\"#重新打包\" class=\"headerlink\" title=\"重新打包\"></a>重新打包</h3><p>那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 </p>\n<p>首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：<br><img src=\"656.png\" alt=\"\"><br>其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示：<br><img src=\"657.png\" alt=\"\"><br>看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ </p>\n<p>不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：<br><img src=\"658.png\" alt=\"\"><br>虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。<br>关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。<br>改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：<br><img src=\"659.png\" alt=\"\"><br>然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。<br>在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b Demo -o New_Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示：<br><img src=\"1.png\" alt=\"\"><br>现在你会发现在同级目录下面生成了一个新的APK文件：<br><img src=\"2.png\" alt=\"\"><br>不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。<br>那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下：<br>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。<br>签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<android sdk=\"\">/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign 4 New_Demo.apk New_Demo_aligned.apk</span><br></pre></td></tr></table></figure></version></android></p>\n<p>其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示：<br><img src=\"5.png\" alt=\"\"><br>这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示：<br><img src=\"2.gif\" alt=\"\"><br>可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。</p>\n<p>好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。<br><img src=\"0.jpg\" alt=\"\"></p>\n","excerpt":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>我们都知道，Android程序打完包之后得到的是一个APK文件，这个文件是可以直接安装到任何Android手机上的，我们反编译其实也就是对这个APK文件进行反编译。Android的反编译主要又分为两个部分，一个是对代码的反编译，一个是对资源的反编译，我们马上来逐个学习一下。<br>在开始学习之前，首先我们需要准备一个APK文件，为了尊重所有开发者，我就不拿任何一个市面上的软件来演示了，而是自己写一个Demo用来测试。<br>","more":"</p>\n<p>这里我希望代码越简单越好，因此我们建立一个新项目，在Activity里加入一个按钮，当点击按钮时弹出一个Toast，就这么简单，代码如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;        </span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\tsetContentView(R.layout.activity_main);</span><br><span class=\"line\">\tButton button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">\tbutton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;            </span><br><span class=\"line\">\t  <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"you clicked button\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>activity_main.xml中的资源如下所示：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span>    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/activity_vertical_margin\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Button</span>        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">android:text</span>=<span class=\"string\">\"Button\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们将代码打成一个APK包，并命名成Demo.apk，再把它安装到手机上，结果如下所示：<br><img src=\"0.gif\" alt=\"\"><br>好的，到这里准备工作就已经基本完成了，接下来就让我们开始对这个Demo程序进行反编译吧。<br>反编译代码<br>要想将APK文件中的代码反编译出来，我们需要用到以下两款工具：<br>dex2jar 这个工具用于将dex文件转换成jar文件<br>下载地址：<a href=\"http://sourceforge.net/projects/dex2jar/files/\">dex2jar</a><br>jd-gui 这个工具用于将jar文件转换成java代码<br>下载地址：<a href=\"http://jd.benow.ca/\">jd-gui</a><br>将这两个工具都下载好并解压，然后我们就开始对Demo程序进行反编译。解压dex2jar压缩包后，你会发现有很多个文件，如下图所示：<br><img src=\"640.png\" alt=\"\"><br>其中我们要用到的是d2j-dex2jar.bat这个文件，当然如果你是linux或mac系统的话就要用d2j-dex2jar.sh这个文件。<br>然后我们将Demo.apk文件也进行解压，如果不知道怎么直接解压的可以先将文件重命名成Demo.zip，然后用解压软件打开。解压之后你会发现里面有一个classes.dex文件，如下图所示：<br><img src=\"641.png\" alt=\"\"><br>这个classes.dex文件就是存放所有java代码的地方了，我们将它拷贝到dex2jar解压后的目录下，并在cmd中也进入到同样的目录，然后执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d2j-dex2jar classes.dex</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下图所示：<br><img src=\"642.png\" alt=\"dex2jar\"><br>没有报任何错误，这就说明我们已经转换成功了。现在观察dex2jar目录，你会发现多了一个文件，如下图所示：<br><img src=\"643.png\" alt=\"dex2jar\"><br>可以看到，classes-dex2jar.jar这个文件就是我们借助工具之后成功转换出来的jar文件了。但是对于我们而言，jar文件也不是可读的，因此这里还需要再借助一下jd-gui这个工具来将jar文件转换成java代码。<br>下面就很简单了，使用jd-gui工具打开classes-dex2jar.jar这个文件，结果如下图所示：<br><img src=\"644.jpg\" alt=\"classes-dex2jar.jar\"><br>OK，由此可见，我们的代码反编译工作已经成功了，MainActivity中的代码非常清晰，基本已经做到了90%以上的还原工作。但是如果想要做到100%的代码还原还是非常有难度的，因为像setContentView()方法传入的参数，其实就是一个资源的id值而已，那么这里反编译也就只能将相应的id值进行还原，而无法变成像R.layout.activity_main这样直观的代码展示。<br>另外，除了MainActivity之外，还有很多其它的代码也被反编译出来了，因为当前项目有引用support-v4和support-v7的包，这些引用的library也会作为代码的一部分被打包到classes.dex文件当中，因此反编译的时候这些代码也会一起被还原。<br>好的，学完了反编译代码，接下来我们看一下如何反编译资源。<br>反编译资源<br>其实细心的朋友可能已经观察到了，刚才Demo.apk的解压目录当中不是已经有资源文件了吗，有AndroidManifest.xml文件，也有res目录。进入res目录当中，内容如下图所示：<br><img src=\"645.png\" alt=\"\"><br>这不是所有资源文件都在这里了么？其实这些资源文件都是在打包的时候被编译过了，我们直接打开的话是看不到明文的，不信的话我们打开AndroidManifest.xml文件来瞧一瞧，内容如下图所示：<br><img src=\"646.png\" alt=\"\"><br>可以看到，这代码是完全没法阅读的。当然如果你去打开activity_main.xml看看，结果也不会好到哪儿去：<br><img src=\"647.png\" alt=\"\"><br>由此可见，直接对APK包进行解压是无法得到它的原始资源文件的，因此我们还需要对资源进行反编译才行。<br>要想将APK文件中的资源反编译出来，又要用到另外一个工具了：<br>apktool 这个工具用于最大幅度地还原APK文件中的9-patch图片、布局、字符串等等一系列的资源。<br>下载地址：<a href=\"http://ibotpeaches.github.io/Apktool/install/\">http://ibotpeaches.github.io/Apktool/install/</a><br>关于这个工具的下载我还要再补充几句，我们需要的就是apktool.bat和apktool.jar这两个文件。目前apktool.jar的最新版本是2.0.3，这里我就下载最新的了，然后将apktool_2.0.3.jar重命名成apktool.jar，并将它们放到同一个文件夹下就可以了，如下图所示：<br><img src=\"648.png\" alt=\"\"><br>接下来的工作就很简单了，我们将Demo.apk拷贝到和这两个文件同样的目录当中，然后cmd也进入到这个目录下，并在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：</p>\n<p>-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。</p>\n<p>-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。</p>\n<p>-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。</p>\n<p>-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br><img src=\"650.png\" alt=\"\"><br>这就说明反编译资源已经成功了。<br>当然即使你在和我执行一模一样的操作，也有可能会在这里反编译失败，比如说会报如下错误：<br><img src=\"651.png\" alt=\"\"><br>出现这个错误的原因很有可能是你之前使用过apktool的老版本进行过反编译操作，然后apktool就会在你系统的C:\\Users\\Administrator\\apktool\\framework这个目录下生成一个名字为1.apk的缓存文件，将这个缓存文件删除掉，然后再重新执行反编译命令应该就可以成功了。<br>现在你会发现在当前目录下多了一个Demo文件夹，这个文件夹中存放的就是反编译的结果了。我们可以打开AndroidManifest.xml来瞧一瞧，如下图所示：<br><img src=\"653.png\" alt=\"\"><br>怎么样？这样就完全能看得懂了吧，然后可以再到res/layout中看一下activity_main.xml文件，如下图所示：<br><img src=\"655.png\" alt=\"\"><br>可以看到，activity_main.xml中的内容基本和源代码中的内容是一致的，外层是一个RelativeLayout，里面则是一个Button。你可以再到其它目录中去看一看别的资源，基本上都是可以正常还原的，这样我们就把反编译资源的方法也已经掌握了。</p>\n<h3 id=\"重新打包\"><a href=\"#重新打包\" class=\"headerlink\" title=\"重新打包\"></a>重新打包</h3><p>那么对于反编译出来的文件夹，我们能不能重新把它打包成APK文件呢？答案是肯定的，只不过我实在想不出有什么义正言辞的理由可以让我们这么做。有的人会说汉化，没错，汉化的方式确实就是将一个APK进行反编译，然后翻译其中的资源再重新打包，但是不管怎么说这仍然是将别人的程序进行破解，所以我并不认为这是什么光荣的事情。那么我们就不去讨论本身这件事情的对或错，这里只是站在技术的角度来学习一下重新打包的相关知识。 </p>\n<p>首先我们来看一下通过apktool反编译后的包目录情况，如下图所示：<br><img src=\"656.png\" alt=\"\"><br>其中，original文件夹下存放的是未经反编译过、原始的AndroidManifest.xml文件，res文件夹下存放的是反编译出来的所有资源，smali文件夹下存放的是反编译出来的所有代码，AndroidManifest.xml则是经过反编译还原后的manifest文件。这里值得一提的是smali文件夹，如果你进入到这个文件夹中你会发现它的目录结构和我们源码中src的目录结构是几乎一样的，主要的区别就是所有的java文件都变成了smali文件。smali文件其实也是真正的源代码，只不过它的语法和java完全不同，它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言，语法结构大概如下所示：<br><img src=\"657.png\" alt=\"\"><br>看上去有点晕头转向是吗？但是如果你一旦能够看得懂smali文件的话，那么你就可以做很恐怖的事情了——你可以随意修改应用程序内的逻辑，将其进行破解！ </p>\n<p>不过我对这种黑技术并没有什么太大的兴趣，因此我也没有去做具体研究，但即使是这样，也已经可以对程序的逻辑做一定程度的修改了。比如说当我们点击按钮时会弹出you clicked button这样一句Toast，逻辑是写在MainActivity按钮点击事件的匿名类当中的，因此这段代码反编译之后一定就会在MainActivity$1.smali这个文件当中，让我们打开瞧一瞧，部分代码如下所示：<br><img src=\"658.png\" alt=\"\"><br>虽说多数的代码我是看不懂的，但其中第47行实在太明显了，Toast显示的内容不就是在这里定义的么，那么如果我们想把Demo程序hack掉，就可以将这段字符串给改掉，比如说我把它改成Your app is been hacked。<br>关于smali的语法，网上的资料也非常多，如果你对这门技术十分感兴趣的话可以直接上网去搜，这里我只是简单介绍一下，就不再深入讲解相关知识了。<br>改了一处代码后我们再来改一处资源吧，比如这里想要把Demo的应用图标给换掉，那么首先我们要准备好一张新的图片，如下图所示：<br><img src=\"659.png\" alt=\"\"><br>然后从AndroidManifest.xml文件中可以看出，应用图标使用的是ic_launcher.png这张图片，那么我们将上面篮球这张图片命名成ic_launcher.png，然后拷贝到所有以res/mipmap开头的文件夹当中完成替换操作。<br>在做了两处改动之后，我们现在来把反编译后的Demo文件夹重新打包成APK吧，其实非常简单，只需要在cmd中执行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b Demo -o New_Demo.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中b是build的意思，表示我们要将Demo文件夹打包成APK文件，-o用于指定新生成的APK文件名，这里新的文件叫作New_Demo.apk。执行结果如下图所示：<br><img src=\"1.png\" alt=\"\"><br>现在你会发现在同级目录下面生成了一个新的APK文件：<br><img src=\"2.png\" alt=\"\"><br>不过不要高兴得太早了，目前这个New_Demo.apk还是不能安装的，因为它还没有进行签名。那么如果这是别人的程序的话，我们从哪儿能拿到它原来的签名文件呢？很显然，这是根本没有办法拿到的，因此我们只能拿自己的签名文件来对这个APK文件重新进行签名，但同时也表明我们重新打包出来的软件就是个十足的盗版软件。这里大家学学技术就好了，希望不要有任何人去做什么坏事情。<br>那么这里我就用一个之前生成好的签名文件了，使用Android Studio或者Eclipse都可以非常简单地生成一个签名文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -alias android.keystore -keyalg RSA -validity 20000 -keystore android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>有了签名文件之后在cmd中执行签名命令就可以进行签名了，命令格式如下：<br>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 签名文件名 -storepass 签名密码 待签名的APK文件名 签名的别名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore android.keystore -signedjar Sign_Demo.apk New_Dmeo.apk android.keystore</span><br></pre></td></tr></table></figure></p>\n<p>其中jarsigner命令文件是存放在jdk的bin目录下的，需要将bin目录配置在系统的环境变量当中才可以在任何位置执行此命令。<br>签名之后的APK文件现在已经可以安装到手机上了，不过在此之前Android还极度建议我们对签名后的APK文件进行一次对齐操作，因为这样可以使得我们的程序在Android系统中运行得更快。对齐操作使用的是zipalign工具，该工具存放于<Android SDK>/build-tools/<version>目录下，将这个目录配置到系统环境变量当中就可以在任何位置执行此命令了。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign 4 New_Demo.apk New_Demo_aligned.apk</span><br></pre></td></tr></table></figure></p>\n<p>其中4是固定值不能改变，后面指定待对齐的APK文件名和对齐后的APK文件名。运行这段命令之后就会生成一个New_Demo_aligned.apk文件，如下所示：<br><img src=\"5.png\" alt=\"\"><br>这个New_Demo_aligned.apk就是我们重新打包签名对齐后的文件了，现在把它安装到手机上，效果如下图所示：<br><img src=\"2.gif\" alt=\"\"><br>可以看到，应用图标已经成功改成了篮球，另外点击按钮后弹出的Toast的提示也变成了我们修改后的文字，说明重新打包操作确实已经成功了。</p>\n<p>好的，我们把反编译代码、反编译资源、重新打包这三大主题的内容都已经掌握了，关于反编译相关的内容就到这里。<br><img src=\"0.jpg\" alt=\"\"></p>"},{"title":"Java设计模式之观察者模式","date":"2015-01-05T06:43:27.000Z","comments":1,"toc":true,"_content":"\n观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。\n观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。\n\t  \n<!-- more --> \n### 类图结构\n![类图结构](class.jpg)\n\n### 抽象主题\n主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。\n\n![抽象主题](003vMReezy6OWsKgs3pa3&690.jpg)\n\n### 抽象观察者\n为所有具体的观察者定义一个接口，再得到通知更新自己。\n\n![抽象观察者](003vMReezy6OWsC8Oogc8&690.jpg)\n\n### 具体主题\n保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；\n\n### 具体观察者\n保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。\n\n\n下面就使用java.util.Observable 和java.util.Observer 实现观察者模式\n\n***代码清单一：具体主题***\n```java\npackage com.design.mode;\n\nimport java.util.Observable;\npublic class Subject extends Observable{\n  private String str;\n  public void add(String str){\n\tthis.str = str;\n\t//设置change=true\n\tsetChanged();\n\t//通知所有观察者主题有改变\n\tnotifyObservers(str);\n\t//notifyObservers();\n  }\n}\n```\n\n***代码清单二：具体观察者***\n```java\npackage com.design.mode;\nimport java.util.Observable;\nimport java.util.Observer;\npublic class SubjectObserver extends Observer{\n  public SubjectObserver(Observable 0){\n\to.addObserver(this);\n  }\n\t\n  public void update(Observable o,Object arg){\n\tSystem.out.println(arg);\n  }\n}\n```\n\n***代码清单三：测试***\n```java\npackage com.design.mode;\n\npublic class Test{\n  public static void main(String[] args){\n\t//实例化主题\n\tSubject sb = new Subject();\n\t//实例化观察者\n\tSubjectObserver so = new SubjectObserver(sb);\n\tsb.add(\"hello world\");\n  }\n}\n```\n***控制台输出***\n```\nhello world\n```\n\n### 总结\n观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。\n由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。\n\n\n\n","source":"_posts/Java设计模式之观察者模式.md","raw":"---\ntitle: Java设计模式之观察者模式\ndate: 2015-01-05 14:43:27 \ncomments: true \ncategories: Java\ntoc: true\n---\n\n观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。\n观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。\n\t  \n<!-- more --> \n### 类图结构\n![类图结构](class.jpg)\n\n### 抽象主题\n主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。\n\n![抽象主题](003vMReezy6OWsKgs3pa3&690.jpg)\n\n### 抽象观察者\n为所有具体的观察者定义一个接口，再得到通知更新自己。\n\n![抽象观察者](003vMReezy6OWsC8Oogc8&690.jpg)\n\n### 具体主题\n保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；\n\n### 具体观察者\n保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。\n\n\n下面就使用java.util.Observable 和java.util.Observer 实现观察者模式\n\n***代码清单一：具体主题***\n```java\npackage com.design.mode;\n\nimport java.util.Observable;\npublic class Subject extends Observable{\n  private String str;\n  public void add(String str){\n\tthis.str = str;\n\t//设置change=true\n\tsetChanged();\n\t//通知所有观察者主题有改变\n\tnotifyObservers(str);\n\t//notifyObservers();\n  }\n}\n```\n\n***代码清单二：具体观察者***\n```java\npackage com.design.mode;\nimport java.util.Observable;\nimport java.util.Observer;\npublic class SubjectObserver extends Observer{\n  public SubjectObserver(Observable 0){\n\to.addObserver(this);\n  }\n\t\n  public void update(Observable o,Object arg){\n\tSystem.out.println(arg);\n  }\n}\n```\n\n***代码清单三：测试***\n```java\npackage com.design.mode;\n\npublic class Test{\n  public static void main(String[] args){\n\t//实例化主题\n\tSubject sb = new Subject();\n\t//实例化观察者\n\tSubjectObserver so = new SubjectObserver(sb);\n\tsb.add(\"hello world\");\n  }\n}\n```\n***控制台输出***\n```\nhello world\n```\n\n### 总结\n观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。\n由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。\n\n\n\n","slug":"Java设计模式之观察者模式","published":1,"updated":"2016-05-11T12:40:50.499Z","layout":"post","photos":[],"link":"","_id":"civ2gzllw000g50ybgqwmivvm","content":"<p>观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。<br>观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。</p>\n<a id=\"more\"></a> \n<h3 id=\"类图结构\"><a href=\"#类图结构\" class=\"headerlink\" title=\"类图结构\"></a>类图结构</h3><p><img src=\"class.jpg\" alt=\"类图结构\"></p>\n<h3 id=\"抽象主题\"><a href=\"#抽象主题\" class=\"headerlink\" title=\"抽象主题\"></a>抽象主题</h3><p>主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。</p>\n<p><img src=\"003vMReezy6OWsKgs3pa3&amp;690.jpg\" alt=\"抽象主题\"></p>\n<h3 id=\"抽象观察者\"><a href=\"#抽象观察者\" class=\"headerlink\" title=\"抽象观察者\"></a>抽象观察者</h3><p>为所有具体的观察者定义一个接口，再得到通知更新自己。</p>\n<p><img src=\"003vMReezy6OWsC8Oogc8&amp;690.jpg\" alt=\"抽象观察者\"></p>\n<h3 id=\"具体主题\"><a href=\"#具体主题\" class=\"headerlink\" title=\"具体主题\"></a>具体主题</h3><p>保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；</p>\n<h3 id=\"具体观察者\"><a href=\"#具体观察者\" class=\"headerlink\" title=\"具体观察者\"></a>具体观察者</h3><p>保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。</p>\n<p>下面就使用java.util.Observable 和java.util.Observer 实现观察者模式</p>\n<p><strong><em>代码清单一：具体主题</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">\t<span class=\"comment\">//设置change=true</span></span><br><span class=\"line\">\tsetChanged();</span><br><span class=\"line\">\t<span class=\"comment\">//通知所有观察者主题有改变</span></span><br><span class=\"line\">\tnotifyObservers(str);</span><br><span class=\"line\">\t<span class=\"comment\">//notifyObservers();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单二：具体观察者</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectObserver</span><span class=\"params\">(Observable <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">\to.addObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o,Object arg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单三：测试</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//实例化主题</span></span><br><span class=\"line\">\tSubject sb = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">\t<span class=\"comment\">//实例化观察者</span></span><br><span class=\"line\">\tSubjectObserver so = <span class=\"keyword\">new</span> SubjectObserver(sb);</span><br><span class=\"line\">\tsb.add(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>控制台输出</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。<br>由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。</p>\n","excerpt":"<p>观察者模式定义了一个一对多的依赖关系，让一个或多个观察者对象监察一个主题对象。这样一个主题对象在状态上的变化能够通知所有的依赖于此对象的那些观察者对象，使这些观察者对象能够自动更新。<br>观察者（Observer）模式是对象的行为型模式，又叫做发表-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-收听者（Source/Listener）模式或从属者（Dependents）模式。</p>","more":"<h3 id=\"类图结构\"><a href=\"#类图结构\" class=\"headerlink\" title=\"类图结构\"></a>类图结构</h3><p><img src=\"class.jpg\" alt=\"类图结构\"></p>\n<h3 id=\"抽象主题\"><a href=\"#抽象主题\" class=\"headerlink\" title=\"抽象主题\"></a>抽象主题</h3><p>主题把所有的观察者对象引用保存到一个集合中，每个主题都可以有任何数量的观察者。主题提供一个增加、销毁观察者和通知所有观察者的方法。</p>\n<p><img src=\"003vMReezy6OWsKgs3pa3&amp;690.jpg\" alt=\"抽象主题\"></p>\n<h3 id=\"抽象观察者\"><a href=\"#抽象观察者\" class=\"headerlink\" title=\"抽象观察者\"></a>抽象观察者</h3><p>为所有具体的观察者定义一个接口，再得到通知更新自己。</p>\n<p><img src=\"003vMReezy6OWsC8Oogc8&amp;690.jpg\" alt=\"抽象观察者\"></p>\n<h3 id=\"具体主题\"><a href=\"#具体主题\" class=\"headerlink\" title=\"具体主题\"></a>具体主题</h3><p>保存对具体观察者对象有用的内部状态；在这种内部状态改变时给其观察者发出一个通知；具体主题角色又叫作具体被观察者角色；</p>\n<h3 id=\"具体观察者\"><a href=\"#具体观察者\" class=\"headerlink\" title=\"具体观察者\"></a>具体观察者</h3><p>保存一个指向具体主题对象的引用；和一个与主题的状态相符的状态。具体观察者角色实现抽象观察者角色所要求的更新自己的接口，以便使本身的状态与主题的状态同步。</p>\n<p>下面就使用java.util.Observable 和java.util.Observer 实现观察者模式</p>\n<p><strong><em>代码清单一：具体主题</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">\t<span class=\"comment\">//设置change=true</span></span><br><span class=\"line\">\tsetChanged();</span><br><span class=\"line\">\t<span class=\"comment\">//通知所有观察者主题有改变</span></span><br><span class=\"line\">\tnotifyObservers(str);</span><br><span class=\"line\">\t<span class=\"comment\">//notifyObservers();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单二：具体观察者</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectObserver</span><span class=\"params\">(Observable <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">\to.addObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o,Object arg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>代码清单三：测试</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design.mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//实例化主题</span></span><br><span class=\"line\">\tSubject sb = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">\t<span class=\"comment\">//实例化观察者</span></span><br><span class=\"line\">\tSubjectObserver so = <span class=\"keyword\">new</span> SubjectObserver(sb);</span><br><span class=\"line\">\tsb.add(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>控制台输出</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>观察者设计模式降低了系统的耦合度被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。<br>由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。</p>"},{"title":"Java中的IO技术：BIO,NIO,AIO","date":"2016-08-09T16:00:00.000Z","comments":1,"toc":true,"_content":"\n# 同步异步、阻塞非阻塞概念\n同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。\n<!--more-->\n## 同步与异步\n同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;\n![同步](02.png)\n``` java\n\nInputStream in = new FileInputStream(licenseDir);\nBufferedReader br = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\nString data = null;\nStringBuffer encodedData = new StringBuffer();\nwhile ((data = br.readLine()) != null) {\n\tencodedData.append(data);\n}\nin.close();\nbr.close();\n\n```\n异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。\n![异步](01.png)\n``` java\npublic class Demo1 {\n\n    static Thread current;\n\n    public static void main(String[] args) throws IOException {\n        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths\n                .get(\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"));\n        ByteBuffer byteBuffer = ByteBuffer.allocate(16 * 1024);\n        current = Thread.currentThread();\n        afc.read(byteBuffer, 0, null, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                System.out.println(\"Bytes Read = \" + result);\n                //中断主线程挂起 \n                current.interrupt();\n            }\n            @Override\n            public void failed(Throwable exc, Object attachment) {\n                System.out.println(exc.getCause());\n                current.interrupt();\n            }\n        });\n        System.out.println(\"Waiting for completion...\");\n        try {\n            current.join();//挂起现成 等待 消息读取完成 \n        } catch (InterruptedException e) {\n        }\n\n        afc.close();\n        byteBuffer.flip();\n        while(byteBuffer.hasRemaining()){ \n            System.out.print((char) byteBuffer.get()); // read 1 byte at a time \n        } \n    }\n\n}\n```\n## 阻塞非阻塞\n阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；\n非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；\n\n\n# BIO\n在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。\n```java\npublic class PlainEchoServer {\n  public void serve(int port) throws IOException {\n    final ServerSocket socket = new ServerSocket(port); //Bind server to port\n    try {\n      while (true) {\n        //Block until new client connection is accepted\n        final Socket clientSocket = socket.accept();\n        System.out.println(\"Accepted connection from \" + clientSocket);\n        //Create new thread to handle client connection\n        new Thread(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n              PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);\n              //Read data from client and write it back\n              while (true) {\n                writer.println(reader.readLine());\n                writer.flush();\n              }\n            } catch (IOException e) {\n              e.printStackTrace();\n              try {\n                clientSocket.close();\n              } catch (IOException ex) {\n                // ignore on close\n              }\n            }\n          }\n        }).start();\n        //Start thread\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n```\n# NIO\n在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。\n\nNIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。\n```java\npublic class PlainNioEchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    ServerSocketChannel serverChannel = ServerSocketChannel.open();\n    ServerSocket ss = serverChannel.socket();\n    InetSocketAddress address = new InetSocketAddress(port);\n    //Bind server to port\n    ss.bind(address);\n    serverChannel.configureBlocking(false);\n    Selector selector = Selector.open();\n    //Register the channel with the selector to be interested in new Client connections that get accepted\n    serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n    while (true) {\n      try {\n        //Block until something is selected\n        selector.select();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        //handle in a proper way\n        break;\n      }\n      //Get all SelectedKey instances\n      Set<SelectionKey> readyKeys = selector.selectedKeys();\n      Iterator<SelectionKey> iterator = readyKeys.iterator();\n      while (iterator.hasNext()) {\n        SelectionKey key = (SelectionKey) iterator.next();\n        //Remove the SelectedKey from the iterator\n        iterator.remove();\n        try {\n          if (key.isAcceptable()) {\n            ServerSocketChannel server = (ServerSocketChannel) key.channel();\n            //Accept the client connection\n            SocketChannel client = server.accept();\n            System.out.println(\"Accepted connection from \" + client);\n            client.configureBlocking(false);\n            //Register connection to selector and set ByteBuffer\n            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(100));\n          }\n          //Check for SelectedKey for read\n          if (key.isReadable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            //Read data to ByteBuffer\n            client.read(output);\n          }\n          //Check for SelectedKey for write\n          if (key.isWritable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            output.flip();\n            //Write data from ByteBuffer to channel\n            client.write(output);\n            output.compact();\n          }\n        } catch (IOException ex) {\n          key.cancel();\n          try {\n            key.channel().close();\n          } catch (IOException cex) {\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n# AIO\n\n当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。\n\n即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。\n\n在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：\n•AsynchronousSocketChannel\n•AsynchronousServerSocketChannel\n•AsynchronousFileChannel\n•AsynchronousDatagramChannel\n\n其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。\n```java\npublic class PlainNio2EchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    final AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();\n    InetSocketAddress address = new InetSocketAddress(port);\n    // Bind Server to port\n    serverChannel.bind(address);\n    final CountDownLatch latch = new CountDownLatch(1);\n    // Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.\n    serverChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() {\n      @Override\n      public void completed(final AsynchronousSocketChannel channel, Object attachment) {\n        // Again accept new Client connections\n        serverChannel.accept(null, this);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n        channel.read(buffer, buffer, new EchoCompletionHandler(channel));\n      }\n\n      @Override\n      public void failed(Throwable throwable, Object attachment) {\n        try {\n          // Close the socket on error\n          serverChannel.close();\n        } catch (IOException e) {\n          // ingnore on close\n        } finally {\n          latch.countDown();\n        }\n      }\n    });\n    try {\n      latch.await();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  private final class EchoCompletionHandler implements CompletionHandler<Integer, ByteBuffer> {\n    private final AsynchronousSocketChannel channel;\n\n    EchoCompletionHandler(AsynchronousSocketChannel channel) {\n      this.channel = channel;\n    }\n\n    @Override\n    public void completed(Integer result, ByteBuffer buffer) {\n      buffer.flip();\n      // Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written\n      channel.write(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n        @Override\n        public void completed(Integer result, ByteBuffer buffer) {\n          if (buffer.hasRemaining()) {\n            // Trigger again a write operation if something is left in the ByteBuffer\n            channel.write(buffer, buffer, this);\n          } else {\n            buffer.compact();\n            // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n            channel.read(buffer, buffer, EchoCompletionHandler.this);\n          }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n          try {\n            channel.close();\n          } catch (IOException e) {\n            // ingnore on close\n          }\n        }\n      });\n    }\n\n    @Override\n    public void failed(Throwable exc, ByteBuffer attachment) {\n      try {\n        channel.close();\n      } catch (IOException e) {\n        // ingnore on close\n      }\n    }\n  }\n}\n\n```\n\n# 实现原理\n说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。\n\n说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。\n\n# 场景分析\nBIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。\nNIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。\nAIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。\n另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。\n","source":"_posts/Java中的IO技术：BIO,NIO,AIO.md","raw":"---\ntitle: Java中的IO技术：BIO,NIO,AIO\ndate: 2016-08-10\ncomments: true\ncategories: Java\ntoc: true\n---\n\n# 同步异步、阻塞非阻塞概念\n同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。\n<!--more-->\n## 同步与异步\n同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;\n![同步](02.png)\n``` java\n\nInputStream in = new FileInputStream(licenseDir);\nBufferedReader br = new BufferedReader(new InputStreamReader(in,\"UTF-8\"));\nString data = null;\nStringBuffer encodedData = new StringBuffer();\nwhile ((data = br.readLine()) != null) {\n\tencodedData.append(data);\n}\nin.close();\nbr.close();\n\n```\n异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。\n![异步](01.png)\n``` java\npublic class Demo1 {\n\n    static Thread current;\n\n    public static void main(String[] args) throws IOException {\n        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths\n                .get(\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"));\n        ByteBuffer byteBuffer = ByteBuffer.allocate(16 * 1024);\n        current = Thread.currentThread();\n        afc.read(byteBuffer, 0, null, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                System.out.println(\"Bytes Read = \" + result);\n                //中断主线程挂起 \n                current.interrupt();\n            }\n            @Override\n            public void failed(Throwable exc, Object attachment) {\n                System.out.println(exc.getCause());\n                current.interrupt();\n            }\n        });\n        System.out.println(\"Waiting for completion...\");\n        try {\n            current.join();//挂起现成 等待 消息读取完成 \n        } catch (InterruptedException e) {\n        }\n\n        afc.close();\n        byteBuffer.flip();\n        while(byteBuffer.hasRemaining()){ \n            System.out.print((char) byteBuffer.get()); // read 1 byte at a time \n        } \n    }\n\n}\n```\n## 阻塞非阻塞\n阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；\n非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；\n\n\n# BIO\n在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。\n```java\npublic class PlainEchoServer {\n  public void serve(int port) throws IOException {\n    final ServerSocket socket = new ServerSocket(port); //Bind server to port\n    try {\n      while (true) {\n        //Block until new client connection is accepted\n        final Socket clientSocket = socket.accept();\n        System.out.println(\"Accepted connection from \" + clientSocket);\n        //Create new thread to handle client connection\n        new Thread(new Runnable() {\n          @Override\n          public void run() {\n            try {\n              BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n              PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);\n              //Read data from client and write it back\n              while (true) {\n                writer.println(reader.readLine());\n                writer.flush();\n              }\n            } catch (IOException e) {\n              e.printStackTrace();\n              try {\n                clientSocket.close();\n              } catch (IOException ex) {\n                // ignore on close\n              }\n            }\n          }\n        }).start();\n        //Start thread\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n```\n# NIO\n在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。\n\nNIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。\n```java\npublic class PlainNioEchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    ServerSocketChannel serverChannel = ServerSocketChannel.open();\n    ServerSocket ss = serverChannel.socket();\n    InetSocketAddress address = new InetSocketAddress(port);\n    //Bind server to port\n    ss.bind(address);\n    serverChannel.configureBlocking(false);\n    Selector selector = Selector.open();\n    //Register the channel with the selector to be interested in new Client connections that get accepted\n    serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n    while (true) {\n      try {\n        //Block until something is selected\n        selector.select();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        //handle in a proper way\n        break;\n      }\n      //Get all SelectedKey instances\n      Set<SelectionKey> readyKeys = selector.selectedKeys();\n      Iterator<SelectionKey> iterator = readyKeys.iterator();\n      while (iterator.hasNext()) {\n        SelectionKey key = (SelectionKey) iterator.next();\n        //Remove the SelectedKey from the iterator\n        iterator.remove();\n        try {\n          if (key.isAcceptable()) {\n            ServerSocketChannel server = (ServerSocketChannel) key.channel();\n            //Accept the client connection\n            SocketChannel client = server.accept();\n            System.out.println(\"Accepted connection from \" + client);\n            client.configureBlocking(false);\n            //Register connection to selector and set ByteBuffer\n            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(100));\n          }\n          //Check for SelectedKey for read\n          if (key.isReadable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            //Read data to ByteBuffer\n            client.read(output);\n          }\n          //Check for SelectedKey for write\n          if (key.isWritable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer output = (ByteBuffer) key.attachment();\n            output.flip();\n            //Write data from ByteBuffer to channel\n            client.write(output);\n            output.compact();\n          }\n        } catch (IOException ex) {\n          key.cancel();\n          try {\n            key.channel().close();\n          } catch (IOException cex) {\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n# AIO\n\n当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。\n\n即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。\n\n在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：\n•AsynchronousSocketChannel\n•AsynchronousServerSocketChannel\n•AsynchronousFileChannel\n•AsynchronousDatagramChannel\n\n其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。\n```java\npublic class PlainNio2EchoServer {\n  public void serve(int port) throws IOException {\n    System.out.println(\"Listening for connections on port \" + port);\n    final AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();\n    InetSocketAddress address = new InetSocketAddress(port);\n    // Bind Server to port\n    serverChannel.bind(address);\n    final CountDownLatch latch = new CountDownLatch(1);\n    // Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.\n    serverChannel.accept(null, new CompletionHandler<AsynchronousSocketChannel, Object>() {\n      @Override\n      public void completed(final AsynchronousSocketChannel channel, Object attachment) {\n        // Again accept new Client connections\n        serverChannel.accept(null, this);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n        channel.read(buffer, buffer, new EchoCompletionHandler(channel));\n      }\n\n      @Override\n      public void failed(Throwable throwable, Object attachment) {\n        try {\n          // Close the socket on error\n          serverChannel.close();\n        } catch (IOException e) {\n          // ingnore on close\n        } finally {\n          latch.countDown();\n        }\n      }\n    });\n    try {\n      latch.await();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n  }\n\n  private final class EchoCompletionHandler implements CompletionHandler<Integer, ByteBuffer> {\n    private final AsynchronousSocketChannel channel;\n\n    EchoCompletionHandler(AsynchronousSocketChannel channel) {\n      this.channel = channel;\n    }\n\n    @Override\n    public void completed(Integer result, ByteBuffer buffer) {\n      buffer.flip();\n      // Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written\n      channel.write(buffer, buffer, new CompletionHandler<Integer, ByteBuffer>() {\n        @Override\n        public void completed(Integer result, ByteBuffer buffer) {\n          if (buffer.hasRemaining()) {\n            // Trigger again a write operation if something is left in the ByteBuffer\n            channel.write(buffer, buffer, this);\n          } else {\n            buffer.compact();\n            // Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read\n            channel.read(buffer, buffer, EchoCompletionHandler.this);\n          }\n        }\n\n        @Override\n        public void failed(Throwable exc, ByteBuffer attachment) {\n          try {\n            channel.close();\n          } catch (IOException e) {\n            // ingnore on close\n          }\n        }\n      });\n    }\n\n    @Override\n    public void failed(Throwable exc, ByteBuffer attachment) {\n      try {\n        channel.close();\n      } catch (IOException e) {\n        // ingnore on close\n      }\n    }\n  }\n}\n\n```\n\n# 实现原理\n说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。\n\n说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。\n\n# 场景分析\nBIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。\nNIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。\nAIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。\n另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。\n","slug":"Java中的IO技术：BIO,NIO,AIO","published":1,"updated":"2016-08-10T15:11:26.483Z","layout":"post","photos":[],"link":"","_id":"civ2gzlm6000i50ybe5vjbret","content":"<h1 id=\"同步异步、阻塞非阻塞概念\"><a href=\"#同步异步、阻塞非阻塞概念\" class=\"headerlink\" title=\"同步异步、阻塞非阻塞概念\"></a>同步异步、阻塞非阻塞概念</h1><p>同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。<br><a id=\"more\"></a></p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;<br><img src=\"02.png\" alt=\"同步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">InputStream in = <span class=\"keyword\">new</span> FileInputStream(licenseDir);</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in,<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">String data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">StringBuffer encodedData = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((data = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tencodedData.append(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">in.close();</span><br><span class=\"line\">br.close();</span><br></pre></td></tr></table></figure></p>\n<p>异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。<br><img src=\"01.png\" alt=\"异步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread current;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths</span><br><span class=\"line\">                .get(<span class=\"string\">\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"</span>));</span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">16</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">        current = Thread.currentThread();</span><br><span class=\"line\">        afc.read(byteBuffer, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Bytes Read = \"</span> + result);</span><br><span class=\"line\">                <span class=\"comment\">//中断主线程挂起 </span></span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(exc.getCause());</span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Waiting for completion...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            current.join();<span class=\"comment\">//挂起现成 等待 消息读取完成 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        afc.close();</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(byteBuffer.hasRemaining())&#123; </span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>) byteBuffer.get()); <span class=\"comment\">// read 1 byte at a time </span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h2><p>阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；<br>非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；</p>\n<h1 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h1><p>在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ServerSocket socket = <span class=\"keyword\">new</span> ServerSocket(port); <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until new client connection is accepted</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Socket clientSocket = socket.accept();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + clientSocket);</span><br><span class=\"line\">        <span class=\"comment\">//Create new thread to handle client connection</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class=\"line\">              PrintWriter writer = <span class=\"keyword\">new</span> PrintWriter(clientSocket.getOutputStream(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">              <span class=\"comment\">//Read data from client and write it back</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                writer.println(reader.readLine());</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                clientSocket.close();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore on close</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">//Start thread</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。</p>\n<p>NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNioEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class=\"line\">    ServerSocket ss = serverChannel.socket();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    ss.bind(address);</span><br><span class=\"line\">    serverChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    Selector selector = Selector.open();</span><br><span class=\"line\">    <span class=\"comment\">//Register the channel with the selector to be interested in new Client connections that get accepted</span></span><br><span class=\"line\">    serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until something is selected</span></span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"comment\">//handle in a proper way</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//Get all SelectedKey instances</span></span><br><span class=\"line\">      Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">      Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        SelectionKey key = (SelectionKey) iterator.next();</span><br><span class=\"line\">        <span class=\"comment\">//Remove the SelectedKey from the iterator</span></span><br><span class=\"line\">        iterator.remove();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">            ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//Accept the client connection</span></span><br><span class=\"line\">            SocketChannel client = server.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + client);</span><br><span class=\"line\">            client.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Register connection to selector and set ByteBuffer</span></span><br><span class=\"line\">            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(<span class=\"number\">100</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for read</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            <span class=\"comment\">//Read data to ByteBuffer</span></span><br><span class=\"line\">            client.read(output);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for write</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isWritable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            output.flip();</span><br><span class=\"line\">            <span class=\"comment\">//Write data from ByteBuffer to channel</span></span><br><span class=\"line\">            client.write(output);</span><br><span class=\"line\">            output.compact();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">          key.cancel();</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            key.channel().close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException cex) &#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h1><p>当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。</p>\n<p>即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。</p>\n<p>在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：<br>•AsynchronousSocketChannel<br>•AsynchronousServerSocketChannel<br>•AsynchronousFileChannel<br>•AsynchronousDatagramChannel</p>\n<p>其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNio2EchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">// Bind Server to port</span></span><br><span class=\"line\">    serverChannel.bind(address);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.</span></span><br><span class=\"line\">    serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(<span class=\"keyword\">final</span> AsynchronousSocketChannel channel, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Again accept new Client connections</span></span><br><span class=\"line\">        serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">        channel.read(buffer, buffer, <span class=\"keyword\">new</span> EchoCompletionHandler(channel));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable throwable, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Close the socket on error</span></span><br><span class=\"line\">          serverChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          latch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      latch.await();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchoCompletionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompletionHandler</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">ByteBuffer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AsynchronousSocketChannel channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    EchoCompletionHandler(AsynchronousSocketChannel channel) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.channel = channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">      buffer.flip();</span><br><span class=\"line\">      <span class=\"comment\">// Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written</span></span><br><span class=\"line\">      channel.write(buffer, buffer, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Trigger again a write operation if something is left in the ByteBuffer</span></span><br><span class=\"line\">            channel.write(buffer, buffer, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buffer.compact();</span><br><span class=\"line\">            <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">            channel.read(buffer, buffer, EchoCompletionHandler.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            channel.close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h1><p>说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。</p>\n<p>说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。</p>\n<h1 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h1><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。<br>另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。</p>\n","excerpt":"<h1 id=\"同步异步、阻塞非阻塞概念\"><a href=\"#同步异步、阻塞非阻塞概念\" class=\"headerlink\" title=\"同步异步、阻塞非阻塞概念\"></a>同步异步、阻塞非阻塞概念</h1><p>同步和异步是针对应用程序和内核的交互而言的，阻塞和非阻塞是针对于进程在访问数据的时候，根据IO操作的就绪状态来采取的不同方式，说白了是一种读取或者写入操作函数的实现方式，阻塞方式下读取或者写入函数将一直等待，而非阻塞方式下，读取或者写入函数会立即返回一个状态值。<br>","more":"</p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>同步是自己的事情自己做，用户进程触发IO操作，只有等待IO操作完成了以后才能干别的事情;<br><img src=\"02.png\" alt=\"同步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">InputStream in = <span class=\"keyword\">new</span> FileInputStream(licenseDir);</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in,<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">String data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">StringBuffer encodedData = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((data = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\tencodedData.append(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">in.close();</span><br><span class=\"line\">br.close();</span><br></pre></td></tr></table></figure></p>\n<p>异步是自己的事情让别人做，别人做完以后通知你事情做完了，在程序中当用户进程触发了IO操作，程序将委托内核帮忙向IO中读或写数据，并传入回调函数，然后程序就可以干其他的操作，当内容操作完成调用回调函数通知用户进程事情我已经干完了。<br><img src=\"01.png\" alt=\"异步\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread current;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        AsynchronousFileChannel afc = AsynchronousFileChannel.open(Paths</span><br><span class=\"line\">                .get(<span class=\"string\">\"E:\\\\NettyServer\\\\conf\\\\ftpusers.properties\"</span>));</span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">16</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">        current = Thread.currentThread();</span><br><span class=\"line\">        afc.read(byteBuffer, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Bytes Read = \"</span> + result);</span><br><span class=\"line\">                <span class=\"comment\">//中断主线程挂起 </span></span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(exc.getCause());</span><br><span class=\"line\">                current.interrupt();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Waiting for completion...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            current.join();<span class=\"comment\">//挂起现成 等待 消息读取完成 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        afc.close();</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(byteBuffer.hasRemaining())&#123; </span><br><span class=\"line\">            System.out.print((<span class=\"keyword\">char</span>) byteBuffer.get()); <span class=\"comment\">// read 1 byte at a time </span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h2><p>阻塞 所谓阻塞方式的意思是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待 状态, 直到有东西可读或者可写为止 ；<br>非阻塞 非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待；</p>\n<h1 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h1><p>在JDK1.4之前，用Java编写网络请求，都是建立一个ServerSocket，然后，客户端建立Socket时就会询问是否有线程可以处理，如果没有，要么等待，要么被拒绝。即：一个连接，要求Server对应一个处理线程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ServerSocket socket = <span class=\"keyword\">new</span> ServerSocket(port); <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until new client connection is accepted</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Socket clientSocket = socket.accept();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + clientSocket);</span><br><span class=\"line\">        <span class=\"comment\">//Create new thread to handle client connection</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class=\"line\">              PrintWriter writer = <span class=\"keyword\">new</span> PrintWriter(clientSocket.getOutputStream(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">              <span class=\"comment\">//Read data from client and write it back</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                writer.println(reader.readLine());</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                clientSocket.close();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore on close</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"comment\">//Start thread</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h1><p>在Java里的由来，在JDK1.4及以后版本中提供了一套API来专门操作非阻塞I/O，我们可以在java.nio包及其子包中找到相关的类和接口。由于这套API是JDK新提供的I/O API，因此，也叫New I/O，这就是包名nio的由来。这套API由三个主要的部分组成：缓冲区（Buffers）、通道（Channels）和非阻塞I/O的核心类组成。在理解NIO的时候，需要区分，说的是New I/O还是非阻塞IO，New I/O是Java的包，NIO是非阻塞IO概念。这里讲的是后面一种。</p>\n<p>NIO本身是基于事件驱动思想来完成的，其主要想解决的是BIO的大并发问题：在使用同步I/O的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。也就是说，将每一个客户端请求分配给一个线程来单独处理。这样做虽然可以达到我们的要求，但同时又会带来另外一个问题。由于每创建一个线程，就要为这个线程分配一定的内存空间（也叫工作存储器），而且操作系统本身也对线程的总数有一定的限制。如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。 NIO基于Selector，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNioEchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class=\"line\">    ServerSocket ss = serverChannel.socket();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">//Bind server to port</span></span><br><span class=\"line\">    ss.bind(address);</span><br><span class=\"line\">    serverChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    Selector selector = Selector.open();</span><br><span class=\"line\">    <span class=\"comment\">//Register the channel with the selector to be interested in new Client connections that get accepted</span></span><br><span class=\"line\">    serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Block until something is selected</span></span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">        ex.printStackTrace();</span><br><span class=\"line\">        <span class=\"comment\">//handle in a proper way</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//Get all SelectedKey instances</span></span><br><span class=\"line\">      Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class=\"line\">      Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">        SelectionKey key = (SelectionKey) iterator.next();</span><br><span class=\"line\">        <span class=\"comment\">//Remove the SelectedKey from the iterator</span></span><br><span class=\"line\">        iterator.remove();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">            ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//Accept the client connection</span></span><br><span class=\"line\">            SocketChannel client = server.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Accepted connection from \"</span> + client);</span><br><span class=\"line\">            client.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//Register connection to selector and set ByteBuffer</span></span><br><span class=\"line\">            client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(<span class=\"number\">100</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for read</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            <span class=\"comment\">//Read data to ByteBuffer</span></span><br><span class=\"line\">            client.read(output);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//Check for SelectedKey for write</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key.isWritable()) &#123;</span><br><span class=\"line\">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class=\"line\">            ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class=\"line\">            output.flip();</span><br><span class=\"line\">            <span class=\"comment\">//Write data from ByteBuffer to channel</span></span><br><span class=\"line\">            client.write(output);</span><br><span class=\"line\">            output.compact();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">          key.cancel();</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            key.channel().close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException cex) &#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h1><p>当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。</p>\n<p>即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。</p>\n<p>在JDK1.7中，这部分内容被称作NIO.2，主要在java.nio.channels包下增加了下面四个异步通道：<br>•AsynchronousSocketChannel<br>•AsynchronousServerSocketChannel<br>•AsynchronousFileChannel<br>•AsynchronousDatagramChannel</p>\n<p>其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainNio2EchoServer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serve</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Listening for connections on port \"</span> + port);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();</span><br><span class=\"line\">    InetSocketAddress address = <span class=\"keyword\">new</span> InetSocketAddress(port);</span><br><span class=\"line\">    <span class=\"comment\">// Bind Server to port</span></span><br><span class=\"line\">    serverChannel.bind(address);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Start to accept new Client connections. Once one is accepted the CompletionHandler will get called.</span></span><br><span class=\"line\">    serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(<span class=\"keyword\">final</span> AsynchronousSocketChannel channel, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Again accept new Client connections</span></span><br><span class=\"line\">        serverChannel.accept(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">        channel.read(buffer, buffer, <span class=\"keyword\">new</span> EchoCompletionHandler(channel));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable throwable, Object attachment)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Close the socket on error</span></span><br><span class=\"line\">          serverChannel.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          latch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      latch.await();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchoCompletionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">CompletionHandler</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">ByteBuffer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AsynchronousSocketChannel channel;</span><br><span class=\"line\"></span><br><span class=\"line\">    EchoCompletionHandler(AsynchronousSocketChannel channel) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.channel = channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">      buffer.flip();</span><br><span class=\"line\">      <span class=\"comment\">// Trigger a write operation on the Channel, the given CompletionHandler will be notified once something was written</span></span><br><span class=\"line\">      channel.write(buffer, buffer, <span class=\"keyword\">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">completed</span><span class=\"params\">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Trigger again a write operation if something is left in the ByteBuffer</span></span><br><span class=\"line\">            channel.write(buffer, buffer, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buffer.compact();</span><br><span class=\"line\">            <span class=\"comment\">// Trigger a read operation on the Channel, the given CompletionHandler will be notified once something was read</span></span><br><span class=\"line\">            channel.read(buffer, buffer, EchoCompletionHandler.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            channel.close();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ingnore on close</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h1><p>说到实现原理，还要从操作系统的IO模型上了解 按照《Unix网络编程》的划分，IO模型可以分为：阻塞IO、非阻塞IO、IO复用、信号驱动IO和异步IO，按照POSIX标准来划分只分为两类：同步IO和异步IO。 如何区分呢？首先一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO，如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO。阻塞IO和非阻塞IO的区别在于第一步，发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。</p>\n<p>说到操作系统的IO模型，又不得不提select/poll/epoll/iocp。 可以理解的说明是：在Linux 2.6以后，java NIO的实现，是通过epoll来实现的，这点可以通过jdk的源代码发现。而AIO，在windows上是通过IOCP实现的，在linux上还是通过epoll来实现的。 这里强调一点：AIO，这是I/O处理模式，而epoll等都是实现AIO的一种编程模型；换句话说，AIO是一种接口标准，各家操作系统可以实现也可以不实现。在不同操作系统上在高并发情况下最好都采用操作系统推荐的方式。Linux上还没有真正实现网络方式的AIO。</p>\n<h1 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h1><p>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。<br>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。<br>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。<br>另外，I/O属于底层操作，需要操作系统支持，并发也需要操作系统的支持，所以性能方面不同操作系统差异会比较明显。</p>"},{"title":"Java开发过程中异常汇总及解决办法","date":"2014-09-04T13:28:01.000Z","comments":1,"toc":false,"_content":"\n***org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null***\n\n异常详细描叙<!--more-->\n![JasperException](cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg)\n\n***环境： ***操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***org.apache.jasper.JasperException:Unable to compile class for JSP***\n\n异常详细描叙\n![JasperException](b03533fa828ba61e7fad2a384234970a304e5962.jpg)\n***环境：***  操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘***\n\n问题详细描述\n![无法读取文件或磁盘](5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg)\n***解决办法***：在下载的方法中添加\n```java\t\nif(filetype.indexOf(\".docx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\");\n}elseif(filetype.indexOf(\".xlsx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n}elseif(filetype.indexOf(\".pptx\") ==0) {    \n    response.setContentType(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\");\n}\n```\n在web.xml中添加\n ```xml\n <mime-mapping>\n  <extension>docx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>xlsx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>pptx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.presentationml.presentation</mime-type>\n </mime-mapping> \n ```\n \n ------------------------\n \n***java.lang.IllegalArgumentException: Illegal group reference***\n \n异常详细描叙\n ```\n2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference\n2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)\n```\n***异常产生原因： *** 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致\n***解决办法： ***将字符“$”转义 “\\\\$” 或使用StringUtils的.replaceAll方法\n \n------------------------\n***org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had\"[.....]\"***\n \n详细描述\n![BSFException](7aec54e736d12f2e1dbd40774cc2d56285356869.jpg)\n***解决办法：*** 将jdk1.5换成1.6\n\n------------------------\n\n***java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000***\n\n详细描述\n![SQLException](58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg)\n***异常分析：***oracle 查询 in（）查询列表树最大支持1000\n***解决办法：*** 使用where col in (1...1000) or col in (1001....)\n\n------------------------\n\n***点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令***\n\n***环境：***windows2008\n***解决办法：*** 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;\n\n------------------------\n\n***通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题***\n\n***解决办法：*** \n1、linux\n/etc/hosts 注释掉文件中的 # ::1 localhost 这一行\n2、windows\nC:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行","source":"_posts/Java开发过程中异常汇总及解决办法.md","raw":"---\ntitle: Java开发过程中异常汇总及解决办法\ndate: 2014-09-04 21:28:01\ncomments: true\ncategories: Java\ntoc: false \n---\n\n***org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null***\n\n异常详细描叙<!--more-->\n![JasperException](cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg)\n\n***环境： ***操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***org.apache.jasper.JasperException:Unable to compile class for JSP***\n\n异常详细描叙\n![JasperException](b03533fa828ba61e7fad2a384234970a304e5962.jpg)\n***环境：***  操作系统：linux    中交件：jboss  jdk：1.5\n***解决办法：***添加对jdk如下设置\n```\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n--------------------------\n\n***附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘***\n\n问题详细描述\n![无法读取文件或磁盘](5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg)\n***解决办法***：在下载的方法中添加\n```java\t\nif(filetype.indexOf(\".docx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\");\n}elseif(filetype.indexOf(\".xlsx\") ==0) {\n    response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n}elseif(filetype.indexOf(\".pptx\") ==0) {    \n    response.setContentType(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\");\n}\n```\n在web.xml中添加\n ```xml\n <mime-mapping>\n  <extension>docx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>xlsx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mime-type>\n </mime-mapping>\n <mime-mapping>\n  <extension>pptx</extension>\n  <mime-type>application/vnd.openxmlformats-officedocument.presentationml.presentation</mime-type>\n </mime-mapping> \n ```\n \n ------------------------\n \n***java.lang.IllegalArgumentException: Illegal group reference***\n \n异常详细描叙\n ```\n2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference\n2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)\n2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)\n```\n***异常产生原因： *** 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致\n***解决办法： ***将字符“$”转义 “\\\\$” 或使用StringUtils的.replaceAll方法\n \n------------------------\n***org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had\"[.....]\"***\n \n详细描述\n![BSFException](7aec54e736d12f2e1dbd40774cc2d56285356869.jpg)\n***解决办法：*** 将jdk1.5换成1.6\n\n------------------------\n\n***java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000***\n\n详细描述\n![SQLException](58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg)\n***异常分析：***oracle 查询 in（）查询列表树最大支持1000\n***解决办法：*** 使用where col in (1...1000) or col in (1001....)\n\n------------------------\n\n***点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令***\n\n***环境：***windows2008\n***解决办法：*** 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;\n\n------------------------\n\n***通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题***\n\n***解决办法：*** \n1、linux\n/etc/hosts 注释掉文件中的 # ::1 localhost 这一行\n2、windows\nC:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行","slug":"Java开发过程中异常汇总及解决办法","published":1,"updated":"2016-05-14T08:30:36.572Z","layout":"post","photos":[],"link":"","_id":"civ2gzlm6000k50ybewli0uks","content":"<p><strong><em>org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null</em></strong></p>\n<p>异常详细描叙<a id=\"more\"></a><br><img src=\"cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg\" alt=\"JasperException\"></p>\n<p><strong><em>环境： </em></strong>操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>org.apache.jasper.JasperException:Unable to compile class for JSP</em></strong></p>\n<p>异常详细描叙<br><img src=\"b03533fa828ba61e7fad2a384234970a304e5962.jpg\" alt=\"JasperException\"><br><strong><em>环境：</em></strong>  操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘</em></strong></p>\n<p>问题详细描述<br><img src=\"5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg\" alt=\"无法读取文件或磁盘\"><br><strong><em>解决办法</em></strong>：在下载的方法中添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(filetype.indexOf(<span class=\"string\">\".docx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".xlsx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".pptx\"</span>) ==<span class=\"number\">0</span>) &#123;    </span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web.xml中添加<br> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>docx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.wordprocessingml.document<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>xlsx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>pptx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.presentationml.presentation<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>java.lang.IllegalArgumentException: Illegal group reference</em></strong></p>\n<p>异常详细描叙<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference</span><br><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>异常产生原因： </em></strong> 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致<br><strong><em>解决办法： </em></strong>将字符“$”转义 “\\$” 或使用StringUtils的.replaceAll方法</p>\n<hr>\n<p><strong><em>org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had”[…..]”</em></strong></p>\n<p>详细描述<br><img src=\"7aec54e736d12f2e1dbd40774cc2d56285356869.jpg\" alt=\"BSFException\"><br><strong><em>解决办法：</em></strong> 将jdk1.5换成1.6</p>\n<hr>\n<p><strong><em>java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000</em></strong></p>\n<p>详细描述<br><img src=\"58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg\" alt=\"SQLException\"><br><strong><em>异常分析：</em></strong>oracle 查询 in（）查询列表树最大支持1000<br><strong><em>解决办法：</em></strong> 使用where col in (1…1000) or col in (1001….)</p>\n<hr>\n<p><strong><em>点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令</em></strong></p>\n<p><strong><em>环境：</em></strong>windows2008<br><strong><em>解决办法：</em></strong> 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;</p>\n<hr>\n<p><strong><em>通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题</em></strong></p>\n<p><strong><em>解决办法：</em></strong><br>1、linux<br>/etc/hosts 注释掉文件中的 # ::1 localhost 这一行<br>2、windows<br>C:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行</p>\n","excerpt":"<p><strong><em>org.apache.jasper.JasperException:Unable to initialize TldLocationsCache:null</em></strong></p>\n<p>异常详细描叙","more":"<br><img src=\"cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg\" alt=\"JasperException\"></p>\n<p><strong><em>环境： </em></strong>操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>org.apache.jasper.JasperException:Unable to compile class for JSP</em></strong></p>\n<p>异常详细描叙<br><img src=\"b03533fa828ba61e7fad2a384234970a304e5962.jpg\" alt=\"JasperException\"><br><strong><em>环境：</em></strong>  操作系统：linux    中交件：jboss  jdk：1.5<br><strong><em>解决办法：</em></strong>添加对jdk如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>附件下载docx、xlsx、pptx 提示无法复制文件：无法读取文件或磁盘</em></strong></p>\n<p>问题详细描述<br><img src=\"5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg\" alt=\"无法读取文件或磁盘\"><br><strong><em>解决办法</em></strong>：在下载的方法中添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(filetype.indexOf(<span class=\"string\">\".docx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".xlsx\"</span>) ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"</span>);</span><br><span class=\"line\">&#125;elseif(filetype.indexOf(<span class=\"string\">\".pptx\"</span>) ==<span class=\"number\">0</span>) &#123;    </span><br><span class=\"line\">    response.setContentType(<span class=\"string\">\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web.xml中添加<br> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>docx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.wordprocessingml.document<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>xlsx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mime-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">extension</span>&gt;</span>pptx<span class=\"tag\">&lt;/<span class=\"name\">extension</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">mime-type</span>&gt;</span>application/vnd.openxmlformats-officedocument.presentationml.presentation<span class=\"tag\">&lt;/<span class=\"name\">mime-type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mime-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong><em>java.lang.IllegalArgumentException: Illegal group reference</em></strong></p>\n<p>异常详细描叙<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] java.lang.IllegalArgumentException: Illegal group reference</span><br><span class=\"line\">2014-05-19 10:11:31,306 ERROR [STDERR] at java.util.regex.Matcher.appendReplacement(Matcher.java:706)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.util.regex.Matcher.replaceAll(Matcher.java:806)</span><br><span class=\"line\">2014-05-19 10:11:31,307 ERROR [STDERR] at java.lang.String.replaceAll(String.java:2000)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>异常产生原因： </em></strong> 在使用String的replaceAll方法中因为字符中含有字符 “$”与replaceAll方法中使用的“$”起冲突导致<br><strong><em>解决办法： </em></strong>将字符“$”转义 “\\$” 或使用StringUtils的.replaceAll方法</p>\n<hr>\n<p><strong><em>org.apache.bsf.BSFException:javaScript Error:Function importClass must be called with a class:had”[…..]”</em></strong></p>\n<p>详细描述<br><img src=\"7aec54e736d12f2e1dbd40774cc2d56285356869.jpg\" alt=\"BSFException\"><br><strong><em>解决办法：</em></strong> 将jdk1.5换成1.6</p>\n<hr>\n<p><strong><em>java.sql.SQLException:ORA-01795:列表中的最大表达式数为1000</em></strong></p>\n<p>详细描述<br><img src=\"58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg\" alt=\"SQLException\"><br><strong><em>异常分析：</em></strong>oracle 查询 in（）查询列表树最大支持1000<br><strong><em>解决办法：</em></strong> 使用where col in (1…1000) or col in (1001….)</p>\n<hr>\n<p><strong><em>点击运行jboss run.bat 窗口一闪而过，提示“findstr”不是内部或外部命令</em></strong></p>\n<p><strong><em>环境：</em></strong>windows2008<br><strong><em>解决办法：</em></strong> 在环境变量PATH中添加%SystemRoot%\\system32;%SystemRoot%;</p>\n<hr>\n<p><strong><em>通过request.getRemoteAddr() 获取到值为0:0:0:0:0:0:0:1的问题</em></strong></p>\n<p><strong><em>解决办法：</em></strong><br>1、linux<br>/etc/hosts 注释掉文件中的 # ::1 localhost 这一行<br>2、windows<br>C:\\Windows\\System32\\drivers\\etc\\hosts 注释掉文件中的 # ::1 localhost 这一行</p>"},{"title":"Linux常见问题解决方法","date":"2016-05-10T12:05:33.000Z","comments":1,"_content":"\n### 使用SSH登陆Linux的时候提示\n 1. 问题描述\n```shell\nThe host '192.168.1.240' is unreachable.\nthe host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall\n```\n**解决办法**\n<!-- more -->\n 1. 关闭防火墙\n```shell\nservice iptables stop(重启生效)\niptables -F(立即生效)\n```\n***如果通过上面的方法还是无法连接那就是sshd服务没有启动***\n\n 2. 启动服务就可以正常访问。\n```shell\n service sshd start\n```\n\n\n----------\n### connect network is unreachable\n原因是没有正确设置IP地址\n**解决办法**\n 1. 修改ifcfg-eth0\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n\nservice network restart\nroute add default  gw 192.168.1.1(设置网关)\nservice network restart\n```\n----------\n\n### linux从一台主机复杂文件目录到另一台\n\n 1. 复制文件\n```shell\nscp conf.xml root@192.168.1.240:/usr/conf\n\n说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n 2. 复制目录\n```shell\nscp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat\n\n说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n\n----------\n### make：cc：命令未找到\n**解决办法**\n 1. 安装gcc\n```shell\nyum -y install gcc automake autoconf libtool make\n```\n\n\n----------\n\n### /bin/sh:ctags:command not found\n**解决办法**\n 1. 安装ctags\n```shell\nyum install ctags\n```\n\n\n\n\n","source":"_posts/Linux常见问题解决方法.md","raw":"---\ntitle: Linux常见问题解决方法\ndate: 2016-05-10 20:05:33 \ncomments: true \ncategories: Linux\n---\n\n### 使用SSH登陆Linux的时候提示\n 1. 问题描述\n```shell\nThe host '192.168.1.240' is unreachable.\nthe host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall\n```\n**解决办法**\n<!-- more -->\n 1. 关闭防火墙\n```shell\nservice iptables stop(重启生效)\niptables -F(立即生效)\n```\n***如果通过上面的方法还是无法连接那就是sshd服务没有启动***\n\n 2. 启动服务就可以正常访问。\n```shell\n service sshd start\n```\n\n\n----------\n### connect network is unreachable\n原因是没有正确设置IP地址\n**解决办法**\n 1. 修改ifcfg-eth0\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n\nservice network restart\nroute add default  gw 192.168.1.1(设置网关)\nservice network restart\n```\n----------\n\n### linux从一台主机复杂文件目录到另一台\n\n 1. 复制文件\n```shell\nscp conf.xml root@192.168.1.240:/usr/conf\n\n说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n 2. 复制目录\n```shell\nscp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat\n\n说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径\n```\n\n\n----------\n### make：cc：命令未找到\n**解决办法**\n 1. 安装gcc\n```shell\nyum -y install gcc automake autoconf libtool make\n```\n\n\n----------\n\n### /bin/sh:ctags:command not found\n**解决办法**\n 1. 安装ctags\n```shell\nyum install ctags\n```\n\n\n\n\n","slug":"Linux常见问题解决方法","published":1,"updated":"2016-05-11T11:54:03.519Z","layout":"post","photos":[],"link":"","_id":"civ2gzlm6000m50yby0ngl5v4","content":"<h3 id=\"使用SSH登陆Linux的时候提示\"><a href=\"#使用SSH登陆Linux的时候提示\" class=\"headerlink\" title=\"使用SSH登陆Linux的时候提示\"></a>使用SSH登陆Linux的时候提示</h3><ol>\n<li>问题描述<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The host &apos;192.168.1.240&apos; is unreachable.</span><br><span class=\"line\">the host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>解决办法</strong><br><a id=\"more\"></a></p>\n<ol>\n<li>关闭防火墙<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop(重启生效)</span><br><span class=\"line\">iptables -F(立即生效)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>如果通过上面的方法还是无法连接那就是sshd服务没有启动</em></strong></p>\n<ol>\n<li>启动服务就可以正常访问。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"connect-network-is-unreachable\"><a href=\"#connect-network-is-unreachable\" class=\"headerlink\" title=\"connect network is unreachable\"></a>connect network is unreachable</h3><p>原因是没有正确设置IP地址<br><strong>解决办法</strong></p>\n<ol>\n<li>修改ifcfg-eth0<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\"></span><br><span class=\"line\">service network restart</span><br><span class=\"line\">route add default  gw 192.168.1.1(设置网关)</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"linux从一台主机复杂文件目录到另一台\"><a href=\"#linux从一台主机复杂文件目录到另一台\" class=\"headerlink\" title=\"linux从一台主机复杂文件目录到另一台\"></a>linux从一台主机复杂文件目录到另一台</h3><ol>\n<li><p>复制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp conf.xml root@192.168.1.240:/usr/conf</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"make：cc：命令未找到\"><a href=\"#make：cc：命令未找到\" class=\"headerlink\" title=\"make：cc：命令未找到\"></a>make：cc：命令未找到</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装gcc<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"bin-sh-ctags-command-not-found\"><a href=\"#bin-sh-ctags-command-not-found\" class=\"headerlink\" title=\"/bin/sh:ctags:command not found\"></a>/bin/sh:ctags:command not found</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装ctags<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ctags</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<h3 id=\"使用SSH登陆Linux的时候提示\"><a href=\"#使用SSH登陆Linux的时候提示\" class=\"headerlink\" title=\"使用SSH登陆Linux的时候提示\"></a>使用SSH登陆Linux的时候提示</h3><ol>\n<li>问题描述<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The host &apos;192.168.1.240&apos; is unreachable.</span><br><span class=\"line\">the host may be down,or there may be a problem with the network connection.Sometimes such problems can also be caused by a misconfigured firewall</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>解决办法</strong><br>","more":"</p>\n<ol>\n<li>关闭防火墙<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop(重启生效)</span><br><span class=\"line\">iptables -F(立即生效)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>如果通过上面的方法还是无法连接那就是sshd服务没有启动</em></strong></p>\n<ol>\n<li>启动服务就可以正常访问。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"connect-network-is-unreachable\"><a href=\"#connect-network-is-unreachable\" class=\"headerlink\" title=\"connect network is unreachable\"></a>connect network is unreachable</h3><p>原因是没有正确设置IP地址<br><strong>解决办法</strong></p>\n<ol>\n<li>修改ifcfg-eth0<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\"></span><br><span class=\"line\">service network restart</span><br><span class=\"line\">route add default  gw 192.168.1.1(设置网关)</span><br><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"linux从一台主机复杂文件目录到另一台\"><a href=\"#linux从一台主机复杂文件目录到另一台\" class=\"headerlink\" title=\"linux从一台主机复杂文件目录到另一台\"></a>linux从一台主机复杂文件目录到另一台</h3><ol>\n<li><p>复制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp conf.xml root@192.168.1.240:/usr/conf</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp 文件名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r apache-tomcat-6.0.41 root@192.168.1.240:/usr/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">说明：scp -r 目录名 用户名@计算机IP或者计算机名称 :远程路径</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"make：cc：命令未找到\"><a href=\"#make：cc：命令未找到\" class=\"headerlink\" title=\"make：cc：命令未找到\"></a>make：cc：命令未找到</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装gcc<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"bin-sh-ctags-command-not-found\"><a href=\"#bin-sh-ctags-command-not-found\" class=\"headerlink\" title=\"/bin/sh:ctags:command not found\"></a>/bin/sh:ctags:command not found</h3><p><strong>解决办法</strong></p>\n<ol>\n<li>安装ctags<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ctags</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Oracle常用脚本","date":"2014-04-30T13:28:01.000Z","comments":1,"toc":true,"_content":"\n### 建表空间\n```sql\ncreate temporary tablespace bjjtxx_space_temp \ntempfile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local; \n\ncreate tablespace bjjtxx_space\nlogging\ndatafile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local;\n```\n<!--more-->\n\n### 建用户\n```sql\ncreate user bjjtxx_develop identified by bjjtxx\ndefault tablespace bjjtxx_space\ntemporary tablespace bjjtxx_space_temp;\n```\n### 用户授权\n```sql\ngrant dba,connect,resource,CTXAPP,create view to bjjtxx_develop;\n```\n\n### 锁表查询\n***查看锁住的表***\n```sql\nSELECT b.owner,b.object_name,a.session_id,a.locked_mode  \n    FROM v$locked_object a ,dba_objects b  \n    WHERE b.object_id = a.object_id; \n```\n\n***查看被锁住的会话 ***\n```sql\nSELECT b.username,b.sid,b.serial#,logon_time  \n    FROM v$locked_object a,v$session b  \n    WHERE a.session_id = b.sid order by b.logon_time; \n```\n\n***如果要断开某个会话，执行  ***\n```sql\nalter system kill session ‘sid,serial#’\n```\n\n### 设置表空间大小\n\n***查找出oralce表空间的文件名、路径 ***\n```sql\nselect tablespace_name, file_id, file_name, round(bytes/(1024*1024),0) total_space from dba_data_files; \n```\n\n***修改表空间大小  ***\n```sql\nALTER DATABASE DATAFILE 'E:\\LARGE.DBF' RESIZE 3000M;\n```\n\n\n***设置表空间最大大小  ***\n```sql\nALTER DATABASE DATAFILE ''/oracle/oradata/db/GAME.dbf \nAUTOEXTEND ON NEXT 100M \nMAXSIZE 10000M;\n```\n","source":"_posts/Oracle常用脚本.md","raw":"---\ntitle: Oracle常用脚本\ndate: 2014-04-30 21:28:01\ncomments: true\ncategories: Oracle\ntoc: true \n---\n\n### 建表空间\n```sql\ncreate temporary tablespace bjjtxx_space_temp \ntempfile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local; \n\ncreate tablespace bjjtxx_space\nlogging\ndatafile 'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf' \nsize 32m \nautoextend on \nnext 32m maxsize 2048m\nextent management local;\n```\n<!--more-->\n\n### 建用户\n```sql\ncreate user bjjtxx_develop identified by bjjtxx\ndefault tablespace bjjtxx_space\ntemporary tablespace bjjtxx_space_temp;\n```\n### 用户授权\n```sql\ngrant dba,connect,resource,CTXAPP,create view to bjjtxx_develop;\n```\n\n### 锁表查询\n***查看锁住的表***\n```sql\nSELECT b.owner,b.object_name,a.session_id,a.locked_mode  \n    FROM v$locked_object a ,dba_objects b  \n    WHERE b.object_id = a.object_id; \n```\n\n***查看被锁住的会话 ***\n```sql\nSELECT b.username,b.sid,b.serial#,logon_time  \n    FROM v$locked_object a,v$session b  \n    WHERE a.session_id = b.sid order by b.logon_time; \n```\n\n***如果要断开某个会话，执行  ***\n```sql\nalter system kill session ‘sid,serial#’\n```\n\n### 设置表空间大小\n\n***查找出oralce表空间的文件名、路径 ***\n```sql\nselect tablespace_name, file_id, file_name, round(bytes/(1024*1024),0) total_space from dba_data_files; \n```\n\n***修改表空间大小  ***\n```sql\nALTER DATABASE DATAFILE 'E:\\LARGE.DBF' RESIZE 3000M;\n```\n\n\n***设置表空间最大大小  ***\n```sql\nALTER DATABASE DATAFILE ''/oracle/oradata/db/GAME.dbf \nAUTOEXTEND ON NEXT 100M \nMAXSIZE 10000M;\n```\n","slug":"Oracle常用脚本","published":1,"updated":"2016-05-13T14:52:51.913Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmg000o50ybq71anz26","content":"<h3 id=\"建表空间\"><a href=\"#建表空间\" class=\"headerlink\" title=\"建表空间\"></a>建表空间</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp </span><br><span class=\"line\">tempfile <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">logging</span></span><br><span class=\"line\"><span class=\"keyword\">datafile</span> <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"建用户\"><a href=\"#建用户\" class=\"headerlink\" title=\"建用户\"></a>建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> bjjtxx_develop <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> bjjtxx</span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> dba,<span class=\"keyword\">connect</span>,<span class=\"keyword\">resource</span>,CTXAPP,<span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">to</span> bjjtxx_develop;</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁表查询\"><a href=\"#锁表查询\" class=\"headerlink\" title=\"锁表查询\"></a>锁表查询</h3><p><strong><em>查看锁住的表</em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.owner,b.object_name,a.session_id,a.locked_mode  </span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a ,dba_objects b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> b.object_id = a.object_id;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>查看被锁住的会话 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.username,b.sid,b.serial#,logon_time  </span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a,v$<span class=\"keyword\">session</span> b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> a.session_id = b.sid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> b.logon_time;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果要断开某个会话，执行  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> ‘<span class=\"keyword\">sid</span>,<span class=\"built_in\">serial</span>#’</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置表空间大小\"><a href=\"#设置表空间大小\" class=\"headerlink\" title=\"设置表空间大小\"></a>设置表空间大小</h3><p><strong><em>查找出oralce表空间的文件名、路径 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> tablespace_name, file_id, file_name, <span class=\"keyword\">round</span>(<span class=\"keyword\">bytes</span>/(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>),<span class=\"number\">0</span>) total_space <span class=\"keyword\">from</span> dba_data_files;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>修改表空间大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'E:\\LARGE.DBF'</span> <span class=\"keyword\">RESIZE</span> <span class=\"number\">3000</span>M;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>设置表空间最大大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">''</span>/<span class=\"keyword\">oracle</span>/<span class=\"keyword\">oradata</span>/db/GAME.dbf </span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">100</span>M </span><br><span class=\"line\"><span class=\"keyword\">MAXSIZE</span> <span class=\"number\">10000</span>M;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"建表空间\"><a href=\"#建表空间\" class=\"headerlink\" title=\"建表空间\"></a>建表空间</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp </span><br><span class=\"line\">tempfile <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx_temp.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">logging</span></span><br><span class=\"line\"><span class=\"keyword\">datafile</span> <span class=\"string\">'D:/oracle/product/10.2.0/oradata/orcl/bjjtxx.dbf'</span> </span><br><span class=\"line\"><span class=\"keyword\">size</span> <span class=\"number\">32</span>m </span><br><span class=\"line\"><span class=\"keyword\">autoextend</span> <span class=\"keyword\">on</span> </span><br><span class=\"line\"><span class=\"keyword\">next</span> <span class=\"number\">32</span>m <span class=\"keyword\">maxsize</span> <span class=\"number\">2048</span>m</span><br><span class=\"line\"><span class=\"keyword\">extent</span> <span class=\"keyword\">management</span> <span class=\"keyword\">local</span>;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"建用户\"><a href=\"#建用户\" class=\"headerlink\" title=\"建用户\"></a>建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> bjjtxx_develop <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> bjjtxx</span><br><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">tablespace</span> bjjtxx_space</span><br><span class=\"line\"><span class=\"keyword\">temporary</span> <span class=\"keyword\">tablespace</span> bjjtxx_space_temp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> dba,<span class=\"keyword\">connect</span>,<span class=\"keyword\">resource</span>,CTXAPP,<span class=\"keyword\">create</span> <span class=\"keyword\">view</span> <span class=\"keyword\">to</span> bjjtxx_develop;</span><br></pre></td></tr></table></figure>\n<h3 id=\"锁表查询\"><a href=\"#锁表查询\" class=\"headerlink\" title=\"锁表查询\"></a>锁表查询</h3><p><strong><em>查看锁住的表</em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.owner,b.object_name,a.session_id,a.locked_mode  </span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a ,dba_objects b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> b.object_id = a.object_id;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>查看被锁住的会话 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> b.username,b.sid,b.serial#,logon_time  </span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> v$locked_object a,v$<span class=\"keyword\">session</span> b  </span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> a.session_id = b.sid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> b.logon_time;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果要断开某个会话，执行  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">system</span> <span class=\"keyword\">kill</span> <span class=\"keyword\">session</span> ‘<span class=\"keyword\">sid</span>,<span class=\"built_in\">serial</span>#’</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置表空间大小\"><a href=\"#设置表空间大小\" class=\"headerlink\" title=\"设置表空间大小\"></a>设置表空间大小</h3><p><strong><em>查找出oralce表空间的文件名、路径 </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> tablespace_name, file_id, file_name, <span class=\"keyword\">round</span>(<span class=\"keyword\">bytes</span>/(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>),<span class=\"number\">0</span>) total_space <span class=\"keyword\">from</span> dba_data_files;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>修改表空间大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'E:\\LARGE.DBF'</span> <span class=\"keyword\">RESIZE</span> <span class=\"number\">3000</span>M;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>设置表空间最大大小  </em></strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">''</span>/<span class=\"keyword\">oracle</span>/<span class=\"keyword\">oradata</span>/db/GAME.dbf </span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">100</span>M </span><br><span class=\"line\"><span class=\"keyword\">MAXSIZE</span> <span class=\"number\">10000</span>M;</span><br></pre></td></tr></table></figure></p>"},{"title":"System.setOut","date":"2016-05-10T12:10:33.000Z","comments":1,"_content":"   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。\n   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。\n<!-- more --> \n```java\npublic void init() {\n  PrintStream printStream = new PrintStream(System.out) {\n   public void println(boolean x) {\n    log(Boolean.valueOf(x));\n   }\n\n   public void println(char x) {\n    log(Character.valueOf(x));\n   }\n\n   public void println(char[] x) {\n    log(x == null ? null : new String(x));\n   }\n\n   public void println(double x) {\n    log(Double.valueOf(x));\n   }\n\n   public void println(float x) {\n    log(Float.valueOf(x));\n   }\n\n   public void println(int x) {\n    log(Integer.valueOf(x));\n   }\n\n   public void println(long x) {\n    log(x);\n   }\n\n   public void println(Object x) {\n    log(x);\n   }\n\n   public void println(String x) {\n    log(x);\n   }\n  };\n  System.setOut(printStream);\n  System.setErr(printStream);\n\n }\n\n private void log(Object info) {\n  LogFactoryImpl.getLog(getClass()).info(info);\n }\n```\n\n在web的监听器里面初始下这个就可以了\n\n下面是log4j的配置文件\n\n```\nlog4j.rootLogger=INFO,Stdout,R\nlog4j.appender.Stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.Stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\nlog4j.appender.R=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.R.File=F:/stdout.log\nlog4j.appender.R.datePattern='.'yyyy-MM-dd'.txt'\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n```\n\n","source":"_posts/System.setOut.md","raw":"---\ntitle: System.setOut\ndate: 2016-05-10 20:10:33 \ncomments: true \ncategories: Java\n---\n   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。\n   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。\n<!-- more --> \n```java\npublic void init() {\n  PrintStream printStream = new PrintStream(System.out) {\n   public void println(boolean x) {\n    log(Boolean.valueOf(x));\n   }\n\n   public void println(char x) {\n    log(Character.valueOf(x));\n   }\n\n   public void println(char[] x) {\n    log(x == null ? null : new String(x));\n   }\n\n   public void println(double x) {\n    log(Double.valueOf(x));\n   }\n\n   public void println(float x) {\n    log(Float.valueOf(x));\n   }\n\n   public void println(int x) {\n    log(Integer.valueOf(x));\n   }\n\n   public void println(long x) {\n    log(x);\n   }\n\n   public void println(Object x) {\n    log(x);\n   }\n\n   public void println(String x) {\n    log(x);\n   }\n  };\n  System.setOut(printStream);\n  System.setErr(printStream);\n\n }\n\n private void log(Object info) {\n  LogFactoryImpl.getLog(getClass()).info(info);\n }\n```\n\n在web的监听器里面初始下这个就可以了\n\n下面是log4j的配置文件\n\n```\nlog4j.rootLogger=INFO,Stdout,R\nlog4j.appender.Stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.Stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\nlog4j.appender.R=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.R.File=F:/stdout.log\nlog4j.appender.R.datePattern='.'yyyy-MM-dd'.txt'\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n```\n\n","slug":"System.setOut","published":1,"updated":"2016-05-11T11:54:03.519Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmg000r50ybtse427hm","content":"<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  PrintStream printStream = <span class=\"keyword\">new</span> PrintStream(System.out) &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">boolean</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Boolean.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Character.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    log(x == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> String(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Double.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">float</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Float.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Integer.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">long</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  System.setOut(printStream);</span><br><span class=\"line\">  System.setErr(printStream);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object info)</span> </span>&#123;</span><br><span class=\"line\">  LogFactoryImpl.getLog(getClass()).info(info);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web的监听器里面初始下这个就可以了</p>\n<p>下面是log4j的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=INFO,Stdout,R</span><br><span class=\"line\">log4j.appender.Stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br><span class=\"line\">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.R.File=F:/stdout.log</span><br><span class=\"line\">log4j.appender.R.datePattern=&apos;.&apos;yyyy-MM-dd&apos;.txt&apos;</span><br><span class=\"line\">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.R.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一同事问我System.out.println()输出的内容为什么没有输出到日志文件中。他告诉我的是他使用的weblogic中间件。说起这个真的平时没太注意。因为我之前一直使用的是jboss，查看日志也是看的jboss日志文件，通过System.out.println输出的内容也显示在了日志文件中。带着好奇心去看了下自己系统下的日志文件果然没有。于是打开jboss的log4j.xml 与自己系统下的log4j.xml进行了一下对比发现并无不同。于是打开jboss代码看了下发现jboss org.jboss.logging.Log4jService  installSystemAdapters方法中对System.setOut 有设置。<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示对于System.setOut不懂到网上百度了下，官方说明是通过System.setOut方法允许程序员自行定义System.out输出流， 我们可以将我们改造好的PrintStream替换java原来的System.out对象。于是他这个问题就很好解决了。<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  PrintStream printStream = <span class=\"keyword\">new</span> PrintStream(System.out) &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">boolean</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Boolean.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Character.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">char</span>[] x)</span> </span>&#123;</span><br><span class=\"line\">    log(x == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> String(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Double.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">float</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Float.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(Integer.valueOf(x));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">long</span> x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(String x)</span> </span>&#123;</span><br><span class=\"line\">    log(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  System.setOut(printStream);</span><br><span class=\"line\">  System.setErr(printStream);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object info)</span> </span>&#123;</span><br><span class=\"line\">  LogFactoryImpl.getLog(getClass()).info(info);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在web的监听器里面初始下这个就可以了</p>\n<p>下面是log4j的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=INFO,Stdout,R</span><br><span class=\"line\">log4j.appender.Stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br><span class=\"line\">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.R.File=F:/stdout.log</span><br><span class=\"line\">log4j.appender.R.datePattern=&apos;.&apos;yyyy-MM-dd&apos;.txt&apos;</span><br><span class=\"line\">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.R.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %m%n</span><br></pre></td></tr></table></figure>"},{"title":"Nginx+Tomcat+Memcached集群","date":"2015-01-14T08:18:41.000Z","comments":1,"toc":true,"_content":"\n\nNginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)。这篇文章是以前面[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。\n安置Memcached之前需要安装他依赖的软件libevent-devel。\n<!--more-->\n\n## 软件安装\n\n### 安装libevent-devel\n```\nsehll yum install libevent-devel\n```\n\n### 安装memcached\n```\nsehll wget http://memcached.org/files/memcached-1.4.22.tar.gz\nsehll tar -zxvf memcached-1.4.22.tar.gz\nsehll cd memcached-1.4.22\nsehll ./configure && make && make test && make install\n```\n\n### 启动memcached\n```\nshell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233\n```\n启动memcached的参数不明白的地方可以查看网上的说明\n\n### 下载依赖Jar\n***下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略***\n\nmemcached-session-manager-1.8.2.jar\nspymemcached-2.7.3.jar\nmsm-xstream-serializer-1.8.2.jar\nmsm-javolution-serializer-1.8.2.jar\nmsm-flexjson-serializer-1.8.2.jar\nmemcached-session-manager-tc6-1.8.2.jar\njavolution-5.5.1.jar\n\n将以上包复制到%TOMCAT_HOME%\\lib\\下\n## 配置\n修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置\n```xml\n<Manager className=\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"\n\tmemcacheNodes=\"n1:192.168.1.233:11211\"\n\trequestUriIgnorePattern=\".*\\.(png|gif|jpg|css|js)$\"\n\tsessionBackupAsync=\"false\"\n\tsessionBackupTimeout=\"1800000\"\n\tcopyCollectionsForSerialization=\"false\"\n\ttranscoderFactoryClass=\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"/>\n```\n要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=\"n1:192.168.1.233:11211\"\n192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：\nmemcachedNodes=\"n1:192.168.1.233:11211,n2:192.168.1.234:11211\"\n\n***注意***\n每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。","source":"_posts/Nginx+Tomcat+Memcached集群.md","raw":"---\ntitle: Nginx+Tomcat+Memcached集群\ndate: 2015-01-14 16:18:41\ncomments: true\ncategories: Tomcat\ntoc: true \n---\n\n\nNginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)。这篇文章是以前面[Nginx+Tomcat集群](/2014/12/10/Nginx+Tomcat集群/)的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。\n安置Memcached之前需要安装他依赖的软件libevent-devel。\n<!--more-->\n\n## 软件安装\n\n### 安装libevent-devel\n```\nsehll yum install libevent-devel\n```\n\n### 安装memcached\n```\nsehll wget http://memcached.org/files/memcached-1.4.22.tar.gz\nsehll tar -zxvf memcached-1.4.22.tar.gz\nsehll cd memcached-1.4.22\nsehll ./configure && make && make test && make install\n```\n\n### 启动memcached\n```\nshell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233\n```\n启动memcached的参数不明白的地方可以查看网上的说明\n\n### 下载依赖Jar\n***下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略***\n\nmemcached-session-manager-1.8.2.jar\nspymemcached-2.7.3.jar\nmsm-xstream-serializer-1.8.2.jar\nmsm-javolution-serializer-1.8.2.jar\nmsm-flexjson-serializer-1.8.2.jar\nmemcached-session-manager-tc6-1.8.2.jar\njavolution-5.5.1.jar\n\n将以上包复制到%TOMCAT_HOME%\\lib\\下\n## 配置\n修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置\n```xml\n<Manager className=\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"\n\tmemcacheNodes=\"n1:192.168.1.233:11211\"\n\trequestUriIgnorePattern=\".*\\.(png|gif|jpg|css|js)$\"\n\tsessionBackupAsync=\"false\"\n\tsessionBackupTimeout=\"1800000\"\n\tcopyCollectionsForSerialization=\"false\"\n\ttranscoderFactoryClass=\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"/>\n```\n要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=\"n1:192.168.1.233:11211\"\n192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：\nmemcachedNodes=\"n1:192.168.1.233:11211,n2:192.168.1.234:11211\"\n\n***注意***\n每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。","slug":"Nginx+Tomcat+Memcached集群","published":1,"updated":"2016-05-13T14:04:17.986Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmg000t50ybdpqaobnp","content":"<p>Nginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>。这篇文章是以前面<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。<br>安置Memcached之前需要安装他依赖的软件libevent-devel。<br><a id=\"more\"></a></p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"安装libevent-devel\"><a href=\"#安装libevent-devel\" class=\"headerlink\" title=\"安装libevent-devel\"></a>安装libevent-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll yum install libevent-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装memcached\"><a href=\"#安装memcached\" class=\"headerlink\" title=\"安装memcached\"></a>安装memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll wget http://memcached.org/files/memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll tar -zxvf memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll cd memcached-1.4.22</span><br><span class=\"line\">sehll ./configure &amp;&amp; make &amp;&amp; make test &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动memcached\"><a href=\"#启动memcached\" class=\"headerlink\" title=\"启动memcached\"></a>启动memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233</span><br></pre></td></tr></table></figure>\n<p>启动memcached的参数不明白的地方可以查看网上的说明</p>\n<h3 id=\"下载依赖Jar\"><a href=\"#下载依赖Jar\" class=\"headerlink\" title=\"下载依赖Jar\"></a>下载依赖Jar</h3><p><strong><em>下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略</em></strong></p>\n<p>memcached-session-manager-1.8.2.jar<br>spymemcached-2.7.3.jar<br>msm-xstream-serializer-1.8.2.jar<br>msm-javolution-serializer-1.8.2.jar<br>msm-flexjson-serializer-1.8.2.jar<br>memcached-session-manager-tc6-1.8.2.jar<br>javolution-5.5.1.jar</p>\n<p>将以上包复制到%TOMCAT_HOME%\\lib\\下</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"</span></span><br><span class=\"line\">\t<span class=\"attr\">memcacheNodes</span>=<span class=\"string\">\"n1:192.168.1.233:11211\"</span></span><br><span class=\"line\">\t<span class=\"attr\">requestUriIgnorePattern</span>=<span class=\"string\">\".*\\.(png|gif|jpg|css|js)$\"</span></span><br><span class=\"line\">\t<span class=\"attr\">sessionBackupAsync</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t<span class=\"attr\">sessionBackupTimeout</span>=<span class=\"string\">\"1800000\"</span></span><br><span class=\"line\">\t<span class=\"attr\">copyCollectionsForSerialization</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t<span class=\"attr\">transcoderFactoryClass</span>=<span class=\"string\">\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=”n1:192.168.1.233:11211”<br>192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：<br>memcachedNodes=”n1:192.168.1.233:11211,n2:192.168.1.234:11211”</p>\n<p><strong><em>注意</em></strong><br>每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。</p>\n","excerpt":"<p>Nginx和Tomcat的安装和配置在这里就不说了，不明白的可以看文章<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>。这篇文章是以前面<a href=\"/2014/12/10/Nginx+Tomcat集群/\">Nginx+Tomcat集群</a>的文章为基础。Nginx+Tomcat+Memcached集群其实很简单，就是将session管理交给了Memcached管理，这样的好处不言而喻，就是如果集群中的节点如果很多的话采用Tomcat节点间的session复制来保证session的共享。这样会给系统带来很大一部分开销。所以就讲session交给了Memcached管理。Memcached是个分布式缓存系统，采用c语言实现。今天我们以一个Memcached为例。对Memcached不在进集群了。<br>安置Memcached之前需要安装他依赖的软件libevent-devel。<br>","more":"</p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"安装libevent-devel\"><a href=\"#安装libevent-devel\" class=\"headerlink\" title=\"安装libevent-devel\"></a>安装libevent-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll yum install libevent-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装memcached\"><a href=\"#安装memcached\" class=\"headerlink\" title=\"安装memcached\"></a>安装memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sehll wget http://memcached.org/files/memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll tar -zxvf memcached-1.4.22.tar.gz</span><br><span class=\"line\">sehll cd memcached-1.4.22</span><br><span class=\"line\">sehll ./configure &amp;&amp; make &amp;&amp; make test &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动memcached\"><a href=\"#启动memcached\" class=\"headerlink\" title=\"启动memcached\"></a>启动memcached</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /usr/local/bin/memcached -d -m 256 -p 11211 -u root -l 192.168.1.233</span><br></pre></td></tr></table></figure>\n<p>启动memcached的参数不明白的地方可以查看网上的说明</p>\n<h3 id=\"下载依赖Jar\"><a href=\"#下载依赖Jar\" class=\"headerlink\" title=\"下载依赖Jar\"></a>下载依赖Jar</h3><p><strong><em>下载memcached session管理的jar包,Tomcat的版本不一样依赖jar包也不一样我这里是以Tomcat6为例并采用javolution方式策略</em></strong></p>\n<p>memcached-session-manager-1.8.2.jar<br>spymemcached-2.7.3.jar<br>msm-xstream-serializer-1.8.2.jar<br>msm-javolution-serializer-1.8.2.jar<br>msm-flexjson-serializer-1.8.2.jar<br>memcached-session-manager-tc6-1.8.2.jar<br>javolution-5.5.1.jar</p>\n<p>将以上包复制到%TOMCAT_HOME%\\lib\\下</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改%TOMCAT_HOME%\\conf\\context.xml在Context节点下添加如下配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"de.javakaffee.web.msm.MemcachedBackupSessionManager\"</span></span><br><span class=\"line\">\t<span class=\"attr\">memcacheNodes</span>=<span class=\"string\">\"n1:192.168.1.233:11211\"</span></span><br><span class=\"line\">\t<span class=\"attr\">requestUriIgnorePattern</span>=<span class=\"string\">\".*\\.(png|gif|jpg|css|js)$\"</span></span><br><span class=\"line\">\t<span class=\"attr\">sessionBackupAsync</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t<span class=\"attr\">sessionBackupTimeout</span>=<span class=\"string\">\"1800000\"</span></span><br><span class=\"line\">\t<span class=\"attr\">copyCollectionsForSerialization</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t<span class=\"attr\">transcoderFactoryClass</span>=<span class=\"string\">\"de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>要说明的就是memcachedNodes的配置 我上面写的是memcachedNodes=”n1:192.168.1.233:11211”<br>192.168.1.233为memcached所在主机IP地址11211为端口然后如果有多个memcached的话用逗号隔开例如：<br>memcachedNodes=”n1:192.168.1.233:11211,n2:192.168.1.234:11211”</p>\n<p><strong><em>注意</em></strong><br>每个节点都需要这么配置而且需要保证一样，让后将我们之前在server.xml中的Tomcat集群session复制配置注释掉。</p>"},{"title":"Hadoop集群完全分布式部署","date":"2015-01-08T15:45:20.000Z","comments":1,"toc":true,"_content":"\n## 准备环境\n|IP       \t\t | 主机名称    | 角色                  |操作系统   |\n|:--------------:|:-----------:|:---------------------:|:---------:|\n|192.168.131.129 |HadoopMaster | NameNode JobTracker   | CentOS 6.6|\n|192.168.131.128 |HadoopSlave1 | DataNode TaskTracker  | CentOS 6.6|\n\n<!-- more --> \n## hadoop版本\n***hadoop-2.6.0***\n***hadoop目录结构***\n![hadoop目录结构](003vMReezy6P1MG9JTO50&690.png)\n\n## 修改主机名称\n***将192.168.131.129修改为HadoopMaster***\n```\nshell vi /etc/sysconfig/network\nNETWORKING=yes\nHOSTNAME=HadoopMaster\n```\n***将192.168.131.128修改为HadoopSlave1***\n\n```\nshell vi /etc/sysconfig/network\nHOSTNAME=HadoopSlave\n```\n***通过命令hostname输出主机名称验证是否修改成功***\n\n```\nshell hostname\nHadoopMaster\n```\n\n## 配置hosts\n```\nshell vi /etc/hosts\n192.168.131.129 HadoopMaster\n192.168.131.128 HadoopSlave1\n```\n***在hosts文件添加如上两行 必须保证所有节点的host一样***\n\n\n## 安装jdk\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n```\nshell rpm -qa|grep java\n```\n第二步：查看yum库是否有java安装包\n```\nshell yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n```\n显示如上信息表示安装成功\n\n## 安装软件（系统一般都自带）\n```\nshell yum install ssh\nshell yum install rsync\n```\n## 创建hadoop用户\n所有节点的用户名称和密码多必须保持一致相同\n\n## 切换到Hadoop用户配置ssh免密码登录\n1、在Master节点上执行\n```\nshell ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa \nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n2、对authorized_keys 授权\n```\nshell chmod 744 authorized_keys \nshell ls ~/.ssh/\n```\n3、验证是否密码登录\n```\nshell ssh HadoopMaster\n```\n4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下\n```\nshell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/\n```\n5、在Slave节点上通过\n```\nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n生成authorized_keys并授权\n6、在Master节点上验证是否能密码了登录Slave节点\n```\nshell ssh HadoopSlave1\n```\n\n## 切换到root用户下载hadoop\n\n```\nshell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz\n```\n[hadoop所有版本地址](http://apache.fayea.com/hadoop/common/)\n\n## 解压hadoop\n```\nshell tar -zxvf hadoop-2.6.0.tar.gz\n```\n将hadoop移动到/home/hadoop/目录下\n把hadoop-2.6.0目录操作权限分配给hadoop用户\n```\nshell chown hadoop hadoop-2.6.0/*\nshell chmod 700 hadoop-2.6.0/*\n```\n查看文件操作操作用户权限\n![文件权限](003vMReezy6P1KnAQkx19&690.png)\n\n## 设置hadoop启动参数\n### 设置java安装路径\n```\nshell vi etc/hadoop/hadoop-env.sh\nexport JAVA_HOME=java的安装路径\n```\n如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找\n```\nshell which java\n/use/bin/java\n```\n得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可\n![java环境配置](003vMReezy6P1KHLwtFe7&690.png)\n\n## 配置core-site.xml\n```xml\nshell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml\n\n<configuration>\n\t<property>  \n        <name>hadoop.tmp.dir</name>  \n        <value>/home/hadoop/tmp</value>  \n        <description>Abase for other temporary directories.</description>  \n    </property>\n\t<property>\n      <name>fs.default.name</name>\n      <value>hdfs://HadoopMaster:9000</value>         \n  </property>          \n  <property>            \n       <name>mapred.job.tracker</name>           \n       <value>hdfs://HadoopMaster:9001</value>     \n  </property>                      \n  <property>  \n        <name>io.file.buffer.size</name>  \n        <value>4096</value>  \n  </property>\n</configuration>\n```\n\n## 配置hdfs-site.xml\n```xml\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml\n\n<configuration>\n\t<property>  \n        <name>dfs.nameservices</name>  \n        <value>hadoop-cluster1</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.secondary.http-address</name>  \n        <value>HadoopMaster:50090</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.name.dir</name>  \n        <value>file:///home/hadoop/dfs/name</value>  \n    </property>  \n    <property>  \n        <name>dfs.datanode.data.dir</name>  \n        <value>file:///home/hadoop/dfs/data</value>  \n    </property>  \n    <property>  \n        <name>dfs.replication</name>  \n        <value>2</value>  \n    </property>  \n    <property>  \n        <name>dfs.webhdfs.enabled</name>  \n        <value>true</value>  \n    </property> \n</configuration>\n```\n\n## 配置slaves\n```\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves\n```\n***集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称***\n```\nshell cat etc/hadoop/slaves\nlocalhost\n```\n***将localhost修改为HadoopSlave1***\n\n## 配置hadoop安装目录\n```\nshell vi /etc/profile\n\nexport HADOOP_HOME=/home/hadoop/hadoop-2.6.0\nexport HADOOP_COMMON_HOME=$HADOOP_HOME\nexport HADOOP_HDFS_HOME=$HADOOP_HOME\nexport HADOOP_MAPRED_HOME=$HADOOP_HOME\nexport HADOOP_YARN_HOME=$HADOOP_HOME\nexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib\nexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native\nexport HADOOP_OPTS=\"-Djava.library.path=$HADOOP_HOME/lib\"\n\n#使修改立即生效\nshell source /etc/profile \n```\n\n***注意：如果不添加上面配置可能会报如下错误***\n```\n15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nStarting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.\nIt's highly recommended that you fix the library with 'execstack -c ', or link it with '-z noexecstack'.\n```\n\n## 格式化hadoop\n```\nshell bin/hadoop namenode -format\n```\n![格式化hadoop](003vMReezy6P1LyH3gqae&690.jpg)\n格式化成功\n\n## 同步节点\n将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）\n```\nshell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/\n```\n\n## 启动hadoop\n```\nshell sbin/start-all.sh\n```\n\n通过http://192.168.131.129:50070查看hadoop相关信息\n![启动成功](003vMReezy6P1MlAy3H5d&690.jpg)\n如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题\n![启动失败](003vMReezy6P1Mzjamje7&690.jpg)\n\n查看日志看到如异常（日志文件在 hadoop logs目录下）\n![查看日志](003vMReezy6P1O1zJBg32&690.jpg)\n这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了","source":"_posts/Hadoop集群完全分布式部署.md","raw":"---\ntitle: Hadoop集群完全分布式部署\ndate: 2015-01-08 23:45:20 \ncomments: true \ncategories: Hadoop\ntoc: true\n---\n\n## 准备环境\n|IP       \t\t | 主机名称    | 角色                  |操作系统   |\n|:--------------:|:-----------:|:---------------------:|:---------:|\n|192.168.131.129 |HadoopMaster | NameNode JobTracker   | CentOS 6.6|\n|192.168.131.128 |HadoopSlave1 | DataNode TaskTracker  | CentOS 6.6|\n\n<!-- more --> \n## hadoop版本\n***hadoop-2.6.0***\n***hadoop目录结构***\n![hadoop目录结构](003vMReezy6P1MG9JTO50&690.png)\n\n## 修改主机名称\n***将192.168.131.129修改为HadoopMaster***\n```\nshell vi /etc/sysconfig/network\nNETWORKING=yes\nHOSTNAME=HadoopMaster\n```\n***将192.168.131.128修改为HadoopSlave1***\n\n```\nshell vi /etc/sysconfig/network\nHOSTNAME=HadoopSlave\n```\n***通过命令hostname输出主机名称验证是否修改成功***\n\n```\nshell hostname\nHadoopMaster\n```\n\n## 配置hosts\n```\nshell vi /etc/hosts\n192.168.131.129 HadoopMaster\n192.168.131.128 HadoopSlave1\n```\n***在hosts文件添加如上两行 必须保证所有节点的host一样***\n\n\n## 安装jdk\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n```\nshell rpm -qa|grep java\n```\n第二步：查看yum库是否有java安装包\n```\nshell yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n```\n显示如上信息表示安装成功\n\n## 安装软件（系统一般都自带）\n```\nshell yum install ssh\nshell yum install rsync\n```\n## 创建hadoop用户\n所有节点的用户名称和密码多必须保持一致相同\n\n## 切换到Hadoop用户配置ssh免密码登录\n1、在Master节点上执行\n```\nshell ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa \nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n2、对authorized_keys 授权\n```\nshell chmod 744 authorized_keys \nshell ls ~/.ssh/\n```\n3、验证是否密码登录\n```\nshell ssh HadoopMaster\n```\n4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下\n```\nshell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/\n```\n5、在Slave节点上通过\n```\nshell cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys \n```\n生成authorized_keys并授权\n6、在Master节点上验证是否能密码了登录Slave节点\n```\nshell ssh HadoopSlave1\n```\n\n## 切换到root用户下载hadoop\n\n```\nshell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz\n```\n[hadoop所有版本地址](http://apache.fayea.com/hadoop/common/)\n\n## 解压hadoop\n```\nshell tar -zxvf hadoop-2.6.0.tar.gz\n```\n将hadoop移动到/home/hadoop/目录下\n把hadoop-2.6.0目录操作权限分配给hadoop用户\n```\nshell chown hadoop hadoop-2.6.0/*\nshell chmod 700 hadoop-2.6.0/*\n```\n查看文件操作操作用户权限\n![文件权限](003vMReezy6P1KnAQkx19&690.png)\n\n## 设置hadoop启动参数\n### 设置java安装路径\n```\nshell vi etc/hadoop/hadoop-env.sh\nexport JAVA_HOME=java的安装路径\n```\n如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找\n```\nshell which java\n/use/bin/java\n```\n得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可\n![java环境配置](003vMReezy6P1KHLwtFe7&690.png)\n\n## 配置core-site.xml\n```xml\nshell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml\n\n<configuration>\n\t<property>  \n        <name>hadoop.tmp.dir</name>  \n        <value>/home/hadoop/tmp</value>  \n        <description>Abase for other temporary directories.</description>  \n    </property>\n\t<property>\n      <name>fs.default.name</name>\n      <value>hdfs://HadoopMaster:9000</value>         \n  </property>          \n  <property>            \n       <name>mapred.job.tracker</name>           \n       <value>hdfs://HadoopMaster:9001</value>     \n  </property>                      \n  <property>  \n        <name>io.file.buffer.size</name>  \n        <value>4096</value>  \n  </property>\n</configuration>\n```\n\n## 配置hdfs-site.xml\n```xml\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml\n\n<configuration>\n\t<property>  \n        <name>dfs.nameservices</name>  \n        <value>hadoop-cluster1</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.secondary.http-address</name>  \n        <value>HadoopMaster:50090</value>  \n    </property>  \n    <property>  \n        <name>dfs.namenode.name.dir</name>  \n        <value>file:///home/hadoop/dfs/name</value>  \n    </property>  \n    <property>  \n        <name>dfs.datanode.data.dir</name>  \n        <value>file:///home/hadoop/dfs/data</value>  \n    </property>  \n    <property>  \n        <name>dfs.replication</name>  \n        <value>2</value>  \n    </property>  \n    <property>  \n        <name>dfs.webhdfs.enabled</name>  \n        <value>true</value>  \n    </property> \n</configuration>\n```\n\n## 配置slaves\n```\nshell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves\n```\n***集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称***\n```\nshell cat etc/hadoop/slaves\nlocalhost\n```\n***将localhost修改为HadoopSlave1***\n\n## 配置hadoop安装目录\n```\nshell vi /etc/profile\n\nexport HADOOP_HOME=/home/hadoop/hadoop-2.6.0\nexport HADOOP_COMMON_HOME=$HADOOP_HOME\nexport HADOOP_HDFS_HOME=$HADOOP_HOME\nexport HADOOP_MAPRED_HOME=$HADOOP_HOME\nexport HADOOP_YARN_HOME=$HADOOP_HOME\nexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib\nexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native\nexport HADOOP_OPTS=\"-Djava.library.path=$HADOOP_HOME/lib\"\n\n#使修改立即生效\nshell source /etc/profile \n```\n\n***注意：如果不添加上面配置可能会报如下错误***\n```\n15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nStarting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.\nIt's highly recommended that you fix the library with 'execstack -c ', or link it with '-z noexecstack'.\n```\n\n## 格式化hadoop\n```\nshell bin/hadoop namenode -format\n```\n![格式化hadoop](003vMReezy6P1LyH3gqae&690.jpg)\n格式化成功\n\n## 同步节点\n将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）\n```\nshell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/\n```\n\n## 启动hadoop\n```\nshell sbin/start-all.sh\n```\n\n通过http://192.168.131.129:50070查看hadoop相关信息\n![启动成功](003vMReezy6P1MlAy3H5d&690.jpg)\n如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题\n![启动失败](003vMReezy6P1Mzjamje7&690.jpg)\n\n查看日志看到如异常（日志文件在 hadoop logs目录下）\n![查看日志](003vMReezy6P1O1zJBg32&690.jpg)\n这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了","slug":"Hadoop集群完全分布式部署","published":1,"updated":"2016-05-11T13:43:44.383Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmq000v50ybtin2ltvp","content":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IP</th>\n<th style=\"text-align:center\">主机名称</th>\n<th style=\"text-align:center\">角色</th>\n<th style=\"text-align:center\">操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">192.168.131.129</td>\n<td style=\"text-align:center\">HadoopMaster</td>\n<td style=\"text-align:center\">NameNode JobTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.131.128</td>\n<td style=\"text-align:center\">HadoopSlave1</td>\n<td style=\"text-align:center\">DataNode TaskTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a> \n<h2 id=\"hadoop版本\"><a href=\"#hadoop版本\" class=\"headerlink\" title=\"hadoop版本\"></a>hadoop版本</h2><p><strong><em>hadoop-2.6.0</em></strong><br><strong><em>hadoop目录结构</em></strong><br><img src=\"003vMReezy6P1MG9JTO50&amp;690.png\" alt=\"hadoop目录结构\"></p>\n<h2 id=\"修改主机名称\"><a href=\"#修改主机名称\" class=\"headerlink\" title=\"修改主机名称\"></a>修改主机名称</h2><p><strong><em>将192.168.131.129修改为HadoopMaster</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">NETWORKING=yes</span><br><span class=\"line\">HOSTNAME=HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将192.168.131.128修改为HadoopSlave1</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">HOSTNAME=HadoopSlave</span><br></pre></td></tr></table></figure>\n<p><strong><em>通过命令hostname输出主机名称验证是否修改成功</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell hostname</span><br><span class=\"line\">HadoopMaster</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hosts\"><a href=\"#配置hosts\" class=\"headerlink\" title=\"配置hosts\"></a>配置hosts</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/hosts</span><br><span class=\"line\">192.168.131.129 HadoopMaster</span><br><span class=\"line\">192.168.131.128 HadoopSlave1</span><br></pre></td></tr></table></figure>\n<p><strong><em>在hosts文件添加如上两行 必须保证所有节点的host一样</em></strong></p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa|grep java</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br></pre></td></tr></table></figure></p>\n<p>显示如上信息表示安装成功</p>\n<h2 id=\"安装软件（系统一般都自带）\"><a href=\"#安装软件（系统一般都自带）\" class=\"headerlink\" title=\"安装软件（系统一般都自带）\"></a>安装软件（系统一般都自带）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install ssh</span><br><span class=\"line\">shell yum install rsync</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建hadoop用户\"><a href=\"#创建hadoop用户\" class=\"headerlink\" title=\"创建hadoop用户\"></a>创建hadoop用户</h2><p>所有节点的用户名称和密码多必须保持一致相同</p>\n<h2 id=\"切换到Hadoop用户配置ssh免密码登录\"><a href=\"#切换到Hadoop用户配置ssh免密码登录\" class=\"headerlink\" title=\"切换到Hadoop用户配置ssh免密码登录\"></a>切换到Hadoop用户配置ssh免密码登录</h2><p>1、在Master节点上执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh-keygen -t dsa -P &apos;&apos; -f ~/.ssh/id_dsa </span><br><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>2、对authorized_keys 授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chmod 744 authorized_keys </span><br><span class=\"line\">shell ls ~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>3、验证是否密码登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p>4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>5、在Slave节点上通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>生成authorized_keys并授权<br>6、在Master节点上验证是否能密码了登录Slave节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopSlave1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"切换到root用户下载hadoop\"><a href=\"#切换到root用户下载hadoop\" class=\"headerlink\" title=\"切换到root用户下载hadoop\"></a>切换到root用户下载hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://apache.fayea.com/hadoop/common/\" target=\"_blank\" rel=\"external\">hadoop所有版本地址</a></p>\n<h2 id=\"解压hadoop\"><a href=\"#解压hadoop\" class=\"headerlink\" title=\"解压hadoop\"></a>解压hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell tar -zxvf hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将hadoop移动到/home/hadoop/目录下<br>把hadoop-2.6.0目录操作权限分配给hadoop用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chown hadoop hadoop-2.6.0/*</span><br><span class=\"line\">shell chmod 700 hadoop-2.6.0/*</span><br></pre></td></tr></table></figure></p>\n<p>查看文件操作操作用户权限<br><img src=\"003vMReezy6P1KnAQkx19&amp;690.png\" alt=\"文件权限\"></p>\n<h2 id=\"设置hadoop启动参数\"><a href=\"#设置hadoop启动参数\" class=\"headerlink\" title=\"设置hadoop启动参数\"></a>设置hadoop启动参数</h2><h3 id=\"设置java安装路径\"><a href=\"#设置java安装路径\" class=\"headerlink\" title=\"设置java安装路径\"></a>设置java安装路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi etc/hadoop/hadoop-env.sh</span><br><span class=\"line\">export JAVA_HOME=java的安装路径</span><br></pre></td></tr></table></figure>\n<p>如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell which java</span><br><span class=\"line\">/use/bin/java</span><br></pre></td></tr></table></figure></p>\n<p>得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可<br><img src=\"003vMReezy6P1KHLwtFe7&amp;690.png\" alt=\"java环境配置\"></p>\n<h2 id=\"配置core-site-xml\"><a href=\"#配置core-site-xml\" class=\"headerlink\" title=\"配置core-site.xml\"></a>配置core-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/home/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Abase for other temporary directories.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>         </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>          </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>            </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>           </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>     </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>                      </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>io.file.buffer.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hdfs-site-xml\"><a href=\"#配置hdfs-site-xml\" class=\"headerlink\" title=\"配置hdfs-site.xml\"></a>配置hdfs-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.nameservices<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-cluster1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HadoopMaster:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.webhdfs.enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置slaves\"><a href=\"#配置slaves\" class=\"headerlink\" title=\"配置slaves\"></a>配置slaves</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>\n<p><strong><em>集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat etc/hadoop/slaves</span><br><span class=\"line\">localhost</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将localhost修改为HadoopSlave1</em></strong></p>\n<h2 id=\"配置hadoop安装目录\"><a href=\"#配置hadoop安装目录\" class=\"headerlink\" title=\"配置hadoop安装目录\"></a>配置hadoop安装目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop-2.6.0</span><br><span class=\"line\">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_YARN_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class=\"line\">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib</span><br><span class=\"line\">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class=\"line\">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#使修改立即生效</span><br><span class=\"line\">shell source /etc/profile</span><br></pre></td></tr></table></figure>\n<p><strong><em>注意：如果不添加上面配置可能会报如下错误</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">Starting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.</span><br><span class=\"line\">It&apos;s highly recommended that you fix the library with &apos;execstack -c &apos;, or link it with &apos;-z noexecstack&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"格式化hadoop\"><a href=\"#格式化hadoop\" class=\"headerlink\" title=\"格式化hadoop\"></a>格式化hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell bin/hadoop namenode -format</span><br></pre></td></tr></table></figure>\n<p><img src=\"003vMReezy6P1LyH3gqae&amp;690.jpg\" alt=\"格式化hadoop\"><br>格式化成功</p>\n<h2 id=\"同步节点\"><a href=\"#同步节点\" class=\"headerlink\" title=\"同步节点\"></a>同步节点</h2><p>将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell sbin/start-all.sh</span><br></pre></td></tr></table></figure>\n<p>通过<a href=\"http://192.168.131.129:50070查看hadoop相关信息\" target=\"_blank\" rel=\"external\">http://192.168.131.129:50070查看hadoop相关信息</a><br><img src=\"003vMReezy6P1MlAy3H5d&amp;690.jpg\" alt=\"启动成功\"><br>如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题<br><img src=\"003vMReezy6P1Mzjamje7&amp;690.jpg\" alt=\"启动失败\"></p>\n<p>查看日志看到如异常（日志文件在 hadoop logs目录下）<br><img src=\"003vMReezy6P1O1zJBg32&amp;690.jpg\" alt=\"查看日志\"><br>这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了</p>\n","excerpt":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IP</th>\n<th style=\"text-align:center\">主机名称</th>\n<th style=\"text-align:center\">角色</th>\n<th style=\"text-align:center\">操作系统</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">192.168.131.129</td>\n<td style=\"text-align:center\">HadoopMaster</td>\n<td style=\"text-align:center\">NameNode JobTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.131.128</td>\n<td style=\"text-align:center\">HadoopSlave1</td>\n<td style=\"text-align:center\">DataNode TaskTracker</td>\n<td style=\"text-align:center\">CentOS 6.6</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"hadoop版本\"><a href=\"#hadoop版本\" class=\"headerlink\" title=\"hadoop版本\"></a>hadoop版本</h2><p><strong><em>hadoop-2.6.0</em></strong><br><strong><em>hadoop目录结构</em></strong><br><img src=\"003vMReezy6P1MG9JTO50&amp;690.png\" alt=\"hadoop目录结构\"></p>\n<h2 id=\"修改主机名称\"><a href=\"#修改主机名称\" class=\"headerlink\" title=\"修改主机名称\"></a>修改主机名称</h2><p><strong><em>将192.168.131.129修改为HadoopMaster</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">NETWORKING=yes</span><br><span class=\"line\">HOSTNAME=HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将192.168.131.128修改为HadoopSlave1</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/sysconfig/network</span><br><span class=\"line\">HOSTNAME=HadoopSlave</span><br></pre></td></tr></table></figure>\n<p><strong><em>通过命令hostname输出主机名称验证是否修改成功</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell hostname</span><br><span class=\"line\">HadoopMaster</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hosts\"><a href=\"#配置hosts\" class=\"headerlink\" title=\"配置hosts\"></a>配置hosts</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/hosts</span><br><span class=\"line\">192.168.131.129 HadoopMaster</span><br><span class=\"line\">192.168.131.128 HadoopSlave1</span><br></pre></td></tr></table></figure>\n<p><strong><em>在hosts文件添加如上两行 必须保证所有节点的host一样</em></strong></p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa|grep java</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br></pre></td></tr></table></figure></p>\n<p>显示如上信息表示安装成功</p>\n<h2 id=\"安装软件（系统一般都自带）\"><a href=\"#安装软件（系统一般都自带）\" class=\"headerlink\" title=\"安装软件（系统一般都自带）\"></a>安装软件（系统一般都自带）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install ssh</span><br><span class=\"line\">shell yum install rsync</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建hadoop用户\"><a href=\"#创建hadoop用户\" class=\"headerlink\" title=\"创建hadoop用户\"></a>创建hadoop用户</h2><p>所有节点的用户名称和密码多必须保持一致相同</p>\n<h2 id=\"切换到Hadoop用户配置ssh免密码登录\"><a href=\"#切换到Hadoop用户配置ssh免密码登录\" class=\"headerlink\" title=\"切换到Hadoop用户配置ssh免密码登录\"></a>切换到Hadoop用户配置ssh免密码登录</h2><p>1、在Master节点上执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh-keygen -t dsa -P &apos;&apos; -f ~/.ssh/id_dsa </span><br><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>2、对authorized_keys 授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chmod 744 authorized_keys </span><br><span class=\"line\">shell ls ~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>3、验证是否密码登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopMaster</span><br></pre></td></tr></table></figure></p>\n<p>4、将id_dsa.pub 复制其他Slave节点hadoop用户~/.ssh/目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp  ~/.ssh/id_dsa.pub hadoop@192.168.1.128:~/.ssh/</span><br></pre></td></tr></table></figure></p>\n<p>5、在Slave节点上通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>生成authorized_keys并授权<br>6、在Master节点上验证是否能密码了登录Slave节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ssh HadoopSlave1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"切换到root用户下载hadoop\"><a href=\"#切换到root用户下载hadoop\" class=\"headerlink\" title=\"切换到root用户下载hadoop\"></a>切换到root用户下载hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell http://apache.fayea.com/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://apache.fayea.com/hadoop/common/\">hadoop所有版本地址</a></p>\n<h2 id=\"解压hadoop\"><a href=\"#解压hadoop\" class=\"headerlink\" title=\"解压hadoop\"></a>解压hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell tar -zxvf hadoop-2.6.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将hadoop移动到/home/hadoop/目录下<br>把hadoop-2.6.0目录操作权限分配给hadoop用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell chown hadoop hadoop-2.6.0/*</span><br><span class=\"line\">shell chmod 700 hadoop-2.6.0/*</span><br></pre></td></tr></table></figure></p>\n<p>查看文件操作操作用户权限<br><img src=\"003vMReezy6P1KnAQkx19&amp;690.png\" alt=\"文件权限\"></p>\n<h2 id=\"设置hadoop启动参数\"><a href=\"#设置hadoop启动参数\" class=\"headerlink\" title=\"设置hadoop启动参数\"></a>设置hadoop启动参数</h2><h3 id=\"设置java安装路径\"><a href=\"#设置java安装路径\" class=\"headerlink\" title=\"设置java安装路径\"></a>设置java安装路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi etc/hadoop/hadoop-env.sh</span><br><span class=\"line\">export JAVA_HOME=java的安装路径</span><br></pre></td></tr></table></figure>\n<p>如果通过yum安装的jdk不知道java安装路径可以通过如下命令查找<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell which java</span><br><span class=\"line\">/use/bin/java</span><br></pre></td></tr></table></figure></p>\n<p>得到的路径是/use/bin/java只需要将JAVE_HOME=/use即可<br><img src=\"003vMReezy6P1KHLwtFe7&amp;690.png\" alt=\"java环境配置\"></p>\n<h2 id=\"配置core-site-xml\"><a href=\"#配置core-site-xml\" class=\"headerlink\" title=\"配置core-site.xml\"></a>配置core-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell /home/hadoop/hadoop-2.6.0/etc/hadoop/core-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/home/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Abase for other temporary directories.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.default.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>         </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>          </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>            </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapred.job.tracker<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>           </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://HadoopMaster:9001<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>     </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>                      </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>io.file.buffer.size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置hdfs-site-xml\"><a href=\"#配置hdfs-site-xml\" class=\"headerlink\" title=\"配置hdfs-site.xml\"></a>配置hdfs-site.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/hdfs-site.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.nameservices<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-cluster1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HadoopMaster:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/name<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:///home/hadoop/dfs/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.webhdfs.enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置slaves\"><a href=\"#配置slaves\" class=\"headerlink\" title=\"配置slaves\"></a>配置slaves</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /home/hadoop/hadoop-2.6.0/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>\n<p><strong><em>集群中所有slave节点的配置文件HadoopSlave1是Slave节点主机名称</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cat etc/hadoop/slaves</span><br><span class=\"line\">localhost</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>将localhost修改为HadoopSlave1</em></strong></p>\n<h2 id=\"配置hadoop安装目录\"><a href=\"#配置hadoop安装目录\" class=\"headerlink\" title=\"配置hadoop安装目录\"></a>配置hadoop安装目录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop-2.6.0</span><br><span class=\"line\">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_YARN_HOME=$HADOOP_HOME</span><br><span class=\"line\">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class=\"line\">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOOME/sbin:$HADOOP_HOME/lib</span><br><span class=\"line\">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class=\"line\">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#使修改立即生效</span><br><span class=\"line\">shell source /etc/profile</span><br></pre></td></tr></table></figure>\n<p><strong><em>注意：如果不添加上面配置可能会报如下错误</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15/01/07 23:52:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">Starting namenodes on [OpenJDK Client VM warning: You have loaded library /home/hadoop/hadoop-2.6.0/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now.</span><br><span class=\"line\">It&apos;s highly recommended that you fix the library with &apos;execstack -c &apos;, or link it with &apos;-z noexecstack&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"格式化hadoop\"><a href=\"#格式化hadoop\" class=\"headerlink\" title=\"格式化hadoop\"></a>格式化hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell bin/hadoop namenode -format</span><br></pre></td></tr></table></figure>\n<p><img src=\"003vMReezy6P1LyH3gqae&amp;690.jpg\" alt=\"格式化hadoop\"><br>格式化成功</p>\n<h2 id=\"同步节点\"><a href=\"#同步节点\" class=\"headerlink\" title=\"同步节点\"></a>同步节点</h2><p>将hadoop分别复制到其他节点的相同目录下（例如Master节点hadoop目录是/home/hadoop/hadoop-2.6.0其他节点也是这个目录）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell scp -r hadoop-2.6.0 hadoop@192.168.131.128:/home/hadoop/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动hadoop\"><a href=\"#启动hadoop\" class=\"headerlink\" title=\"启动hadoop\"></a>启动hadoop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell sbin/start-all.sh</span><br></pre></td></tr></table></figure>\n<p>通过<a href=\"http://192.168.131.129:50070查看hadoop相关信息\">http://192.168.131.129:50070查看hadoop相关信息</a><br><img src=\"003vMReezy6P1MlAy3H5d&amp;690.jpg\" alt=\"启动成功\"><br>如果没有启动成功或者live noades为0查看hadoop启动日志就能很快解决问题<br><img src=\"003vMReezy6P1Mzjamje7&amp;690.jpg\" alt=\"启动失败\"></p>\n<p>查看日志看到如异常（日志文件在 hadoop logs目录下）<br><img src=\"003vMReezy6P1O1zJBg32&amp;690.jpg\" alt=\"查看日志\"><br>这个问题主要是因为Master节点clusterID 和Slave节点clusterID 号不一致导致解决办法就是删除在core-site.xml中配置的hadoop.tmp.dir 的/home/hadoop/tmp目录下所有文件重新启动就ok了</p>"},{"title":"Nginx+Tomcat集群","date":"2014-12-10T06:35:40.000Z","comments":1,"toc":true,"_content":"## 环境\n|系统\t  |  JDK    |Tomcat    |Nginx                                      |\n|:-------:|:-------:|:--------:|:-----------------------------------------:|\n|CentOS6 192.168.1.231 CentOS6 192.168.1.232  |JDK1.6   |Tomcat6   |nginx-release-centos-6-0.el6.ngx.noarch.rpm|\n## 安装JDK\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n<!--more-->\n```\nshell rpm -qa | grep java*\n```\n第二步：查看yum库是否有java安装包\n```\nshell  yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n显示如上信息表示安装成功\n```\n\n## 安装Nginx\n***通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异***\n\n### 下载安装包\n```\nshell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n```\n\n### 查看nginx信息\n```\nshell yum info nginx\n\nLoaded plugins: fastestmirror, refresh-packagekit, security\nLoading mirror speeds from cached hostfile\n * base: mirrors.yun-idc.com\n * extras: mirrors.yun-idc.com\n * updates: mirrors.yun-idc.com\nnginx                                                                    | 2.9 kB     00:00    \nnginx/primary_db                                                         |  33 kB     00:00    \nAvailable Packages\nName        : nginx\nArch        : i386\nVersion     : 1.6.2\nRelease     : 1.el6.ngx\nSize        : 343 k\nRepo        : nginx\nSummary     : High performance web server\nURL         : http://nginx.org/\nLicense     : 2-clause BSD-like license\nDescription : nginx [engine x] is an HTTP and reverse proxy server, as well as\n            : a mail proxy server.\n```\n\n### 安装\n```\nshell yum install nginx\n```\n### 启动\n```\nshell service nginx start\n```\n### 访问\n\nhttp://ip\n\n查找nginx安装目录\n```\nshell ps -ef |grep nginx\nroot      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf\nnginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  \nroot      2268  1922  0 22:50 pts/1    00:00:00 grep nginx\n```\n***如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开***\n\n## 安装Tomcat\n```\nshell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps\n```\n\n### 启动\n\n```\nshell service tomcat6 start\n```\n\n### 启动\n\n```\nshell service tomcat6 stop\n```\n\n### 重启\n\n```\nshell service tomcat6 restart\n```\n\n按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下\n配置文件默认目录在/etc/tomcat6/下\n\n## 集群配置\n\n### 配置nginx.conf\n***在http{}中添加***\n```\nupstream cluster{\n server 192.168.1.231:8080 weight=2;\n server 192.168.1.232:8080 weight=1;\n}\n```\ncluster这个名称可以随便起\nweight参数表示权值，权值越高被分配到的几率越大\nserver 192.168.1.231:8080; 就是一个tomcat节点\n***在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中***\n```\nlocation ~ \\.jsp$ {\n   proxy_pass   http://cluster;\n}\n```\n\n如果想对根进行设置只需要对\n\n```\nlocation / {\n root   /usr/share/nginx/html;\n index  index.html index.html;\n}\n修改为\nlocation / {\n proxy_set_header Host $host;\n proxy_pass  http://cluster;\n}\n即可\n```\n\n复杂点的设置如下\n\n```\nlocation / {\n proxy_pass  http://cluster;\n proxy_redirect          off;\n proxy_set_header        Host $host;\n proxy_set_header        X-Real-IP $remote_addr;\n proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n client_max_body_size    10m;\n client_body_buffer_size 128k;\n proxy_connect_timeout   90;\n proxy_send_timeout      90;\n proxy_read_timeout      90;\n proxy_buffer_size       4k;\n proxy_buffers           4 32k;\n proxy_busy_buffers_size 64k;\n proxy_temp_file_write_size 64k;\n}\n```\n\n### nginx.conf文件说明\n```\n#nginx用户\nuser  nginx;\n#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx\nworker_processes  1;\n#错误文件日志路径\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n#对应每个processes允许最大的连接数\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多\n\tupstream cluster{\n\t  server 192.168.1.231:8080 weight=1;\n\t  server 192.168.1.240:8080 weight=2;\n\t}\n\t#nginx服务器配置\n    server {\n\t\t#监听端口\n\t\tlisten       80;\n\t\t#服务器名称\n\t    server_name  localhost;\n\n\t\t#charset koi8-r;\n\t\t#access_log  /var/log/nginx/log/host.access.log  main;\n\t    #对于请求跟路径时候的处理\n\t\tlocation / {\n\t\t   root   /usr/share/nginx/html;\n\t\t   index  index.html index.htm;\n\t\t   proxy_set_header Host $host;\n\t\t   proxy_pass  http://cluster;\n\t\t}\n\n\t    #error_page  404              /404.html;\n\n\t    # redirect server error pages to the static page /50x.html\n\n\t    error_page   500 502 503 504  /50x.html;\n\t    location = /50x.html {\n\t\t\troot   /usr/share/nginx/html;\n\t\t\t#proxy_pass   http://cluster;\n\t\t}\n\t    #设置对于请求jsp时候的处理\n\t    location ~ \\.jsp$ {\n\t\t\tproxy_pass   http://cluster;\n\t\t}\n\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    proxy_pass   http://127.0.0.1;\n\t    #}\n\n\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    root           html;\n\t    #    fastcgi_pass   127.0.0.1:9000;\n\t    #    fastcgi_index  index.php;\n\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\t    #    include        fastcgi_params;\n\t    #}\n\n\t    # deny access to .htaccess files, if Apache's document root\n\t    # concurs with nginx's one\n\t    #\n\t    #location ~ /\\.ht {\n\t    #    deny  all;\n\t    #}\n\t}\n}\n```\n\n### Tomcat配置\n打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置[具体说明查看官方文档](https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html)\n```xml\n <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"\n\t\t\t channelSendOptions=\"8\">\n\n  <Manager className=\"org.apache.catalina.ha.session.DeltaManager\"\n\t\t   expireSessionsOnShutdown=\"false\"\n\t\t   notifyListenersOnReplication=\"true\"/>\n\n  <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n\t<Membership className=\"org.apache.catalina.tribes.membership.McastService\"\n\t\t\t\taddress=\"228.0.0.4\"\n\t\t\t\tport=\"45564\"\n\t\t\t\tfrequency=\"500\"\n\t\t\t\tdropTime=\"3000\"/>\n\t<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t\t  address=\"auto\"\n\t\t\t  port=\"4000\"\n\t\t\t  autoBind=\"100\"\n\t\t\t  selectorTimeout=\"5000\"\n\t\t\t  maxThreads=\"6\"/>\n\n\t<Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n\t  <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n\t</Sender>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"/>\n  </Channel>\n\n  <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\"\n\t\t filter=\"\"/>\n  <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n\n  <Deployer className=\"org.apache.catalina.ha.deploy.FarmWarDeployer\"\n\t\t\ttempDir=\"/tmp/war-temp/\"\n\t\t\tdeployDir=\"/tmp/war-deploy/\"\n\t\t\twatchDir=\"/tmp/war-listen/\"\n\t\t\twatchEnabled=\"false\"/>\n\n  <ClusterListener className=\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"/>\n  <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n</Cluster>   \n```\n\n```xml\n将\n<Engine name=\"Catalina\" defaultHost=\"localhost\"> \n添加jvmRoute属性\n<Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"node01\" > \n注意其他节点JvmRoute要分别不一样\n```\n在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app>\n   <distributable/>\n</web-app>\n```\n然后启动服务器发现控制台打印\n![控制台打印](003vMReezy6OUXDo7kt61&690.jpg)\n```\n信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.\n一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind\n信息: Receiver Server Socket bound to:/127.0.0.1:4000\n一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\n警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00\n```\n\n表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP\n将节点Receiver 属性address=\"auto\"改为服务器局域网IP如下；其他节点也要做相应的改动\n```xml\n<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t  address=\"192.168.1.231\"\n\t\t  port=\"4000\"\n\t\t  autoBind=\"100\"\n\t\t  selectorTimeout=\"5000\"\n\t\t  maxThreads=\"6\"/>\n```\n再次启动服务器发现可以找到了其他的节点了\n\n然后启动nginx 访问nginx http://192.168.1.228/demo/分别打印\n```\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1\n```\n\n可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。\n\n***注意：***\n不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。","source":"_posts/Nginx+Tomcat集群.md","raw":"---\ntitle: Nginx+Tomcat集群\ndate: 2014-12-10 14:35:40\ncomments: true\ncategories: Tomcat\ntoc: true \n---\n## 环境\n|系统\t  |  JDK    |Tomcat    |Nginx                                      |\n|:-------:|:-------:|:--------:|:-----------------------------------------:|\n|CentOS6 192.168.1.231 CentOS6 192.168.1.232  |JDK1.6   |Tomcat6   |nginx-release-centos-6-0.el6.ngx.noarch.rpm|\n## 安装JDK\n第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名\n<!--more-->\n```\nshell rpm -qa | grep java*\n```\n第二步：查看yum库是否有java安装包\n```\nshell  yum -y list java*\n```\n第三步：选择一个进行安装\n```\nshell yum -y install java-1.6.0-openjdk*\n```\n第四步：确定是否安装成功\n```\nshell java -version\njava version \"1.6.0_20\"\nOpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)\nOpenJDK Client VM (build 19.0-b09, mixed mode)\n显示如上信息表示安装成功\n```\n\n## 安装Nginx\n***通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异***\n\n### 下载安装包\n```\nshell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n```\n\n### 查看nginx信息\n```\nshell yum info nginx\n\nLoaded plugins: fastestmirror, refresh-packagekit, security\nLoading mirror speeds from cached hostfile\n * base: mirrors.yun-idc.com\n * extras: mirrors.yun-idc.com\n * updates: mirrors.yun-idc.com\nnginx                                                                    | 2.9 kB     00:00    \nnginx/primary_db                                                         |  33 kB     00:00    \nAvailable Packages\nName        : nginx\nArch        : i386\nVersion     : 1.6.2\nRelease     : 1.el6.ngx\nSize        : 343 k\nRepo        : nginx\nSummary     : High performance web server\nURL         : http://nginx.org/\nLicense     : 2-clause BSD-like license\nDescription : nginx [engine x] is an HTTP and reverse proxy server, as well as\n            : a mail proxy server.\n```\n\n### 安装\n```\nshell yum install nginx\n```\n### 启动\n```\nshell service nginx start\n```\n### 访问\n\nhttp://ip\n\n查找nginx安装目录\n```\nshell ps -ef |grep nginx\nroot      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf\nnginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  \nroot      2268  1922  0 22:50 pts/1    00:00:00 grep nginx\n```\n***如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开***\n\n## 安装Tomcat\n```\nshell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps\n```\n\n### 启动\n\n```\nshell service tomcat6 start\n```\n\n### 启动\n\n```\nshell service tomcat6 stop\n```\n\n### 重启\n\n```\nshell service tomcat6 restart\n```\n\n按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下\n配置文件默认目录在/etc/tomcat6/下\n\n## 集群配置\n\n### 配置nginx.conf\n***在http{}中添加***\n```\nupstream cluster{\n server 192.168.1.231:8080 weight=2;\n server 192.168.1.232:8080 weight=1;\n}\n```\ncluster这个名称可以随便起\nweight参数表示权值，权值越高被分配到的几率越大\nserver 192.168.1.231:8080; 就是一个tomcat节点\n***在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中***\n```\nlocation ~ \\.jsp$ {\n   proxy_pass   http://cluster;\n}\n```\n\n如果想对根进行设置只需要对\n\n```\nlocation / {\n root   /usr/share/nginx/html;\n index  index.html index.html;\n}\n修改为\nlocation / {\n proxy_set_header Host $host;\n proxy_pass  http://cluster;\n}\n即可\n```\n\n复杂点的设置如下\n\n```\nlocation / {\n proxy_pass  http://cluster;\n proxy_redirect          off;\n proxy_set_header        Host $host;\n proxy_set_header        X-Real-IP $remote_addr;\n proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n client_max_body_size    10m;\n client_body_buffer_size 128k;\n proxy_connect_timeout   90;\n proxy_send_timeout      90;\n proxy_read_timeout      90;\n proxy_buffer_size       4k;\n proxy_buffers           4 32k;\n proxy_busy_buffers_size 64k;\n proxy_temp_file_write_size 64k;\n}\n```\n\n### nginx.conf文件说明\n```\n#nginx用户\nuser  nginx;\n#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx\nworker_processes  1;\n#错误文件日志路径\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n#对应每个processes允许最大的连接数\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多\n\tupstream cluster{\n\t  server 192.168.1.231:8080 weight=1;\n\t  server 192.168.1.240:8080 weight=2;\n\t}\n\t#nginx服务器配置\n    server {\n\t\t#监听端口\n\t\tlisten       80;\n\t\t#服务器名称\n\t    server_name  localhost;\n\n\t\t#charset koi8-r;\n\t\t#access_log  /var/log/nginx/log/host.access.log  main;\n\t    #对于请求跟路径时候的处理\n\t\tlocation / {\n\t\t   root   /usr/share/nginx/html;\n\t\t   index  index.html index.htm;\n\t\t   proxy_set_header Host $host;\n\t\t   proxy_pass  http://cluster;\n\t\t}\n\n\t    #error_page  404              /404.html;\n\n\t    # redirect server error pages to the static page /50x.html\n\n\t    error_page   500 502 503 504  /50x.html;\n\t    location = /50x.html {\n\t\t\troot   /usr/share/nginx/html;\n\t\t\t#proxy_pass   http://cluster;\n\t\t}\n\t    #设置对于请求jsp时候的处理\n\t    location ~ \\.jsp$ {\n\t\t\tproxy_pass   http://cluster;\n\t\t}\n\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    proxy_pass   http://127.0.0.1;\n\t    #}\n\n\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t    #\n\t    #location ~ \\.php$ {\n\t    #    root           html;\n\t    #    fastcgi_pass   127.0.0.1:9000;\n\t    #    fastcgi_index  index.php;\n\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\t    #    include        fastcgi_params;\n\t    #}\n\n\t    # deny access to .htaccess files, if Apache's document root\n\t    # concurs with nginx's one\n\t    #\n\t    #location ~ /\\.ht {\n\t    #    deny  all;\n\t    #}\n\t}\n}\n```\n\n### Tomcat配置\n打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置[具体说明查看官方文档](https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html)\n```xml\n <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"\n\t\t\t channelSendOptions=\"8\">\n\n  <Manager className=\"org.apache.catalina.ha.session.DeltaManager\"\n\t\t   expireSessionsOnShutdown=\"false\"\n\t\t   notifyListenersOnReplication=\"true\"/>\n\n  <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n\t<Membership className=\"org.apache.catalina.tribes.membership.McastService\"\n\t\t\t\taddress=\"228.0.0.4\"\n\t\t\t\tport=\"45564\"\n\t\t\t\tfrequency=\"500\"\n\t\t\t\tdropTime=\"3000\"/>\n\t<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t\t  address=\"auto\"\n\t\t\t  port=\"4000\"\n\t\t\t  autoBind=\"100\"\n\t\t\t  selectorTimeout=\"5000\"\n\t\t\t  maxThreads=\"6\"/>\n\n\t<Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n\t  <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n\t</Sender>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n\t<Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"/>\n  </Channel>\n\n  <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\"\n\t\t filter=\"\"/>\n  <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n\n  <Deployer className=\"org.apache.catalina.ha.deploy.FarmWarDeployer\"\n\t\t\ttempDir=\"/tmp/war-temp/\"\n\t\t\tdeployDir=\"/tmp/war-deploy/\"\n\t\t\twatchDir=\"/tmp/war-listen/\"\n\t\t\twatchEnabled=\"false\"/>\n\n  <ClusterListener className=\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"/>\n  <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n</Cluster>   \n```\n\n```xml\n将\n<Engine name=\"Catalina\" defaultHost=\"localhost\"> \n添加jvmRoute属性\n<Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"node01\" > \n注意其他节点JvmRoute要分别不一样\n```\n在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app>\n   <distributable/>\n</web-app>\n```\n然后启动服务器发现控制台打印\n![控制台打印](003vMReezy6OUXDo7kt61&690.jpg)\n```\n信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.\n一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind\n信息: Receiver Server Socket bound to:/127.0.0.1:4000\n一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions\n警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00\n```\n\n表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP\n将节点Receiver 属性address=\"auto\"改为服务器局域网IP如下；其他节点也要做相应的改动\n```xml\n<Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n\t\t  address=\"192.168.1.231\"\n\t\t  port=\"4000\"\n\t\t  autoBind=\"100\"\n\t\t  selectorTimeout=\"5000\"\n\t\t  maxThreads=\"6\"/>\n```\n再次启动服务器发现可以找到了其他的节点了\n\n然后启动nginx 访问nginx http://192.168.1.228/demo/分别打印\n```\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2\nHello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1\n```\n\n可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。\n\n***注意：***\n不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。","slug":"Nginx+Tomcat集群","published":1,"updated":"2016-05-13T13:44:39.914Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmq000y50ybrcn7k4v9","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统</th>\n<th style=\"text-align:center\">JDK</th>\n<th style=\"text-align:center\">Tomcat</th>\n<th style=\"text-align:center\">Nginx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CentOS6 192.168.1.231 CentOS6 192.168.1.232</td>\n<td style=\"text-align:center\">JDK1.6</td>\n<td style=\"text-align:center\">Tomcat6</td>\n<td style=\"text-align:center\">nginx-release-centos-6-0.el6.ngx.noarch.rpm</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa | grep java*</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell  yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br><span class=\"line\">显示如上信息表示安装成功</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p><strong><em>通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异</em></strong></p>\n<h3 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx信息\"><a href=\"#查看nginx信息\" class=\"headerlink\" title=\"查看nginx信息\"></a>查看nginx信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum info nginx</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded plugins: fastestmirror, refresh-packagekit, security</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.yun-idc.com</span><br><span class=\"line\"> * extras: mirrors.yun-idc.com</span><br><span class=\"line\"> * updates: mirrors.yun-idc.com</span><br><span class=\"line\">nginx                                                                    | 2.9 kB     00:00    </span><br><span class=\"line\">nginx/primary_db                                                         |  33 kB     00:00    </span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name        : nginx</span><br><span class=\"line\">Arch        : i386</span><br><span class=\"line\">Version     : 1.6.2</span><br><span class=\"line\">Release     : 1.el6.ngx</span><br><span class=\"line\">Size        : 343 k</span><br><span class=\"line\">Repo        : nginx</span><br><span class=\"line\">Summary     : High performance web server</span><br><span class=\"line\">URL         : http://nginx.org/</span><br><span class=\"line\">License     : 2-clause BSD-like license</span><br><span class=\"line\">Description : nginx [engine x] is an HTTP and reverse proxy server, as well as</span><br><span class=\"line\">            : a mail proxy server.</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p><a href=\"http://ip\" target=\"_blank\" rel=\"external\">http://ip</a></p>\n<p>查找nginx安装目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ps -ef |grep nginx</span><br><span class=\"line\">root      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  </span><br><span class=\"line\">root      2268  1922  0 22:50 pts/1    00:00:00 grep nginx</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开</em></strong></p>\n<h2 id=\"安装Tomcat\"><a href=\"#安装Tomcat\" class=\"headerlink\" title=\"安装Tomcat\"></a>安装Tomcat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 start</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-2\"><a href=\"#启动-2\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 restart</span><br></pre></td></tr></table></figure>\n<p>按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下<br>配置文件默认目录在/etc/tomcat6/下</p>\n<h2 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h2><h3 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h3><p><strong><em>在http{}中添加</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream cluster&#123;</span><br><span class=\"line\"> server 192.168.1.231:8080 weight=2;</span><br><span class=\"line\"> server 192.168.1.232:8080 weight=1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>cluster这个名称可以随便起<br>weight参数表示权值，权值越高被分配到的几率越大<br>server 192.168.1.231:8080; 就是一个tomcat节点<br><strong><em>在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.jsp$ &#123;</span><br><span class=\"line\">   proxy_pass   http://cluster;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想对根进行设置只需要对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> root   /usr/share/nginx/html;</span><br><span class=\"line\"> index  index.html index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">修改为</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_set_header Host $host;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">即可</span><br></pre></td></tr></table></figure>\n<p>复杂点的设置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\"> proxy_redirect          off;</span><br><span class=\"line\"> proxy_set_header        Host $host;</span><br><span class=\"line\"> proxy_set_header        X-Real-IP $remote_addr;</span><br><span class=\"line\"> proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"> client_max_body_size    10m;</span><br><span class=\"line\"> client_body_buffer_size 128k;</span><br><span class=\"line\"> proxy_connect_timeout   90;</span><br><span class=\"line\"> proxy_send_timeout      90;</span><br><span class=\"line\"> proxy_read_timeout      90;</span><br><span class=\"line\"> proxy_buffer_size       4k;</span><br><span class=\"line\"> proxy_buffers           4 32k;</span><br><span class=\"line\"> proxy_busy_buffers_size 64k;</span><br><span class=\"line\"> proxy_temp_file_write_size 64k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件说明\"><a href=\"#nginx-conf文件说明\" class=\"headerlink\" title=\"nginx.conf文件说明\"></a>nginx.conf文件说明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nginx用户</span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">#错误文件日志路径</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">#对应每个processes允许最大的连接数</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多</span><br><span class=\"line\">\tupstream cluster&#123;</span><br><span class=\"line\">\t  server 192.168.1.231:8080 weight=1;</span><br><span class=\"line\">\t  server 192.168.1.240:8080 weight=2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#nginx服务器配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">\t\t#监听端口</span><br><span class=\"line\">\t\tlisten       80;</span><br><span class=\"line\">\t\t#服务器名称</span><br><span class=\"line\">\t    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t#charset koi8-r;</span><br><span class=\"line\">\t\t#access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\">\t    #对于请求跟路径时候的处理</span><br><span class=\"line\">\t\tlocation / &#123;</span><br><span class=\"line\">\t\t   root   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t   index  index.html index.htm;</span><br><span class=\"line\">\t\t   proxy_set_header Host $host;</span><br><span class=\"line\">\t\t   proxy_pass  http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\"></span><br><span class=\"line\">\t    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">\t    location = /50x.html &#123;</span><br><span class=\"line\">\t\t\troot   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t\t#proxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    #设置对于请求jsp时候的处理</span><br><span class=\"line\">\t    location ~ \\.jsp$ &#123;</span><br><span class=\"line\">\t\t\tproxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    root           html;</span><br><span class=\"line\">\t    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">\t    #    fastcgi_index  index.php;</span><br><span class=\"line\">\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">\t    #    include        fastcgi_params;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">\t    # concurs with nginx&apos;s one</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ /\\.ht &#123;</span><br><span class=\"line\">\t    #    deny  all;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tomcat配置\"><a href=\"#Tomcat配置\" class=\"headerlink\" title=\"Tomcat配置\"></a>Tomcat配置</h3><p>打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置<a href=\"https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html\" target=\"_blank\" rel=\"external\">具体说明查看官方文档</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Cluster</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"</span></span><br><span class=\"line\">\t\t\t <span class=\"attr\">channelSendOptions</span>=<span class=\"string\">\"8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.DeltaManager\"</span></span><br><span class=\"line\">\t\t   <span class=\"attr\">expireSessionsOnShutdown</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t\t   <span class=\"attr\">notifyListenersOnReplication</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Channel</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.GroupChannel\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Membership</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.membership.McastService\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">address</span>=<span class=\"string\">\"228.0.0.4\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">port</span>=<span class=\"string\">\"45564\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">frequency</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">dropTime</span>=<span class=\"string\">\"3000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"auto\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Sender</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.ReplicationTransmitter\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">Transport</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Sender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Channel</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.ReplicationValve\"</span></span><br><span class=\"line\">\t\t <span class=\"attr\">filter</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteBinderValve\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Deployer</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.deploy.FarmWarDeployer\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">tempDir</span>=<span class=\"string\">\"/tmp/war-temp/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">deployDir</span>=<span class=\"string\">\"/tmp/war-deploy/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchDir</span>=<span class=\"string\">\"/tmp/war-listen/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchEnabled</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.ClusterSessionListener\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Cluster</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span> </span><br><span class=\"line\">添加jvmRoute属性</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span> <span class=\"attr\">jvmRoute</span>=<span class=\"string\">\"node01\"</span> &gt;</span> </span><br><span class=\"line\">注意其他节点JvmRoute要分别不一样</span><br></pre></td></tr></table></figure>\n<p>在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">distributable</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后启动服务器发现控制台打印<br><img src=\"003vMReezy6OUXDo7kt61&amp;690.jpg\" alt=\"控制台打印\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.</span><br><span class=\"line\">一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind</span><br><span class=\"line\">信息: Receiver Server Socket bound to:/127.0.0.1:4000</span><br><span class=\"line\">一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions</span><br><span class=\"line\">警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00</span><br></pre></td></tr></table></figure></p>\n<p>表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP<br>将节点Receiver 属性address=”auto”改为服务器局域网IP如下；其他节点也要做相应的改动<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"192.168.1.231\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>再次启动服务器发现可以找到了其他的节点了</p>\n<p>然后启动nginx 访问nginx <a href=\"http://192.168.1.228/demo/分别打印\" target=\"_blank\" rel=\"external\">http://192.168.1.228/demo/分别打印</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2</span><br><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1</span><br></pre></td></tr></table></figure></p>\n<p>可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。</p>\n<p><strong><em>注意：</em></strong><br>不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。</p>\n","excerpt":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统</th>\n<th style=\"text-align:center\">JDK</th>\n<th style=\"text-align:center\">Tomcat</th>\n<th style=\"text-align:center\">Nginx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CentOS6 192.168.1.231 CentOS6 192.168.1.232</td>\n<td style=\"text-align:center\">JDK1.6</td>\n<td style=\"text-align:center\">Tomcat6</td>\n<td style=\"text-align:center\">nginx-release-centos-6-0.el6.ngx.noarch.rpm</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>第一步：检查是否已经安装了jdk 存在就卸载 rpm -e 包名<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -qa | grep java*</span><br></pre></td></tr></table></figure></p>\n<p>第二步：查看yum库是否有java安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell  yum -y list java*</span><br></pre></td></tr></table></figure></p>\n<p>第三步：选择一个进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum -y install java-1.6.0-openjdk*</span><br></pre></td></tr></table></figure></p>\n<p>第四步：确定是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell java -version</span><br><span class=\"line\">java version &quot;1.6.0_20&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (IcedTea6 1.9.10) (rhel-1.23.1.9.10.el5_7-i386)</span><br><span class=\"line\">OpenJDK Client VM (build 19.0-b09, mixed mode)</span><br><span class=\"line\">显示如上信息表示安装成功</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p><strong><em>通过yum安装nginx 针对 CentOS系统 其他版本可能会存在差异</em></strong></p>\n<h3 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看nginx信息\"><a href=\"#查看nginx信息\" class=\"headerlink\" title=\"查看nginx信息\"></a>查看nginx信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum info nginx</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded plugins: fastestmirror, refresh-packagekit, security</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.yun-idc.com</span><br><span class=\"line\"> * extras: mirrors.yun-idc.com</span><br><span class=\"line\"> * updates: mirrors.yun-idc.com</span><br><span class=\"line\">nginx                                                                    | 2.9 kB     00:00    </span><br><span class=\"line\">nginx/primary_db                                                         |  33 kB     00:00    </span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name        : nginx</span><br><span class=\"line\">Arch        : i386</span><br><span class=\"line\">Version     : 1.6.2</span><br><span class=\"line\">Release     : 1.el6.ngx</span><br><span class=\"line\">Size        : 343 k</span><br><span class=\"line\">Repo        : nginx</span><br><span class=\"line\">Summary     : High performance web server</span><br><span class=\"line\">URL         : http://nginx.org/</span><br><span class=\"line\">License     : 2-clause BSD-like license</span><br><span class=\"line\">Description : nginx [engine x] is an HTTP and reverse proxy server, as well as</span><br><span class=\"line\">            : a mail proxy server.</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p><a href=\"http://ip\">http://ip</a></p>\n<p>查找nginx安装目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell ps -ef |grep nginx</span><br><span class=\"line\">root      2244     1  0 22:45 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx     2245  2244  0 22:45 ?        00:00:00 nginx: worker process                  </span><br><span class=\"line\">root      2268  1922  0 22:50 pts/1    00:00:00 grep nginx</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>如果不能连接到nginx，原因很多，但是可以先检查 1,nginx服务是否真的起来了；2,linux服务器防火墙是否打开</em></strong></p>\n<h2 id=\"安装Tomcat\"><a href=\"#安装Tomcat\" class=\"headerlink\" title=\"安装Tomcat\"></a>安装Tomcat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install tomcat6 tomcat6-webapps tomcat6-admin-webapps</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 start</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-2\"><a href=\"#启动-2\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service tomcat6 restart</span><br></pre></td></tr></table></figure>\n<p>按照以上方法安装tomcat6默认目录在/usr/share/tomcat6/下<br>配置文件默认目录在/etc/tomcat6/下</p>\n<h2 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h2><h3 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h3><p><strong><em>在http{}中添加</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream cluster&#123;</span><br><span class=\"line\"> server 192.168.1.231:8080 weight=2;</span><br><span class=\"line\"> server 192.168.1.232:8080 weight=1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>cluster这个名称可以随便起<br>weight参数表示权值，权值越高被分配到的几率越大<br>server 192.168.1.231:8080; 就是一个tomcat节点<br><strong><em>在server{}中添加如下配置 表示对于访问.jsp的页面使用代理服务器跳转到tomcat节点中</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.jsp$ &#123;</span><br><span class=\"line\">   proxy_pass   http://cluster;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果想对根进行设置只需要对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> root   /usr/share/nginx/html;</span><br><span class=\"line\"> index  index.html index.html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">修改为</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_set_header Host $host;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">即可</span><br></pre></td></tr></table></figure>\n<p>复杂点的设置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\"> proxy_pass  http://cluster;</span><br><span class=\"line\"> proxy_redirect          off;</span><br><span class=\"line\"> proxy_set_header        Host $host;</span><br><span class=\"line\"> proxy_set_header        X-Real-IP $remote_addr;</span><br><span class=\"line\"> proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"> client_max_body_size    10m;</span><br><span class=\"line\"> client_body_buffer_size 128k;</span><br><span class=\"line\"> proxy_connect_timeout   90;</span><br><span class=\"line\"> proxy_send_timeout      90;</span><br><span class=\"line\"> proxy_read_timeout      90;</span><br><span class=\"line\"> proxy_buffer_size       4k;</span><br><span class=\"line\"> proxy_buffers           4 32k;</span><br><span class=\"line\"> proxy_busy_buffers_size 64k;</span><br><span class=\"line\"> proxy_temp_file_write_size 64k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件说明\"><a href=\"#nginx-conf文件说明\" class=\"headerlink\" title=\"nginx.conf文件说明\"></a>nginx.conf文件说明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nginx用户</span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">#nginx进程数字越大对于处理并发能力越强如果设置2就相当于开启了两个nginx</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">#错误文件日志路径</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">#对应每个processes允许最大的连接数</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">\t#负载均衡控制 server 对应集群的一个个节点weight表示权重值数字越大出现的次数越多</span><br><span class=\"line\">\tupstream cluster&#123;</span><br><span class=\"line\">\t  server 192.168.1.231:8080 weight=1;</span><br><span class=\"line\">\t  server 192.168.1.240:8080 weight=2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#nginx服务器配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">\t\t#监听端口</span><br><span class=\"line\">\t\tlisten       80;</span><br><span class=\"line\">\t\t#服务器名称</span><br><span class=\"line\">\t    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t#charset koi8-r;</span><br><span class=\"line\">\t\t#access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\">\t    #对于请求跟路径时候的处理</span><br><span class=\"line\">\t\tlocation / &#123;</span><br><span class=\"line\">\t\t   root   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t   index  index.html index.htm;</span><br><span class=\"line\">\t\t   proxy_set_header Host $host;</span><br><span class=\"line\">\t\t   proxy_pass  http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\"></span><br><span class=\"line\">\t    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">\t    location = /50x.html &#123;</span><br><span class=\"line\">\t\t\troot   /usr/share/nginx/html;</span><br><span class=\"line\">\t\t\t#proxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    #设置对于请求jsp时候的处理</span><br><span class=\"line\">\t    location ~ \\.jsp$ &#123;</span><br><span class=\"line\">\t\t\tproxy_pass   http://cluster;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ \\.php$ &#123;</span><br><span class=\"line\">\t    #    root           html;</span><br><span class=\"line\">\t    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">\t    #    fastcgi_index  index.php;</span><br><span class=\"line\">\t    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">\t    #    include        fastcgi_params;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">\t    # concurs with nginx&apos;s one</span><br><span class=\"line\">\t    #</span><br><span class=\"line\">\t    #location ~ /\\.ht &#123;</span><br><span class=\"line\">\t    #    deny  all;</span><br><span class=\"line\">\t    #&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tomcat配置\"><a href=\"#Tomcat配置\" class=\"headerlink\" title=\"Tomcat配置\"></a>Tomcat配置</h3><p>打开tomcat的文档查看集群说明将集群配置如下 复制到tomcat\\conf\\server.xml文件 Engine节点下添加如下配置<a href=\"https://tomcat.apache.org/tomcat-6.0-doc/cluster-howto.html\">具体说明查看官方文档</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">Cluster</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"</span></span><br><span class=\"line\">\t\t\t <span class=\"attr\">channelSendOptions</span>=<span class=\"string\">\"8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Manager</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.DeltaManager\"</span></span><br><span class=\"line\">\t\t   <span class=\"attr\">expireSessionsOnShutdown</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t\t   <span class=\"attr\">notifyListenersOnReplication</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Channel</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.GroupChannel\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Membership</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.membership.McastService\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">address</span>=<span class=\"string\">\"228.0.0.4\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">port</span>=<span class=\"string\">\"45564\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">frequency</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">dropTime</span>=<span class=\"string\">\"3000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"auto\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Sender</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.ReplicationTransmitter\"</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">Transport</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Sender</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Interceptor</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Channel</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.tcp.ReplicationValve\"</span></span><br><span class=\"line\">\t\t <span class=\"attr\">filter</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteBinderValve\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Deployer</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.deploy.FarmWarDeployer\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">tempDir</span>=<span class=\"string\">\"/tmp/war-temp/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">deployDir</span>=<span class=\"string\">\"/tmp/war-deploy/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchDir</span>=<span class=\"string\">\"/tmp/war-listen/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">watchEnabled</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ClusterListener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.ha.session.ClusterSessionListener\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Cluster</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span> </span><br><span class=\"line\">添加jvmRoute属性</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span> <span class=\"attr\">jvmRoute</span>=<span class=\"string\">\"node01\"</span> &gt;</span> </span><br><span class=\"line\">注意其他节点JvmRoute要分别不一样</span><br></pre></td></tr></table></figure>\n<p>在将应用的web.xml 文件末尾添加  distributable元素 如下表示这个应用下的session是可以共享的<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">distributable</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后启动服务器发现控制台打印<br><img src=\"003vMReezy6OUXDo7kt61&amp;690.jpg\" alt=\"控制台打印\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信息: Manager [localhost#/demo]: skipping state transfer. No members active in cluster group.</span><br><span class=\"line\">一月 04, 2015 7:55:30 下午 org.apache.catalina.tribes.transport.ReceiverBase bind</span><br><span class=\"line\">信息: Receiver Server Socket bound to:/127.0.0.1:4000</span><br><span class=\"line\">一月 04, 2015 7:56:34 下午 org.apache.catalina.ha.session.DeltaManager getAllClusterSessions</span><br><span class=\"line\">警告: Manager [localhost#/demo]: Drop message SESSION-GET-ALL inside GET_ALL_SESSIONS sync phase start date 15-1-4 下午7:55 message date 70-1-1 上午8:00</span><br></pre></td></tr></table></figure></p>\n<p>表示没有发现其他的集群中的其他节点。接受Socket bind的IP是127.0.0.1所以我们需要将他改为局域网的IP<br>将节点Receiver 属性address=”auto”改为服务器局域网IP如下；其他节点也要做相应的改动<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Receiver</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.tribes.transport.nio.NioReceiver\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">address</span>=<span class=\"string\">\"192.168.1.231\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">port</span>=<span class=\"string\">\"4000\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">autoBind</span>=<span class=\"string\">\"100\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">selectorTimeout</span>=<span class=\"string\">\"5000\"</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"6\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>再次启动服务器发现可以找到了其他的节点了</p>\n<p>然后启动nginx 访问nginx <a href=\"http://192.168.1.228/demo/分别打印\">http://192.168.1.228/demo/分别打印</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node2</span><br><span class=\"line\">Hello World DF53CB7748D8BC67E0AB8A9BBA13048F.node1</span><br></pre></td></tr></table></figure></p>\n<p>可以看出在node2节点设置的 Hello World在node1、node2上分别获取到了表示配置tomcat的session共享已经成功，如果仅是sessionId相同并不能表示session共享成功，因为通过一个相同的IP和端口访问的服务器都会把cookie中的sessionid发送给服务器。</p>\n<p><strong><em>注意：</em></strong><br>不要单独去访问某一台服务器这样是不能验证session是否配置成功。因为访问单独的服务器在浏览器输入的ip和端口是不一样的，浏览器是不会把访问其他服务器的cookie自动带上发送给服务器。所以通过单独访问每次打印的sessionId肯定是不一样的。</p>"},{"title":"Web应用组件化的权衡","date":"2016-05-16T15:11:33.000Z","comments":1,"toc":true,"_content":"\n## 基本概念\n### 什么是Web应用？\n所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。\n主要包括：\n    交互占比较高的页面体系\n    以各种Hybrid技术构建的应用，其中的Web部分\n<!--more-->\n### 组件化开发的优势是什么？\n组件化的最重要作用就是提升开发和维护的效率。\n最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。\n\n### 在Web应用中，组件化一般指什么？\n在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。\n\n### 在Web应用中，组件化的主要目标是什么？\n很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。\n分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。\n但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。\n所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。\n\n## 组件化应当做到什么程度？\n***一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？***\n对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。\n***组件属于资产还是耗材？模板呢？***\n按照上面的分类，组件明显属于资产，而模板一般属于耗材。\n在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。\n***大部分Web应用中，资产多一些，还是耗材多一些？***\n大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。\n***大部分Web应用都适合“全”组件化吗？***\n这个问题要从几个方面回答：\n\n☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。\n\n☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。\n\n☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。\n\n***组件与模板的对比***\n在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。\n但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板\n在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：\nHTML，CSS，JS，这三者里面，谁是整个Web工程的入口？\n展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。\n在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？\n从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。\n因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。\n\n## 组件化框架\n### 目前有哪些流行的组件化框架？\n我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。\n“MV*”：Angular，Vue等\n“反应式”：React，Reactive等\n标准增强：Polymer\n\n### 几个流派各自特点是什么？\nMV*: 分层，绑定\nReact: 组件化，单向数据流\n\n### React中一般的组件相当于MVVM流派中的什么？\n以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。\n但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。\nDirective可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。\nDirective和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。\n\n### 这些流派有共同的未来吗，会是什么？\n无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？\n这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。\n但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。\n而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。\n所以总的来说，各框架是趋同的。\n\n## 组件化的实践\n***一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？***\n当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。\n\n### 如何规划组件树的层级与组件的粒度？\n如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：\n***把什么视为组件，组件的粒度是怎样的。***\n在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。\n### 如何约定组件之间的通讯方式？\n在一个组件化的应用中，会存在组件之间的数据传递。\n以React为例，如果存在两级嵌套的组件：\n```html\n<TodoList>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n</TodoList>\n```\n这里面可能存在：\n直接对TodoList进行整组数据的赋值\n直接对某个TodoItem赋值\nTodoList对下属的TodoItem赋值\nTodoList和TodoItem自己去某个“全局”数据中读取配置项\n这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。\n那么，我们如何权衡两种数据通讯方式呢？\n一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。\n另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。\n从这里我们得出的结论是：\n并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。\n\n### 数据通讯层\n全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：\n数据同步\n请求的浪费\n另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。\n在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。\nFacebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。\n\n## 其他思考\n### 如何看待“可视化继承”？\n在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：\n```java\nclass CheckList extends List {\n}\n```\n我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？\n在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。\n我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。\n### 模板外置的组件实现方式\n在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。\n我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。\n还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：\n```html\n<ul class=\"list\">\n    <li></li>\n    <li class=\"selected\"></li>\n    <li></li>\n    <li></li>\n</ul>\n```\n然后对外的形式这样：\n```html\n<List data=\"arr\"></List>\n```\n或者这样：\n```html\n<List>\n    <ListItem data=\"aaa\"></ListItem>\n    <ListItem data=\"bbb\" selected></ListItem>\n    <ListItem data=\"ccc\"></ListItem>\n    <ListItem data=\"ddd\"></ListItem>\n</List>\n```\n然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。\n那我们就面临着几个选择：\n```html\n<List type=\"Tile\"></List>\n```\n加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。\n\n接着，我们来了对列表项的自定义需求：\n\n每个列表项带一个checkbox。\n列表可以设置有无表头。\n表头可以设置有无checkbox。\n如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。\ncheckbox需要可以设置显示在列表左侧还是右侧\n列表内容可以自定义文本格式化函数\n列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……\n然后，还要可以自定义样式…… ……\n\n所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：\n怎样让我们的组件既强大，又便于使用？\n面对此类场景，我想给出一个解决方案，那就是：\n把组件实现为一种插件平台\n针对组件的各种形态，将其特征分离出来当成一种插件\n\n\nAngular的模板即可起到轻量组件的作用，代码更精炼\nAngular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据\n\n对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。\n今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。\n\n\n### 模板的意义\n除了上面提到的，模板还有另外的意义。\n\n我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。\n但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。\n所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。\n此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。\n\n### HTML体系做组件化的不利因素\nHTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：\n标签没有命名空间\n有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。\n在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。\n另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：\n```html\n<Panel>\n  <Service/>\n</Panel>\n```\n如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：\n```html\n<Panel>\n  <Button></Button>\n</Panel>\n```\n同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。\n如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。\n如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：\nList下面就只能放ListItem类型的东西。\n\n### 再回头看Web Components\n我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。\n我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。\n比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。\n至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……\n\n在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。\n面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。\n\n## 小结\n看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。\n\n各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/22)","source":"_posts/Web应用组件化的权衡.md","raw":"---\ntitle: Web应用组件化的权衡\ndate: 2016-05-16 23:11:33 \ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n## 基本概念\n### 什么是Web应用？\n所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。\n主要包括：\n    交互占比较高的页面体系\n    以各种Hybrid技术构建的应用，其中的Web部分\n<!--more-->\n### 组件化开发的优势是什么？\n组件化的最重要作用就是提升开发和维护的效率。\n最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。\n\n### 在Web应用中，组件化一般指什么？\n在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。\n\n### 在Web应用中，组件化的主要目标是什么？\n很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。\n分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。\n但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。\n所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。\n\n## 组件化应当做到什么程度？\n***一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？***\n对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。\n***组件属于资产还是耗材？模板呢？***\n按照上面的分类，组件明显属于资产，而模板一般属于耗材。\n在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。\n***大部分Web应用中，资产多一些，还是耗材多一些？***\n大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。\n***大部分Web应用都适合“全”组件化吗？***\n这个问题要从几个方面回答：\n\n☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。\n\n☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。\n\n☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。\n\n***组件与模板的对比***\n在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。\n但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板\n在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：\nHTML，CSS，JS，这三者里面，谁是整个Web工程的入口？\n展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。\n在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？\n从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。\n因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。\n\n## 组件化框架\n### 目前有哪些流行的组件化框架？\n我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。\n“MV*”：Angular，Vue等\n“反应式”：React，Reactive等\n标准增强：Polymer\n\n### 几个流派各自特点是什么？\nMV*: 分层，绑定\nReact: 组件化，单向数据流\n\n### React中一般的组件相当于MVVM流派中的什么？\n以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。\n但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。\nDirective可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。\nDirective和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。\n\n### 这些流派有共同的未来吗，会是什么？\n无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？\n这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。\n但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。\n而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。\n所以总的来说，各框架是趋同的。\n\n## 组件化的实践\n***一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？***\n当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。\n\n### 如何规划组件树的层级与组件的粒度？\n如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：\n***把什么视为组件，组件的粒度是怎样的。***\n在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。\n### 如何约定组件之间的通讯方式？\n在一个组件化的应用中，会存在组件之间的数据传递。\n以React为例，如果存在两级嵌套的组件：\n```html\n<TodoList>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n    <TodoItem></TodoItem>\n</TodoList>\n```\n这里面可能存在：\n直接对TodoList进行整组数据的赋值\n直接对某个TodoItem赋值\nTodoList对下属的TodoItem赋值\nTodoList和TodoItem自己去某个“全局”数据中读取配置项\n这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。\n那么，我们如何权衡两种数据通讯方式呢？\n一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。\n另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。\n从这里我们得出的结论是：\n并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。\n\n### 数据通讯层\n全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：\n数据同步\n请求的浪费\n另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。\n在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。\nFacebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。\n\n## 其他思考\n### 如何看待“可视化继承”？\n在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：\n```java\nclass CheckList extends List {\n}\n```\n我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？\n在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。\n我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。\n### 模板外置的组件实现方式\n在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。\n我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。\n还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：\n```html\n<ul class=\"list\">\n    <li></li>\n    <li class=\"selected\"></li>\n    <li></li>\n    <li></li>\n</ul>\n```\n然后对外的形式这样：\n```html\n<List data=\"arr\"></List>\n```\n或者这样：\n```html\n<List>\n    <ListItem data=\"aaa\"></ListItem>\n    <ListItem data=\"bbb\" selected></ListItem>\n    <ListItem data=\"ccc\"></ListItem>\n    <ListItem data=\"ddd\"></ListItem>\n</List>\n```\n然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。\n那我们就面临着几个选择：\n```html\n<List type=\"Tile\"></List>\n```\n加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。\n\n接着，我们来了对列表项的自定义需求：\n\n每个列表项带一个checkbox。\n列表可以设置有无表头。\n表头可以设置有无checkbox。\n如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。\ncheckbox需要可以设置显示在列表左侧还是右侧\n列表内容可以自定义文本格式化函数\n列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……\n然后，还要可以自定义样式…… ……\n\n所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：\n怎样让我们的组件既强大，又便于使用？\n面对此类场景，我想给出一个解决方案，那就是：\n把组件实现为一种插件平台\n针对组件的各种形态，将其特征分离出来当成一种插件\n\n\nAngular的模板即可起到轻量组件的作用，代码更精炼\nAngular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据\n\n对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。\n今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。\n\n\n### 模板的意义\n除了上面提到的，模板还有另外的意义。\n\n我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。\n但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。\n所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。\n此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。\n\n### HTML体系做组件化的不利因素\nHTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：\n标签没有命名空间\n有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。\n在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。\n另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：\n```html\n<Panel>\n  <Service/>\n</Panel>\n```\n如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：\n```html\n<Panel>\n  <Button></Button>\n</Panel>\n```\n同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。\n如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。\n如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：\nList下面就只能放ListItem类型的东西。\n\n### 再回头看Web Components\n我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。\n我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。\n比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。\n至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……\n\n在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。\n面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。\n\n## 小结\n看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。\n\n各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/22)","slug":"Web应用组件化的权衡","published":1,"updated":"2016-05-16T15:34:35.926Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmq001050ybd7p33u8y","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"什么是Web应用？\"><a href=\"#什么是Web应用？\" class=\"headerlink\" title=\"什么是Web应用？\"></a>什么是Web应用？</h3><p>所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。<br>主要包括：<br>    交互占比较高的页面体系<br>    以各种Hybrid技术构建的应用，其中的Web部分<br><a id=\"more\"></a></p>\n<h3 id=\"组件化开发的优势是什么？\"><a href=\"#组件化开发的优势是什么？\" class=\"headerlink\" title=\"组件化开发的优势是什么？\"></a>组件化开发的优势是什么？</h3><p>组件化的最重要作用就是提升开发和维护的效率。<br>最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。</p>\n<h3 id=\"在Web应用中，组件化一般指什么？\"><a href=\"#在Web应用中，组件化一般指什么？\" class=\"headerlink\" title=\"在Web应用中，组件化一般指什么？\"></a>在Web应用中，组件化一般指什么？</h3><p>在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。</p>\n<h3 id=\"在Web应用中，组件化的主要目标是什么？\"><a href=\"#在Web应用中，组件化的主要目标是什么？\" class=\"headerlink\" title=\"在Web应用中，组件化的主要目标是什么？\"></a>在Web应用中，组件化的主要目标是什么？</h3><p>很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。<br>分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。<br>但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。<br>所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。</p>\n<h2 id=\"组件化应当做到什么程度？\"><a href=\"#组件化应当做到什么程度？\" class=\"headerlink\" title=\"组件化应当做到什么程度？\"></a>组件化应当做到什么程度？</h2><p><strong><em>一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？</em></strong><br>对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。<br><strong><em>组件属于资产还是耗材？模板呢？</em></strong><br>按照上面的分类，组件明显属于资产，而模板一般属于耗材。<br>在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。<br><strong><em>大部分Web应用中，资产多一些，还是耗材多一些？</em></strong><br>大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。<br><strong><em>大部分Web应用都适合“全”组件化吗？</em></strong><br>这个问题要从几个方面回答：</p>\n<p>☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。</p>\n<p>☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。</p>\n<p>☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。</p>\n<p><strong><em>组件与模板的对比</em></strong><br>在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。<br>但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板<br>在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：<br>HTML，CSS，JS，这三者里面，谁是整个Web工程的入口？<br>展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。<br>在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？<br>从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。<br>因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。</p>\n<h2 id=\"组件化框架\"><a href=\"#组件化框架\" class=\"headerlink\" title=\"组件化框架\"></a>组件化框架</h2><h3 id=\"目前有哪些流行的组件化框架？\"><a href=\"#目前有哪些流行的组件化框架？\" class=\"headerlink\" title=\"目前有哪些流行的组件化框架？\"></a>目前有哪些流行的组件化框架？</h3><p>我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。<br>“MV*”：Angular，Vue等<br>“反应式”：React，Reactive等<br>标准增强：Polymer</p>\n<h3 id=\"几个流派各自特点是什么？\"><a href=\"#几个流派各自特点是什么？\" class=\"headerlink\" title=\"几个流派各自特点是什么？\"></a>几个流派各自特点是什么？</h3><p>MV*: 分层，绑定<br>React: 组件化，单向数据流</p>\n<h3 id=\"React中一般的组件相当于MVVM流派中的什么？\"><a href=\"#React中一般的组件相当于MVVM流派中的什么？\" class=\"headerlink\" title=\"React中一般的组件相当于MVVM流派中的什么？\"></a>React中一般的组件相当于MVVM流派中的什么？</h3><p>以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。<br>但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。<br>Directive可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。<br>Directive和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。</p>\n<h3 id=\"这些流派有共同的未来吗，会是什么？\"><a href=\"#这些流派有共同的未来吗，会是什么？\" class=\"headerlink\" title=\"这些流派有共同的未来吗，会是什么？\"></a>这些流派有共同的未来吗，会是什么？</h3><p>无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？<br>这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。<br>但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。<br>而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。<br>所以总的来说，各框架是趋同的。</p>\n<h2 id=\"组件化的实践\"><a href=\"#组件化的实践\" class=\"headerlink\" title=\"组件化的实践\"></a>组件化的实践</h2><p><strong><em>一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？</em></strong><br>当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。</p>\n<h3 id=\"如何规划组件树的层级与组件的粒度？\"><a href=\"#如何规划组件树的层级与组件的粒度？\" class=\"headerlink\" title=\"如何规划组件树的层级与组件的粒度？\"></a>如何规划组件树的层级与组件的粒度？</h3><p>如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：<br><strong><em>把什么视为组件，组件的粒度是怎样的。</em></strong><br>在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。</p>\n<h3 id=\"如何约定组件之间的通讯方式？\"><a href=\"#如何约定组件之间的通讯方式？\" class=\"headerlink\" title=\"如何约定组件之间的通讯方式？\"></a>如何约定组件之间的通讯方式？</h3><p>在一个组件化的应用中，会存在组件之间的数据传递。<br>以React为例，如果存在两级嵌套的组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TodoList</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里面可能存在：<br>直接对TodoList进行整组数据的赋值<br>直接对某个TodoItem赋值<br>TodoList对下属的TodoItem赋值<br>TodoList和TodoItem自己去某个“全局”数据中读取配置项<br>这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。<br>那么，我们如何权衡两种数据通讯方式呢？<br>一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。<br>另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。<br>从这里我们得出的结论是：<br>并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。</p>\n<h3 id=\"数据通讯层\"><a href=\"#数据通讯层\" class=\"headerlink\" title=\"数据通讯层\"></a>数据通讯层</h3><p>全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：<br>数据同步<br>请求的浪费<br>另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。<br>在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。<br>Facebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。</p>\n<h2 id=\"其他思考\"><a href=\"#其他思考\" class=\"headerlink\" title=\"其他思考\"></a>其他思考</h2><h3 id=\"如何看待“可视化继承”？\"><a href=\"#如何看待“可视化继承”？\" class=\"headerlink\" title=\"如何看待“可视化继承”？\"></a>如何看待“可视化继承”？</h3><p>在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckList</span> <span class=\"keyword\">extends</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？<br>在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。<br>我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。</p>\n<h3 id=\"模板外置的组件实现方式\"><a href=\"#模板外置的组件实现方式\" class=\"headerlink\" title=\"模板外置的组件实现方式\"></a>模板外置的组件实现方式</h3><p>在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。<br>我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。<br>还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后对外的形式这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">data</span>=<span class=\"string\">\"arr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"aaa\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"bbb\"</span> <span class=\"attr\">selected</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ccc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ddd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。<br>那我们就面临着几个选择：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Tile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。</p>\n<p>接着，我们来了对列表项的自定义需求：</p>\n<p>每个列表项带一个checkbox。<br>列表可以设置有无表头。<br>表头可以设置有无checkbox。<br>如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。<br>checkbox需要可以设置显示在列表左侧还是右侧<br>列表内容可以自定义文本格式化函数<br>列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……<br>然后，还要可以自定义样式…… ……</p>\n<p>所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：<br>怎样让我们的组件既强大，又便于使用？<br>面对此类场景，我想给出一个解决方案，那就是：<br>把组件实现为一种插件平台<br>针对组件的各种形态，将其特征分离出来当成一种插件</p>\n<p>Angular的模板即可起到轻量组件的作用，代码更精炼<br>Angular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据</p>\n<p>对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。<br>今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。</p>\n<h3 id=\"模板的意义\"><a href=\"#模板的意义\" class=\"headerlink\" title=\"模板的意义\"></a>模板的意义</h3><p>除了上面提到的，模板还有另外的意义。</p>\n<p>我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。<br>但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。<br>所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。<br>此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。</p>\n<h3 id=\"HTML体系做组件化的不利因素\"><a href=\"#HTML体系做组件化的不利因素\" class=\"headerlink\" title=\"HTML体系做组件化的不利因素\"></a>HTML体系做组件化的不利因素</h3><p>HTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：<br>标签没有命名空间<br>有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。<br>在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。<br>另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。<br>如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。<br>如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：<br>List下面就只能放ListItem类型的东西。</p>\n<h3 id=\"再回头看Web-Components\"><a href=\"#再回头看Web-Components\" class=\"headerlink\" title=\"再回头看Web Components\"></a>再回头看Web Components</h3><p>我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。<br>我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。<br>比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。<br>至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……</p>\n<p>在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。<br>面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。</p>\n<p>各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/22\" target=\"_blank\" rel=\"external\">来自前端大牛徐飞博客</a></p>\n","excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"什么是Web应用？\"><a href=\"#什么是Web应用？\" class=\"headerlink\" title=\"什么是Web应用？\"></a>什么是Web应用？</h3><p>所谓Web应用，指的是那些虽然用Web技术构建，但是展现形式却跟桌面程序或者移动端原生应用类似的产品。这类产品的特点是逻辑较重，交互复杂，通常也是单页式的。<br>主要包括：<br>    交互占比较高的页面体系<br>    以各种Hybrid技术构建的应用，其中的Web部分<br>","more":"</p>\n<h3 id=\"组件化开发的优势是什么？\"><a href=\"#组件化开发的优势是什么？\" class=\"headerlink\" title=\"组件化开发的优势是什么？\"></a>组件化开发的优势是什么？</h3><p>组件化的最重要作用就是提升开发和维护的效率。<br>最原始的组件，其功能可以单独开发测试，然后逐级拼装成更复杂的组件，直到整个应用。每一级都是易装配，可追踪，可管控的。</p>\n<h3 id=\"在Web应用中，组件化一般指什么？\"><a href=\"#在Web应用中，组件化一般指什么？\" class=\"headerlink\" title=\"在Web应用中，组件化一般指什么？\"></a>在Web应用中，组件化一般指什么？</h3><p>在开发Web应用的时候，无论技术选型，工程方案，还是对人员的技能需求都是有一些特点的，最重要的特点莫过于组件化。组件化这个词，在UI这一层通常指“标签化”，也就是把大块的业务界面，拆分成若干小块，然后进行组装。狭义的组件化一般是指标签化，也就是以自定义标签（自定义属性）为核心的机制。广义的组件化包括对数据逻辑层业务梳理，形成不同层级的能力封装。</p>\n<h3 id=\"在Web应用中，组件化的主要目标是什么？\"><a href=\"#在Web应用中，组件化的主要目标是什么？\" class=\"headerlink\" title=\"在Web应用中，组件化的主要目标是什么？\"></a>在Web应用中，组件化的主要目标是什么？</h3><p>很多人会把复用作为组件化的第一需求，但实际上，在UI层，复用的价值远远比不上分治。<br>分治带来的是可管理性，相比一大团HTML和JavaScript的混杂，组件化之后，整个应用成为了一个很清晰的树，一眼就能看清包含关系，也能够很容易理清数据的传递方向。而且，整个应用可以从叶子节点，逐步向上测试，哪一级出了问题，可以很容易发现。<br>但是复用就很麻烦了，因为组件的内部实现与外部接口都很难取舍。很可能我们在设计之初，都是把组件设想成一个单一的东西，然后在实际项目中，发现最后都面目全非了。<br>所以，复用的工程成本很高，在使用的时候需要权衡，除了最常用了基础控件，其他的不要刻意追求。</p>\n<h2 id=\"组件化应当做到什么程度？\"><a href=\"#组件化应当做到什么程度？\" class=\"headerlink\" title=\"组件化应当做到什么程度？\"></a>组件化应当做到什么程度？</h2><p><strong><em>一个软件产品中，如果把核心稳定的部分视为资产，灵活可变的部分视为耗材，我们如何对待资产？如何对待耗材？</em></strong><br>对待资产，我们一般会比较重视，会有长远的规划，优雅的实现，持续的维护，细致的测试，详尽的文档等等，但是对于耗材，基本上会视为一次性的东西，不会有这么严谨的过程。<br><strong><em>组件属于资产还是耗材？模板呢？</em></strong><br>按照上面的分类，组件明显属于资产，而模板一般属于耗材。<br>在有些框架中，模板的使用度较低，但是常见的包含双向绑定的框架中，都有很大比重的模板。有些模板是嵌入到组件内部的，有些则是独立存在的，比如Angular中，可以使用ng-include动态包含一个模板，这个模板就是独立的了。<br><strong><em>大部分Web应用中，资产多一些，还是耗材多一些？</em></strong><br>大部分Web系统的前端部分，其实都是耗材比资产多，人们选用Web相关技术的一个典型心理就是容易写，而且相对随意一些。<br><strong><em>大部分Web应用都适合“全”组件化吗？</em></strong><br>这个问题要从几个方面回答：</p>\n<p>☆成本。从技术角度，任何系统都是可以不计成本的，如果资源无限充足，我们可以把每个东西都实现得非常完美，但现实世界不是这样的，每个东西都会有开发时间之类的限制，这就迫使我们只能对重要性较高，可复用性较高的东西多花时间，其他东西少花时间。</p>\n<p>☆实现难度。组件化方案是需要有规划能力的，不但需要全局的规划能力，还需要各个局部的规划能力，这其实是比较高的需求了。</p>\n<p>☆集成难度。很多时候，我们做一个东西，并不是就只有它自己，还会有跟其他系统的集成，比如说“我的淘宝”PC版，它现在的版本是用React实现的，但仍然需要跟其他东西集成，比如公共头尾，购物车之类，而这些东西是需要兼顾老系统，所以可能就会集成得比较别扭。一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅。</p>\n<p><strong><em>组件与模板的对比</em></strong><br>在展示内容偏多的网站中，模板是一个很常见的东西，它通过某种占位的HTML，包含简单的文本格式化，简单的条件判断，做一些很基础的动态内容生成操作。<br>但是在Web应用中，因为强调组件化，所以很多人对模板的重要性有些忽视了。这里的“模板”指的是双向绑定的动态模板，不是传统的静态模板<br>在Web应用中，应当如何看待模板的地位呢？我们先来看另外一个问题：<br>HTML，CSS，JS，这三者里面，谁是整个Web工程的入口？<br>展示型的Web项目中，毫无疑问HTML是入口，也是根基，不管是JS还是CSS都是作为它的辅助。但到了Web应用中，还是这样吗？我们很多Web应用实际上是以JS为入口的，HTML不再被视为骨架，而是视为一种动态的东西，由JS创建并管理。<br>在这个前提下，人们对动态的HTML又有两种不同方式的认知：它是模板，还是组件？<br>从典型的MVVM三层中，我们可以看到，View Model是Model的外围，View是View Model的外围，一层一层出去，外层实际上可以视为内层的配置文件。而如果从组件化的角度出发，View跟View Model共同构成了组件层。<br>因此，动态的HTML究竟算是什么，取决于我们从什么角度去看待它，也取决于我们在使用什么框架。</p>\n<h2 id=\"组件化框架\"><a href=\"#组件化框架\" class=\"headerlink\" title=\"组件化框架\"></a>组件化框架</h2><h3 id=\"目前有哪些流行的组件化框架？\"><a href=\"#目前有哪些流行的组件化框架？\" class=\"headerlink\" title=\"目前有哪些流行的组件化框架？\"></a>目前有哪些流行的组件化框架？</h3><p>我们现在开发Web应用，一般也不会从0开始，通常是选取一个核心框架（库），然后在此基础上确定一些规则，逐步构建外围体系，现在比较火的有React，Angular，Vue，Polymer等。<br>“MV*”：Angular，Vue等<br>“反应式”：React，Reactive等<br>标准增强：Polymer</p>\n<h3 id=\"几个流派各自特点是什么？\"><a href=\"#几个流派各自特点是什么？\" class=\"headerlink\" title=\"几个流派各自特点是什么？\"></a>几个流派各自特点是什么？</h3><p>MV*: 分层，绑定<br>React: 组件化，单向数据流</p>\n<h3 id=\"React中一般的组件相当于MVVM流派中的什么？\"><a href=\"#React中一般的组件相当于MVVM流派中的什么？\" class=\"headerlink\" title=\"React中一般的组件相当于MVVM流派中的什么？\"></a>React中一般的组件相当于MVVM流派中的什么？</h3><p>以上提到的几个东西，在组件化这块，可能争议最大的是Angular，因为Angular 1.x的官方指引中，并未在组件化这个方向上作一些指导，也没有提倡，甚至连建议都没有，而React和Polymer是天然组件化的，Vue提供的文档里以很大篇幅详细说明了组件化的机制和实践方式。<br>但是，这并不是说，Angular 1.x就是与组件化冲突的，它仍然可以通过directive等相关机制，实现自己特色的组件化方案。<br>Directive可以实现自定义标签和自定义属性，这两者可以理所当然地归类到组件中，但是，在Angular中，模板本身也可以视为一种组件，一种轻量级的组件，它不一定就是静态的，仍然可以有一些简单的操作和行为。<br>Directive和模板相当于MVVM中的View层，它们的运行，一般是离不开ViewModel的支撑的，在Angular中，这就是controller。所以，如果以Angular框架来说，directive和模板、controller，共同形成了视图层组件体系。推广到其他MVVM框架来说，也就是View和ViewModel，而React整体就处于视图层，所以这两者算是一个对等关系。</p>\n<h3 id=\"这些流派有共同的未来吗，会是什么？\"><a href=\"#这些流派有共同的未来吗，会是什么？\" class=\"headerlink\" title=\"这些流派有共同的未来吗，会是什么？\"></a>这些流派有共同的未来吗，会是什么？</h3><p>无论是哪种框架，在开发Web应用的时候都要面临一个问题：业务数据层如何设计？<br>这一层东西，其实目前各路框架都未提出有力的解决方案，大家的重点都还是在做上层UI。<br>但是从长远来看，业务数据层会是一个基本没有框架差异的东西，同一个方案，大家都可以用，比如说之前有人把flux之类的东西放到React之外的框架用，也一样可以。<br>而上层UI，其实现过程现在也很明确地是要往Web Components靠拢，实现逻辑都是使用ES新标准，数据绑定机制都是getter setter或者observe，加载方式都在考虑HTTP2之类，一旦某个领域出现了理念突破，很快就会被其他框架吸收融合。<br>所以总的来说，各框架是趋同的。</p>\n<h2 id=\"组件化的实践\"><a href=\"#组件化的实践\" class=\"headerlink\" title=\"组件化的实践\"></a>组件化的实践</h2><p><strong><em>一个全组件化体系，会形成组件树，上下级组件之间应当如何通讯？不同层级的组件之间应当如何通讯？</em></strong><br>当我们把一个应用使用组件化的理念进行构建的时候，整个应用就形成了一个倒置的树，树根就是应用本身，其余节点是层层嵌套的组件们，叶子节点是最基础的组件。</p>\n<h3 id=\"如何规划组件树的层级与组件的粒度？\"><a href=\"#如何规划组件树的层级与组件的粒度？\" class=\"headerlink\" title=\"如何规划组件树的层级与组件的粒度？\"></a>如何规划组件树的层级与组件的粒度？</h3><p>如果我们有两个不同团队，同样基于组件化的理念，使用同一个框架，做同样功能的产品，最终形成的组件树可能差别很大，这个差别主要在于：<br><strong><em>把什么视为组件，组件的粒度是怎样的。</em></strong><br>在组件化的应用中，组件树的层级不宜过深，从根节点算起，应当尽可能控制在3到5层内，如果层级太多的话，会造成组件通讯和数据传递的负担。</p>\n<h3 id=\"如何约定组件之间的通讯方式？\"><a href=\"#如何约定组件之间的通讯方式？\" class=\"headerlink\" title=\"如何约定组件之间的通讯方式？\"></a>如何约定组件之间的通讯方式？</h3><p>在一个组件化的应用中，会存在组件之间的数据传递。<br>以React为例，如果存在两级嵌套的组件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TodoItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TodoList</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里面可能存在：<br>直接对TodoList进行整组数据的赋值<br>直接对某个TodoItem赋值<br>TodoList对下属的TodoItem赋值<br>TodoList和TodoItem自己去某个“全局”数据中读取配置项<br>这里面，前三种都可以通过该组件的props传递进去，属于对组件的常规用法，第四种，则属于对数据层的利用。<br>那么，我们如何权衡两种数据通讯方式呢？<br>一个比较粗糙的办法是，从数据模型的角度去考虑。如果一个组件所要获取的数据模型是比较独立的，不依赖其他业务数据，可以直接去获取，如果跟其他这个数据模型跟其他数据之间存在耦合，比如主从联动关系，由父组件进行分发会比较好。<br>另外一个着眼点是权衡上下两级组件之间的关系密切程度，如果它们之间的关系很强，对外界来说是一个紧密结合的整体，可以直接在它们之间传递数据，如果关系不强，或者在组件树上距离较远，适合通过第三方转发通信。<br>从这里我们得出的结论是：<br>并不是选择了框架，就可以顺利把一个Web应用做出来了，还需要一件很重要的事，那就是：业务架构。组件之间的关系都是需要统筹规划的，这里面有很多技巧，可以参见一些大型桌面程序的架构，从中获取不少经验。</p>\n<h3 id=\"数据通讯层\"><a href=\"#数据通讯层\" class=\"headerlink\" title=\"数据通讯层\"></a>数据通讯层</h3><p>全组件化还带来另外一个课题，那就是数据层的设计。比如说，我们可能有一个选择城市的列表组件，它的数据来源于服务端的一个查询，为了方便起见，很可能你会选择把查询的调用封装在组件内部，然后这个组件如果被同一个可见区域的多个部分使用，或者是这个查询及其数据结果被同一可见区域的其他组件也调用了，就出现了两个问题：<br>数据同步<br>请求的浪费<br>另外，对于关联数据的更新，也不太便于控制，RESTful之类的服务端接口规范在复杂场景下会显得力不从心。<br>在数据通信这层，Meteor这样的框架提出了自己的解决思路，跳出传统HTTP的局限，把眼光转向WebSocket这样的东西，并且在前端实现类似数据库的访问接口。<br>Facebook对此问题提出了更暴力的解决方式，Relay和GraphQL，这两个东西我认为意义是很大的，它解决的不光是自己的痛点，而且是可以用于其他任意的前端组件化体系，对前端组件化这个领域的完善度作出了极其重大的贡献。</p>\n<h2 id=\"其他思考\"><a href=\"#其他思考\" class=\"headerlink\" title=\"其他思考\"></a>其他思考</h2><h3 id=\"如何看待“可视化继承”？\"><a href=\"#如何看待“可视化继承”？\" class=\"headerlink\" title=\"如何看待“可视化继承”？\"></a>如何看待“可视化继承”？</h3><p>在不少组件化框架，包括桌面端的，Web端的，都有“可视化继承”这个概念，比如说，我们有一个List组件用于展现列表数据，然后，又有另外一个需求，在这个列表上显示checkbox，用于多选。在很多组件化框架里，都会存在这样的继承关系：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckList</span> <span class=\"keyword\">extends</span> <span class=\"title\">List</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我觉得有必要探讨一下这里这个extends，是不是一定要用这样的方式来实现一个形态类似原组件的新组件？<br>在全组件式体系中，继承是不如组合优雅的，以上面这个情况来说，它会在render方法里，重新实现自己的东西，所以，它继承了什么呢，很少很少的东西。<br>我们可以换种思路，保持组件不变，通过不同的配置项使其相应不同的功能。</p>\n<h3 id=\"模板外置的组件实现方式\"><a href=\"#模板外置的组件实现方式\" class=\"headerlink\" title=\"模板外置的组件实现方式\"></a>模板外置的组件实现方式</h3><p>在实现一个很基础的UI组件的时候，我们一般都会想要把它搞得既简洁，又强大，但这件事情本身是很难权衡的，针对不同的组件，可能会有不同的策略。<br>我们在开始实现组件的时候，通常会尽可能考虑需求，然后将其作为默认实现，并且对外提供一些配置项，用于开关这些功能。<br>还是用列表举例，比如我们有一个列表，可以用于选中，内部结构可能会搞成这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"selected\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后对外的形式这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">data</span>=<span class=\"string\">\"arr\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"aaa\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"bbb\"</span> <span class=\"attr\">selected</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ccc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">data</span>=<span class=\"string\">\"ddd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ListItem</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后，加需求了，列表有多种形态，一种横着排的，一种竖着排的，一种片状的，每行N个，排满换行，然后这里面还再分，元素是否定宽，还是流式。<br>那我们就面临着几个选择：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">List</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Tile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">List</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加配置属性，或者增加不同的元素，如TileList，HorizontalList等等。</p>\n<p>接着，我们来了对列表项的自定义需求：</p>\n<p>每个列表项带一个checkbox。<br>列表可以设置有无表头。<br>表头可以设置有无checkbox。<br>如果表头有checkbox，需要跟每行的checkbox状态进行关联。当表头checkbox点击的时候，所有行的checkbox与它同步；当每行checkbox点击的时候，表头checkbox状态也与之同步。<br>checkbox需要可以设置显示在列表左侧还是右侧<br>列表内容可以自定义文本格式化函数<br>列表内容可以自定义为其他组件，并且有一些数据传递和事件通信方式……<br>然后，还要可以自定义样式…… ……</p>\n<p>所以，这个组件变得非常复杂，对外的接口很复杂，内部实现也很复杂，代码更是臃肿不堪。摆在我们面前的有这么一个矛盾：<br>怎样让我们的组件既强大，又便于使用？<br>面对此类场景，我想给出一个解决方案，那就是：<br>把组件实现为一种插件平台<br>针对组件的各种形态，将其特征分离出来当成一种插件</p>\n<p>Angular的模板即可起到轻量组件的作用，代码更精炼<br>Angular的作用域有继承机制，这样，传入的模板直接与原组件融为一体，共享同一份数据</p>\n<p>对于Angular的这个作用域机制，很多人都反感，但我认为，它并不一定就比全部在传递时候赋值的immutable机制差，在业务开发中，组件化固然是有用，但频繁的上下级数据传递可能会让整个系统更加零碎化，数据层的零碎化是非常不利的。<br>今年大家有了React，黑Angular就格外狠了，我举这个例子也是为了说明，Angular 1.x的设计，除了module是完全的败笔，变更检测机制值得商榷，其他的并无大问题，甚至还存在一些优势。使用某框架的时候，如果熟悉原理并加以合理利用，能够巧妙解决业务上遇到的很多问题。</p>\n<h3 id=\"模板的意义\"><a href=\"#模板的意义\" class=\"headerlink\" title=\"模板的意义\"></a>模板的意义</h3><p>除了上面提到的，模板还有另外的意义。</p>\n<p>我们会发现，在React的体系里，HTML和DOM本身还重要吗？重要性其实是大幅降低了，所以我们会看到ReactNative，ReactCanvas之类的实现，而且，最新版本的React中，把React DOM单独抽取出来了，这意味着，React未来只把DOM作为它的可选视图渲染层之一。<br>但是我们必须认识到，在Web体系中，HTML和DOM有不可替代的优势，它们是当前Web技术的根基，尽管有缺点，并不代表应当被抛弃，至少是在现在这个时代。<br>所以，在Web应用这样的体系中，组件的实现技术还是应当尽可能基于DOM来考虑。也正是在这种场景下，模板和绑定技术仍然存在很重要的作用，比如可访问性等等特性，都是别的非DOM体系所缺乏积累的。<br>此外，模板某种程度上可以视为“组件的字面量形式”，也就是组件的一种序列化形式，如果我们要动态加载组件，使用模板会非常方便，这也就是我上面那个数据表格例子的意义所在。</p>\n<h3 id=\"HTML体系做组件化的不利因素\"><a href=\"#HTML体系做组件化的不利因素\" class=\"headerlink\" title=\"HTML体系做组件化的不利因素\"></a>HTML体系做组件化的不利因素</h3><p>HTML本身的标签，其实做组件化是有些别扭的，这个原因在哪里呢，两点：<br>标签没有命名空间<br>有些内置标签是依赖于别的标签而存在的，并且往往有默认的布局语义，比如TR，比如LI，这些东西单独跟内部一些元素一起封装而成的“组件”，并不能做到可以任意放置。<br>在其他一些体系里并不存在这样的问题，比如WPF，比如Adobe Flex，因为他们没有这样的“历史负担”。<br>另外一个方面，所谓的组件嵌套，从声明式代码的编写方式来看，就是标签的嵌套。标签嵌套的含义在UI层被赋予了更多潜规则，比如这个代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果Service并非有UI展现的东西，而是像polymer里面的core-ajax那样，或者Adobe Flash体系里的WebService，你可以把它当做Panel实例里面的一个成员变量，然后设置它的属性或者调用方法。但是，对于更普通的情形：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Panel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Panel</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>同样的写法，这个含义一样吗？很明显不一样，因为Button也是一个可展示的组件，这时候你默认它是被放置在Panel的展现内部，作为它的可视化子元素的。也就是说，这时候，你不但在逻辑上把两者建立了关联，还要在布局上考虑它们的约束。<br>如果你的外层元素是一个布局为主的容器，那好说，比如这里的Panel，我们默认它有一块展示区，所有子节点都放在里面以某种方式排版，或者flow，或者float，或者flex，甚至border-layout，东西南北中。<br>如果外层元素不是一个布局为主的容器，允许它嵌套别的东西，逻辑上就很难理解。它必须约束自己所能允许放置的子元素的类型。比如：<br>List下面就只能放ListItem类型的东西。</p>\n<h3 id=\"再回头看Web-Components\"><a href=\"#再回头看Web-Components\" class=\"headerlink\" title=\"再回头看Web Components\"></a>再回头看Web Components</h3><p>我觉得，在有了类似angular那种自定义元素、属性的方式（具体实现可以改进），或者React那种自定义标签之后，Web Components的使用场景变得很尴尬了。<br>我们现在看Web Components的作用，主要还是隔离，包括对逻辑和内部展现的隔离。JavaScript逻辑的隔离其实作用不是很大，因为我们用其他办法也能达到相同的效果，但是Shadow DOM和Scoped CSS这两个东西就很耐人寻味了。<br>比如说，我们现在用Shadow DOM实现了一个东西，然后，在浏览器里面打开查看开关，还是可以看到里面的东西，那如果不纠结它的实现机制的话，跟使用某种组件化框架创建的自定义元素相比，差异是不是就没有那么大了？因为写的时候都只是写一个自定义的元素，运行的时候在内部放了具体实现细节。<br>至于Scoped CSS，更有意思，因为它实际上带来了对已有的工程方案的挑战。我们思考Web Components普及之后的组件化思路，在样式这块几乎都必然走到一条路上，那就是：样式的inline化，把组件的样式全部内置，否则，组件的独立性无从保证。但我们不要忘了，/deep/和::shadow选择器是用来干什么的？这是允许外部的样式对组件内部的东西作调整，这是一个很无奈的选择，因为确实有这种场景，比如你需要对所有组件设置全局风格之类。另外上次听谁说到父选择器，允许元素控制其上级的样式……真是被震惊了，我理解这种需求，比如某种图片放到一个容器里，不管它放在哪，都希望其父容器背景如何如何，但是，这是对组件化技术的一种挑战……</p>\n<p>在实际工程中，样式inline化是有很多缺陷的，比如刚才提到的：theme怎么办？从我近期的一些文章可以看到观点，就是不赞同全组件化，尤其是在上层更倾向于直接使用HTML模板而不是封装过的组件，因为我认为：Web，或者说泛HTML体系，它跟其他任何的客户端展现技术，比如Java Swing，WPF，QT，Adobe Flex之类相比，最本质的不同在于极其强大的CSS，正是因为有它，我们才有可能极尽所能地、简单而优雅地打造不同的用户体验，而不是用各种画布去绘制像素。如果你决定在底层去各种绘制，那确实可以把UI层全组件化，但这个事情也只能在有限范围干，比如移动端，比如游戏，否则代价不堪设想。<br>面对theme的需求，我们只能通过往动态构建的路上去走，这里面也会有很多要考虑的点。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>看到这里，有什么感觉？想要在有一定复杂度的Web应用中全面推行组件化，需要考虑的东西非常多，相当于从农业社会到工业社会的飞跃，我们不能期望一蹴而就，需要通盘考虑。</p>\n<p>各类客户端开发技术中有很多值得借鉴的地方，结合Web技术自身的一些特点，可以触类旁通。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/22\">来自前端大牛徐飞博客</a></p>"},{"title":"MySQL+Keepalived实现双机热备","date":"2015-07-26T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 前言\n\nMySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档[MySQL5.6在CentOS6.6安装步骤](/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/)和[MySQL5.6.25节点复制](/2015/07/26/MySQL5.6.25主从复制/)\n\n<!--more-->\n\n### 环境\n\nMySQL-VIP：192.168.11.200\nMySQL-Master：192.168.11.128\nMySQL-Slave：192.168.11.129\n\nOS版本：CentOS 6.6\nMySQL版本：5.6.25\nKeepalived版本：1.2.19\n\n### keepalived的安装\n首先在安装keepalived之前检查下是否安装了openssl\nshell> rpm -qa|grep openssl\n查的结果表示已经安装了或者需要安装\n```\nshell>yum –y install openssl-devel\n```\n下载解压安装keepalived\n```\nshell>wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz\nshell>tar -zxvf keepalived-1.2.19.tar.gz\nshell>cd keepalived-1.2.19\nshell>./configure --prefix=/usr/local/keepalived\nshell>make\nshell>make install\n```\n\n### keepalived相关文件复制到系统对应的目录下\n```\nshell>cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d\nshell>cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/\nshell>mkdir /etc/keepalived\nshell>cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/\nshell>cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/\n```\n\n### keepalived 配置\n```\nshell>vi /etc/keepalived/keepalived.cnf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.11.128\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL\n}\n\nvrrp_instance VI_1 {\n    state MASTER \t#MASTER|SLAVE\n    interface eth0\t#虚拟IP绑定网卡\n    virtual_router_id 51 #节点中必须相同\n    priority 100\t\t#优先级\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.11.200 #虚拟IP\n        192.168.11.201\n    }\n}\n\nvirtual_server 192.168.11.200 3306 {\n    delay_loop 2\t#每个6秒检查一次real_server状态\n    lb_algo rr\n    lb_kind DR\n    nat_mask 255.255.255.0\n    persistence_timeout 50 #会话保持时间\n    protocol TCP\n\t\n    real_server 192.168.11.128 3306 {\n       weight 1\n\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本\n        TCP_CHECK { \n\t\t\tconnect_timeout 10 #连接超时时间\n\t\t\tnb_get_retry 3 #重连次数\n\t\t\tdelay_before_retry 3 #重连间隔时间\n\t\t\tconnect_port 3306 #健康检查端口\n        } \n    }\n}\n```\n\n编写检测服务down后所执行的脚本\n```\nshell>vi /usr/local/mysql/bin/mysql.sh\n#杀掉keepalived 的进程\npkill keepalived\nshell> chmod 744 /usr/local/mysql/bin/mysql.sh\n```\n\n***注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP***\n在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority\n\n### 测试\n启动MySQL ,keepalived\n```\nsheel>service mysqld start\nsheel>service keepalived start\nsheel>service iptables stop\n```\n查看vip 是否已经帮到到了网卡eth0\n```\nshell>ip a\n```\n![](1.png)\n关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功","source":"_posts/MySQL+Keepalived实现双机热备.md","raw":"---\ntitle: MySQL+Keepalived实现双机热备\ndate: 2015-07-27\ncomments: true\ncategories: MySQL\ntoc: true \n---\n\n### 前言\n\nMySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档[MySQL5.6在CentOS6.6安装步骤](/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/)和[MySQL5.6.25节点复制](/2015/07/26/MySQL5.6.25主从复制/)\n\n<!--more-->\n\n### 环境\n\nMySQL-VIP：192.168.11.200\nMySQL-Master：192.168.11.128\nMySQL-Slave：192.168.11.129\n\nOS版本：CentOS 6.6\nMySQL版本：5.6.25\nKeepalived版本：1.2.19\n\n### keepalived的安装\n首先在安装keepalived之前检查下是否安装了openssl\nshell> rpm -qa|grep openssl\n查的结果表示已经安装了或者需要安装\n```\nshell>yum –y install openssl-devel\n```\n下载解压安装keepalived\n```\nshell>wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz\nshell>tar -zxvf keepalived-1.2.19.tar.gz\nshell>cd keepalived-1.2.19\nshell>./configure --prefix=/usr/local/keepalived\nshell>make\nshell>make install\n```\n\n### keepalived相关文件复制到系统对应的目录下\n```\nshell>cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d\nshell>cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/\nshell>mkdir /etc/keepalived\nshell>cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/\nshell>cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/\n```\n\n### keepalived 配置\n```\nshell>vi /etc/keepalived/keepalived.cnf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.11.128\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL\n}\n\nvrrp_instance VI_1 {\n    state MASTER \t#MASTER|SLAVE\n    interface eth0\t#虚拟IP绑定网卡\n    virtual_router_id 51 #节点中必须相同\n    priority 100\t\t#优先级\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.11.200 #虚拟IP\n        192.168.11.201\n    }\n}\n\nvirtual_server 192.168.11.200 3306 {\n    delay_loop 2\t#每个6秒检查一次real_server状态\n    lb_algo rr\n    lb_kind DR\n    nat_mask 255.255.255.0\n    persistence_timeout 50 #会话保持时间\n    protocol TCP\n\t\n    real_server 192.168.11.128 3306 {\n       weight 1\n\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本\n        TCP_CHECK { \n\t\t\tconnect_timeout 10 #连接超时时间\n\t\t\tnb_get_retry 3 #重连次数\n\t\t\tdelay_before_retry 3 #重连间隔时间\n\t\t\tconnect_port 3306 #健康检查端口\n        } \n    }\n}\n```\n\n编写检测服务down后所执行的脚本\n```\nshell>vi /usr/local/mysql/bin/mysql.sh\n#杀掉keepalived 的进程\npkill keepalived\nshell> chmod 744 /usr/local/mysql/bin/mysql.sh\n```\n\n***注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP***\n在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority\n\n### 测试\n启动MySQL ,keepalived\n```\nsheel>service mysqld start\nsheel>service keepalived start\nsheel>service iptables stop\n```\n查看vip 是否已经帮到到了网卡eth0\n```\nshell>ip a\n```\n![](1.png)\n关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功","slug":"MySQL+Keepalived实现双机热备","published":1,"updated":"2016-05-14T11:17:53.544Z","layout":"post","photos":[],"link":"","_id":"civ2gzlmq001250yb0xm6k7w2","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>MySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档<a href=\"/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/\">MySQL5.6在CentOS6.6安装步骤</a>和<a href=\"/2015/07/26/MySQL5.6.25主从复制/\">MySQL5.6.25节点复制</a></p>\n<a id=\"more\"></a>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>MySQL-VIP：192.168.11.200<br>MySQL-Master：192.168.11.128<br>MySQL-Slave：192.168.11.129</p>\n<p>OS版本：CentOS 6.6<br>MySQL版本：5.6.25<br>Keepalived版本：1.2.19</p>\n<h3 id=\"keepalived的安装\"><a href=\"#keepalived的安装\" class=\"headerlink\" title=\"keepalived的安装\"></a>keepalived的安装</h3><p>首先在安装keepalived之前检查下是否安装了openssl<br>shell&gt; rpm -qa|grep openssl<br>查的结果表示已经安装了或者需要安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;yum –y install openssl-devel</span><br></pre></td></tr></table></figure></p>\n<p>下载解压安装keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;tar -zxvf keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;cd keepalived-1.2.19</span><br><span class=\"line\">shell&gt;./configure --prefix=/usr/local/keepalived</span><br><span class=\"line\">shell&gt;make</span><br><span class=\"line\">shell&gt;make install</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"keepalived相关文件复制到系统对应的目录下\"><a href=\"#keepalived相关文件复制到系统对应的目录下\" class=\"headerlink\" title=\"keepalived相关文件复制到系统对应的目录下\"></a>keepalived相关文件复制到系统对应的目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/</span><br><span class=\"line\">shell&gt;mkdir /etc/keepalived</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/</span><br></pre></td></tr></table></figure>\n<h3 id=\"keepalived-配置\"><a href=\"#keepalived-配置\" class=\"headerlink\" title=\"keepalived 配置\"></a>keepalived 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /etc/keepalived/keepalived.cnf</span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     acassen@firewall.loc</span><br><span class=\"line\">     failover@firewall.loc</span><br><span class=\"line\">     sysadmin@firewall.loc</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 192.168.11.128</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER \t#MASTER|SLAVE</span><br><span class=\"line\">    interface eth0\t#虚拟IP绑定网卡</span><br><span class=\"line\">    virtual_router_id 51 #节点中必须相同</span><br><span class=\"line\">    priority 100\t\t#优先级</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.11.200 #虚拟IP</span><br><span class=\"line\">        192.168.11.201</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.11.200 3306 &#123;</span><br><span class=\"line\">    delay_loop 2\t#每个6秒检查一次real_server状态</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50 #会话保持时间</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\">\t</span><br><span class=\"line\">    real_server 192.168.11.128 3306 &#123;</span><br><span class=\"line\">       weight 1</span><br><span class=\"line\">\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本</span><br><span class=\"line\">        TCP_CHECK &#123; </span><br><span class=\"line\">\t\t\tconnect_timeout 10 #连接超时时间</span><br><span class=\"line\">\t\t\tnb_get_retry 3 #重连次数</span><br><span class=\"line\">\t\t\tdelay_before_retry 3 #重连间隔时间</span><br><span class=\"line\">\t\t\tconnect_port 3306 #健康检查端口</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写检测服务down后所执行的脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /usr/local/mysql/bin/mysql.sh</span><br><span class=\"line\">#杀掉keepalived 的进程</span><br><span class=\"line\">pkill keepalived</span><br><span class=\"line\">shell&gt; chmod 744 /usr/local/mysql/bin/mysql.sh</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP</em></strong><br>在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动MySQL ,keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheel&gt;service mysqld start</span><br><span class=\"line\">sheel&gt;service keepalived start</span><br><span class=\"line\">sheel&gt;service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>查看vip 是否已经帮到到了网卡eth0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;ip a</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt=\"\"><br>关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功</p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>MySQL的安装与节点间的同步复制在这就不在阐述，大家可以查看文档<a href=\"/2015/07/25/MySQL5.6.25在CentOS6.6的安装步骤/\">MySQL5.6在CentOS6.6安装步骤</a>和<a href=\"/2015/07/26/MySQL5.6.25主从复制/\">MySQL5.6.25节点复制</a></p>","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>MySQL-VIP：192.168.11.200<br>MySQL-Master：192.168.11.128<br>MySQL-Slave：192.168.11.129</p>\n<p>OS版本：CentOS 6.6<br>MySQL版本：5.6.25<br>Keepalived版本：1.2.19</p>\n<h3 id=\"keepalived的安装\"><a href=\"#keepalived的安装\" class=\"headerlink\" title=\"keepalived的安装\"></a>keepalived的安装</h3><p>首先在安装keepalived之前检查下是否安装了openssl<br>shell&gt; rpm -qa|grep openssl<br>查的结果表示已经安装了或者需要安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;yum –y install openssl-devel</span><br></pre></td></tr></table></figure></p>\n<p>下载解压安装keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;tar -zxvf keepalived-1.2.19.tar.gz</span><br><span class=\"line\">shell&gt;cd keepalived-1.2.19</span><br><span class=\"line\">shell&gt;./configure --prefix=/usr/local/keepalived</span><br><span class=\"line\">shell&gt;make</span><br><span class=\"line\">shell&gt;make install</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"keepalived相关文件复制到系统对应的目录下\"><a href=\"#keepalived相关文件复制到系统对应的目录下\" class=\"headerlink\" title=\"keepalived相关文件复制到系统对应的目录下\"></a>keepalived相关文件复制到系统对应的目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/</span><br><span class=\"line\">shell&gt;mkdir /etc/keepalived</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class=\"line\">shell&gt;cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/</span><br></pre></td></tr></table></figure>\n<h3 id=\"keepalived-配置\"><a href=\"#keepalived-配置\" class=\"headerlink\" title=\"keepalived 配置\"></a>keepalived 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /etc/keepalived/keepalived.cnf</span><br><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     acassen@firewall.loc</span><br><span class=\"line\">     failover@firewall.loc</span><br><span class=\"line\">     sysadmin@firewall.loc</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 192.168.11.128</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER \t#MASTER|SLAVE</span><br><span class=\"line\">    interface eth0\t#虚拟IP绑定网卡</span><br><span class=\"line\">    virtual_router_id 51 #节点中必须相同</span><br><span class=\"line\">    priority 100\t\t#优先级</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.11.200 #虚拟IP</span><br><span class=\"line\">        192.168.11.201</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.11.200 3306 &#123;</span><br><span class=\"line\">    delay_loop 2\t#每个6秒检查一次real_server状态</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50 #会话保持时间</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\">\t</span><br><span class=\"line\">    real_server 192.168.11.128 3306 &#123;</span><br><span class=\"line\">       weight 1</span><br><span class=\"line\">\t\tnotify_down /usr/local/mysql/bin/mysql.sh\t#检查到服务down后执行脚本</span><br><span class=\"line\">        TCP_CHECK &#123; </span><br><span class=\"line\">\t\t\tconnect_timeout 10 #连接超时时间</span><br><span class=\"line\">\t\t\tnb_get_retry 3 #重连次数</span><br><span class=\"line\">\t\t\tdelay_before_retry 3 #重连间隔时间</span><br><span class=\"line\">\t\t\tconnect_port 3306 #健康检查端口</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写检测服务down后所执行的脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;vi /usr/local/mysql/bin/mysql.sh</span><br><span class=\"line\">#杀掉keepalived 的进程</span><br><span class=\"line\">pkill keepalived</span><br><span class=\"line\">shell&gt; chmod 744 /usr/local/mysql/bin/mysql.sh</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>注：此脚本是上面配置文件notify_down选项所用到的，keepalived使用notify_down选项来检查real_server的服务状态，当发现real_server服务故障时，便触发此脚本；我们可以看到，脚本就一个命令，通过pkill keepalived强制杀死keepalived进程，从而实现了MySQL故障自动转移。另外，我们不用担心两个MySQL会同时提供数据更新操作，因为每台MySQL上的keepalived的配置里面只有本机MySQL的IP+VIP，而不是两台MySQL的IP+VIP</em></strong><br>在这样只有一个vrrp_instance 的环境里，主负载均衡器(MASTER)与备份负载均衡器（BACKUP）配置文件的差异一共只有3处: 全局定义的route_id、vrrp_instance state已经vrrp_instance的优先级priority</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动MySQL ,keepalived<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheel&gt;service mysqld start</span><br><span class=\"line\">sheel&gt;service keepalived start</span><br><span class=\"line\">sheel&gt;service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>查看vip 是否已经帮到到了网卡eth0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt;ip a</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt=\"\"><br>关闭myql服务或vip已经绑定在了192.18.11.129上了表示测试成功</p>"},{"title":"博客搭建","date":"2016-05-10T11:05:33.000Z","comments":0,"_content":"***坚持写作、总结经验、分享心得、原著为上***\n2016年5月10号基于github搭建我的第一个博客\n\n\n个人简历: [关于我](/about/index.html)\n","source":"_posts/博客搭建.md","raw":"---\ntitle: 博客搭建\ndate: 2016-05-10 19:05:33\ncomments: false \n---\n***坚持写作、总结经验、分享心得、原著为上***\n2016年5月10号基于github搭建我的第一个博客\n\n\n个人简历: [关于我](/about/index.html)\n","slug":"博客搭建","published":1,"updated":"2016-05-14T11:28:07.231Z","layout":"post","photos":[],"link":"","_id":"civ2gzln0001350yb77vsgbnc","content":"<p><strong><em>坚持写作、总结经验、分享心得、原著为上</em></strong><br>2016年5月10号基于github搭建我的第一个博客</p>\n<p>个人简历: <a href=\"/about/index.html\">关于我</a></p>\n","excerpt":"","more":"<p><strong><em>坚持写作、总结经验、分享心得、原著为上</em></strong><br>2016年5月10号基于github搭建我的第一个博客</p>\n<p>个人简历: <a href=\"/about/index.html\">关于我</a></p>\n"},{"title":"MySQL5.6在CentOS6.6安装步骤","date":"2015-07-24T16:00:00.000Z","comments":1,"toc":true,"_content":"\n\n### 前言\n此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。\n\n### 下载MySQL Yum Repository\n为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。\n针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。\n```\nshell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n其他版本对照下载\nRed Hat Enterprise Linux 7 / Oracle Linux 7\nshell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nRed Hat Enterprise Linux 5 / Oracle Linux 5\nshell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm\n```\n<!--more-->\n\n### 安装MySQL Yum Repository\n```\nshell rpm -Uvh mysql-community-release-el6-5.noarch.rpm\n```\n也可以通过yum安装\n```\nshell yum localinstall platform-and-version-specific-package-name.rpm\n```\n### 验证是否安装成\n\n```\n查找启用的MySQL Yum Repository\nshell yum repolist enabled | grep \"mysql.*-community.*\"\n查找所有的MySQL Yum Repository\nshell yum repolist all | grep mysql\n```\n![mysql](1.png)\n禁用mysql57-community-dmr\n```\nshell yum-config-manager – disable mysql57-community-dmr\n```\n启用mysql56-community\n```\nshell yum-config-manager -- enable mysql56-community\n```\n***备注：***\nYum Repository 的配置文件在linux的目录是/etc/yum.repos.d/\n\n### 安装MySQL\n```\nshell yum install mysql-server\n```\n### 启动MySQL 服务\n```\nshell service mysqld start\n```\n注意针对低版本的使用service mysql start\n查看运行状态\n```\nshell service mysqld status\nmysqld (pid 23192) is runing...\n```\n表示启动成功\n\n如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下\n```\nshell cp /usr/share/mysql/my-default.cnf /etc/my.cnf\n```\n当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。\n\n### 目录介绍\n数据库目录：/var/lib/mysql\n配置文件目录：/usr/share/mysql\n命令目录：/usr/bin mysql*\t\n\n### 修改MySQL root用户密码\n```\nshell mysql admin –u root password ‘newpassword’\n```\n### 登录MySQL\n![MYSQL](2.png)\n设置root用户远程访问\n```\nshell GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.16.%' IDENTIFIED BY 'password' WITH GRANT OPTION;\nshell flush privileges;//刷新立即生效\n```\n开启防火墙的3306端口\n在/etc/sysconfig/iptables文件中添加如下内容\n![MYSQL](3.png)\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：\n```\nshell service iptables restart\n```\n如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙\n```\nservice iptables stop\n```\nCentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。\n\nFirewalld中添加端口方法如下：\n```\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n```","source":"_posts/MySQL5.6.25在CentOS6.6的安装步骤.md","raw":"---\ntitle: MySQL5.6在CentOS6.6安装步骤\ndate: 2015-07-25\ncomments: true\ncategories: MySQL\ntoc: true \n---\n\n\n### 前言\n此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。\n\n### 下载MySQL Yum Repository\n为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。\n针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。\n```\nshell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n其他版本对照下载\nRed Hat Enterprise Linux 7 / Oracle Linux 7\nshell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nRed Hat Enterprise Linux 5 / Oracle Linux 5\nshell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm\n```\n<!--more-->\n\n### 安装MySQL Yum Repository\n```\nshell rpm -Uvh mysql-community-release-el6-5.noarch.rpm\n```\n也可以通过yum安装\n```\nshell yum localinstall platform-and-version-specific-package-name.rpm\n```\n### 验证是否安装成\n\n```\n查找启用的MySQL Yum Repository\nshell yum repolist enabled | grep \"mysql.*-community.*\"\n查找所有的MySQL Yum Repository\nshell yum repolist all | grep mysql\n```\n![mysql](1.png)\n禁用mysql57-community-dmr\n```\nshell yum-config-manager – disable mysql57-community-dmr\n```\n启用mysql56-community\n```\nshell yum-config-manager -- enable mysql56-community\n```\n***备注：***\nYum Repository 的配置文件在linux的目录是/etc/yum.repos.d/\n\n### 安装MySQL\n```\nshell yum install mysql-server\n```\n### 启动MySQL 服务\n```\nshell service mysqld start\n```\n注意针对低版本的使用service mysql start\n查看运行状态\n```\nshell service mysqld status\nmysqld (pid 23192) is runing...\n```\n表示启动成功\n\n如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下\n```\nshell cp /usr/share/mysql/my-default.cnf /etc/my.cnf\n```\n当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。\n\n### 目录介绍\n数据库目录：/var/lib/mysql\n配置文件目录：/usr/share/mysql\n命令目录：/usr/bin mysql*\t\n\n### 修改MySQL root用户密码\n```\nshell mysql admin –u root password ‘newpassword’\n```\n### 登录MySQL\n![MYSQL](2.png)\n设置root用户远程访问\n```\nshell GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.16.%' IDENTIFIED BY 'password' WITH GRANT OPTION;\nshell flush privileges;//刷新立即生效\n```\n开启防火墙的3306端口\n在/etc/sysconfig/iptables文件中添加如下内容\n![MYSQL](3.png)\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：\n```\nshell service iptables restart\n```\n如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙\n```\nservice iptables stop\n```\nCentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。\n\nFirewalld中添加端口方法如下：\n```\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n```","slug":"MySQL5.6.25在CentOS6.6的安装步骤","published":1,"updated":"2016-05-14T10:55:49.598Z","layout":"post","photos":[],"link":"","_id":"civ2gzlna001650ybbgktzku7","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。</p>\n<h3 id=\"下载MySQL-Yum-Repository\"><a href=\"#下载MySQL-Yum-Repository\" class=\"headerlink\" title=\"下载MySQL Yum Repository\"></a>下载MySQL Yum Repository</h3><p>为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。<br>针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span><br><span class=\"line\">其他版本对照下载</span><br><span class=\"line\">Red Hat Enterprise Linux 7 / Oracle Linux 7</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">Red Hat Enterprise Linux 5 / Oracle Linux 5</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"安装MySQL-Yum-Repository\"><a href=\"#安装MySQL-Yum-Repository\" class=\"headerlink\" title=\"安装MySQL Yum Repository\"></a>安装MySQL Yum Repository</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -Uvh mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>也可以通过yum安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum localinstall platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证是否安装成\"><a href=\"#验证是否安装成\" class=\"headerlink\" title=\"验证是否安装成\"></a>验证是否安装成</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找启用的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class=\"line\">查找所有的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"mysql\"><br>禁用mysql57-community-dmr<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager – disable mysql57-community-dmr</span><br></pre></td></tr></table></figure></p>\n<p>启用mysql56-community<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager -- enable mysql56-community</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>备注：</em></strong><br>Yum Repository 的配置文件在linux的目录是/etc/yum.repos.d/</p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install mysql-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动MySQL-服务\"><a href=\"#启动MySQL-服务\" class=\"headerlink\" title=\"启动MySQL 服务\"></a>启动MySQL 服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld start</span><br></pre></td></tr></table></figure>\n<p>注意针对低版本的使用service mysql start<br>查看运行状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld status</span><br><span class=\"line\">mysqld (pid 23192) is runing...</span><br></pre></td></tr></table></figure></p>\n<p>表示启动成功</p>\n<p>如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cp /usr/share/mysql/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。</p>\n<h3 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h3><p>数据库目录：/var/lib/mysql<br>配置文件目录：/usr/share/mysql<br>命令目录：/usr/bin mysql*    </p>\n<h3 id=\"修改MySQL-root用户密码\"><a href=\"#修改MySQL-root用户密码\" class=\"headerlink\" title=\"修改MySQL root用户密码\"></a>修改MySQL root用户密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell mysql admin –u root password ‘newpassword’</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p><img src=\"2.png\" alt=\"MYSQL\"><br>设置root用户远程访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;172.16.%&apos; IDENTIFIED BY &apos;password&apos; WITH GRANT OPTION;</span><br><span class=\"line\">shell flush privileges;//刷新立即生效</span><br></pre></td></tr></table></figure></p>\n<p>开启防火墙的3306端口<br>在/etc/sysconfig/iptables文件中添加如下内容<br><img src=\"3.png\" alt=\"MYSQL\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service iptables restart</span><br></pre></td></tr></table></figure></p>\n<p>如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>CentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。</p>\n<p>Firewalld中添加端口方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>此文档主要介绍的是通过yum 在CentOS6.6安装MySQL5.6.25。注意每个MySQL的版本在不同的系统上安装步骤可能有些不同。所以不能保证按照此方法能保证其他版本安装成功。</p>\n<h3 id=\"下载MySQL-Yum-Repository\"><a href=\"#下载MySQL-Yum-Repository\" class=\"headerlink\" title=\"下载MySQL Yum Repository\"></a>下载MySQL Yum Repository</h3><p>为什么需要下载呢？注意原因是在CentOS Yum Repository还没有收入MySQL最新版本的安装库。<br>针对每个每个系统所下载的Yum Repository是不一样所以我们需要对着下载，今天说的是CentOS6.6所以我们只需要下载如下包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span><br><span class=\"line\">其他版本对照下载</span><br><span class=\"line\">Red Hat Enterprise Linux 7 / Oracle Linux 7</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">Red Hat Enterprise Linux 5 / Oracle Linux 5</span><br><span class=\"line\">shell wget http://dev.mysql.com/get/mysql-community-release-fc22-5.noarch.rpm</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"安装MySQL-Yum-Repository\"><a href=\"#安装MySQL-Yum-Repository\" class=\"headerlink\" title=\"安装MySQL Yum Repository\"></a>安装MySQL Yum Repository</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell rpm -Uvh mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>也可以通过yum安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum localinstall platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证是否安装成\"><a href=\"#验证是否安装成\" class=\"headerlink\" title=\"验证是否安装成\"></a>验证是否安装成</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找启用的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class=\"line\">查找所有的MySQL Yum Repository</span><br><span class=\"line\">shell yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"mysql\"><br>禁用mysql57-community-dmr<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager – disable mysql57-community-dmr</span><br></pre></td></tr></table></figure></p>\n<p>启用mysql56-community<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum-config-manager -- enable mysql56-community</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>备注：</em></strong><br>Yum Repository 的配置文件在linux的目录是/etc/yum.repos.d/</p>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell yum install mysql-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动MySQL-服务\"><a href=\"#启动MySQL-服务\" class=\"headerlink\" title=\"启动MySQL 服务\"></a>启动MySQL 服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld start</span><br></pre></td></tr></table></figure>\n<p>注意针对低版本的使用service mysql start<br>查看运行状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service mysqld status</span><br><span class=\"line\">mysqld (pid 23192) is runing...</span><br></pre></td></tr></table></figure></p>\n<p>表示启动成功</p>\n<p>如果不存在/etc/my.cnf文件需要复制/usr/share/mysql/my-default.cnf一份到/etc/my.cnf下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell cp /usr/share/mysql/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>当然不配置也不会影响启动在/etc目录下的文件都是系统启动第一读取目录其次如果没有找到再去对应的目录下读取。</p>\n<h3 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h3><p>数据库目录：/var/lib/mysql<br>配置文件目录：/usr/share/mysql<br>命令目录：/usr/bin mysql*    </p>\n<h3 id=\"修改MySQL-root用户密码\"><a href=\"#修改MySQL-root用户密码\" class=\"headerlink\" title=\"修改MySQL root用户密码\"></a>修改MySQL root用户密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell mysql admin –u root password ‘newpassword’</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p><img src=\"2.png\" alt=\"MYSQL\"><br>设置root用户远程访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;172.16.%&apos; IDENTIFIED BY &apos;password&apos; WITH GRANT OPTION;</span><br><span class=\"line\">shell flush privileges;//刷新立即生效</span><br></pre></td></tr></table></figure></p>\n<p>开启防火墙的3306端口<br>在/etc/sysconfig/iptables文件中添加如下内容<br><img src=\"3.png\" alt=\"MYSQL\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell service iptables restart</span><br></pre></td></tr></table></figure></p>\n<p>如同通过以上步骤还不能成功链接执行下面的语句关闭防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure></p>\n<p>CentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。</p>\n<p>Firewalld中添加端口方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>"},{"title":"MySQL5.6.25主从复制","date":"2015-07-25T16:00:00.000Z","comments":1,"toc":true,"_content":"\n### 配置主节点\n配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下\n\n```\n[mysqld]\nlog-bin=mysql-bin\nserver-id=1\n#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部\n#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置\n```\n<!--more-->\n***备注***\n如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。\n### 配置从节点\n```\n[mysqld]\nserver-id=2\n#relay-log=mysqld-relay-bin 可选\n```\n\n### 为复制创建用户\n```sql\nmysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';\n```\n\n### 获取二进制日志文件路径\n```sql\nmysql> FLUSH TABLES WITH READ LOCK;\n```\n在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：\n```\nmysql > SHOW MASTER STATUS;\n+---------------+----------+--------------+------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+---------------+----------+--------------+------------------+\n| mysql-bin.000003 | 73       | test         | manual,mysql     |\n+------------------+----------+--------------+---------------+\n```\n该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。\n\n### 使用mysqldump创建数据快照(可选)\n这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：\n```\nshell> mysqldump --all-databases --master-data > dbdump.db\n```\n\n### 使用原数据创建数据快照（可选）\n1.获取二进制日志文件路径参照第四步\n2.关闭主服务\n```\nshell> mysqladmin shutdown\n```\n3.复制数据库文件下面的命令只需要选择一个\n```\nshell> tar cf /tmp/db.tar ./data\nshell> zip -r /tmp/db.zip ./data\nshell> rsync --recursive ./data /tmp/dbdata\n```\n4.重启主节点服务\n如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤\n\n### 在从节点中设置主配置\n要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：\n```sql\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master_host_name',\n    ->     MASTER_USER='replication_user_name',\n    ->     MASTER_PASSWORD='replication_password',\n    ->     MASTER_LOG_FILE='recorded_log_file_name',\n    ->     MASTER_LOG_POS=recorded_log_position;\n```\n其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003\t\n查看从节点运行状态\n```sql\nmysql> show slave status\\G;\n```\n![](1.png)\n![](2.png)\n\nMySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。\n看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息\nFatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work\n从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因\n第一：/etc/my.cnf文件中的server_id 相同我们可以通过\n```sql\nmysql> show variables like ‘server_id';\n```\n如果相同修改重启mysql服务。\n第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。\n找出这样的原因主要是因为直接copy mysql文件造成\n```sql\nshell> cat /var/lib/mysql/auto.cnf;\n```\n![](3.png)\n![](4.png)\n现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功\n启动slave开始复制\n```sql\nmysql> start slave;\n```","source":"_posts/MySQL5.6.25主从复制.md","raw":"---\ntitle: MySQL5.6.25主从复制\ndate: 2015-07-26\ncomments: true\ncategories: MySQL\ntoc: true \n---\n\n### 配置主节点\n配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下\n\n```\n[mysqld]\nlog-bin=mysql-bin\nserver-id=1\n#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部\n#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置\n```\n<!--more-->\n***备注***\n如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。\n### 配置从节点\n```\n[mysqld]\nserver-id=2\n#relay-log=mysqld-relay-bin 可选\n```\n\n### 为复制创建用户\n```sql\nmysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';\n```\n\n### 获取二进制日志文件路径\n```sql\nmysql> FLUSH TABLES WITH READ LOCK;\n```\n在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：\n```\nmysql > SHOW MASTER STATUS;\n+---------------+----------+--------------+------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+---------------+----------+--------------+------------------+\n| mysql-bin.000003 | 73       | test         | manual,mysql     |\n+------------------+----------+--------------+---------------+\n```\n该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。\n\n### 使用mysqldump创建数据快照(可选)\n这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：\n```\nshell> mysqldump --all-databases --master-data > dbdump.db\n```\n\n### 使用原数据创建数据快照（可选）\n1.获取二进制日志文件路径参照第四步\n2.关闭主服务\n```\nshell> mysqladmin shutdown\n```\n3.复制数据库文件下面的命令只需要选择一个\n```\nshell> tar cf /tmp/db.tar ./data\nshell> zip -r /tmp/db.zip ./data\nshell> rsync --recursive ./data /tmp/dbdata\n```\n4.重启主节点服务\n如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤\n\n### 在从节点中设置主配置\n要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：\n```sql\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master_host_name',\n    ->     MASTER_USER='replication_user_name',\n    ->     MASTER_PASSWORD='replication_password',\n    ->     MASTER_LOG_FILE='recorded_log_file_name',\n    ->     MASTER_LOG_POS=recorded_log_position;\n```\n其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003\t\n查看从节点运行状态\n```sql\nmysql> show slave status\\G;\n```\n![](1.png)\n![](2.png)\n\nMySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。\n看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息\nFatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work\n从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因\n第一：/etc/my.cnf文件中的server_id 相同我们可以通过\n```sql\nmysql> show variables like ‘server_id';\n```\n如果相同修改重启mysql服务。\n第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。\n找出这样的原因主要是因为直接copy mysql文件造成\n```sql\nshell> cat /var/lib/mysql/auto.cnf;\n```\n![](3.png)\n![](4.png)\n现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功\n启动slave开始复制\n```sql\nmysql> start slave;\n```","slug":"MySQL5.6.25主从复制","published":1,"updated":"2016-05-14T11:05:16.180Z","layout":"post","photos":[],"link":"","_id":"civ2gzlna001750yb2nfdpfjz","content":"<h3 id=\"配置主节点\"><a href=\"#配置主节点\" class=\"headerlink\" title=\"配置主节点\"></a>配置主节点</h3><p>配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部</span><br><span class=\"line\">#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong><em>备注</em></strong><br>如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。</p>\n<h3 id=\"配置从节点\"><a href=\"#配置从节点\" class=\"headerlink\" title=\"配置从节点\"></a>配置从节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=2</span><br><span class=\"line\">#relay-log=mysqld-relay-bin 可选</span><br></pre></td></tr></table></figure>\n<h3 id=\"为复制创建用户\"><a href=\"#为复制创建用户\" class=\"headerlink\" title=\"为复制创建用户\"></a>为复制创建用户</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';</span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取二进制日志文件路径\"><a href=\"#获取二进制日志文件路径\" class=\"headerlink\" title=\"获取二进制日志文件路径\"></a>获取二进制日志文件路径</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>\n<p>在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; SHOW MASTER STATUS;</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| mysql-bin.000003 | 73       | test         | manual,mysql     |</span><br><span class=\"line\">+------------------+----------+--------------+---------------+</span><br></pre></td></tr></table></figure></p>\n<p>该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。</p>\n<h3 id=\"使用mysqldump创建数据快照-可选\"><a href=\"#使用mysqldump创建数据快照-可选\" class=\"headerlink\" title=\"使用mysqldump创建数据快照(可选)\"></a>使用mysqldump创建数据快照(可选)</h3><p>这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqldump --all-databases --master-data &gt; dbdump.db</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用原数据创建数据快照（可选）\"><a href=\"#使用原数据创建数据快照（可选）\" class=\"headerlink\" title=\"使用原数据创建数据快照（可选）\"></a>使用原数据创建数据快照（可选）</h3><p>1.获取二进制日志文件路径参照第四步<br>2.关闭主服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqladmin shutdown</span><br></pre></td></tr></table></figure></p>\n<p>3.复制数据库文件下面的命令只需要选择一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; tar cf /tmp/db.tar ./data</span><br><span class=\"line\">shell&gt; zip -r /tmp/db.zip ./data</span><br><span class=\"line\">shell&gt; rsync --recursive ./data /tmp/dbdata</span><br></pre></td></tr></table></figure></p>\n<p>4.重启主节点服务<br>如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤</p>\n<h3 id=\"在从节点中设置主配置\"><a href=\"#在从节点中设置主配置\" class=\"headerlink\" title=\"在从节点中设置主配置\"></a>在从节点中设置主配置</h3><p>要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CHANGE MASTER TO</span><br><span class=\"line\">    -&gt;     MASTER_HOST='master_host_name',</span><br><span class=\"line\">    -&gt;     MASTER_USER='replication_user_name',</span><br><span class=\"line\">    -&gt;     MASTER_PASSWORD='replication_password',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_FILE='recorded_log_file_name',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_POS=recorded_log_position;</span><br></pre></td></tr></table></figure></p>\n<p>其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003<br>查看从节点运行状态<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt=\"\"><br><img src=\"2.png\" alt=\"\"></p>\n<p>MySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。<br>看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息<br>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work<br>从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因<br>第一：/etc/my.cnf文件中的server_id 相同我们可以通过<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like ‘server_id';</span><br></pre></td></tr></table></figure></p>\n<p>如果相同修改重启mysql服务。<br>第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。<br>找出这样的原因主要是因为直接copy mysql文件造成<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; cat /var/lib/mysql/auto.cnf;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"3.png\" alt=\"\"><br><img src=\"4.png\" alt=\"\"><br>现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功<br>启动slave开始复制<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"配置主节点\"><a href=\"#配置主节点\" class=\"headerlink\" title=\"配置主节点\"></a>配置主节点</h3><p>配置日志和服务ID , Linux是在/etc/my.cnf window是在my.ini文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br><span class=\"line\">#binlog-do-db=testDB //需要备份的数据库名多个库以逗号分隔不写表示全部</span><br><span class=\"line\">#log_bin_trust_function_creates=TRUE //涉及到同步函数或存储过程需要设置</span><br></pre></td></tr></table></figure>","more":"<p><strong><em>备注</em></strong><br>如果您省略了服务器标识（或将其设置为其默认值为0），则该主拒绝来自于奴隶的任何连接。</p>\n<h3 id=\"配置从节点\"><a href=\"#配置从节点\" class=\"headerlink\" title=\"配置从节点\"></a>配置从节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=2</span><br><span class=\"line\">#relay-log=mysqld-relay-bin 可选</span><br></pre></td></tr></table></figure>\n<h3 id=\"为复制创建用户\"><a href=\"#为复制创建用户\" class=\"headerlink\" title=\"为复制创建用户\"></a>为复制创建用户</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER 'repl'@'%' IDENTIFIED BY 'slavepass';</span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取二进制日志文件路径\"><a href=\"#获取二进制日志文件路径\" class=\"headerlink\" title=\"获取二进制日志文件路径\"></a>获取二进制日志文件路径</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>\n<p>在主的不同的会话中，使用显示主状态语句来确定当前二进制日志文件名和位置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; SHOW MASTER STATUS;</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+</span><br><span class=\"line\">| mysql-bin.000003 | 73       | test         | manual,mysql     |</span><br><span class=\"line\">+------------------+----------+--------------+---------------+</span><br></pre></td></tr></table></figure></p>\n<p>该文件列显示的日志文件名和位置显示该文件中的位置。在这个例子中，二进制日志文件mysql-bin.000003和位置73。记录这些值。当你在建立奴隶的时候，你需要他们。他们代表的复制坐标，在该坐标的奴隶应该开始处理新的更新，从主。如果主已经运行以前没有二进制启用日志记录，日志文件的名称和位置值以显示主人的地位或就显示——主数据将是空的。在这种情况下，在指定从属的日志文件和位置是空字符串（“”）和4。</p>\n<h3 id=\"使用mysqldump创建数据快照-可选\"><a href=\"#使用mysqldump创建数据快照-可选\" class=\"headerlink\" title=\"使用mysqldump创建数据快照(可选)\"></a>使用mysqldump创建数据快照(可选)</h3><p>这里显示的例子将所有数据库文件命名为dbdump.db，包括——主数据选项，自动将改变主人要求奴隶开始复制过程的声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqldump --all-databases --master-data &gt; dbdump.db</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用原数据创建数据快照（可选）\"><a href=\"#使用原数据创建数据快照（可选）\" class=\"headerlink\" title=\"使用原数据创建数据快照（可选）\"></a>使用原数据创建数据快照（可选）</h3><p>1.获取二进制日志文件路径参照第四步<br>2.关闭主服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysqladmin shutdown</span><br></pre></td></tr></table></figure></p>\n<p>3.复制数据库文件下面的命令只需要选择一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; tar cf /tmp/db.tar ./data</span><br><span class=\"line\">shell&gt; zip -r /tmp/db.zip ./data</span><br><span class=\"line\">shell&gt; rsync --recursive ./data /tmp/dbdata</span><br></pre></td></tr></table></figure></p>\n<p>4.重启主节点服务<br>如果你不是使用的InnoDB 表没有mysqladmin shutdown这个步骤</p>\n<h3 id=\"在从节点中设置主配置\"><a href=\"#在从节点中设置主配置\" class=\"headerlink\" title=\"在从节点中设置主配置\"></a>在从节点中设置主配置</h3><p>要建立与复制的主通信的从属关系，您必须告诉从属连接信息。要做到这一点，执行下面的语句，对从系统的实际值替换选项值：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CHANGE MASTER TO</span><br><span class=\"line\">    -&gt;     MASTER_HOST='master_host_name',</span><br><span class=\"line\">    -&gt;     MASTER_USER='replication_user_name',</span><br><span class=\"line\">    -&gt;     MASTER_PASSWORD='replication_password',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_FILE='recorded_log_file_name',</span><br><span class=\"line\">    -&gt;     MASTER_LOG_POS=recorded_log_position;</span><br></pre></td></tr></table></figure></p>\n<p>其中MASTER_LOG_FILE 对应的是Master 的日志文件名称，获取方法参考第四步。在我们这里是mysql-bin.000003<br>查看从节点运行状态<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"1.png\" alt=\"\"><br><img src=\"2.png\" alt=\"\"></p>\n<p>MySQL Replication中Slave机器中有两个关键进程，死一个都不行，一个是Slave_SQL_Runing 一个是Slave_IO_Runing他们一个是负责自己的Slave MySQL进程，一个负责组建的IO通信。<br>看到 Slave_IO_Runing为NO表示从节点服务没有启动成功，然后我们看Last_IO_Error 显示的错误信息<br>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work<br>从错误信息中可以看出从节点的UUID和UUID相同，造成出现这个错误有两种原因<br>第一：/etc/my.cnf文件中的server_id 相同我们可以通过<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like ‘server_id';</span><br></pre></td></tr></table></figure></p>\n<p>如果相同修改重启mysql服务。<br>第二：如果不同查看主从server-uuid是否相同如果相同按照16进制规则修改其中任意库重启mysql服务即可。<br>找出这样的原因主要是因为直接copy mysql文件造成<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; cat /var/lib/mysql/auto.cnf;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"3.png\" alt=\"\"><br><img src=\"4.png\" alt=\"\"><br>现在 Slave_IO_Runing和Slave_SQL_Running都为YES启动成功<br>启动slave开始复制<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br></pre></td></tr></table></figure></p>"},{"title":"为什么寄存器比内存快","date":"2013-10-14T16:00:00.000Z","comments":1,"toc":true,"_content":"\n计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。\n同样都是晶体管存储设备，为什么寄存器比内存快呢？\nMike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。\n<!--more-->\n\n## 原因一：距离不同\n距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。\n以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。\n距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。\n\n## 原因二：硬件设计不同\n苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。\n\n事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。\n\n## 原因三：工作方式不同\n寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。\n\n内存的工作方式就要复杂得多：\n（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）\n（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。\n（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。\n（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。\n（5）数据先送回内存控制器，再送回 CPU，然后开始使用。\n内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。\n为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。\n","source":"_posts/为什么寄存器比内存快.md","raw":"---\ntitle: 为什么寄存器比内存快\ndate: 2013-10-15\ncomments: true\ncategories: Other\ntoc: true \n---\n\n计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。\n同样都是晶体管存储设备，为什么寄存器比内存快呢？\nMike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。\n<!--more-->\n\n## 原因一：距离不同\n距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。\n以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。\n距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。\n\n## 原因二：硬件设计不同\n苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。\n\n事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。\n\n## 原因三：工作方式不同\n寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。\n\n内存的工作方式就要复杂得多：\n（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）\n（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。\n（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。\n（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。\n（5）数据先送回内存控制器，再送回 CPU，然后开始使用。\n内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。\n为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。\n","slug":"为什么寄存器比内存快","published":1,"updated":"2016-05-14T09:46:05.710Z","layout":"post","photos":[],"link":"","_id":"civ2gzlna001a50ybuyrzpcs1","content":"<p>计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。<br>同样都是晶体管存储设备，为什么寄存器比内存快呢？<br>Mike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。<br><a id=\"more\"></a></p>\n<h2 id=\"原因一：距离不同\"><a href=\"#原因一：距离不同\" class=\"headerlink\" title=\"原因一：距离不同\"></a>原因一：距离不同</h2><p>距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。<br>以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。<br>距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。</p>\n<h2 id=\"原因二：硬件设计不同\"><a href=\"#原因二：硬件设计不同\" class=\"headerlink\" title=\"原因二：硬件设计不同\"></a>原因二：硬件设计不同</h2><p>苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。</p>\n<p>事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。</p>\n<h2 id=\"原因三：工作方式不同\"><a href=\"#原因三：工作方式不同\" class=\"headerlink\" title=\"原因三：工作方式不同\"></a>原因三：工作方式不同</h2><p>寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。</p>\n<p>内存的工作方式就要复杂得多：<br>（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）<br>（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。<br>（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。<br>（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。<br>（5）数据先送回内存控制器，再送回 CPU，然后开始使用。<br>内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。<br>为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。</p>\n","excerpt":"<p>计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。<br>同样都是晶体管存储设备，为什么寄存器比内存快呢？<br>Mike Ash 写了一篇很好的解释，非常通俗地回答了这个问题，有助于加深对硬件的理解。下面就是我的简单翻译。<br>","more":"</p>\n<h2 id=\"原因一：距离不同\"><a href=\"#原因一：距离不同\" class=\"headerlink\" title=\"原因一：距离不同\"></a>原因一：距离不同</h2><p>距离不是主要因素，但是最好懂，所以放在最前面说。内存离 CPU 比较远，所以要耗费更长的时间读取。<br>以 3GHz 的 CPU 为例，电流每秒钟可以振荡 30 亿次，每次耗时大约为 0.33纳秒。光在 1 纳秒的时间内，可以前进 30 厘米。也就是说，在 CPU 的一个时钟周期内，光可以前进 10 厘米。因此，如果内存距离 CPU 超过 5 厘米，就不可能在一个时钟周期内完成数据的读取，这还没有考虑硬件的限制和电流实际上达不到光速。相比之下，寄存器在 CPU 内部，当然读起来会快一点。<br>距离对于桌面电脑影响很大，对于手机影响就要小得多。手机 CPU 的时钟频率比较慢（iPhone 5s 为 1.3GHz），而且手机的内存紧挨着 CPU。</p>\n<h2 id=\"原因二：硬件设计不同\"><a href=\"#原因二：硬件设计不同\" class=\"headerlink\" title=\"原因二：硬件设计不同\"></a>原因二：硬件设计不同</h2><p>苹果公司新推出的 iPhone 5s，CPU 是 A7，寄存器有 6000 多位（31 个 64 位寄存器，加上 32 个 128 位寄存器）。而 iPhone 5s 的内存是 1GB，约为 80 亿位（bit）。这意味着，高性能、高成本、高耗电的设计可以用在寄存器上，反正只有 6000 多位，而不能用在内存上。因为每个位的成本和能耗只要增加一点点，就会被放大 80 亿倍。</p>\n<p>事实上确实如此，内存的设计相对简单，每个位就是一个电容和一个晶体管，而寄存器的设计则完全不同，多出好几个电子元件。并且通电以后，寄存器的晶体管一直有电，而内存的晶体管只有用到的才有电，没用到的就没电，这样有利于省电。这些设计上的因素，决定了寄存器比内存读取速度更快。</p>\n<h2 id=\"原因三：工作方式不同\"><a href=\"#原因三：工作方式不同\" class=\"headerlink\" title=\"原因三：工作方式不同\"></a>原因三：工作方式不同</h2><p>寄存器的工作方式很简单，只有两步：（1）找到相关的位，（2）读取这些位。</p>\n<p>内存的工作方式就要复杂得多：<br>（1）找到数据的指针。（指针可能存放在寄存器内，所以这一步就已经包括寄存器的全部工作了。）<br>（2）将指针送往内存管理单元（MMU），由 MMU 将虚拟的内存地址翻译成实际的物理地址。<br>（3）将物理地址送往内存控制器（memory controller），由内存控制器找出该地址在哪一根内存插槽（bank）上。<br>（4）确定数据在哪一个内存块（chunk）上，从该块读取数据。<br>（5）数据先送回内存控制器，再送回 CPU，然后开始使用。<br>内存的工作流程比寄存器多出许多步。每一步都会产生延迟，累积起来就使得内存比寄存器慢得多。<br>为了缓解寄存器与内存之间的巨大速度差异，硬件设计师做出了许多努力，包括在 CPU 内部设置缓存、优化 CPU 工作方式，尽量一次性从内存读取指令所要用到的全部数据等等。</p>"},{"title":"构建单页Web应用","date":"2016-05-16T15:57:33.000Z","comments":1,"toc":true,"_content":"\n## 单页应用是什么？\n\n让我们先来看几个网站：\n[coding](https://coding.net/)\n[teambition](https://www.teambition.com/)\n[cloud9](https://c9.io/)\n<!--more-->\n\n注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。\n所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。\n其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。\n\n## 开发框架\nExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。\njQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。\n但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。\n为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。\n这类框架包括Backbone，Knockout，AngularJS，Avalon等。\n\n## 组件化\n这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。\n分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。\n\n## 代码隔离\n与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。\n从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。\n在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。\n模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。\n\n## 代码合并与加载策略\n人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。\n从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。\n通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。\n当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。\n在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。\n\n## 路由与状态的管理\n我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。\n管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？\n传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。\n具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。\n有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。\n其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。\n当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。\n\n## 缓存与本地存储\n在单页应用的运作机制中，缓存是一个很重要的环节。\n由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。\n甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个[basket.js](https://github.com/addyosmani/basket.js)，就利用了HTML5 localStorage作了js和css文件的缓存。\n在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用[localStorage](https://github.com/mortzdk/localStorage)或者[localStorageDB](https://github.com/knadh/localStorageDB)来简化自己的业务代码。\n\n## 服务端通信\n传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。\nWebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。\n由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。\n\n## 内存管理\n传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。\n\n## 样式的规划\n在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。\n样式规划主要是几个方面：\n### 基准样式的分离\n这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。\n### 组件样式的划分\n这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。\n### 堆叠次序的管理\n传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。\n在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？\n了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。\n\n## 单页应用的产品形态\n我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。\n除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。\n单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。\n单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。\n\n## 部署模式的改变\n在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。\n我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。\n假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。\n\n## 单页应用的缺陷\n单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。\n\n## 产品单页化带来的挑战\n一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。\n开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/5)","source":"_posts/构建单页Web应用.md","raw":"---\ntitle: 构建单页Web应用\ndate: 2016-05-16 23:57:33 \ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n## 单页应用是什么？\n\n让我们先来看几个网站：\n[coding](https://coding.net/)\n[teambition](https://www.teambition.com/)\n[cloud9](https://c9.io/)\n<!--more-->\n\n注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。\n所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。\n其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。\n\n## 开发框架\nExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。\njQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。\n但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。\n为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。\n这类框架包括Backbone，Knockout，AngularJS，Avalon等。\n\n## 组件化\n这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。\n分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。\n\n## 代码隔离\n与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。\n从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。\n在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。\n模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。\n\n## 代码合并与加载策略\n人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。\n从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。\n通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。\n当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。\n在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。\n\n## 路由与状态的管理\n我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。\n管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？\n传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。\n具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。\n有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。\n其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。\n当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。\n\n## 缓存与本地存储\n在单页应用的运作机制中，缓存是一个很重要的环节。\n由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。\n甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个[basket.js](https://github.com/addyosmani/basket.js)，就利用了HTML5 localStorage作了js和css文件的缓存。\n在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用[localStorage](https://github.com/mortzdk/localStorage)或者[localStorageDB](https://github.com/knadh/localStorageDB)来简化自己的业务代码。\n\n## 服务端通信\n传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。\nWebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。\n由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。\n\n## 内存管理\n传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。\n\n## 样式的规划\n在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。\n样式规划主要是几个方面：\n### 基准样式的分离\n这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。\n### 组件样式的划分\n这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。\n### 堆叠次序的管理\n传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。\n在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？\n了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。\n\n## 单页应用的产品形态\n我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。\n除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。\n单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。\n单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。\n\n## 部署模式的改变\n在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。\n我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。\n假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。\n\n## 单页应用的缺陷\n单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。\n\n## 产品单页化带来的挑战\n一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。\n开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。\n\n[来自前端大牛徐飞博客](https://github.com/xufei/blog/issues/5)","slug":"构建单页Web应用","published":1,"updated":"2016-05-16T16:06:27.975Z","layout":"post","photos":[],"link":"","_id":"civ2gzlna001b50ybrijzr3a9","content":"<h2 id=\"单页应用是什么？\"><a href=\"#单页应用是什么？\" class=\"headerlink\" title=\"单页应用是什么？\"></a>单页应用是什么？</h2><p>让我们先来看几个网站：<br><a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">coding</a><br><a href=\"https://www.teambition.com/\" target=\"_blank\" rel=\"external\">teambition</a><br><a href=\"https://c9.io/\" target=\"_blank\" rel=\"external\">cloud9</a><br><a id=\"more\"></a></p>\n<p>注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。<br>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。<br>其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><p>ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。<br>jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。<br>但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。<br>为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。<br>这类框架包括Backbone，Knockout，AngularJS，Avalon等。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。<br>分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。</p>\n<h2 id=\"代码隔离\"><a href=\"#代码隔离\" class=\"headerlink\" title=\"代码隔离\"></a>代码隔离</h2><p>与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。<br>从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。<br>在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。<br>模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。</p>\n<h2 id=\"代码合并与加载策略\"><a href=\"#代码合并与加载策略\" class=\"headerlink\" title=\"代码合并与加载策略\"></a>代码合并与加载策略</h2><p>人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。<br>从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。<br>通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。<br>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。<br>在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。</p>\n<h2 id=\"路由与状态的管理\"><a href=\"#路由与状态的管理\" class=\"headerlink\" title=\"路由与状态的管理\"></a>路由与状态的管理</h2><p>我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。<br>管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？<br>传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。<br>具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。<br>有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。<br>其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。<br>当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。</p>\n<h2 id=\"缓存与本地存储\"><a href=\"#缓存与本地存储\" class=\"headerlink\" title=\"缓存与本地存储\"></a>缓存与本地存储</h2><p>在单页应用的运作机制中，缓存是一个很重要的环节。<br>由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。<br>甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个<a href=\"https://github.com/addyosmani/basket.js\" target=\"_blank\" rel=\"external\">basket.js</a>，就利用了HTML5 localStorage作了js和css文件的缓存。<br>在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用<a href=\"https://github.com/mortzdk/localStorage\" target=\"_blank\" rel=\"external\">localStorage</a>或者<a href=\"https://github.com/knadh/localStorageDB\" target=\"_blank\" rel=\"external\">localStorageDB</a>来简化自己的业务代码。</p>\n<h2 id=\"服务端通信\"><a href=\"#服务端通信\" class=\"headerlink\" title=\"服务端通信\"></a>服务端通信</h2><p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。<br>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。<br>由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>\n<h2 id=\"样式的规划\"><a href=\"#样式的规划\" class=\"headerlink\" title=\"样式的规划\"></a>样式的规划</h2><p>在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。<br>样式规划主要是几个方面：</p>\n<h3 id=\"基准样式的分离\"><a href=\"#基准样式的分离\" class=\"headerlink\" title=\"基准样式的分离\"></a>基准样式的分离</h3><p>这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。</p>\n<h3 id=\"组件样式的划分\"><a href=\"#组件样式的划分\" class=\"headerlink\" title=\"组件样式的划分\"></a>组件样式的划分</h3><p>这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。</p>\n<h3 id=\"堆叠次序的管理\"><a href=\"#堆叠次序的管理\" class=\"headerlink\" title=\"堆叠次序的管理\"></a>堆叠次序的管理</h3><p>传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。<br>在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？<br>了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。</p>\n<h2 id=\"单页应用的产品形态\"><a href=\"#单页应用的产品形态\" class=\"headerlink\" title=\"单页应用的产品形态\"></a>单页应用的产品形态</h2><p>我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。<br>除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。<br>单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。<br>单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。</p>\n<h2 id=\"部署模式的改变\"><a href=\"#部署模式的改变\" class=\"headerlink\" title=\"部署模式的改变\"></a>部署模式的改变</h2><p>在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。<br>我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。<br>假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。</p>\n<h2 id=\"单页应用的缺陷\"><a href=\"#单页应用的缺陷\" class=\"headerlink\" title=\"单页应用的缺陷\"></a>单页应用的缺陷</h2><p>单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。</p>\n<h2 id=\"产品单页化带来的挑战\"><a href=\"#产品单页化带来的挑战\" class=\"headerlink\" title=\"产品单页化带来的挑战\"></a>产品单页化带来的挑战</h2><p>一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。<br>开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/5\" target=\"_blank\" rel=\"external\">来自前端大牛徐飞博客</a></p>\n","excerpt":"<h2 id=\"单页应用是什么？\"><a href=\"#单页应用是什么？\" class=\"headerlink\" title=\"单页应用是什么？\"></a>单页应用是什么？</h2><p>让我们先来看几个网站：<br><a href=\"https://coding.net/\">coding</a><br><a href=\"https://www.teambition.com/\">teambition</a><br><a href=\"https://c9.io/\">cloud9</a><br>","more":"</p>\n<p>注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。<br>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。<br>其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。</p>\n<h2 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h2><p>ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。<br>jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。<br>但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。<br>为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。<br>这类框架包括Backbone，Knockout，AngularJS，Avalon等。</p>\n<h2 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h2><p>这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。<br>分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。</p>\n<h2 id=\"代码隔离\"><a href=\"#代码隔离\" class=\"headerlink\" title=\"代码隔离\"></a>代码隔离</h2><p>与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。<br>从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。<br>在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。<br>模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。</p>\n<h2 id=\"代码合并与加载策略\"><a href=\"#代码合并与加载策略\" class=\"headerlink\" title=\"代码合并与加载策略\"></a>代码合并与加载策略</h2><p>人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。<br>从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。<br>通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。<br>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。<br>在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。</p>\n<h2 id=\"路由与状态的管理\"><a href=\"#路由与状态的管理\" class=\"headerlink\" title=\"路由与状态的管理\"></a>路由与状态的管理</h2><p>我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。<br>管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？<br>传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。<br>具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。<br>有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。<br>其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。<br>当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。</p>\n<h2 id=\"缓存与本地存储\"><a href=\"#缓存与本地存储\" class=\"headerlink\" title=\"缓存与本地存储\"></a>缓存与本地存储</h2><p>在单页应用的运作机制中，缓存是一个很重要的环节。<br>由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。<br>甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个<a href=\"https://github.com/addyosmani/basket.js\">basket.js</a>，就利用了HTML5 localStorage作了js和css文件的缓存。<br>在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用<a href=\"https://github.com/mortzdk/localStorage\">localStorage</a>或者<a href=\"https://github.com/knadh/localStorageDB\">localStorageDB</a>来简化自己的业务代码。</p>\n<h2 id=\"服务端通信\"><a href=\"#服务端通信\" class=\"headerlink\" title=\"服务端通信\"></a>服务端通信</h2><p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。<br>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。<br>由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>\n<h2 id=\"样式的规划\"><a href=\"#样式的规划\" class=\"headerlink\" title=\"样式的规划\"></a>样式的规划</h2><p>在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。<br>样式规划主要是几个方面：</p>\n<h3 id=\"基准样式的分离\"><a href=\"#基准样式的分离\" class=\"headerlink\" title=\"基准样式的分离\"></a>基准样式的分离</h3><p>这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。</p>\n<h3 id=\"组件样式的划分\"><a href=\"#组件样式的划分\" class=\"headerlink\" title=\"组件样式的划分\"></a>组件样式的划分</h3><p>这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。</p>\n<h3 id=\"堆叠次序的管理\"><a href=\"#堆叠次序的管理\" class=\"headerlink\" title=\"堆叠次序的管理\"></a>堆叠次序的管理</h3><p>传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。<br>在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？<br>了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。</p>\n<h2 id=\"单页应用的产品形态\"><a href=\"#单页应用的产品形态\" class=\"headerlink\" title=\"单页应用的产品形态\"></a>单页应用的产品形态</h2><p>我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。<br>除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。<br>单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。<br>单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。</p>\n<h2 id=\"部署模式的改变\"><a href=\"#部署模式的改变\" class=\"headerlink\" title=\"部署模式的改变\"></a>部署模式的改变</h2><p>在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。<br>我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。<br>假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。</p>\n<h2 id=\"单页应用的缺陷\"><a href=\"#单页应用的缺陷\" class=\"headerlink\" title=\"单页应用的缺陷\"></a>单页应用的缺陷</h2><p>单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。</p>\n<h2 id=\"产品单页化带来的挑战\"><a href=\"#产品单页化带来的挑战\" class=\"headerlink\" title=\"产品单页化带来的挑战\"></a>产品单页化带来的挑战</h2><p>一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。<br>开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。</p>\n<p><a href=\"https://github.com/xufei/blog/issues/5\">来自前端大牛徐飞博客</a></p>"},{"title":"开发管理的一些建议","date":"2016-05-30T15:57:33.000Z","comments":1,"toc":true,"_content":"随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。\n如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。\n<!--more-->\n### 编码规范化\n\n一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。\n### 前台组件化\n\n### 后台服务化\n\n### 部署一键化 \n\n### 避免直接修改第三方库\n第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。\n\n\n\n","source":"_posts/开发管理的一些建议.md","raw":"---\ntitle: 开发管理的一些建议\ndate: 2016-05-30 23:57:33 \ncomments: true \ncategories: 心得体会\ntoc: true\n---\n随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。\n如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。\n<!--more-->\n### 编码规范化\n\n一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。\n### 前台组件化\n\n### 后台服务化\n\n### 部署一键化 \n\n### 避免直接修改第三方库\n第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。\n\n\n\n","slug":"开发管理的一些建议","published":1,"updated":"2016-06-10T03:46:43.353Z","layout":"post","photos":[],"link":"","_id":"civ2gzlnk001e50yb05adli0i","content":"<p>随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。<br>如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。<br><a id=\"more\"></a></p>\n<h3 id=\"编码规范化\"><a href=\"#编码规范化\" class=\"headerlink\" title=\"编码规范化\"></a>编码规范化</h3><p>一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。</p>\n<h3 id=\"前台组件化\"><a href=\"#前台组件化\" class=\"headerlink\" title=\"前台组件化\"></a>前台组件化</h3><h3 id=\"后台服务化\"><a href=\"#后台服务化\" class=\"headerlink\" title=\"后台服务化\"></a>后台服务化</h3><h3 id=\"部署一键化\"><a href=\"#部署一键化\" class=\"headerlink\" title=\"部署一键化\"></a>部署一键化</h3><h3 id=\"避免直接修改第三方库\"><a href=\"#避免直接修改第三方库\" class=\"headerlink\" title=\"避免直接修改第三方库\"></a>避免直接修改第三方库</h3><p>第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。</p>\n","excerpt":"<p>随着互联网的高速发展，对我们的软件要求越来越高。高性能、高并发、高可用、可维护这些字眼刷爆了我们的眼球，好像不谈这些词语就不是一个互联网开发者。确实相比传统软件一个互联网的项目有着更高的要求。而高性能、高并发、高可用、可维护直接反映了互联网项目的特点。<br>如何满足这些要求我想从开发的角度出发展开以下四点的讨论其一编码规范、其二前台组件化、其三后台服务化、其四部署一键化。<br>","more":"</p>\n<h3 id=\"编码规范化\"><a href=\"#编码规范化\" class=\"headerlink\" title=\"编码规范化\"></a>编码规范化</h3><p>一款好的软件更像是一件艺术品，优秀的设计模式，良好的编程风格，规划化的命名规则，让人看着赏心悦目。基本上我们每进入一个团队，在开始写代码前总会跟我们强调命名规则，为什么命名规范这么重要呢，我乱写会不会出问题呢，这是肯定的，肯定会出问题。一个项目基本都是由一个团队来完成的，如果我们不给他们制定规则每个人都有一套自己的风格，这对于我们团队协作开发来说是灾难性。软件命名其实跟人起名是一样的，我们要认真的对待。如果在开发之前不说明好规则，在开发中就有可能文件名、包名随便起、团队中其他开发人员就看不懂你写的是什么东西了，然后跑过来问你是写的是什么，从而降低了开发效率。这样的情况还不是最糟糕的，当你离职了以后，就更为难别人了这样的代码可读性太差了。对于可维护性带来了严重的挑战。</p>\n<h3 id=\"前台组件化\"><a href=\"#前台组件化\" class=\"headerlink\" title=\"前台组件化\"></a>前台组件化</h3><h3 id=\"后台服务化\"><a href=\"#后台服务化\" class=\"headerlink\" title=\"后台服务化\"></a>后台服务化</h3><h3 id=\"部署一键化\"><a href=\"#部署一键化\" class=\"headerlink\" title=\"部署一键化\"></a>部署一键化</h3><h3 id=\"避免直接修改第三方库\"><a href=\"#避免直接修改第三方库\" class=\"headerlink\" title=\"避免直接修改第三方库\"></a>避免直接修改第三方库</h3><p>第三方库我指的是前台的第三方js文件 jquery、angularjs、vue.js、react.js 等后台的jar包common.lang.jar。其实似乎在前台我们直接修改第三方js文件居多。在后台一般会通过继承重写，来实现我们想要的效果。</p>"},{"title":"框架那么多学习那个好","date":"2016-05-16T14:49:33.000Z","comments":1,"_content":"\n***摘自知乎文章，加自己体会***\n\n我们学习一个东西，通常两个目的：\n-为了解决现在的问题\n-为了解决将来可能会有的问题\n\n所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。\n<!--more-->\n在Web应用中，我们需要解决的问题可以归纳为三类\n***-状态***\n***-组织***\n***-效率***\n\n1、状态\n什么是状态？\n在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。\n比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。\nReact走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。\n在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。\n\n2、 组织\n\n刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。\n所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。\n我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚\n那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。\n业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。\n那么，这跟Redux之类又有什么关系呢？\n我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。\n所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。\n另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。\n在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。\n用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。\n在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。\n再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。\n\n\n3、效率\n\n效率也分两种，一种是开发效率，一种是运行效率。\n我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。\n具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。\n其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。\n再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，\n运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。\n\n作者：徐飞\n链接：https://www.zhihu.com/question/39943474/answer/83905933\n来源：知乎","source":"_posts/框架那么多学习那个好.md","raw":"---\ntitle: 框架那么多学习那个好\ndate: 2016-05-16 22:49:33 \ncomments: true \ncategories: 心得体会\n---\n\n***摘自知乎文章，加自己体会***\n\n我们学习一个东西，通常两个目的：\n-为了解决现在的问题\n-为了解决将来可能会有的问题\n\n所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。\n<!--more-->\n在Web应用中，我们需要解决的问题可以归纳为三类\n***-状态***\n***-组织***\n***-效率***\n\n1、状态\n什么是状态？\n在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。\n比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。\nReact走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。\n在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。\n\n2、 组织\n\n刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。\n所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。\n我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚\n那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。\n业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。\n那么，这跟Redux之类又有什么关系呢？\n我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。\n所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。\n另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。\n在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。\n用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。\n在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。\n再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。\n\n\n3、效率\n\n效率也分两种，一种是开发效率，一种是运行效率。\n我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。\n具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。\n其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。\n再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，\n运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。\n\n作者：徐飞\n链接：https://www.zhihu.com/question/39943474/answer/83905933\n来源：知乎","slug":"框架那么多学习那个好","published":1,"updated":"2016-05-16T15:44:47.377Z","layout":"post","photos":[],"link":"","_id":"civ2gzlnk001f50yb1fx9cdgq","content":"<p><strong><em>摘自知乎文章，加自己体会</em></strong></p>\n<p>我们学习一个东西，通常两个目的：<br>-为了解决现在的问题<br>-为了解决将来可能会有的问题</p>\n<p>所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。<br><a id=\"more\"></a><br>在Web应用中，我们需要解决的问题可以归纳为三类<br><strong><em>-状态</em></strong><br><strong><em>-组织</em></strong><br><strong><em>-效率</em></strong></p>\n<p>1、状态<br>什么是状态？<br>在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。<br>比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。<br>React走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。<br>在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。</p>\n<p>2、 组织</p>\n<p>刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。<br>所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。<br>我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚<br>那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。<br>业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。<br>那么，这跟Redux之类又有什么关系呢？<br>我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。<br>所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。<br>另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。<br>在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。<br>用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。<br>在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。<br>再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。</p>\n<p>3、效率</p>\n<p>效率也分两种，一种是开发效率，一种是运行效率。<br>我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。<br>具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。<br>其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。<br>再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，<br>运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。</p>\n<p>作者：徐飞<br>链接：<a href=\"https://www.zhihu.com/question/39943474/answer/83905933\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/39943474/answer/83905933</a><br>来源：知乎</p>\n","excerpt":"<p><strong><em>摘自知乎文章，加自己体会</em></strong></p>\n<p>我们学习一个东西，通常两个目的：<br>-为了解决现在的问题<br>-为了解决将来可能会有的问题</p>\n<p>所以，在学习这些东西之前，先必须了解，它们是用来解决什么问题的。<br>","more":"<br>在Web应用中，我们需要解决的问题可以归纳为三类<br><strong><em>-状态</em></strong><br><strong><em>-组织</em></strong><br><strong><em>-效率</em></strong></p>\n<p>1、状态<br>什么是状态？<br>在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。<br>比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。<br>React走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。<br>在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。</p>\n<p>2、 组织</p>\n<p>刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。<br>所谓组织，指的是两个方面，一方面是模块关系，另一方面是业务模型。<br>我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚<br>那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。<br>业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。<br>那么，这跟Redux之类又有什么关系呢？<br>我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。<br>所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。<br>另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。<br>在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。<br>用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。<br>在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。<br>再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。</p>\n<p>3、效率</p>\n<p>效率也分两种，一种是开发效率，一种是运行效率。<br>我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。<br>具体到单个组件的实现上，我个人是倾向于MVVM流的，MVVM系的代码量会少一些，开发效率稍高一点。<br>其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。<br>再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，<br>运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。</p>\n<p>作者：徐飞<br>链接：<a href=\"https://www.zhihu.com/question/39943474/answer/83905933\">https://www.zhihu.com/question/39943474/answer/83905933</a><br>来源：知乎</p>"},{"title":"企业体检开发框架培训","date":"2015-11-02T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## 框架构成介绍\n\n### 系统架构图\n<!--more-->\n![系统架构图](开发框架架构图.png)\n\n### 框架构成\n***MVC框架 [Jfianl](http://www.jfinal.com/)***\n***权限框架 [Shiro](http://shiro.apache.org/)***\n***数据库连接池 [Durid](https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)***\n***模板引擎 [Freemarker](http://freemarker.org/)***\n\n## 什么是Jfianl\njfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！\n***总结一句：短小精悍强大,易于使用.***\n\n### fianl有什么特点?\n1、MVC架构，设计精巧，使用简单\n2、遵循COC原则，零配置，无xml\n3、独创Db + Record模式，灵活便利\n4、ActiveRecord支持，使数据库开发极致快速\n5、自动加载修改后的java文件，开发过程中无需重启web server\n6、AOP支持，拦截器配置灵活，功能强大\n7、Plugin体系结构，扩展性强\n8、多视图支持，支持FreeMarker、JSP、Velocity\n9、强大的Validator后端校验功能\n10、功能齐全，拥有struts2的绝大部分功能\n11、体积小仅248K，且无第三方依赖\n\n### Jfianl性能\nfinal 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目\n的代码量减少 85% 以上\n以上数据来源： http://www.oschina.net/question/167900_232456\n\n这里有一些有关性能测试的数据和讨论： \nhttp://www.oschina.net/question/173052_62228 \nhttp://www.oschina.net/question/1988085_230350 \nhttp://www.oschina.net/question/590700_120423 \nhttp://www.oschina.net/question/197668_221395 \n## 什么是Shiro\n\n是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，\n可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用\nShiro 为安全的四要素 提供了保护应用的API：\n认证 - 用户身份识别，常被称为用户“登录”；\n授权 - 访问控制；\n密码加密 - 保护或隐藏数据防止被偷窥；\n会话管理 - 每用户相关的时间敏感的状态。","source":"_posts/企业体检开发框架培训.md","raw":"---\ntitle: 企业体检开发框架培训\ndate: 2015-11-03\ncomments: true\ncategories: 培训文档\ntoc: true \n---\n\n## 框架构成介绍\n\n### 系统架构图\n<!--more-->\n![系统架构图](开发框架架构图.png)\n\n### 框架构成\n***MVC框架 [Jfianl](http://www.jfinal.com/)***\n***权限框架 [Shiro](http://shiro.apache.org/)***\n***数据库连接池 [Durid](https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)***\n***模板引擎 [Freemarker](http://freemarker.org/)***\n\n## 什么是Jfianl\njfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！\n***总结一句：短小精悍强大,易于使用.***\n\n### fianl有什么特点?\n1、MVC架构，设计精巧，使用简单\n2、遵循COC原则，零配置，无xml\n3、独创Db + Record模式，灵活便利\n4、ActiveRecord支持，使数据库开发极致快速\n5、自动加载修改后的java文件，开发过程中无需重启web server\n6、AOP支持，拦截器配置灵活，功能强大\n7、Plugin体系结构，扩展性强\n8、多视图支持，支持FreeMarker、JSP、Velocity\n9、强大的Validator后端校验功能\n10、功能齐全，拥有struts2的绝大部分功能\n11、体积小仅248K，且无第三方依赖\n\n### Jfianl性能\nfinal 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目\n的代码量减少 85% 以上\n以上数据来源： http://www.oschina.net/question/167900_232456\n\n这里有一些有关性能测试的数据和讨论： \nhttp://www.oschina.net/question/173052_62228 \nhttp://www.oschina.net/question/1988085_230350 \nhttp://www.oschina.net/question/590700_120423 \nhttp://www.oschina.net/question/197668_221395 \n## 什么是Shiro\n\n是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，\n可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用\nShiro 为安全的四要素 提供了保护应用的API：\n认证 - 用户身份识别，常被称为用户“登录”；\n授权 - 访问控制；\n密码加密 - 保护或隐藏数据防止被偷窥；\n会话管理 - 每用户相关的时间敏感的状态。","slug":"企业体检开发框架培训","published":1,"updated":"2016-05-14T12:53:53.472Z","layout":"post","photos":[],"link":"","_id":"civ2gzlnk001h50yb5jaegjm4","content":"<h2 id=\"框架构成介绍\"><a href=\"#框架构成介绍\" class=\"headerlink\" title=\"框架构成介绍\"></a>框架构成介绍</h2><h3 id=\"系统架构图\"><a href=\"#系统架构图\" class=\"headerlink\" title=\"系统架构图\"></a>系统架构图</h3><a id=\"more\"></a>\n<p><img src=\"开发框架架构图.png\" alt=\"系统架构图\"></p>\n<h3 id=\"框架构成\"><a href=\"#框架构成\" class=\"headerlink\" title=\"框架构成\"></a>框架构成</h3><p><strong><em>MVC框架 <a href=\"http://www.jfinal.com/\" target=\"_blank\" rel=\"external\">Jfianl</a></em></strong><br><strong><em>权限框架 <a href=\"http://shiro.apache.org/\" target=\"_blank\" rel=\"external\">Shiro</a></em></strong><br><strong><em>数据库连接池 <a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"external\">Durid</a></em></strong><br><strong><em>模板引擎 <a href=\"http://freemarker.org/\" target=\"_blank\" rel=\"external\">Freemarker</a></em></strong></p>\n<h2 id=\"什么是Jfianl\"><a href=\"#什么是Jfianl\" class=\"headerlink\" title=\"什么是Jfianl\"></a>什么是Jfianl</h2><p>jfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！<br><strong><em>总结一句：短小精悍强大,易于使用.</em></strong></p>\n<h3 id=\"fianl有什么特点\"><a href=\"#fianl有什么特点\" class=\"headerlink\" title=\"fianl有什么特点?\"></a>fianl有什么特点?</h3><p>1、MVC架构，设计精巧，使用简单<br>2、遵循COC原则，零配置，无xml<br>3、独创Db + Record模式，灵活便利<br>4、ActiveRecord支持，使数据库开发极致快速<br>5、自动加载修改后的java文件，开发过程中无需重启web server<br>6、AOP支持，拦截器配置灵活，功能强大<br>7、Plugin体系结构，扩展性强<br>8、多视图支持，支持FreeMarker、JSP、Velocity<br>9、强大的Validator后端校验功能<br>10、功能齐全，拥有struts2的绝大部分功能<br>11、体积小仅248K，且无第三方依赖</p>\n<h3 id=\"Jfianl性能\"><a href=\"#Jfianl性能\" class=\"headerlink\" title=\"Jfianl性能\"></a>Jfianl性能</h3><p>final 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目<br>的代码量减少 85% 以上<br>以上数据来源： <a href=\"http://www.oschina.net/question/167900_232456\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/167900_232456</a></p>\n<p>这里有一些有关性能测试的数据和讨论：<br><a href=\"http://www.oschina.net/question/173052_62228\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/173052_62228</a><br><a href=\"http://www.oschina.net/question/1988085_230350\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/1988085_230350</a><br><a href=\"http://www.oschina.net/question/590700_120423\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/590700_120423</a><br><a href=\"http://www.oschina.net/question/197668_221395\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/197668_221395</a> </p>\n<h2 id=\"什么是Shiro\"><a href=\"#什么是Shiro\" class=\"headerlink\" title=\"什么是Shiro\"></a>什么是Shiro</h2><p>是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，<br>可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用<br>Shiro 为安全的四要素 提供了保护应用的API：<br>认证 - 用户身份识别，常被称为用户“登录”；<br>授权 - 访问控制；<br>密码加密 - 保护或隐藏数据防止被偷窥；<br>会话管理 - 每用户相关的时间敏感的状态。</p>\n","excerpt":"<h2 id=\"框架构成介绍\"><a href=\"#框架构成介绍\" class=\"headerlink\" title=\"框架构成介绍\"></a>框架构成介绍</h2><h3 id=\"系统架构图\"><a href=\"#系统架构图\" class=\"headerlink\" title=\"系统架构图\"></a>系统架构图</h3>","more":"<p><img src=\"开发框架架构图.png\" alt=\"系统架构图\"></p>\n<h3 id=\"框架构成\"><a href=\"#框架构成\" class=\"headerlink\" title=\"框架构成\"></a>框架构成</h3><p><strong><em>MVC框架 <a href=\"http://www.jfinal.com/\">Jfianl</a></em></strong><br><strong><em>权限框架 <a href=\"http://shiro.apache.org/\">Shiro</a></em></strong><br><strong><em>数据库连接池 <a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">Durid</a></em></strong><br><strong><em>模板引擎 <a href=\"http://freemarker.org/\">Freemarker</a></em></strong></p>\n<h2 id=\"什么是Jfianl\"><a href=\"#什么是Jfianl\" class=\"headerlink\" title=\"什么是Jfianl\"></a>什么是Jfianl</h2><p>jfinal是国产优秀的web框架.是基于 Java 语言的极速 WEB + ORM 框架 。其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。 在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！<br><strong><em>总结一句：短小精悍强大,易于使用.</em></strong></p>\n<h3 id=\"fianl有什么特点\"><a href=\"#fianl有什么特点\" class=\"headerlink\" title=\"fianl有什么特点?\"></a>fianl有什么特点?</h3><p>1、MVC架构，设计精巧，使用简单<br>2、遵循COC原则，零配置，无xml<br>3、独创Db + Record模式，灵活便利<br>4、ActiveRecord支持，使数据库开发极致快速<br>5、自动加载修改后的java文件，开发过程中无需重启web server<br>6、AOP支持，拦截器配置灵活，功能强大<br>7、Plugin体系结构，扩展性强<br>8、多视图支持，支持FreeMarker、JSP、Velocity<br>9、强大的Validator后端校验功能<br>10、功能齐全，拥有struts2的绝大部分功能<br>11、体积小仅248K，且无第三方依赖</p>\n<h3 id=\"Jfianl性能\"><a href=\"#Jfianl性能\" class=\"headerlink\" title=\"Jfianl性能\"></a>Jfianl性能</h3><p>final 总共8000 多行代码， 运行速度比 SSH 快五倍到八倍，所开发项目<br>的代码量减少 85% 以上<br>以上数据来源： <a href=\"http://www.oschina.net/question/167900_232456\">http://www.oschina.net/question/167900_232456</a></p>\n<p>这里有一些有关性能测试的数据和讨论：<br><a href=\"http://www.oschina.net/question/173052_62228\">http://www.oschina.net/question/173052_62228</a><br><a href=\"http://www.oschina.net/question/1988085_230350\">http://www.oschina.net/question/1988085_230350</a><br><a href=\"http://www.oschina.net/question/590700_120423\">http://www.oschina.net/question/590700_120423</a><br><a href=\"http://www.oschina.net/question/197668_221395\">http://www.oschina.net/question/197668_221395</a> </p>\n<h2 id=\"什么是Shiro\"><a href=\"#什么是Shiro\" class=\"headerlink\" title=\"什么是Shiro\"></a>什么是Shiro</h2><p>是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，<br>可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用<br>Shiro 为安全的四要素 提供了保护应用的API：<br>认证 - 用户身份识别，常被称为用户“登录”；<br>授权 - 访问控制；<br>密码加密 - 保护或隐藏数据防止被偷窥；<br>会话管理 - 每用户相关的时间敏感的状态。</p>"},{"title":"漫谈工程师的三观","date":"2016-05-17T14:48:20.000Z","comments":1,"toc":true,"_content":"\n***工程师要有技术观，产品观和数据观。***\n### 技术观\n\n什么是正确的技术观？\n\n我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。\n\n兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。\n<!--more-->\n其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：\n\n更好的依赖管理工具（dependency tool）：bower -> browserify\n更好的编译（compile）和打包（packaging）工具：uglify + make / jake -> google closure -> webpack\n更好的任务管理工具：make / jake -> grunt/gulp\n更好的开发工具：? -> webpack live reloading -> time travelling debugger (elm)\n更成熟的语言：es3 -> es5 -> es6 -> es7 -> ??\n更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -> dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)\n更好的性能分析（profile）工具： 手工 profile -> google chrome profiling tool -> ??\n更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -> google chrome profiling tool / heapdump / mdb (solaris)-> ??\n\n后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：\n\n摩尔定律终结：scale up -> scale out（high scalable）；C10K -> C10M（high concurrency）\n计算的单元越来越小：Bare metal -> VM -> container -> ?\n计算的容量越来越大：single machine -> cluster -> computing pool (mesos/yarn)\n需要分析的数据越来越多：hadoop -> spark / flink\n网络的速度越来越快，吞吐量越来越大：10M -> 100M -> 1G -> 10G -> 100G\n人工智能/机器学习的门槛越来越低：Caffle -> TensorFlow；apache mahout -> PredictionIO\n\n后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。\n\n### 产品观\n\n工程师有了技术观还远远不够，产品观是接下来需要着力培养的。\n\n产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。\n\n比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？\n\n用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件\n重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面\n用户设置密码后，可以用新密码登录\n\n这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。\n\n然而，这样一个简单的功能，有人会把它做成这样：\n\n用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码\n用户使用这个随机密码登录\n\n即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。\n\n有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。\n\n如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：\n\n能够从一切可以学习的案例中学习其产品和功能设定的门道；\n对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；\n对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。\n\n限于篇幅，这个话题就不展开谈了。\n\n### 数据观\n数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。\n![build - measure - learn 的循环](604bf4b4226f180ff45fa8bce5874793_b.png)\n当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：\n![](444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg)\n所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：\n![](7e79f43fc4c4cfa8426a2008080842d6_b.jpg)\n这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。\n\n以上是从用户的维度看如何测量。\n\n从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。\n\n测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。\n\n分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。\n\n作者：陈天\n链接：https://zhuanlan.zhihu.com/p/20916291\n来源：知乎","source":"_posts/漫谈工程师的三观.md","raw":"---\ntitle: 漫谈工程师的三观\ndate: 2016-05-17 22:48:20\ncomments: true \ncategories: 心得体会\ntoc: true\n---\n\n***工程师要有技术观，产品观和数据观。***\n### 技术观\n\n什么是正确的技术观？\n\n我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。\n\n兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。\n<!--more-->\n其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：\n\n更好的依赖管理工具（dependency tool）：bower -> browserify\n更好的编译（compile）和打包（packaging）工具：uglify + make / jake -> google closure -> webpack\n更好的任务管理工具：make / jake -> grunt/gulp\n更好的开发工具：? -> webpack live reloading -> time travelling debugger (elm)\n更成熟的语言：es3 -> es5 -> es6 -> es7 -> ??\n更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -> dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)\n更好的性能分析（profile）工具： 手工 profile -> google chrome profiling tool -> ??\n更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -> google chrome profiling tool / heapdump / mdb (solaris)-> ??\n\n后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：\n\n摩尔定律终结：scale up -> scale out（high scalable）；C10K -> C10M（high concurrency）\n计算的单元越来越小：Bare metal -> VM -> container -> ?\n计算的容量越来越大：single machine -> cluster -> computing pool (mesos/yarn)\n需要分析的数据越来越多：hadoop -> spark / flink\n网络的速度越来越快，吞吐量越来越大：10M -> 100M -> 1G -> 10G -> 100G\n人工智能/机器学习的门槛越来越低：Caffle -> TensorFlow；apache mahout -> PredictionIO\n\n后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。\n\n### 产品观\n\n工程师有了技术观还远远不够，产品观是接下来需要着力培养的。\n\n产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。\n\n比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？\n\n用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件\n重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面\n用户设置密码后，可以用新密码登录\n\n这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。\n\n然而，这样一个简单的功能，有人会把它做成这样：\n\n用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码\n用户使用这个随机密码登录\n\n即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。\n\n有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。\n\n如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：\n\n能够从一切可以学习的案例中学习其产品和功能设定的门道；\n对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；\n对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。\n\n限于篇幅，这个话题就不展开谈了。\n\n### 数据观\n数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。\n![build - measure - learn 的循环](604bf4b4226f180ff45fa8bce5874793_b.png)\n当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：\n![](444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg)\n所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：\n![](7e79f43fc4c4cfa8426a2008080842d6_b.jpg)\n这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。\n\n以上是从用户的维度看如何测量。\n\n从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。\n\n测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。\n\n分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。\n\n作者：陈天\n链接：https://zhuanlan.zhihu.com/p/20916291\n来源：知乎","slug":"漫谈工程师的三观","published":1,"updated":"2016-05-17T14:55:09.436Z","layout":"post","photos":[],"link":"","_id":"civ2gzlnu001j50yb6go3up84","content":"<p><strong><em>工程师要有技术观，产品观和数据观。</em></strong></p>\n<h3 id=\"技术观\"><a href=\"#技术观\" class=\"headerlink\" title=\"技术观\"></a>技术观</h3><p>什么是正确的技术观？</p>\n<p>我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。</p>\n<p>兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。<br><a id=\"more\"></a><br>其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：</p>\n<p>更好的依赖管理工具（dependency tool）：bower -&gt; browserify<br>更好的编译（compile）和打包（packaging）工具：uglify + make / jake -&gt; google closure -&gt; webpack<br>更好的任务管理工具：make / jake -&gt; grunt/gulp<br>更好的开发工具：? -&gt; webpack live reloading -&gt; time travelling debugger (elm)<br>更成熟的语言：es3 -&gt; es5 -&gt; es6 -&gt; es7 -&gt; ??<br>更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -&gt; dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)<br>更好的性能分析（profile）工具： 手工 profile -&gt; google chrome profiling tool -&gt; ??<br>更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -&gt; google chrome profiling tool / heapdump / mdb (solaris)-&gt; ??</p>\n<p>后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：</p>\n<p>摩尔定律终结：scale up -&gt; scale out（high scalable）；C10K -&gt; C10M（high concurrency）<br>计算的单元越来越小：Bare metal -&gt; VM -&gt; container -&gt; ?<br>计算的容量越来越大：single machine -&gt; cluster -&gt; computing pool (mesos/yarn)<br>需要分析的数据越来越多：hadoop -&gt; spark / flink<br>网络的速度越来越快，吞吐量越来越大：10M -&gt; 100M -&gt; 1G -&gt; 10G -&gt; 100G<br>人工智能/机器学习的门槛越来越低：Caffle -&gt; TensorFlow；apache mahout -&gt; PredictionIO</p>\n<p>后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。</p>\n<h3 id=\"产品观\"><a href=\"#产品观\" class=\"headerlink\" title=\"产品观\"></a>产品观</h3><p>工程师有了技术观还远远不够，产品观是接下来需要着力培养的。</p>\n<p>产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。</p>\n<p>比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件<br>重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面<br>用户设置密码后，可以用新密码登录</p>\n<p>这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。</p>\n<p>然而，这样一个简单的功能，有人会把它做成这样：</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码<br>用户使用这个随机密码登录</p>\n<p>即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。</p>\n<p>有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。</p>\n<p>如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：</p>\n<p>能够从一切可以学习的案例中学习其产品和功能设定的门道；<br>对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；<br>对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。</p>\n<p>限于篇幅，这个话题就不展开谈了。</p>\n<h3 id=\"数据观\"><a href=\"#数据观\" class=\"headerlink\" title=\"数据观\"></a>数据观</h3><p>数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。<br><img src=\"604bf4b4226f180ff45fa8bce5874793_b.png\" alt=\"build - measure - learn 的循环\"><br>当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：<br><img src=\"444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg\" alt=\"\"><br>所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：<br><img src=\"7e79f43fc4c4cfa8426a2008080842d6_b.jpg\" alt=\"\"><br>这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。</p>\n<p>以上是从用户的维度看如何测量。</p>\n<p>从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。</p>\n<p>测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。</p>\n<p>分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。</p>\n<p>作者：陈天<br>链接：<a href=\"https://zhuanlan.zhihu.com/p/20916291\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/20916291</a><br>来源：知乎</p>\n","excerpt":"<p><strong><em>工程师要有技术观，产品观和数据观。</em></strong></p>\n<h3 id=\"技术观\"><a href=\"#技术观\" class=\"headerlink\" title=\"技术观\"></a>技术观</h3><p>什么是正确的技术观？</p>\n<p>我觉得首先是对各种技术不排斥，兼容并蓄。初入行的工程师往往会陷入对某种技术的深深的迷恋而不能自拔，以至于一旦有不同的声音出现，就会使出吃奶的智商为自己的真爱辩解。这种单纯和幼稚几乎是每个工程师成长的必经之路，就像情窦初开的少年看上了隔壁班的小芳，就以为世上西子只此一人一样；等到见识到了更大的世界，读了更多的书籍，即便还深爱着小芳，也能欣赏环肥燕瘦了。</p>\n<p>兼容并蓄意味着博采众家之长，用不同的工具解决不同的问题。<br>","more":"<br>其次是对所用技术和所学技术的感觉和对未来趋势的把握。短期的技术趋势，就像上帝手中的色子，谁也摸不透。就好比两年前 angular 刚出道，让人耳目一新，势道之强有如嵩山派，beat ember，beat backbone，大有在前端一统五岳剑派的趋势；不料半路杀出个如令狐冲般的 react，招式新奇，一下子把所有的注意又都吸引走了。如果你看前端最近两三年的发展，都是一个技术还没把王座捂热，新的技术就杀过来了，颇有五代十国的乱局。然而，有一个大的趋势是不可逆的：那就是从构建上来看，自动化的程度越来越高，越来越利于构建复杂的大型系统；从系统组织的角度看，模块化的程度越来越高，也是越来越利于构建复杂的大型系统；从开发效率的角度看，各种 debugger 技术，source map，live reloading，compile to javascript，也是越来越利于构建复杂的大型系统。所以前端的大的趋势是向后端的开发能力靠拢，以便能够构建更加复杂的系统。抓住了这个主线，你就能够理解这些发展趋势了：</p>\n<p>更好的依赖管理工具（dependency tool）：bower -&gt; browserify<br>更好的编译（compile）和打包（packaging）工具：uglify + make / jake -&gt; google closure -&gt; webpack<br>更好的任务管理工具：make / jake -&gt; grunt/gulp<br>更好的开发工具：? -&gt; webpack live reloading -&gt; time travelling debugger (elm)<br>更成熟的语言：es3 -&gt; es5 -&gt; es6 -&gt; es7 -&gt; ??<br>更适合复杂的前端项目（static typing）或者更适合某种特定目标（如游戏开发）：es5/es6 -&gt; dart, typescript, purescript (haskell), elm (haskell), cojurescript (clojure)<br>更好的性能分析（profile）工具： 手工 profile -&gt; google chrome profiling tool -&gt; ??<br>更好的事后分析（postmortem，比如内存泄露，系统崩溃）工具：没法分析 -&gt; google chrome profiling tool / heapdump / mdb (solaris)-&gt; ??</p>\n<p>后端虽然没有前端那么乱（毕竟发展了几十年，前端缺的后端都已经比较成熟），变化那么迅速，但也有几条变化的主线：</p>\n<p>摩尔定律终结：scale up -&gt; scale out（high scalable）；C10K -&gt; C10M（high concurrency）<br>计算的单元越来越小：Bare metal -&gt; VM -&gt; container -&gt; ?<br>计算的容量越来越大：single machine -&gt; cluster -&gt; computing pool (mesos/yarn)<br>需要分析的数据越来越多：hadoop -&gt; spark / flink<br>网络的速度越来越快，吞吐量越来越大：10M -&gt; 100M -&gt; 1G -&gt; 10G -&gt; 100G<br>人工智能/机器学习的门槛越来越低：Caffle -&gt; TensorFlow；apache mahout -&gt; PredictionIO</p>\n<p>后端所有的变化一直遵循计算机发展的定律：那就是旧时王谢堂前燕，飞入寻常百姓家。MS 的梦想是每个卧室都能摆上一台计算机；Sun 的梦想是每个家庭的计算机都能联网；facebook 的梦想是连接每台计算机背后的人。这些梦想实现的过程中，复杂的软件不断被更简单，易操作的 UI 来组织；同样的复杂的技术也不断被更清晰，好用的 API 暴露出来。十年前，做一个企业级的 B/S 系统需要一个连的工程师，如今，五个手指以内的工程师就可以攻克；十年前，工程师是工程师，架构师是架构师，而如今，越来越多的软件项目与其说是个工程项目，不如说是个集成项目，工程师的工作更像是架构师：是挑选合适的供应商（第三方系统，开源或不开源），然后将其有机组合起来，发挥最大的威力。</p>\n<h3 id=\"产品观\"><a href=\"#产品观\" class=\"headerlink\" title=\"产品观\"></a>产品观</h3><p>工程师有了技术观还远远不够，产品观是接下来需要着力培养的。</p>\n<p>产品观最基本的是掌握产品常识（common sense）或者惯例（convention）。我们需要平时注意观察产品中存在的那些常识和惯例，用工程师特有的思维去思考为什么会出现这样的常识和惯例，他们有什么好处？有什么坏处？这样才能正确地处理产品需求，不至于在产品开发中产生让人贻笑大方的问题甚至出现致命缺陷。</p>\n<p>比如说每个在线的系统都有密码重置的功能 —— 我们看看，密码重置的惯例是什么？</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱发一个重置邮件<br>重置邮件里有个会在指定时间内过期的一次性链接，用户点击后进入到密码重置页面<br>用户设置密码后，可以用新密码登录</p>\n<p>这个惯例基本上是易用性和安全的结合体。这里面的几个步骤之间的联系是脆弱的，所有的步骤一起构成了一个 transaction，用户可能在这个 transaction 的任何一步终止行为：重置邮件可能没法送成功或者用户不收邮件，用户可能不点重置的链接，用户可能点了重置的链接却不设置密码等等。工程师处理 transaction 是有心得的：一个 transaction 要么全部做完，要么回滚到之前的状态，绝不能停留在中间状态；如果回滚是个困难的操作，那么，只有在整个 transaction 完成的那一刻，才一次性（atom）改变系统的状态。密码重置采用了第二个策略。此外，一次性链接，指定时间内过期，这些都是安全上的考量：用户可能在网吧登录邮箱，有可能在历史记录中留存了这个链接，所以需要最小化链接被泄露的影响。</p>\n<p>然而，这样一个简单的功能，有人会把它做成这样：</p>\n<p>用户发送密码重置请求后，系统给请求的邮箱对应的账号设置一个随机密码，并发一个邮件告知随机密码<br>用户使用这个随机密码登录</p>\n<p>即便产品经理脑洞大开，通过标新立异来简化用户的操作，但工程师如果平日里累积了足够的产品常识也不该照盘全收，因为这里面安全性会出现很大的问题：邮件没有发出去怎么办？用户 A 不小心输入了用户 B 的邮箱怎么办？某个 hacker 批量重置别人的密码怎么办？只要用户不按照产品的意图去行事，产品就会处在一个错误的中间状态，这样的产品是脆弱的。</p>\n<p>有产品观的工程师对于产品在技术上可能存在的问题会有敏锐的直觉，而且他们坚信：技术是为产品服务的，不是为产品经理服务的。</p>\n<p>如果说掌握产品的常识和惯例是产品观的基石，那么进阶的产品观是：</p>\n<p>能够从一切可以学习的案例中学习其产品和功能设定的门道；<br>对于新产品，能够把握产品的需求，从用户的角度和技术的维度思考和构建产品的原型，并通过技术和非技术的手段考量产品的 product market fit；<br>对于已有产品的升级，知晓功能的轻重缓急 —— 起码能够厘清功能的技术优先级。</p>\n<p>限于篇幅，这个话题就不展开谈了。</p>\n<h3 id=\"数据观\"><a href=\"#数据观\" class=\"headerlink\" title=\"数据观\"></a>数据观</h3><p>数据是真实世界在产品上的一个投影（projection）。好的工程师同样也应该是对数据敏感的工程师。Learn startup 教给我们：build - measure - learn 的循环，这与其说是做产品的方法，不如说是我们学习万事万物的方法。<br><img src=\"604bf4b4226f180ff45fa8bce5874793_b.png\" alt=\"build - measure - learn 的循环\"><br>当我们把脑海中的蓝图构建出来之后，接下来最重要的一步就是测量（measure）。开尔文说：<br><img src=\"444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg\" alt=\"\"><br>所以数据观的第一步是知道测量什么。想要知道测量什么，需要知道某个产品最重要的 KPI 是什么。以我肤浅的认知举个例子（自己公司的例子不好举）。比如 facebook ads，其最核心的 KPI 应该是 impression（广告的展示），因为其收益是基于 impression 的。那 impression 就是最基础的测量数据。一个广告的 impression 是否达成，不能 facebook 一个人说了算，需要同时往第三方机构发送用于追踪的 pixel。所以 pixel 也是一个关键的测量数据。从 impression 往回推，是 AO（ad opportunity，广告机会）。facebook 在每个 timeline 里面会计算出各种各样的 AO：假设 每个人的 timeline 里每隔 8-12 个 feed 就出现一个 AO，但当前 facebook 的广告库存里只有定向发送给30-40岁的受过高等教育的高收入男性的广告，所以一个刚毕业的学生的 timeline 里是不会有广告的，这时候这个 AO 就是 Empty AO（空置的广告机会），它不会产生收入。空置的广告机会也可以用来插入产品自己的广告（in-house ads），帮助宣传自己的产品，或者促进自己产品的增长，比如下面我截的几个图，第一个就是 in-house ads impression，后两个是有收入的 impression：<br><img src=\"7e79f43fc4c4cfa8426a2008080842d6_b.jpg\" alt=\"\"><br>这样看，除了 impression，pixel 外，AO，Empty AO，In-house ads，也都是要测量的对象。那么，这些 AO 从何而来？再往上推就是 DAU/MAU。因为按照 facebook 的商业模式，更多的日活/月活会带来更多的 AO，更多的 AO 带来更多的 impression。</p>\n<p>以上是从用户的维度看如何测量。</p>\n<p>从广告商的维度看，需要测量广告的库存，库存消耗的速度，以及库存增加的速度。因为 AO 再多，如果没有库存也没有意义；另外，如果库存充沛，但库存消耗得很慢，也不太好。</p>\n<p>测量只是第一步，接下来是分析和解读数据。分析和解读数据的能力是工程师的数据观的重要组成部分。同样的数据，在不同人眼中，着重点不同，得出的结论可能大相径庭。这个不展开讨论。</p>\n<p>分析和解读之后学到的东西需要进一步 build 回产品中，由此，技术，产品，以及数据，形成了一个有机的整体。</p>\n<p>作者：陈天<br>链接：<a href=\"https://zhuanlan.zhihu.com/p/20916291\">https://zhuanlan.zhihu.com/p/20916291</a><br>来源：知乎</p>"},{"title":"北京交通运输职业学院网络财务管理系统项目技术经验总结","date":"2012-12-03T13:28:01.000Z","comments":1,"toc":true,"_content":"\n为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 \n\n只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 \n\n这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。 \n<!--more-->\n\n## 基本开发环境\n### JDK版本\n***JDK1.5***\n***JDK1.6***\n不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。\n\n### 中间件服务器\n***JBoss4.0.2***\n①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。\n②：开发中可能被修改的JBoss配置文件\n***控制台打印sql(服务器目录下server/default/conf/log4j.xml) ***\n```xml\n<appender name=\"IBatis\" class=\"org.apache.log4j.ConsoleAppender\"> <layout class=\"org.apache.log4j.PatternLayout\">  \n     <param name=\"ConversionPattern\" value=\"%-4r [%t] %-5p %c %x - %m%n\" />  \n   </layout> \n    <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">  \n         <param name=\"LevelMin\" value=\"DEBUG\" />  \n        <param name=\"LevelMax\" value=\"DEBUG\" /> \n     </filter> \n </appender>  \n<logger name=\"java.sql\" additivity=\"true\"> \n  <level value=\"DEBUG\" />  \n  <appender-ref ref=\"IBatis\" /> \n</logger>\n```\n***日志记录同上配置文件配置 ***\n```xml\n<appender name=\"BMS\" class=\"org.jboss.logging.appender.RollingFileAppender\"> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 \n    <errorHandler class=\"org.jboss.logging.util.OnlyOnceErrorHandler\"/> \n     <param name=\"File\" value=\"${jboss.server.home.dir}/log/bms/bms.log\"/> 这是日志文件保存的路径以及文件名 <param name=\"Append\" value=\"true\"/> 是否追加  \n    <param name=\"MaxFileSize\" value=\"500kB\"/> 指定log文件大小  \n    <param name=\"MaxBackupIndex\" value=\"10\"/> 最大备份数量超过就覆盖原来的 \n    <layout class=\"org.apache.log4j.PatternLayout\"> 输出格式 表达式搞不懂  \n       <!-- The default pattern: Date Priority [Category] Message\\n --> \n         <param name=\"ConversionPattern\" value=\"%d{ABSOLUTE} %-5p [%c{1}] %m%n\"/> </layout>  \n   </appender>  \n<category name=\"com.bopasoft\">  \n    <appender-ref ref=\"BMS\"/> </category> \n <root>  \n  <appender-ref ref=\"CONSOLE\"/> \n   <appender-ref ref=\"FILE\"/>  \n    <appender-ref ref=\"BMS\"/> \n </root>\n```\n最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改\n③：数据库\n***oracle10g ***\n④：IDE工具\nEclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了\n⑤：ANT\n构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。\n\n## 前台\n\n### 修饰框架sitemesh\n\n他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld \n\n&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。\n&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。  \n&lt;decorator:title default=\"...\" /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 \n\n只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。\n\n### 标签\n在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 \n\n### JS\n说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 \n\n## 后台\n### 持久层框架mybatis\n第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 \n### BSF\nBSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 \n\n后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。","source":"_posts/财务管理系统项目技术经验总结.md","raw":"---\ntitle: 北京交通运输职业学院网络财务管理系统项目技术经验总结\ndate: 2012-12-03 21:28:01\ncomments: true\ncategories: 心得体会\ntoc: true \n---\n\n为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 \n\n只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 \n\n这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。 \n<!--more-->\n\n## 基本开发环境\n### JDK版本\n***JDK1.5***\n***JDK1.6***\n不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。\n\n### 中间件服务器\n***JBoss4.0.2***\n①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。\n②：开发中可能被修改的JBoss配置文件\n***控制台打印sql(服务器目录下server/default/conf/log4j.xml) ***\n```xml\n<appender name=\"IBatis\" class=\"org.apache.log4j.ConsoleAppender\"> <layout class=\"org.apache.log4j.PatternLayout\">  \n     <param name=\"ConversionPattern\" value=\"%-4r [%t] %-5p %c %x - %m%n\" />  \n   </layout> \n    <filter class=\"org.apache.log4j.varia.LevelRangeFilter\">  \n         <param name=\"LevelMin\" value=\"DEBUG\" />  \n        <param name=\"LevelMax\" value=\"DEBUG\" /> \n     </filter> \n </appender>  \n<logger name=\"java.sql\" additivity=\"true\"> \n  <level value=\"DEBUG\" />  \n  <appender-ref ref=\"IBatis\" /> \n</logger>\n```\n***日志记录同上配置文件配置 ***\n```xml\n<appender name=\"BMS\" class=\"org.jboss.logging.appender.RollingFileAppender\"> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 \n    <errorHandler class=\"org.jboss.logging.util.OnlyOnceErrorHandler\"/> \n     <param name=\"File\" value=\"${jboss.server.home.dir}/log/bms/bms.log\"/> 这是日志文件保存的路径以及文件名 <param name=\"Append\" value=\"true\"/> 是否追加  \n    <param name=\"MaxFileSize\" value=\"500kB\"/> 指定log文件大小  \n    <param name=\"MaxBackupIndex\" value=\"10\"/> 最大备份数量超过就覆盖原来的 \n    <layout class=\"org.apache.log4j.PatternLayout\"> 输出格式 表达式搞不懂  \n       <!-- The default pattern: Date Priority [Category] Message\\n --> \n         <param name=\"ConversionPattern\" value=\"%d{ABSOLUTE} %-5p [%c{1}] %m%n\"/> </layout>  \n   </appender>  \n<category name=\"com.bopasoft\">  \n    <appender-ref ref=\"BMS\"/> </category> \n <root>  \n  <appender-ref ref=\"CONSOLE\"/> \n   <appender-ref ref=\"FILE\"/>  \n    <appender-ref ref=\"BMS\"/> \n </root>\n```\n最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改\n③：数据库\n***oracle10g ***\n④：IDE工具\nEclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了\n⑤：ANT\n构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。\n\n## 前台\n\n### 修饰框架sitemesh\n\n他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld \n\n&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。\n&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。  \n&lt;decorator:title default=\"...\" /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 \n\n只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。\n\n### 标签\n在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 \n\n### JS\n说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 \n\n## 后台\n### 持久层框架mybatis\n第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 \n### BSF\nBSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 \n\n后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。","slug":"财务管理系统项目技术经验总结","published":1,"updated":"2016-05-13T14:26:54.420Z","layout":"post","photos":[],"link":"","_id":"civ2gzloe002050ybpsy3j3wk","content":"<p>为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 </p>\n<p>只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 </p>\n<p>这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。<br><a id=\"more\"></a></p>\n<h2 id=\"基本开发环境\"><a href=\"#基本开发环境\" class=\"headerlink\" title=\"基本开发环境\"></a>基本开发环境</h2><h3 id=\"JDK版本\"><a href=\"#JDK版本\" class=\"headerlink\" title=\"JDK版本\"></a>JDK版本</h3><p><strong><em>JDK1.5</em></strong><br><strong><em>JDK1.6</em></strong><br>不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。</p>\n<h3 id=\"中间件服务器\"><a href=\"#中间件服务器\" class=\"headerlink\" title=\"中间件服务器\"></a>中间件服务器</h3><p><strong><em>JBoss4.0.2</em></strong><br>①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。<br>②：开发中可能被修改的JBoss配置文件<br><strong><em>控制台打印sql(服务器目录下server/default/conf/log4j.xml) </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"IBatis\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span>  </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%-4r [%t] %-5p %c %x - %m%n\"</span> /&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span>  </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"true\"</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"IBatis\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>日志记录同上配置文件配置 </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BMS\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.appender.RollingFileAppender\"</span>&gt;</span> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">errorHandler</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.util.OnlyOnceErrorHandler\"</span>/&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jboss.server.home.dir&#125;/log/bms/bms.log\"</span>/&gt;</span> 这是日志文件保存的路径以及文件名 <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Append\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span> 是否追加  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxFileSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"500kB\"</span>/&gt;</span> 指定log文件大小  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxBackupIndex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span> 最大备份数量超过就覆盖原来的 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span> 输出格式 表达式搞不懂  </span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- The default pattern: Date Priority [Category] Message\\n --&gt;</span> </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d&#123;ABSOLUTE&#125; %-5p [%c&#123;1&#125;] %m%n\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.bopasoft\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">category</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span>/&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改<br>③：数据库<br><strong><em>oracle10g </em></strong><br>④：IDE工具<br>Eclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了<br>⑤：ANT<br>构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。</p>\n<h2 id=\"前台\"><a href=\"#前台\" class=\"headerlink\" title=\"前台\"></a>前台</h2><h3 id=\"修饰框架sitemesh\"><a href=\"#修饰框架sitemesh\" class=\"headerlink\" title=\"修饰框架sitemesh\"></a>修饰框架sitemesh</h3><p>他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld </p>\n<p>&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。<br>&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。<br>&lt;decorator:title default=”…” /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 </p>\n<p>只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。</p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 </p>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 </p>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><h3 id=\"持久层框架mybatis\"><a href=\"#持久层框架mybatis\" class=\"headerlink\" title=\"持久层框架mybatis\"></a>持久层框架mybatis</h3><p>第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 </p>\n<h3 id=\"BSF\"><a href=\"#BSF\" class=\"headerlink\" title=\"BSF\"></a>BSF</h3><p>BSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 </p>\n<p>后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。</p>\n","excerpt":"<p>为期五个多月项目编码、测试开发到今天可以说终于告一段落了。回顾这段时间内要忠心的感谢我的领导对我的放心和支持，有了他们才使得我在这个项目中学到的更多成长的更快。 </p>\n<p>只有多总结才会成长的更快，废话少说下面还是来好好总结下这个项目中技术方面的经验心得吧。 </p>\n<p>这个项目使用的是我老大从ehr中把ehr的员工管理、用户管理、组织管理、权限管理、系统管理、角色管理、岗位管理组合成的一个平台，其实准确的讲应该还是一个SSM(struts2 spring mybatis)框架，他拥有平台的雏形，却没有平台的强大。不过他也已经为快速开发提供了很好的基础了，只有在这样的开发环境中对我来说才会学到的更多。下面就要来说说这个麻雀虽小但五脏俱全的平台了，工欲善其事必先利其器，就从开发环境说起。<br>","more":"</p>\n<h2 id=\"基本开发环境\"><a href=\"#基本开发环境\" class=\"headerlink\" title=\"基本开发环境\"></a>基本开发环境</h2><h3 id=\"JDK版本\"><a href=\"#JDK版本\" class=\"headerlink\" title=\"JDK版本\"></a>JDK版本</h3><p><strong><em>JDK1.5</em></strong><br><strong><em>JDK1.6</em></strong><br>不过JDK1.5好像不支持@Override注解和对读取硬盘容量没做提供相关的API而在这个系统中由于使用了@Override注解和对读取硬盘有相应的需求所以最好使用JDK1.6。</p>\n<h3 id=\"中间件服务器\"><a href=\"#中间件服务器\" class=\"headerlink\" title=\"中间件服务器\"></a>中间件服务器</h3><p><strong><em>JBoss4.0.2</em></strong><br>①：JBoss与Tomcat的关系：说到服务器由于以前接触Tomcat比较多对JBoss了解甚少，由于服务对程序员的要求并不高致使到现在虽然和他打了快一年的交道了但现在还是不太了解直到现在也没有拿他和Tomcat进行比较过。还好老大给我这个机会要我好好总结，由于自己没有心得只能从网上找找了，我总结了下网上的说法大概可以用这么个字概括“基于Tomcat为内核、集多功能于一身，性能卓越”。说到性能卓越对于我来说似乎是有点对牛弹琴了，在平时开发中根本感觉不到这点关注更多的还是程序本身，以及了解服务器基本功能和目录结构其每个目录下的作用。<br>②：开发中可能被修改的JBoss配置文件<br><strong><em>控制台打印sql(服务器目录下server/default/conf/log4j.xml) </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"IBatis\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span>  </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%-4r [%t] %-5p %c %x - %m%n\"</span> /&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.varia.LevelRangeFilter\"</span>&gt;</span>  </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMin\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LevelMax\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"true\"</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"DEBUG\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"IBatis\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>日志记录同上配置文件配置 </em></strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BMS\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.appender.RollingFileAppender\"</span>&gt;</span> class值据我了解有四种\"RollingFileAppender\"是超出指定文件大小就重新生成一个新的log文件 其余四种网上都有详细说明我就不一一总结了 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">errorHandler</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.jboss.logging.util.OnlyOnceErrorHandler\"</span>/&gt;</span> </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"File\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jboss.server.home.dir&#125;/log/bms/bms.log\"</span>/&gt;</span> 这是日志文件保存的路径以及文件名 <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Append\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span> 是否追加  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxFileSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"500kB\"</span>/&gt;</span> 指定log文件大小  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MaxBackupIndex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span>/&gt;</span> 最大备份数量超过就覆盖原来的 </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span> 输出格式 表达式搞不懂  </span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- The default pattern: Date Priority [Category] Message\\n --&gt;</span> </span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%d&#123;ABSOLUTE&#125; %-5p [%c&#123;1&#125;] %m%n\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.bopasoft\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">category</span>&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"CONSOLE\"</span>/&gt;</span> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"BMS\"</span>/&gt;</span> </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>最后一个关注的比较多的是URL的编码这个是在服务器目录下的server/default/deploy/jbossweb-tomcat55.sar/server.xml中修改<br>③：数据库<br><strong><em>oracle10g </em></strong><br>④：IDE工具<br>Eclipse 用Eclipse开发最纠结的问题就是调试，但学会了配置调试就不是问题了在这就不详细些了<br>⑤：ANT<br>构建项目部署 过去对ANT了解也很少现在也只能看懂每条命令的含义要自己写还是不太会终于把开发环境说完了，其实重点还是功能的实现，采用什么技术实现。</p>\n<h2 id=\"前台\"><a href=\"#前台\" class=\"headerlink\" title=\"前台\"></a>前台</h2><h3 id=\"修饰框架sitemesh\"><a href=\"#修饰框架sitemesh\" class=\"headerlink\" title=\"修饰框架sitemesh\"></a>修饰框架sitemesh</h3><p>他是一个网页布局和修饰的框架，利用它可以将网页的内容和页面结构分离，以达到页面结构共享的目的。它能帮助我们再由大量页面工程的项目中创建一致的页面布局和外观，如导航条。它不仅能处理动态(Jsp、Asp)的内容还能处理静态(Html)的内容。他就像include那样将一个文件嵌入到另一个文件中。sitemesh有两个标签库分别为sitemesh-decorator.tld、sitemesh-page.tld </p>\n<p>&lt;decorator:head /&gt;插 入原始页面(被包装页面)的head标签中的内容(不包括head标签本身)。<br>&lt;decorator:body /&gt;插入原始页面(被包装页面)的body标签中的内容。<br>&lt;decorator:title default=”…” /&gt;在标签处插入原始页面(被包装页面)的原有的标签的属性中的内容，还可以添加一个缺省值。 </p>\n<p>只需要将被修饰的页面路径添加到decorators.xml中就会别相应的模板修饰。而谁来读decorators.xml他呢什么时候读？根据他的作用不难知道肯定是一个过滤器不错他就是一个过滤器是过滤器就得在web.xml中配置了。注意的是要将decorators.xml放在WEB-INF目录下。sitemesh固然是好但还是不够太灵活，但只能修饰有想同和相似的页面细节，而且请求每个页面都需要进行重新生成后果就是牺牲性能了。</p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>在前台页面还有要我耳目一新的是自定义的各种标签，过去对标签的定义使用定义一直是一知半解，觉得他是一个很神奇的技术。通过了这次开发大量标签的使用，并且亲自实现了二个标签。感觉其实原理也不过如此，不过对他的定义还没到信手拈来，出神入化的境界每次定义都需要参考文档。 </p>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>说到js可以说是有了一定的提高，以前总是说js是基于对象的脚本语言，也感受到了对象的体现。通过这次要我更加深刻到的体会到了他面向对象的思想，可谓是有所小突破哈哈。js面向对象编程在复杂的逻辑也游刃而解。还有它也能实现公用属性私用属性静态方法，非静态方法。不禁要我感叹它不是基于对象完全是面向对象啊！有了上面的基础定义各种选择组件也不成问题了。 </p>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><h3 id=\"持久层框架mybatis\"><a href=\"#持久层框架mybatis\" class=\"headerlink\" title=\"持久层框架mybatis\"></a>持久层框架mybatis</h3><p>第一次使用mybatis感觉更多的是还是数mybatis.xml文件的编写，普通的还是很好写的就是那种一对一、一对多、一对一一对多多条件的，记得当时第一次写还是花了我不少时间主要是对标签中的各种属性不了就。现在回过头在看其实他们的标签那样定义还是很有道理的，写起来也没那么吃力了。 </p>\n<h3 id=\"BSF\"><a href=\"#BSF\" class=\"headerlink\" title=\"BSF\"></a>BSF</h3><p>BSF也是第一使用，不过我在这个项目中用到他的地方也很少，只要在那个活动模板中公式验证的时候用到。它的功能确实很强大能在后台执行javascript、vbscript等代码。对各种验证、条件判断做了很好的支持。可惜的是我并不太了解它。 </p>\n<p>后台用到的新技术应该只有这么多了，最后应该就是编码规范和设计思想了。其实好的设计思想是来自于技术，只有懂的技术多了才会有好的设计，谈设计思想似乎还有一段的距离。还有的就是体会更深的是文件名、包名、类名、变量名、方法名的命的规范重要性，好了总结就写到这了。</p>"},{"title":"解决问题心得","date":"2015-01-26T13:28:01.000Z","comments":1,"_content":"\n 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。\n <!--more-->\n在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。\n\n很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。\n\n有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。\n","source":"_posts/解决问题心得.md","raw":"---\ntitle: 解决问题心得\ndate: 2015-01-26 21:28:01\ncomments: true\ncategories: 心得体会\n---\n\n 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。\n <!--more-->\n在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。\n\n很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。\n\n有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。\n","slug":"解决问题心得","published":1,"updated":"2016-05-13T14:09:35.520Z","layout":"post","photos":[],"link":"","_id":"civ2gzloe002150yb3ti10zg2","content":"<p> 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。<br> <a id=\"more\"></a><br>在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。</p>\n<p>很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。</p>\n<p>有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。</p>\n","excerpt":"<p> 自从接手公司平台到现在已有一年半年之久，在期间一直以解决客户、平台问题为主，也是我成长最快的一年，经统计大概解决的问题不下五百，其中问题种类多，有难有易。在解决问题上不谦虚的说自有一番心得，特此总结，一来梳理回顾过去是如何发现问题，解决问题的思路，二来以备忘记。<br>","more":"<br>在这一年半主要解决问题大概分为如下几大类，中间件、浏览器兼容、操作系统、java虚拟机、jdk、数据库、IDE、webservice。各个问题各自关联各自影响。其中中间件兼容常见问题一般是包冲突，请求乱码，数据源操作数据库引发数据库死锁（这个问题主要是在使用金蝶中间件过程中遇到的，现象是使用jdbc 直连接正常在这里为什么要使用jdbc直连测试，是为了排除jdbc驱动包的原因。使用数据源对数据库进行操作不提交不释放锁，不过大家可以放心，使用标准的数据源工具是不会有这个问题的，据了解金蝶有对数据源进行了重写）。在中间件中还有就是集群session共享、jsp编译、不能远程访问等等问题。而浏览器兼容问题一般情况都会与javascript相关。能写出更好兼容的javascript代码需要有一定功底。但我们解决问题就不需要了，只需要能有这方面的意识即可。常见与操作系统有关的问题那就是环境变量设置有关了。其他不至于人品那么差了。java虚拟机一般就是内存溢出，线程溢出这个问题一般好解决就是针对不同的异常来进行设置，解决这个问题一般设置完加大参数即可但前提要求主机配置性能得到达一定要求，jdk的话一般也包含了jvm的问题这个一般有版本不同、供应商不同而引发的问题。还有就是版本不同所提供到的支持也不一样。例如在jdk1.5中是对内存有最大的限制，数据库的话那一般就是死锁、连接失败、连接会话不够，大小写、字符编码、用户权限等等问题。</p>\n<p>很难说有固定的模式固定的方法能解决平时开发中遇到的所有问题，但思路是不变的，一般思路是，分析问题（一般可以通过看日志调试代码）、采用对比排除法缩小产生问题的原因的范围，找到问题的本质、在解决问题。现象一样但引发问题的原因可能并不一样，问题原因是因环境改变而不同，解决问题的大忌就是慌张，心态很重要。每个问题都有其根本的原因，只有抓住了问题的根本原因才能解决问题。如果硬是解决不了可以通过其他的手段绕过其问题寻求其他方法实现现在的功能。</p>\n<p>有些问题看上去很难其实反而很简单，经常有人跟我反映，系统运行一段时间久卡在了很久没有反映只有重启中间件才能正常操作，而且这个问题也不是每次都出现。碰到这样的问题，应该第一反应就是看日志，二看数据库，看看是不是数据库因死锁了导致系统线程停止。根据日志提供的信息分析问题是如何产生的。然后就是不断缩小引起问题的范围最后落实到一段代码一个配置一个参数上面。例如这几天有个同事向我反映在IE6下使用软航在线编辑器修改流程正文（word）在节点1出修改后提交到节点2在节点2中可以看到修改的内容但在节点1出还显示的没有修改之前的。通过我同事对问题的反映我肯定的是这个问题跟软航无关因为如果软航有问题的话那在节点2应该看到的也是没有修改之前的。然后我也让我同事帮我确定了下在节点1上修改保存不提交关闭在打开看看能不能看到修改之后的反映是可以的。结合系统本身那就可以通过查看代码在分析锁定代码，很快就把这个问题解决了。</p>"},{"title":"浅谈BSF","date":"2013-01-30T13:28:01.000Z","comments":1,"toc":true,"_content":"\n### BSF是什么\n BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。\n \n<!--more-->\n### 如何使用\n 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。\n \n### Java Bean中\n```java\npackage cn.com.bsf.test; \n         \npublic class BeanDemo{ \n     private String name; \n              \n     public void setName(String name){ \n         this.name=name; \n     } \n     public String getName(){ \n          return name \n     } \n} \n         \npackage cn.com.bsf.test; \nimport java.io.BufferedInputStream; \nimport java.io.BufferedReader; \nimport java.io.IOException; \nimport java.io.InputStream; \nimport java.io.InputStreamReader; \nimport java.util.HashMap; \nimport java.util.Map; \n         \nimport org.apache.bsf.BSFEngine; \nimport org.apache.bsf.BSFException; \nimport org.apache.bsf.BSFManager; \npublic class BSFExample{ \n         \n    public static void main(String[] args){ \n        BSFManager bsfManager= new BSFManager(); \n        BeanDemo demo= new BeanDemo(); \n        //在BSF中注册java bean \n        bsfManager.declareBean(\"demo\", demo, demo.getClass()); \n        bsfManager.declareBean(\"out\", System.out, System.out.getClass()); \n        //得到BSF引擎 \n        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(\"javascript\"); \n        //读取js文件 \n        InputStream stream = BSFDemo.class.getResourceAsStream(\"/bsf_001.js\"); \n        InputStreamReader reader = new InputStreamReader(new BufferedInputStream(stream)); \n        BufferedReader bufR = new BufferedReader(reader); \n        StringBuffer sb = new StringBuffer(); \n        String content = bufR.readLine(); \n        while (content != null) { \n           sb.append(content); \n           content = bufR.readLine(); \n        } \n        bsfEngine.exec(\"javascript\", 0, 0, sb.toString()); \n       //执行脚本中的某个方法 \n        Object o = bsfEngine.eval(\"javascript\", 0, 0, \"test()\");  \n        Map map = (HashMap) o; \n        System.out.println(map.get(\"age\")); \n        System.out.println(demo.getName()); \n    } \n} \n```\n\n输出结果\n```\nhello world \n10\n张三\n```\n### 脚本\n*** bsf_001.js***\n```javascript\nimportPackage(java.util); \nfunction test(){ \n    reflection.setName(\"张三\"); \n    out.println(\"hello world\"); \n    var map = new HashMap(); \n    map.put(\"name\",\"张三\"); \n    map.put(\"age\",\"10\"); \n    return map; \n}\n```\n\n*** bsf_002.js***\n```javascript\nimportClass(Packages.cn.com.bsf.test.AppDemo); \nvar appDemo = new AppDemo(); \nvar str=appDemo.query(\"select * from bsf\"); \nout.println(str);\n```\nbsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同\nObject o = bsfEngine.eval(\"javascript\", 0, 0, \"bsf_002.js的脚本内容\");\n\n不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处\n\n***importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如***\n***importClass(Packages.cn.com.bsf.test.BeanDemo);***\n***importClass(java.util.HashMap);***\n***importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。***\n***importPackage(Packages.cn.com.bsf.test）;***\n***importPackage(java.util);***\n","source":"_posts/浅谈BSF.md","raw":"---\ntitle: 浅谈BSF\ndate: 2013-01-30 21:28:01\ncomments: true\ncategories: BSF\ntoc: true \n---\n\n### BSF是什么\n BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。\n \n<!--more-->\n### 如何使用\n 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。\n \n### Java Bean中\n```java\npackage cn.com.bsf.test; \n         \npublic class BeanDemo{ \n     private String name; \n              \n     public void setName(String name){ \n         this.name=name; \n     } \n     public String getName(){ \n          return name \n     } \n} \n         \npackage cn.com.bsf.test; \nimport java.io.BufferedInputStream; \nimport java.io.BufferedReader; \nimport java.io.IOException; \nimport java.io.InputStream; \nimport java.io.InputStreamReader; \nimport java.util.HashMap; \nimport java.util.Map; \n         \nimport org.apache.bsf.BSFEngine; \nimport org.apache.bsf.BSFException; \nimport org.apache.bsf.BSFManager; \npublic class BSFExample{ \n         \n    public static void main(String[] args){ \n        BSFManager bsfManager= new BSFManager(); \n        BeanDemo demo= new BeanDemo(); \n        //在BSF中注册java bean \n        bsfManager.declareBean(\"demo\", demo, demo.getClass()); \n        bsfManager.declareBean(\"out\", System.out, System.out.getClass()); \n        //得到BSF引擎 \n        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(\"javascript\"); \n        //读取js文件 \n        InputStream stream = BSFDemo.class.getResourceAsStream(\"/bsf_001.js\"); \n        InputStreamReader reader = new InputStreamReader(new BufferedInputStream(stream)); \n        BufferedReader bufR = new BufferedReader(reader); \n        StringBuffer sb = new StringBuffer(); \n        String content = bufR.readLine(); \n        while (content != null) { \n           sb.append(content); \n           content = bufR.readLine(); \n        } \n        bsfEngine.exec(\"javascript\", 0, 0, sb.toString()); \n       //执行脚本中的某个方法 \n        Object o = bsfEngine.eval(\"javascript\", 0, 0, \"test()\");  \n        Map map = (HashMap) o; \n        System.out.println(map.get(\"age\")); \n        System.out.println(demo.getName()); \n    } \n} \n```\n\n输出结果\n```\nhello world \n10\n张三\n```\n### 脚本\n*** bsf_001.js***\n```javascript\nimportPackage(java.util); \nfunction test(){ \n    reflection.setName(\"张三\"); \n    out.println(\"hello world\"); \n    var map = new HashMap(); \n    map.put(\"name\",\"张三\"); \n    map.put(\"age\",\"10\"); \n    return map; \n}\n```\n\n*** bsf_002.js***\n```javascript\nimportClass(Packages.cn.com.bsf.test.AppDemo); \nvar appDemo = new AppDemo(); \nvar str=appDemo.query(\"select * from bsf\"); \nout.println(str);\n```\nbsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同\nObject o = bsfEngine.eval(\"javascript\", 0, 0, \"bsf_002.js的脚本内容\");\n\n不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处\n\n***importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如***\n***importClass(Packages.cn.com.bsf.test.BeanDemo);***\n***importClass(java.util.HashMap);***\n***importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。***\n***importPackage(Packages.cn.com.bsf.test）;***\n***importPackage(java.util);***\n","slug":"浅谈BSF","published":1,"updated":"2016-05-13T15:55:42.065Z","layout":"post","photos":[],"link":"","_id":"civ2gzloo002250yb1byy5w7l","content":"<h3 id=\"BSF是什么\"><a href=\"#BSF是什么\" class=\"headerlink\" title=\"BSF是什么\"></a>BSF是什么</h3><p> BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。</p>\n<a id=\"more\"></a>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p> 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。</p>\n<h3 id=\"Java-Bean中\"><a href=\"#Java-Bean中\" class=\"headerlink\" title=\"Java Bean中\"></a>Java Bean中</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanDemo</span></span>&#123; </span><br><span class=\"line\">     <span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">              </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123; </span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name=name; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">          <span class=\"keyword\">return</span> name </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFEngine; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFManager; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSFExample</span></span>&#123; </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </span><br><span class=\"line\">        BSFManager bsfManager= <span class=\"keyword\">new</span> BSFManager(); </span><br><span class=\"line\">        BeanDemo demo= <span class=\"keyword\">new</span> BeanDemo(); </span><br><span class=\"line\">        <span class=\"comment\">//在BSF中注册java bean </span></span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"demo\"</span>, demo, demo.getClass()); </span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"out\"</span>, System.out, System.out.getClass()); </span><br><span class=\"line\">        <span class=\"comment\">//得到BSF引擎 </span></span><br><span class=\"line\">        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(<span class=\"string\">\"javascript\"</span>); </span><br><span class=\"line\">        <span class=\"comment\">//读取js文件 </span></span><br><span class=\"line\">        InputStream stream = BSFDemo.class.getResourceAsStream(<span class=\"string\">\"/bsf_001.js\"</span>); </span><br><span class=\"line\">        InputStreamReader reader = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> BufferedInputStream(stream)); </span><br><span class=\"line\">        BufferedReader bufR = <span class=\"keyword\">new</span> BufferedReader(reader); </span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\">        String content = bufR.readLine(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (content != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">           sb.append(content); </span><br><span class=\"line\">           content = bufR.readLine(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        bsfEngine.exec(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, sb.toString()); </span><br><span class=\"line\">       <span class=\"comment\">//执行脚本中的某个方法 </span></span><br><span class=\"line\">        Object o = bsfEngine.eval(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">\"test()\"</span>);  </span><br><span class=\"line\">        Map map = (HashMap) o; </span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">\"age\"</span>)); </span><br><span class=\"line\">        System.out.println(demo.getName()); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world </span><br><span class=\"line\">10</span><br><span class=\"line\">张三</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p><strong><em> bsf_001.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importPackage(java.util); </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    reflection.setName(<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    out.println(<span class=\"string\">\"hello world\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> HashMap(); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"10\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> map; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em> bsf_002.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importClass(Packages.cn.com.bsf.test.AppDemo); </span><br><span class=\"line\"><span class=\"keyword\">var</span> appDemo = <span class=\"keyword\">new</span> AppDemo(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> str=appDemo.query(<span class=\"string\">\"select * from bsf\"</span>); </span><br><span class=\"line\">out.println(str);</span><br></pre></td></tr></table></figure></p>\n<p>bsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同<br>Object o = bsfEngine.eval(“javascript”, 0, 0, “bsf_002.js的脚本内容”);</p>\n<p>不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处</p>\n<p><strong><em>importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如</em></strong><br><strong><em>importClass(Packages.cn.com.bsf.test.BeanDemo);</em></strong><br><strong><em>importClass(java.util.HashMap);</em></strong><br><strong><em>importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。</em></strong><br><strong><em>importPackage(Packages.cn.com.bsf.test）;</em></strong><br><strong><em>importPackage(java.util);</em></strong></p>\n","excerpt":"<h3 id=\"BSF是什么\"><a href=\"#BSF是什么\" class=\"headerlink\" title=\"BSF是什么\"></a>BSF是什么</h3><p> BSF(Bean Scripting Framework)是一个支持在java应用程序内调用脚本语言，并且支持脚本语言直接访问java对象和方法的一个开源项目，有了他，你能在你的java application中使用javascript、Python、XSLT、tcl等等。反过来也可以在script language中调用任何注册过了的javaBean、java Object 它提供了完整的API实现通过Java访问脚本语言的引擎。</p>","more":"<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p> 在你的java 应用程序中导入bsf.jar包如果你使用的脚本是javascript那还需要导入js.jar包，其他脚本语言类似导入相对应的jar即可下面我就以javascript为列简单说明下BSF的使用将会已代码的形式展示给大家。</p>\n<h3 id=\"Java-Bean中\"><a href=\"#Java-Bean中\" class=\"headerlink\" title=\"Java Bean中\"></a>Java Bean中</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanDemo</span></span>&#123; </span><br><span class=\"line\">     <span class=\"keyword\">private</span> String name; </span><br><span class=\"line\">              </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123; </span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name=name; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">          <span class=\"keyword\">return</span> name </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">package</span> cn.com.bsf.test; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap; </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map; </span><br><span class=\"line\">         </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFEngine; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFException; </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.bsf.BSFManager; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSFExample</span></span>&#123; </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </span><br><span class=\"line\">        BSFManager bsfManager= <span class=\"keyword\">new</span> BSFManager(); </span><br><span class=\"line\">        BeanDemo demo= <span class=\"keyword\">new</span> BeanDemo(); </span><br><span class=\"line\">        <span class=\"comment\">//在BSF中注册java bean </span></span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"demo\"</span>, demo, demo.getClass()); </span><br><span class=\"line\">        bsfManager.declareBean(<span class=\"string\">\"out\"</span>, System.out, System.out.getClass()); </span><br><span class=\"line\">        <span class=\"comment\">//得到BSF引擎 </span></span><br><span class=\"line\">        BSFEngine bsfEngine = bsfManager.loadScriptingEngine(<span class=\"string\">\"javascript\"</span>); </span><br><span class=\"line\">        <span class=\"comment\">//读取js文件 </span></span><br><span class=\"line\">        InputStream stream = BSFDemo.class.getResourceAsStream(<span class=\"string\">\"/bsf_001.js\"</span>); </span><br><span class=\"line\">        InputStreamReader reader = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> BufferedInputStream(stream)); </span><br><span class=\"line\">        BufferedReader bufR = <span class=\"keyword\">new</span> BufferedReader(reader); </span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\">        String content = bufR.readLine(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (content != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">           sb.append(content); </span><br><span class=\"line\">           content = bufR.readLine(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        bsfEngine.exec(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, sb.toString()); </span><br><span class=\"line\">       <span class=\"comment\">//执行脚本中的某个方法 </span></span><br><span class=\"line\">        Object o = bsfEngine.eval(<span class=\"string\">\"javascript\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">\"test()\"</span>);  </span><br><span class=\"line\">        Map map = (HashMap) o; </span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">\"age\"</span>)); </span><br><span class=\"line\">        System.out.println(demo.getName()); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world </span><br><span class=\"line\">10</span><br><span class=\"line\">张三</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p><strong><em> bsf_001.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importPackage(java.util); </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    reflection.setName(<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    out.println(<span class=\"string\">\"hello world\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> HashMap(); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"张三\"</span>); </span><br><span class=\"line\">    map.put(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"10\"</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> map; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em> bsf_002.js</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importClass(Packages.cn.com.bsf.test.AppDemo); </span><br><span class=\"line\"><span class=\"keyword\">var</span> appDemo = <span class=\"keyword\">new</span> AppDemo(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> str=appDemo.query(<span class=\"string\">\"select * from bsf\"</span>); </span><br><span class=\"line\">out.println(str);</span><br></pre></td></tr></table></figure></p>\n<p>bsf_002.js与bsf_001.js的不同的是脚本代码没有包含在function中所以bsf执行稍微会有所不同<br>Object o = bsfEngine.eval(“javascript”, 0, 0, “bsf_002.js的脚本内容”);</p>\n<p>不知道大家注意到了importClass、importPackage没有，下面我就解释下他们的用处</p>\n<p><strong><em>importClass 是在我们的脚本中引入我们的javaBean如果是jdk中自带的javaBea不需要packages关键字反之需要例如</em></strong><br><strong><em>importClass(Packages.cn.com.bsf.test.BeanDemo);</em></strong><br><strong><em>importClass(java.util.HashMap);</em></strong><br><strong><em>importPackage是在我们的脚本中引入包 引入包后就可以使用这个包中所有javaBean其语法如下他会importClass类似自定义的java包需要加Packages为前缀。</em></strong><br><strong><em>importPackage(Packages.cn.com.bsf.test）;</em></strong><br><strong><em>importPackage(java.util);</em></strong></p>"},{"title":"中间件远程调试设置","date":"2014-09-04T13:28:01.000Z","comments":1,"toc":true,"_content":"\n## 中间件\n\n### Jboss\n打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到   \n```\nset JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n\n```\n将参数***suspend=n*** 设置为 y\n<!--more-->\n### Weblogic\n打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd\n使用文本编辑打开startWebLogic.cmd 添加如下设置\n```\nset JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y\n```\n在将参数 JAVA_DEBUG加入到下面脚本当中\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy\n```\n最后如下\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%\n```\n\n## Eclipse\n![Eclipse](b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg)","source":"_posts/中间件远程调试设置.md","raw":"---\ntitle: 中间件远程调试设置\ndate: 2014-09-04 21:28:01\ncomments: true\ncategories: Eclipse\ntoc: true \n---\n\n## 中间件\n\n### Jboss\n打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到   \n```\nset JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n\n```\n将参数***suspend=n*** 设置为 y\n<!--more-->\n### Weblogic\n打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd\n使用文本编辑打开startWebLogic.cmd 添加如下设置\n```\nset JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y\n```\n在将参数 JAVA_DEBUG加入到下面脚本当中\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy\n```\n最后如下\n```\n%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%\n```\n\n## Eclipse\n![Eclipse](b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg)","slug":"中间件远程调试设置","published":1,"updated":"2016-05-14T08:39:38.662Z","layout":"post","photos":[],"link":"","_id":"civ2gzloo002450ybvbglc47g","content":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h3><p>打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n</span><br></pre></td></tr></table></figure></p>\n<p>将参数<strong><em>suspend=n</em></strong> 设置为 y<br><a id=\"more\"></a></p>\n<h3 id=\"Weblogic\"><a href=\"#Weblogic\" class=\"headerlink\" title=\"Weblogic\"></a>Weblogic</h3><p>打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd<br>使用文本编辑打开startWebLogic.cmd 添加如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</span><br></pre></td></tr></table></figure></p>\n<p>在将参数 JAVA_DEBUG加入到下面脚本当中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy</span><br></pre></td></tr></table></figure></p>\n<p>最后如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p><img src=\"b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg\" alt=\"Eclipse\"></p>\n","excerpt":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><h3 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h3><p>打开jboss的安装目录\\bin\\run.bat 使用文本编辑打开找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_OPTS=-classic -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n</span><br></pre></td></tr></table></figure></p>\n<p>将参数<strong><em>suspend=n</em></strong> 设置为 y<br>","more":"</p>\n<h3 id=\"Weblogic\"><a href=\"#Weblogic\" class=\"headerlink\" title=\"Weblogic\"></a>Weblogic</h3><p>打开weblogic应用安装路径启动脚本文件 我的是 D:\\bea\\user_projects\\domains\\base_domain\\bin\\startWebLogic.cmd<br>使用文本编辑打开startWebLogic.cmd 添加如下设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set JAVA_DEBUG=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</span><br></pre></td></tr></table></figure></p>\n<p>在将参数 JAVA_DEBUG加入到下面脚本当中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy</span><br></pre></td></tr></table></figure></p>\n<p>最后如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%JAVA_HOME%\\bin\\java %JAVA_VM% %JAVA_DEBUG% %MEM_ARGS% %JAVA_OPTIONS% -Dweblogic.Name=%SERVER_NAME% -Djava.security.policy=%WL_HOME%\\server\\lib\\weblogic.policy %PROXY_SETTINGS%</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p><img src=\"b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg\" alt=\"Eclipse\"></p>"},{"title":"epoll","date":"2016-08-09T16:00:00.000Z","comments":1,"toc":false,"_content":"\n\n首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。\n不管是文件，还是套接字，还是管道，我们都可以把他们看作流。\n之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？\n<!--more-->\n阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。\n\n非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”\n很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。\n大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。\n\n为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。\n\n假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。\n假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。\n但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。\n\n假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”\n也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。\n\n这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。\n然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。\n于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：\n``` java\nwhile true {\n    for i in stream[]; {\n        if i has data\n            read until unavailable\n    }\n}\n```\n我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。\n为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:\n```java\nwhile true {\n    select(streams[])\n    for i in streams[] {\n        if i has data\n            read until unavailable\n    }\n}\n```\n于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。\n但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次\n说了这么多，终于能好好解释epoll了\nepoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）\n在讨论epoll的实现细节之前，先把epoll的相关操作列出：\n\nepoll_create(int size) \n创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽\n\nepoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\nepoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：\nEPOLL_CTL_ADD：注册新的fd到epfd中；\nEPOLL_CTL_MOD：修改已经注册的fd的监听事件；\nEPOLL_CTL_DEL：从epfd中删除一个fd；\n第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事\n比如\nepoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入\nepoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入\n\nevents可以是以下几个宏的集合：\nEPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件描述符可以写；\nEPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件描述符发生错误；\nEPOLLHUP：表示对应的文件描述符被挂断；\nEPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里\n\nepoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。\n一个epoll模式的代码大概的样子是：\n```java\nwhile true {\n    active_stream[] = epoll_wait(epollfd)\n    for i in active_stream[] {\n        read or write till\n    }\n}\n```\n***完整实例代码***\n```java\n#include <iostream>\n#include <sys/socket.h>\n#include <sys/epoll.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <errno.h>\n\nusing namespace std;\n\n#define MAXLINE 5\n#define OPEN_MAX 100\n#define LISTENQ 20\n#define SERV_PORT 5000\n#define INFTIM 1000\n\nvoid setnonblocking(int sock){\n    int opts;\n    opts=fcntl(sock,F_GETFL);\n    if(opts<0){\n        perror(\"fcntl(sock,GETFL)\");\n        exit(1);\n    }\n    opts = opts|O_NONBLOCK;\n    if(fcntl(sock,F_SETFL,opts)<0){\n        perror(\"fcntl(sock,SETFL,opts)\");\n        exit(1);\n    }\n}\n\nint main(int argc, char* argv[]){\n    int i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;\n    ssize_t n;\n    char line[MAXLINE];\n    socklen_t clilen;\n\n\n    if ( 2 == argc ){\n        if( (portnumber = atoi(argv[1])) < 0 ){\n            fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n            return 1;\n        }\n    }else{\n        fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n        return 1;\n    }\n\n    //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件\n\n    struct epoll_event ev,events[20];\n    //生成用于处理accept的epoll专用的文件描述符\n\n    epfd=epoll_create(256);\n    struct sockaddr_in clientaddr;\n    struct sockaddr_in serveraddr;\n    listenfd = socket(AF_INET, SOCK_STREAM, 0);\n    //把socket设置为非阻塞方式\n\n    //setnonblocking(listenfd);\n\n    //设置与要处理的事件相关的文件描述符\n\n    ev.data.fd=listenfd;\n    //设置要处理的事件类型\n\n    ev.events=EPOLLIN|EPOLLET;\n    //ev.events=EPOLLIN;\n\n    //注册epoll事件\n    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&ev);\n    bzero(&serveraddr, sizeof(serveraddr));\n    serveraddr.sin_family = AF_INET;\n    char *local_addr=\"127.0.0.1\";\n    inet_aton(local_addr,&(serveraddr.sin_addr));//htons(portnumber);\n\n    serveraddr.sin_port=htons(portnumber);\n    bind(listenfd,(sockaddr *)&serveraddr, sizeof(serveraddr));\n    listen(listenfd, LISTENQ);\n    maxi = 0;\n    for ( ; ; ) {\n        //等待epoll事件的发生\n\n        nfds=epoll_wait(epfd,events,20,500);\n        //处理所发生的所有事件\n\n        for(i=0;i<nfds;++i){\n            if(events[i].data.fd==listenfd){//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。\n                connfd = accept(listenfd,(sockaddr *)&clientaddr, &clilen);\n                if(connfd<0){\n                    perror(\"connfd<0\");\n                    exit(1);\n                }\n                //setnonblocking(connfd);\n\n                char *str = inet_ntoa(clientaddr.sin_addr);\n                cout << \"accapt a connection from \" << str << endl;\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=connfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //ev.events=EPOLLIN;\n\n                //注册ev\n\n                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&ev);\n            }else if(events[i].events&EPOLLIN){//如果是已经连接的用户，并且收到数据，那么进行读入。\n            \n                cout << \"EPOLLIN\" << endl;\n                if ( (sockfd = events[i].data.fd) < 0)\n                    continue;\n                if ( (n = read(sockfd, line, MAXLINE)) < 0) {\n                    if (errno == ECONNRESET) {\n                        close(sockfd);\n                        events[i].data.fd = -1;\n                    } else\n                        std::cout<<\"readline error\"<<std::endl;\n                } else if (n == 0) {\n                    close(sockfd);\n                    events[i].data.fd = -1;\n                }\n                line[n] = '/0';\n                cout << \"read \" << line << endl;\n                //设置用于写操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的写操作事件\n\n                ev.events=EPOLLOUT|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLLOUT\n\n                //epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n\n            } else if(events[i].events&EPOLLOUT) {// 如果有数据发送\n                sockfd = events[i].data.fd;\n                write(sockfd, line, n);\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLIN\n\n                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n            }\n        }\n    }\n    return 0;\n}\n```","source":"_posts/epoll.md","raw":"---\ntitle: epoll\ndate: 2016-08-10\ncomments: true\ncategories: Linux\ntoc: false\n---\n\n\n首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。\n不管是文件，还是套接字，还是管道，我们都可以把他们看作流。\n之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？\n<!--more-->\n阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。\n\n非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”\n很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。\n大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。\n\n为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。\n\n假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。\n假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。\n但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。\n\n假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”\n也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。\n\n这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。\n然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。\n于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：\n``` java\nwhile true {\n    for i in stream[]; {\n        if i has data\n            read until unavailable\n    }\n}\n```\n我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。\n为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:\n```java\nwhile true {\n    select(streams[])\n    for i in streams[] {\n        if i has data\n            read until unavailable\n    }\n}\n```\n于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。\n但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次\n说了这么多，终于能好好解释epoll了\nepoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）\n在讨论epoll的实现细节之前，先把epoll的相关操作列出：\n\nepoll_create(int size) \n创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽\n\nepoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\nepoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：\nEPOLL_CTL_ADD：注册新的fd到epfd中；\nEPOLL_CTL_MOD：修改已经注册的fd的监听事件；\nEPOLL_CTL_DEL：从epfd中删除一个fd；\n第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事\n比如\nepoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入\nepoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入\n\nevents可以是以下几个宏的集合：\nEPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件描述符可以写；\nEPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件描述符发生错误；\nEPOLLHUP：表示对应的文件描述符被挂断；\nEPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里\n\nepoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。\n一个epoll模式的代码大概的样子是：\n```java\nwhile true {\n    active_stream[] = epoll_wait(epollfd)\n    for i in active_stream[] {\n        read or write till\n    }\n}\n```\n***完整实例代码***\n```java\n#include <iostream>\n#include <sys/socket.h>\n#include <sys/epoll.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <errno.h>\n\nusing namespace std;\n\n#define MAXLINE 5\n#define OPEN_MAX 100\n#define LISTENQ 20\n#define SERV_PORT 5000\n#define INFTIM 1000\n\nvoid setnonblocking(int sock){\n    int opts;\n    opts=fcntl(sock,F_GETFL);\n    if(opts<0){\n        perror(\"fcntl(sock,GETFL)\");\n        exit(1);\n    }\n    opts = opts|O_NONBLOCK;\n    if(fcntl(sock,F_SETFL,opts)<0){\n        perror(\"fcntl(sock,SETFL,opts)\");\n        exit(1);\n    }\n}\n\nint main(int argc, char* argv[]){\n    int i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;\n    ssize_t n;\n    char line[MAXLINE];\n    socklen_t clilen;\n\n\n    if ( 2 == argc ){\n        if( (portnumber = atoi(argv[1])) < 0 ){\n            fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n            return 1;\n        }\n    }else{\n        fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);\n        return 1;\n    }\n\n    //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件\n\n    struct epoll_event ev,events[20];\n    //生成用于处理accept的epoll专用的文件描述符\n\n    epfd=epoll_create(256);\n    struct sockaddr_in clientaddr;\n    struct sockaddr_in serveraddr;\n    listenfd = socket(AF_INET, SOCK_STREAM, 0);\n    //把socket设置为非阻塞方式\n\n    //setnonblocking(listenfd);\n\n    //设置与要处理的事件相关的文件描述符\n\n    ev.data.fd=listenfd;\n    //设置要处理的事件类型\n\n    ev.events=EPOLLIN|EPOLLET;\n    //ev.events=EPOLLIN;\n\n    //注册epoll事件\n    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&ev);\n    bzero(&serveraddr, sizeof(serveraddr));\n    serveraddr.sin_family = AF_INET;\n    char *local_addr=\"127.0.0.1\";\n    inet_aton(local_addr,&(serveraddr.sin_addr));//htons(portnumber);\n\n    serveraddr.sin_port=htons(portnumber);\n    bind(listenfd,(sockaddr *)&serveraddr, sizeof(serveraddr));\n    listen(listenfd, LISTENQ);\n    maxi = 0;\n    for ( ; ; ) {\n        //等待epoll事件的发生\n\n        nfds=epoll_wait(epfd,events,20,500);\n        //处理所发生的所有事件\n\n        for(i=0;i<nfds;++i){\n            if(events[i].data.fd==listenfd){//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。\n                connfd = accept(listenfd,(sockaddr *)&clientaddr, &clilen);\n                if(connfd<0){\n                    perror(\"connfd<0\");\n                    exit(1);\n                }\n                //setnonblocking(connfd);\n\n                char *str = inet_ntoa(clientaddr.sin_addr);\n                cout << \"accapt a connection from \" << str << endl;\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=connfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //ev.events=EPOLLIN;\n\n                //注册ev\n\n                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&ev);\n            }else if(events[i].events&EPOLLIN){//如果是已经连接的用户，并且收到数据，那么进行读入。\n            \n                cout << \"EPOLLIN\" << endl;\n                if ( (sockfd = events[i].data.fd) < 0)\n                    continue;\n                if ( (n = read(sockfd, line, MAXLINE)) < 0) {\n                    if (errno == ECONNRESET) {\n                        close(sockfd);\n                        events[i].data.fd = -1;\n                    } else\n                        std::cout<<\"readline error\"<<std::endl;\n                } else if (n == 0) {\n                    close(sockfd);\n                    events[i].data.fd = -1;\n                }\n                line[n] = '/0';\n                cout << \"read \" << line << endl;\n                //设置用于写操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的写操作事件\n\n                ev.events=EPOLLOUT|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLLOUT\n\n                //epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n\n            } else if(events[i].events&EPOLLOUT) {// 如果有数据发送\n                sockfd = events[i].data.fd;\n                write(sockfd, line, n);\n                //设置用于读操作的文件描述符\n\n                ev.data.fd=sockfd;\n                //设置用于注测的读操作事件\n\n                ev.events=EPOLLIN|EPOLLET;\n                //修改sockfd上要处理的事件为EPOLIN\n\n                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&ev);\n            }\n        }\n    }\n    return 0;\n}\n```","slug":"epoll","published":1,"updated":"2016-08-10T15:11:26.483Z","layout":"post","photos":[],"link":"","_id":"civ2gzloo002750ybk7mz2d5x","content":"<p>首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。<br>不管是文件，还是套接字，还是管道，我们都可以把他们看作流。<br>之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？<br><a id=\"more\"></a><br>阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。</p>\n<p>非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”<br>很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。<br>大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。</p>\n<p>为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。</p>\n<p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。<br>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。<br>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。</p>\n<p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”<br>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。</p>\n<p>这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。<br>然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。<br>于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in stream[]; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。<br>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    select(streams[])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in streams[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。<br>但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次<br>说了这么多，终于能好好解释epoll了<br>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）<br>在讨论epoll的实现细节之前，先把epoll的相关操作列出：</p>\n<p>epoll_create(int size)<br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽</p>\n<p>epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)<br>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：<br>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事<br>比如<br>epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入<br>epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入</p>\n<p>events可以是以下几个宏的集合：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</p>\n<p>epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。<br>一个epoll模式的代码大概的样子是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    active_stream[] = epoll_wait(epollfd)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in active_stream[] &#123;</span><br><span class=\"line\">        read or write till</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>完整实例代码</em></strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;sys/epoll.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">#define MAXLINE 5</span><br><span class=\"line\">#define OPEN_MAX 100</span><br><span class=\"line\">#define LISTENQ 20</span><br><span class=\"line\">#define SERV_PORT 5000</span><br><span class=\"line\">#define INFTIM 1000</span><br><span class=\"line\"></span><br><span class=\"line\">void setnonblocking(int sock)&#123;</span><br><span class=\"line\">    int opts;</span><br><span class=\"line\">    opts=fcntl(sock,F_GETFL);</span><br><span class=\"line\">    if(opts&lt;0)&#123;</span><br><span class=\"line\">        perror(\"fcntl(sock,GETFL)\");</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opts = opts|O_NONBLOCK;</span><br><span class=\"line\">    if(fcntl(sock,F_SETFL,opts)&lt;0)&#123;</span><br><span class=\"line\">        perror(\"fcntl(sock,SETFL,opts)\");</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])&#123;</span><br><span class=\"line\">    int i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;</span><br><span class=\"line\">    ssize_t n;</span><br><span class=\"line\">    char line[MAXLINE];</span><br><span class=\"line\">    socklen_t clilen;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if ( 2 == argc )&#123;</span><br><span class=\"line\">        if( (portnumber = atoi(argv[1])) &lt; 0 )&#123;</span><br><span class=\"line\">            fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件</span><br><span class=\"line\"></span><br><span class=\"line\">    struct epoll_event ev,events[20];</span><br><span class=\"line\">    //生成用于处理accept的epoll专用的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">    epfd=epoll_create(256);</span><br><span class=\"line\">    struct sockaddr_in clientaddr;</span><br><span class=\"line\">    struct sockaddr_in serveraddr;</span><br><span class=\"line\">    listenfd = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class=\"line\">    //把socket设置为非阻塞方式</span><br><span class=\"line\"></span><br><span class=\"line\">    //setnonblocking(listenfd);</span><br><span class=\"line\"></span><br><span class=\"line\">    //设置与要处理的事件相关的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">    ev.data.fd=listenfd;</span><br><span class=\"line\">    //设置要处理的事件类型</span><br><span class=\"line\"></span><br><span class=\"line\">    ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">    //ev.events=EPOLLIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    //注册epoll事件</span><br><span class=\"line\">    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&amp;ev);</span><br><span class=\"line\">    bzero(&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    serveraddr.sin_family = AF_INET;</span><br><span class=\"line\">    char *local_addr=\"127.0.0.1\";</span><br><span class=\"line\">    inet_aton(local_addr,&amp;(serveraddr.sin_addr));//htons(portnumber);</span><br><span class=\"line\"></span><br><span class=\"line\">    serveraddr.sin_port=htons(portnumber);</span><br><span class=\"line\">    bind(listenfd,(sockaddr *)&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    listen(listenfd, LISTENQ);</span><br><span class=\"line\">    maxi = 0;</span><br><span class=\"line\">    for ( ; ; ) &#123;</span><br><span class=\"line\">        //等待epoll事件的发生</span><br><span class=\"line\"></span><br><span class=\"line\">        nfds=epoll_wait(epfd,events,20,500);</span><br><span class=\"line\">        //处理所发生的所有事件</span><br><span class=\"line\"></span><br><span class=\"line\">        for(i=0;i&lt;nfds;++i)&#123;</span><br><span class=\"line\">            if(events[i].data.fd==listenfd)&#123;//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。</span><br><span class=\"line\">                connfd = accept(listenfd,(sockaddr *)&amp;clientaddr, &amp;clilen);</span><br><span class=\"line\">                if(connfd&lt;0)&#123;</span><br><span class=\"line\">                    perror(\"connfd&lt;0\");</span><br><span class=\"line\">                    exit(1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //setnonblocking(connfd);</span><br><span class=\"line\"></span><br><span class=\"line\">                char *str = inet_ntoa(clientaddr.sin_addr);</span><br><span class=\"line\">                cout &lt;&lt; \"accapt a connection from \" &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">                //设置用于读操作的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=connfd;</span><br><span class=\"line\">                //设置用于注测的读操作事件</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                //ev.events=EPOLLIN;</span><br><span class=\"line\"></span><br><span class=\"line\">                //注册ev</span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&amp;ev);</span><br><span class=\"line\">            &#125;else if(events[i].events&amp;EPOLLIN)&#123;//如果是已经连接的用户，并且收到数据，那么进行读入。</span><br><span class=\"line\">            </span><br><span class=\"line\">                cout &lt;&lt; \"EPOLLIN\" &lt;&lt; endl;</span><br><span class=\"line\">                if ( (sockfd = events[i].data.fd) &lt; 0)</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                if ( (n = read(sockfd, line, MAXLINE)) &lt; 0) &#123;</span><br><span class=\"line\">                    if (errno == ECONNRESET) &#123;</span><br><span class=\"line\">                        close(sockfd);</span><br><span class=\"line\">                        events[i].data.fd = -1;</span><br><span class=\"line\">                    &#125; else</span><br><span class=\"line\">                        std::cout&lt;&lt;\"readline error\"&lt;&lt;std::endl;</span><br><span class=\"line\">                &#125; else if (n == 0) &#123;</span><br><span class=\"line\">                    close(sockfd);</span><br><span class=\"line\">                    events[i].data.fd = -1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                line[n] = '/0';</span><br><span class=\"line\">                cout &lt;&lt; \"read \" &lt;&lt; line &lt;&lt; endl;</span><br><span class=\"line\">                //设置用于写操作的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                //设置用于注测的写操作事件</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLOUT|EPOLLET;</span><br><span class=\"line\">                //修改sockfd上要处理的事件为EPOLLOUT</span><br><span class=\"line\"></span><br><span class=\"line\">                //epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; else if(events[i].events&amp;EPOLLOUT) &#123;// 如果有数据发送</span><br><span class=\"line\">                sockfd = events[i].data.fd;</span><br><span class=\"line\">                write(sockfd, line, n);</span><br><span class=\"line\">                //设置用于读操作的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                //设置用于注测的读操作事件</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                //修改sockfd上要处理的事件为EPOLIN</span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。<br>不管是文件，还是套接字，还是管道，我们都可以把他们看作流。<br>之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？<br>","more":"<br>阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。</p>\n<p>非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”<br>很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。<br>大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。</p>\n<p>为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。</p>\n<p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。<br>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。<br>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。</p>\n<p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”<br>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。</p>\n<p>这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。<br>然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。<br>于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in stream[]; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。<br>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    select(streams[])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in streams[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i has data</span><br><span class=\"line\">            read until unavailable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。<br>但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次<br>说了这么多，终于能好好解释epoll了<br>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）<br>在讨论epoll的实现细节之前，先把epoll的相关操作列出：</p>\n<p>epoll_create(int size)<br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽</p>\n<p>epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)<br>epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：<br>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事<br>比如<br>epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入<br>epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入</p>\n<p>events可以是以下几个宏的集合：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</p>\n<p>epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);<br>等待事件的产生，类似于select()调用。参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个 maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。<br>一个epoll模式的代码大概的样子是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">true</span> &#123;</span><br><span class=\"line\">    active_stream[] = epoll_wait(epollfd)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i in active_stream[] &#123;</span><br><span class=\"line\">        read or write till</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>完整实例代码</em></strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;sys/epoll.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">#define MAXLINE 5</span><br><span class=\"line\">#define OPEN_MAX 100</span><br><span class=\"line\">#define LISTENQ 20</span><br><span class=\"line\">#define SERV_PORT 5000</span><br><span class=\"line\">#define INFTIM 1000</span><br><span class=\"line\"></span><br><span class=\"line\">void setnonblocking(int sock)&#123;</span><br><span class=\"line\">    int opts;</span><br><span class=\"line\">    opts=fcntl(sock,F_GETFL);</span><br><span class=\"line\">    if(opts&lt;0)&#123;</span><br><span class=\"line\">        perror(\"fcntl(sock,GETFL)\");</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opts = opts|O_NONBLOCK;</span><br><span class=\"line\">    if(fcntl(sock,F_SETFL,opts)&lt;0)&#123;</span><br><span class=\"line\">        perror(\"fcntl(sock,SETFL,opts)\");</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])&#123;</span><br><span class=\"line\">    int i, maxi, listenfd, connfd, sockfd,epfd,nfds, portnumber;</span><br><span class=\"line\">    ssize_t n;</span><br><span class=\"line\">    char line[MAXLINE];</span><br><span class=\"line\">    socklen_t clilen;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if ( 2 == argc )&#123;</span><br><span class=\"line\">        if( (portnumber = atoi(argv[1])) &lt; 0 )&#123;</span><br><span class=\"line\">            fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        fprintf(stderr,\"Usage:%s portnumber/a/n\",argv[0]);</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件</span><br><span class=\"line\"></span><br><span class=\"line\">    struct epoll_event ev,events[20];</span><br><span class=\"line\">    //生成用于处理accept的epoll专用的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">    epfd=epoll_create(256);</span><br><span class=\"line\">    struct sockaddr_in clientaddr;</span><br><span class=\"line\">    struct sockaddr_in serveraddr;</span><br><span class=\"line\">    listenfd = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class=\"line\">    //把socket设置为非阻塞方式</span><br><span class=\"line\"></span><br><span class=\"line\">    //setnonblocking(listenfd);</span><br><span class=\"line\"></span><br><span class=\"line\">    //设置与要处理的事件相关的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">    ev.data.fd=listenfd;</span><br><span class=\"line\">    //设置要处理的事件类型</span><br><span class=\"line\"></span><br><span class=\"line\">    ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">    //ev.events=EPOLLIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    //注册epoll事件</span><br><span class=\"line\">    epoll_ctl(epfd,EPOLL_CTL_ADD,listenfd,&amp;ev);</span><br><span class=\"line\">    bzero(&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    serveraddr.sin_family = AF_INET;</span><br><span class=\"line\">    char *local_addr=\"127.0.0.1\";</span><br><span class=\"line\">    inet_aton(local_addr,&amp;(serveraddr.sin_addr));//htons(portnumber);</span><br><span class=\"line\"></span><br><span class=\"line\">    serveraddr.sin_port=htons(portnumber);</span><br><span class=\"line\">    bind(listenfd,(sockaddr *)&amp;serveraddr, sizeof(serveraddr));</span><br><span class=\"line\">    listen(listenfd, LISTENQ);</span><br><span class=\"line\">    maxi = 0;</span><br><span class=\"line\">    for ( ; ; ) &#123;</span><br><span class=\"line\">        //等待epoll事件的发生</span><br><span class=\"line\"></span><br><span class=\"line\">        nfds=epoll_wait(epfd,events,20,500);</span><br><span class=\"line\">        //处理所发生的所有事件</span><br><span class=\"line\"></span><br><span class=\"line\">        for(i=0;i&lt;nfds;++i)&#123;</span><br><span class=\"line\">            if(events[i].data.fd==listenfd)&#123;//如果新监测到一个SOCKET用户连接到了绑定的SOCKET端口，建立新的连接。</span><br><span class=\"line\">                connfd = accept(listenfd,(sockaddr *)&amp;clientaddr, &amp;clilen);</span><br><span class=\"line\">                if(connfd&lt;0)&#123;</span><br><span class=\"line\">                    perror(\"connfd&lt;0\");</span><br><span class=\"line\">                    exit(1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //setnonblocking(connfd);</span><br><span class=\"line\"></span><br><span class=\"line\">                char *str = inet_ntoa(clientaddr.sin_addr);</span><br><span class=\"line\">                cout &lt;&lt; \"accapt a connection from \" &lt;&lt; str &lt;&lt; endl;</span><br><span class=\"line\">                //设置用于读操作的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=connfd;</span><br><span class=\"line\">                //设置用于注测的读操作事件</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                //ev.events=EPOLLIN;</span><br><span class=\"line\"></span><br><span class=\"line\">                //注册ev</span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&amp;ev);</span><br><span class=\"line\">            &#125;else if(events[i].events&amp;EPOLLIN)&#123;//如果是已经连接的用户，并且收到数据，那么进行读入。</span><br><span class=\"line\">            </span><br><span class=\"line\">                cout &lt;&lt; \"EPOLLIN\" &lt;&lt; endl;</span><br><span class=\"line\">                if ( (sockfd = events[i].data.fd) &lt; 0)</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                if ( (n = read(sockfd, line, MAXLINE)) &lt; 0) &#123;</span><br><span class=\"line\">                    if (errno == ECONNRESET) &#123;</span><br><span class=\"line\">                        close(sockfd);</span><br><span class=\"line\">                        events[i].data.fd = -1;</span><br><span class=\"line\">                    &#125; else</span><br><span class=\"line\">                        std::cout&lt;&lt;\"readline error\"&lt;&lt;std::endl;</span><br><span class=\"line\">                &#125; else if (n == 0) &#123;</span><br><span class=\"line\">                    close(sockfd);</span><br><span class=\"line\">                    events[i].data.fd = -1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                line[n] = '/0';</span><br><span class=\"line\">                cout &lt;&lt; \"read \" &lt;&lt; line &lt;&lt; endl;</span><br><span class=\"line\">                //设置用于写操作的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                //设置用于注测的写操作事件</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLOUT|EPOLLET;</span><br><span class=\"line\">                //修改sockfd上要处理的事件为EPOLLOUT</span><br><span class=\"line\"></span><br><span class=\"line\">                //epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; else if(events[i].events&amp;EPOLLOUT) &#123;// 如果有数据发送</span><br><span class=\"line\">                sockfd = events[i].data.fd;</span><br><span class=\"line\">                write(sockfd, line, n);</span><br><span class=\"line\">                //设置用于读操作的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.data.fd=sockfd;</span><br><span class=\"line\">                //设置用于注测的读操作事件</span><br><span class=\"line\"></span><br><span class=\"line\">                ev.events=EPOLLIN|EPOLLET;</span><br><span class=\"line\">                //修改sockfd上要处理的事件为EPOLIN</span><br><span class=\"line\"></span><br><span class=\"line\">                epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&amp;ev);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"虚拟机联网方式设置","date":"2014-10-07T16:00:00.000Z","comments":1,"toc":true,"_content":"\n## Bridging（桥接）\n\n这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享\n<!--more-->\n![桥接](6c224f4a20a4462399c138119b22720e0cf3d7be.jpg)\n\n## NAT连接\n第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。\n第二、虚拟机设置如下图\n![NAT连接](241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg)\n第三、设置虚拟机IP\n例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了\n网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以\n通过 ipconfig /all可以获得宿主主机的DNS，如下图。\n![虚拟机IP](d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg)\n\n通过上面的设置就可以上网了\n虚拟机网络设置 在Edit——》Virtual Nework Editor\n![网络设置](203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg)\nVMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。\n如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254\n![网络设置](e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg) \n默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可\n![网络设置](d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg) \n 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。\n ![网络拓扑图]( aec379310a55b31966f8dc0140a98226cffc1744.jpg) \n\n ## 拓展知识\n网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。\n\n那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。\n\n***举例说明***\n假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。\n但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：\n\n小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？\n![网络拓扑图]( a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg) \n家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99\n","source":"_posts/虚拟机联网方式设置.md","raw":"---\ntitle: 虚拟机联网方式设置\ndate: 2014-10-08\ncomments: true\ncategories: VMware\ntoc: true  \n---\n\n## Bridging（桥接）\n\n这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享\n<!--more-->\n![桥接](6c224f4a20a4462399c138119b22720e0cf3d7be.jpg)\n\n## NAT连接\n第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。\n第二、虚拟机设置如下图\n![NAT连接](241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg)\n第三、设置虚拟机IP\n例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了\n网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以\n通过 ipconfig /all可以获得宿主主机的DNS，如下图。\n![虚拟机IP](d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg)\n\n通过上面的设置就可以上网了\n虚拟机网络设置 在Edit——》Virtual Nework Editor\n![网络设置](203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg)\nVMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。\n如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254\n![网络设置](e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg) \n默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可\n![网络设置](d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg) \n 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。\n ![网络拓扑图]( aec379310a55b31966f8dc0140a98226cffc1744.jpg) \n\n ## 拓展知识\n网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。\n\n那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。\n\n***举例说明***\n假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。\n但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：\n\n小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？\n![网络拓扑图]( a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg) \n家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99\n","slug":"虚拟机联网方式设置","published":1,"updated":"2016-05-14T08:09:51.942Z","layout":"post","photos":[],"link":"","_id":"civ2gzloo002850ybsxrbuob7","content":"<h2 id=\"Bridging（桥接）\"><a href=\"#Bridging（桥接）\" class=\"headerlink\" title=\"Bridging（桥接）\"></a>Bridging（桥接）</h2><p>这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享<br><a id=\"more\"></a><br><img src=\"6c224f4a20a4462399c138119b22720e0cf3d7be.jpg\" alt=\"桥接\"></p>\n<h2 id=\"NAT连接\"><a href=\"#NAT连接\" class=\"headerlink\" title=\"NAT连接\"></a>NAT连接</h2><p>第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。<br>第二、虚拟机设置如下图<br><img src=\"241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg\" alt=\"NAT连接\"><br>第三、设置虚拟机IP<br>例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了<br>网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以<br>通过 ipconfig /all可以获得宿主主机的DNS，如下图。<br><img src=\"d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg\" alt=\"虚拟机IP\"></p>\n<p>通过上面的设置就可以上网了<br>虚拟机网络设置 在Edit——》Virtual Nework Editor<br><img src=\"203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg\" alt=\"网络设置\"><br>VMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。<br>如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254<br><img src=\"e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg\" alt=\"网络设置\"><br>默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可<br><img src=\"d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg\" alt=\"网络设置\"><br> 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。<br> <img src=\"aec379310a55b31966f8dc0140a98226cffc1744.jpg\" alt=\"网络拓扑图\"> </p>\n<h2 id=\"拓展知识\"><a href=\"#拓展知识\" class=\"headerlink\" title=\"拓展知识\"></a>拓展知识</h2><p>网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。</p>\n<p>那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。</p>\n<p><strong><em>举例说明</em></strong><br>假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。<br>但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：</p>\n<p>小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？<br><img src=\"a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg\" alt=\"网络拓扑图\"><br>家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99</p>\n","excerpt":"<h2 id=\"Bridging（桥接）\"><a href=\"#Bridging（桥接）\" class=\"headerlink\" title=\"Bridging（桥接）\"></a>Bridging（桥接）</h2><p>这种方式是最简单的只需要设置虚拟机如下图就可以进行联网了。包括虚拟机IP、网关、DNS等都不需要进行设置，宿主主机也不需要进行共享<br>","more":"<br><img src=\"6c224f4a20a4462399c138119b22720e0cf3d7be.jpg\" alt=\"桥接\"></p>\n<h2 id=\"NAT连接\"><a href=\"#NAT连接\" class=\"headerlink\" title=\"NAT连接\"></a>NAT连接</h2><p>第一、需要宿主主机对网络进行共享到VMware Network Adapter VMnet8 网络连接 VMware Network Adapter VMnet8的IP使用默认分配。<br>第二、虚拟机设置如下图<br><img src=\"241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg\" alt=\"NAT连接\"><br>第三、设置虚拟机IP<br>例如VMware Network Adapter VMnet8 的IP地址为192.168.137.1 虚拟机的IP就在 192.168.137.2~192.168.137.255之间了<br>网关设置为192.168.137.1，子网掩码设置为255.255.255.0，DNS可以设置为192.168.137.1 后者同宿主主机的DNS相同也可以<br>通过 ipconfig /all可以获得宿主主机的DNS，如下图。<br><img src=\"d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg\" alt=\"虚拟机IP\"></p>\n<p>通过上面的设置就可以上网了<br>虚拟机网络设置 在Edit——》Virtual Nework Editor<br><img src=\"203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg\" alt=\"网络设置\"><br>VMnet0 默认使用的是桥接方式（以一台主机的方式加入局域网局域网内是互通的） VMent1使用的主机模式（Host-only） VMent8默认使用的是网络地址转换模式（NAT）。<br>如果虚拟机使用的是NAT模式如果自动获取IP，IP的范围取决于 DHCP Settings的的设置 这里是 128~254<br><img src=\"e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg\" alt=\"网络设置\"><br>默认网关在NAT Setting中设置 如果想要手动设置只要在虚拟机中设置跟下面相同即可<br><img src=\"d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg\" alt=\"网络设置\"><br> 这样自动获取的IP可能还不能与宿住主机ping同，不用急只要对宿主主机的VMware Network Adapter VMnet8 的IP设置与上图同一网段即可对于虚拟机的网关 即可以设置为 VMware Network Adapter VMnet8的IP也可以设置为Net Setting中的网关。这样设置完以后就可以与主机ping通了但可能依然不能连接公网，我们只要对虚拟机设置下DNS就可以了 ，如何获取DNS先要保证宿主主机是能连接外网的 然后我们通过ipconfig /all获取到DNS 然后设置虚拟机中就可以连接公网了。<br> <img src=\"aec379310a55b31966f8dc0140a98226cffc1744.jpg\" alt=\"网络拓扑图\"> </p>\n<h2 id=\"拓展知识\"><a href=\"#拓展知识\" class=\"headerlink\" title=\"拓展知识\"></a>拓展知识</h2><p>网关： 网关是一种充当转换重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个翻译器。</p>\n<p>那么网关到底是什么呢？网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。</p>\n<p><strong><em>举例说明</em></strong><br>假设你的名字叫小不点(很小)，你住在一个大院子里，你的邻居有很多小伙伴，父母是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。<br>但是你家长不允许你走出大门，你想与外界发生的一切联系，都必须由父母（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家里也有父母（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里和父母有了下面的对话：</p>\n<p>小不点：妈妈(或爸爸),我想找班主任查一下小明的电话号码行吗？<br><img src=\"a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg\" alt=\"网络拓扑图\"><br>家长：好，你等着。（接着你家长给你的班主任挂了一个电话，问清楚了小明的电话）问到了，他家的号码是211.99.99.99</p>"}],"PostAsset":[{"_id":"source/_posts/Jar转exe/023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","slug":"023b5bb5c9ea15ce68f52d08b4003af33a87b29c.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","slug":"0df431adcbef760930385b9e2cdda3cc7cd99e84.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/1e30e924b899a90168ce99371f950a7b0208f53c.jpg","slug":"1e30e924b899a90168ce99371f950a7b0208f53c.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","slug":"2e2eb9389b504fc259ec7204e7dde71190ef6d04.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","slug":"3b87e950352ac65c7624ab72f9f2b21193138a8a.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/42166d224f4a20a4063cf1c692529822720ed095.jpg","slug":"42166d224f4a20a4063cf1c692529822720ed095.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","slug":"4610b912c8fcc3ce12f40b329045d688d43f20ff.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","slug":"4d086e061d950a7b2a1a8cc508d162d9f2d3c980.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","slug":"4ec2d5628535e5dd690b68de74c6a7efce1b6288.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","slug":"5bafa40f4bfbfbed5277fb7e7af0f736afc31f81.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","slug":"7a899e510fb30f24acb42e02ca95d143ad4b0381.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/96dda144ad345982c72127930ef431adcbef840c.jpg","slug":"96dda144ad345982c72127930ef431adcbef840c.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/96dda144ad345982c7ab27930ef431adcbef848a.jpg","slug":"96dda144ad345982c7ab27930ef431adcbef848a.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","slug":"a686c9177f3e67090c1786fe39c79f3df8dc5598.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/ac6eddc451da81cbd80640cc5066d016082431cb.jpg","slug":"ac6eddc451da81cbd80640cc5066d016082431cb.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","slug":"b151f8198618367acea2bddc2c738bd4b31ce58c.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","slug":"c83d70cf3bc79f3d30562631b8a1cd11728b2978.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","slug":"c8ea15ce36d3d539d610c2c23887e950352ab086.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","slug":"c8ea15ce36d3d539d688c2c23887e950352ab07e.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","slug":"c8ea15ce36d3d539d7c2cdc23887e950352ab030.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","slug":"caef76094b36acaf525e5bfd7ed98d1001e99c71.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","slug":"d0c8a786c9177f3ea3573f0c72cf3bc79f3d5654.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","slug":"d0c8a786c9177f3ea39a3f0c72cf3bc79f3d5601.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","slug":"e4dde71190ef76c63577392a9f16fdfaaf51670e.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Jar转exe/f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","slug":"f2deb48f8c5494ee6c91cc182ff5e0fe99257e04.jpg","post":"civ2gzljo000050ybha08fo9z","modified":0,"renderable":0},{"_id":"source/_posts/Nginx+Tomcat集群/003vMReezy6OUXDo7kt61&690.jpg","slug":"003vMReezy6OUXDo7kt61&690.jpg","post":"civ2gzlmq000y50ybrcn7k4v9","modified":0,"renderable":0},{"_id":"source/_posts/MySQL+Keepalived实现双机热备/1.png","slug":"1.png","post":"civ2gzlmq001250yb0xm6k7w2","modified":0,"renderable":0},{"_id":"source/_posts/企业体检开发框架培训/开发框架架构图.png","slug":"开发框架架构图.png","post":"civ2gzlnk001h50yb5jaegjm4","modified":0,"renderable":0},{"_id":"source/_posts/Java动态编程/43918004_1.png","slug":"43918004_1.png","post":"civ2gzllw000a50ybfl4kmlts","modified":0,"renderable":0},{"_id":"source/_posts/Java动态编程/43918004_2.png","slug":"43918004_2.png","post":"civ2gzllw000a50ybfl4kmlts","modified":0,"renderable":0},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/01.png","slug":"01.png","post":"civ2gzlm6000i50ybe5vjbret","modified":0,"renderable":0},{"_id":"source/_posts/Java中的IO技术：BIO,NIO,AIO/02.png","slug":"02.png","post":"civ2gzlm6000i50ybe5vjbret","modified":0,"renderable":0},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsC8Oogc8&690.jpg","slug":"003vMReezy6OWsC8Oogc8&690.jpg","post":"civ2gzllw000g50ybgqwmivvm","modified":0,"renderable":0},{"_id":"source/_posts/Java设计模式之观察者模式/003vMReezy6OWsKgs3pa3&690.jpg","slug":"003vMReezy6OWsKgs3pa3&690.jpg","post":"civ2gzllw000g50ybgqwmivvm","modified":0,"renderable":0},{"_id":"source/_posts/Java设计模式之观察者模式/class.jpg","slug":"class.jpg","post":"civ2gzllw000g50ybgqwmivvm","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/1.png","slug":"1.png","post":"civ2gzlna001650ybbgktzku7","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/2.png","slug":"2.png","post":"civ2gzlna001650ybbgktzku7","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25在CentOS6.6的安装步骤/3.png","slug":"3.png","post":"civ2gzlna001650ybbgktzku7","modified":0,"renderable":0},{"_id":"source/_posts/漫谈工程师的三观/444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","slug":"444ceb2f17abc8ed81a7db60ea72fdbf_b.jpg","post":"civ2gzlnu001j50yb6go3up84","modified":0,"renderable":0},{"_id":"source/_posts/漫谈工程师的三观/604bf4b4226f180ff45fa8bce5874793_b.png","slug":"604bf4b4226f180ff45fa8bce5874793_b.png","post":"civ2gzlnu001j50yb6go3up84","modified":0,"renderable":0},{"_id":"source/_posts/漫谈工程师的三观/7e79f43fc4c4cfa8426a2008080842d6_b.jpg","slug":"7e79f43fc4c4cfa8426a2008080842d6_b.jpg","post":"civ2gzlnu001j50yb6go3up84","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/1.png","slug":"1.png","post":"civ2gzlna001750yb2nfdpfjz","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/2.png","slug":"2.png","post":"civ2gzlna001750yb2nfdpfjz","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/3.png","slug":"3.png","post":"civ2gzlna001750yb2nfdpfjz","modified":0,"renderable":0},{"_id":"source/_posts/MySQL5.6.25主从复制/4.png","slug":"4.png","post":"civ2gzlna001750yb2nfdpfjz","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","slug":"5366d0160924ab1893c50c2036fae6cd7a890bd1.jpg","post":"civ2gzlm6000k50ybewli0uks","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","slug":"58ee3d6d55fbb2fb1bceb6054c4a20a44723dcc4.jpg","post":"civ2gzlm6000k50ybewli0uks","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","slug":"7aec54e736d12f2e1dbd40774cc2d56285356869.jpg","post":"civ2gzlm6000k50ybewli0uks","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/b03533fa828ba61e7fad2a384234970a304e5962.jpg","slug":"b03533fa828ba61e7fad2a384234970a304e5962.jpg","post":"civ2gzlm6000k50ybewli0uks","modified":0,"renderable":0},{"_id":"source/_posts/Java开发过程中异常汇总及解决办法/cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","slug":"cdbf6c81800a19d86e32661230fa828ba61e46f0.jpg","post":"civ2gzlm6000k50ybewli0uks","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KHLwtFe7&690.png","slug":"003vMReezy6P1KHLwtFe7&690.png","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1KnAQkx19&690.png","slug":"003vMReezy6P1KnAQkx19&690.png","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1LyH3gqae&690.jpg","slug":"003vMReezy6P1LyH3gqae&690.jpg","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MG9JTO50&690.png","slug":"003vMReezy6P1MG9JTO50&690.png","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1MlAy3H5d&690.jpg","slug":"003vMReezy6P1MlAy3H5d&690.jpg","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1Mzjamje7&690.jpg","slug":"003vMReezy6P1Mzjamje7&690.jpg","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Hadoop集群完全分布式部署/003vMReezy6P1O1zJBg32&690.jpg","slug":"003vMReezy6P1O1zJBg32&690.jpg","post":"civ2gzlmq000v50ybtin2ltvp","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.gif","slug":"0.gif","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/0.jpg","slug":"0.jpg","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/1.png","slug":"1.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.gif","slug":"2.gif","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/2.png","slug":"2.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/5.png","slug":"5.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/640.png","slug":"640.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/641.png","slug":"641.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/642.png","slug":"642.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/643.png","slug":"643.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/644.jpg","slug":"644.jpg","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/645.png","slug":"645.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/646.png","slug":"646.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/647.png","slug":"647.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/648.png","slug":"648.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/650.png","slug":"650.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/651.png","slug":"651.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/653.png","slug":"653.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/655.png","slug":"655.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/656.png","slug":"656.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/657.png","slug":"657.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/658.png","slug":"658.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/Android反编译与混淆技术完全解析/659.png","slug":"659.png","post":"civ2gzllw000f50yb904c8e2v","modified":0,"renderable":0},{"_id":"source/_posts/中间件远程调试设置/b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","slug":"b2de9c82d158ccbfbe89542d1ad8bc3eb13541f4.jpg","post":"civ2gzloo002450ybvbglc47g","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","slug":"203fb80e7bec54e72f564b6aba389b504fc26a0f.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","slug":"241f95cad1c8a786c6c1d77d6409c93d71cf50dd.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","slug":"6c224f4a20a4462399c138119b22720e0cf3d7be.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","slug":"a6efce1b9d16fdfa3265015bb48f8c5494ee7b7e.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/aec379310a55b31966f8dc0140a98226cffc1744.jpg","slug":"aec379310a55b31966f8dc0140a98226cffc1744.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","slug":"d31b0ef41bd5ad6ef751f89982cb39dbb6fd3c1c.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","slug":"d8f9d72a6059252d3cf04e70379b033b5ab5b9db.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0},{"_id":"source/_posts/虚拟机联网方式设置/e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","slug":"e7cd7b899e510fb3728324e3da33c895d1430c2f.jpg","post":"civ2gzloo002850ybsxrbuob7","modified":0,"renderable":0}],"PostCategory":[{"post_id":"civ2gzljo000050ybha08fo9z","category_id":"civ2gzlki000250ybdbzgg956","_id":"civ2gzlks000450ybbh7xnt64"},{"post_id":"civ2gzlki000150ybah6memz4","category_id":"civ2gzlks000350ybiaoeetl5","_id":"civ2gzlks000550ybzm4l1ti3"},{"post_id":"civ2gzllc000650ybgfb898c1","category_id":"civ2gzlks000350ybiaoeetl5","_id":"civ2gzllw000950ybs8darsir"},{"post_id":"civ2gzllc000750ybg6d3oog8","category_id":"civ2gzlks000350ybiaoeetl5","_id":"civ2gzllw000b50ybyskq0nfn"},{"post_id":"civ2gzllc000850yb9b82ogg9","category_id":"civ2gzlks000350ybiaoeetl5","_id":"civ2gzllw000e50ybczjoas3g"},{"post_id":"civ2gzllw000c50yba0pv4bsl","category_id":"civ2gzlks000350ybiaoeetl5","_id":"civ2gzlm6000h50ybm4xp1jap"},{"post_id":"civ2gzllw000g50ybgqwmivvm","category_id":"civ2gzllw000d50ybfug610m8","_id":"civ2gzlm6000l50ybfydqqznw"},{"post_id":"civ2gzllw000a50ybfl4kmlts","category_id":"civ2gzllw000d50ybfug610m8","_id":"civ2gzlmg000n50yb3oyarl8i"},{"post_id":"civ2gzlm6000i50ybe5vjbret","category_id":"civ2gzllw000d50ybfug610m8","_id":"civ2gzlmg000q50ybpg769if6"},{"post_id":"civ2gzlm6000k50ybewli0uks","category_id":"civ2gzllw000d50ybfug610m8","_id":"civ2gzlmg000s50ybx2o2h2ga"},{"post_id":"civ2gzllw000f50yb904c8e2v","category_id":"civ2gzlm6000j50ybm6la3iyt","_id":"civ2gzlmg000u50yb8msywpbi"},{"post_id":"civ2gzlmg000r50ybtse427hm","category_id":"civ2gzllw000d50ybfug610m8","_id":"civ2gzlmq000x50ybj5bmy1u2"},{"post_id":"civ2gzlm6000m50yby0ngl5v4","category_id":"civ2gzlmg000p50yb33vyiigg","_id":"civ2gzlmq000z50ybl1vzp4uv"},{"post_id":"civ2gzlmg000o50ybq71anz26","category_id":"civ2gzlmq000w50ybc0zetwvh","_id":"civ2gzlna001450ybeg07armd"},{"post_id":"civ2gzlmg000t50ybdpqaobnp","category_id":"civ2gzlmq001150yb5tfti9n9","_id":"civ2gzlna001850yb2b6921ve"},{"post_id":"civ2gzlmq000v50ybtin2ltvp","category_id":"civ2gzlna001550ybnpd7vwvy","_id":"civ2gzlnk001c50ybdnurw376"},{"post_id":"civ2gzlmq000y50ybrcn7k4v9","category_id":"civ2gzlmq001150yb5tfti9n9","_id":"civ2gzlnk001g50yb9u6nf6b7"},{"post_id":"civ2gzlnk001f50yb1fx9cdgq","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzlnu001k50ybqartopvr"},{"post_id":"civ2gzlmq001050ybd7p33u8y","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzlnu001m50yb1xqzcmno"},{"post_id":"civ2gzlnu001j50yb6go3up84","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzlnu001n50yb7ez85u1o"},{"post_id":"civ2gzlmq001250yb0xm6k7w2","category_id":"civ2gzlnu001i50ybzgjieuda","_id":"civ2gzlnu001p50yb8uctwmvr"},{"post_id":"civ2gzlna001650ybbgktzku7","category_id":"civ2gzlnu001i50ybzgjieuda","_id":"civ2gzlnu001q50ybzd10kbrp"},{"post_id":"civ2gzlna001750yb2nfdpfjz","category_id":"civ2gzlnu001i50ybzgjieuda","_id":"civ2gzlnu001s50yb2hcr3cg5"},{"post_id":"civ2gzlna001a50ybuyrzpcs1","category_id":"civ2gzlnu001r50ybnt9rfkik","_id":"civ2gzlo4001u50yb0n23rw57"},{"post_id":"civ2gzlna001b50ybrijzr3a9","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzlo4001w50ybpuib2xz7"},{"post_id":"civ2gzlnk001e50yb05adli0i","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzlo4001y50ybfj8zbv4b"},{"post_id":"civ2gzlnk001h50yb5jaegjm4","category_id":"civ2gzlo4001x50ybjl0w6jn6","_id":"civ2gzlo4001z50yb2n39ujbq"},{"post_id":"civ2gzloe002050ybpsy3j3wk","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzloo002350yba2e8jmif"},{"post_id":"civ2gzloe002150yb3ti10zg2","category_id":"civ2gzlnk001d50yba18fihgw","_id":"civ2gzloo002650ybydremqb3"},{"post_id":"civ2gzloo002750ybk7mz2d5x","category_id":"civ2gzlmg000p50yb33vyiigg","_id":"civ2gzloo002a50ybhxqwtyus"},{"post_id":"civ2gzloo002250yb1byy5w7l","category_id":"civ2gzloo002550ybqwjxg3pn","_id":"civ2gzloo002b50yb36vqdlgs"},{"post_id":"civ2gzloo002450ybvbglc47g","category_id":"civ2gzloo002950yb8w1oplrp","_id":"civ2gzloo002d50ybzaxyecs2"},{"post_id":"civ2gzloo002850ybsxrbuob7","category_id":"civ2gzloo002c50ybf3wrw5ww","_id":"civ2gzloo002e50ybllwpch1r"}],"PostTag":[],"Tag":[]}}